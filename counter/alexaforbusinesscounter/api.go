// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package alexaforbusinesscounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/alexaforbusiness"
)

// AssociateDeviceWithRoomRequest is a passthrough to the underlying AssociateDeviceWithRoomRequest.
// It will increment the count of requests made to AssociateDeviceWithRoom.
func (c *AlexaForBusiness) AssociateDeviceWithRoomRequest(input *alexaforbusiness.AssociateDeviceWithRoomInput) (req *request.Request, output *alexaforbusiness.AssociateDeviceWithRoomOutput) {
	c.inc("AssociateDeviceWithRoom")
	return c.svc.AssociateDeviceWithRoomRequest(input)
}

// AssociateDeviceWithRoom is a passthrough to the underlying AssociateDeviceWithRoom method.
// It will increment the count of requests made to AssociateDeviceWithRoom.
func (c *AlexaForBusiness) AssociateDeviceWithRoom(input *alexaforbusiness.AssociateDeviceWithRoomInput) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	c.inc("AssociateDeviceWithRoom")
	return c.svc.AssociateDeviceWithRoom(input)
}

// AssociateDeviceWithRoomWithContext is a passthrough to the underlying AssociateDeviceWithRoomWithContext method.
// It will increment the count of requests made to AssociateDeviceWithRoom.
func (c *AlexaForBusiness) AssociateDeviceWithRoomWithContext(ctx aws.Context, input *alexaforbusiness.AssociateDeviceWithRoomInput, opts ...request.Option) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	c.inc("AssociateDeviceWithRoom")
	return c.svc.AssociateDeviceWithRoomWithContext(ctx, input, opts...)
}

// AssociateSkillGroupWithRoomRequest is a passthrough to the underlying AssociateSkillGroupWithRoomRequest.
// It will increment the count of requests made to AssociateSkillGroupWithRoom.
func (c *AlexaForBusiness) AssociateSkillGroupWithRoomRequest(input *alexaforbusiness.AssociateSkillGroupWithRoomInput) (req *request.Request, output *alexaforbusiness.AssociateSkillGroupWithRoomOutput) {
	c.inc("AssociateSkillGroupWithRoom")
	return c.svc.AssociateSkillGroupWithRoomRequest(input)
}

// AssociateSkillGroupWithRoom is a passthrough to the underlying AssociateSkillGroupWithRoom method.
// It will increment the count of requests made to AssociateSkillGroupWithRoom.
func (c *AlexaForBusiness) AssociateSkillGroupWithRoom(input *alexaforbusiness.AssociateSkillGroupWithRoomInput) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	c.inc("AssociateSkillGroupWithRoom")
	return c.svc.AssociateSkillGroupWithRoom(input)
}

// AssociateSkillGroupWithRoomWithContext is a passthrough to the underlying AssociateSkillGroupWithRoomWithContext method.
// It will increment the count of requests made to AssociateSkillGroupWithRoom.
func (c *AlexaForBusiness) AssociateSkillGroupWithRoomWithContext(ctx aws.Context, input *alexaforbusiness.AssociateSkillGroupWithRoomInput, opts ...request.Option) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	c.inc("AssociateSkillGroupWithRoom")
	return c.svc.AssociateSkillGroupWithRoomWithContext(ctx, input, opts...)
}

// CreateProfileRequest is a passthrough to the underlying CreateProfileRequest.
// It will increment the count of requests made to CreateProfile.
func (c *AlexaForBusiness) CreateProfileRequest(input *alexaforbusiness.CreateProfileInput) (req *request.Request, output *alexaforbusiness.CreateProfileOutput) {
	c.inc("CreateProfile")
	return c.svc.CreateProfileRequest(input)
}

// CreateProfile is a passthrough to the underlying CreateProfile method.
// It will increment the count of requests made to CreateProfile.
func (c *AlexaForBusiness) CreateProfile(input *alexaforbusiness.CreateProfileInput) (*alexaforbusiness.CreateProfileOutput, error) {
	c.inc("CreateProfile")
	return c.svc.CreateProfile(input)
}

// CreateProfileWithContext is a passthrough to the underlying CreateProfileWithContext method.
// It will increment the count of requests made to CreateProfile.
func (c *AlexaForBusiness) CreateProfileWithContext(ctx aws.Context, input *alexaforbusiness.CreateProfileInput, opts ...request.Option) (*alexaforbusiness.CreateProfileOutput, error) {
	c.inc("CreateProfile")
	return c.svc.CreateProfileWithContext(ctx, input, opts...)
}

// CreateRoomRequest is a passthrough to the underlying CreateRoomRequest.
// It will increment the count of requests made to CreateRoom.
func (c *AlexaForBusiness) CreateRoomRequest(input *alexaforbusiness.CreateRoomInput) (req *request.Request, output *alexaforbusiness.CreateRoomOutput) {
	c.inc("CreateRoom")
	return c.svc.CreateRoomRequest(input)
}

// CreateRoom is a passthrough to the underlying CreateRoom method.
// It will increment the count of requests made to CreateRoom.
func (c *AlexaForBusiness) CreateRoom(input *alexaforbusiness.CreateRoomInput) (*alexaforbusiness.CreateRoomOutput, error) {
	c.inc("CreateRoom")
	return c.svc.CreateRoom(input)
}

// CreateRoomWithContext is a passthrough to the underlying CreateRoomWithContext method.
// It will increment the count of requests made to CreateRoom.
func (c *AlexaForBusiness) CreateRoomWithContext(ctx aws.Context, input *alexaforbusiness.CreateRoomInput, opts ...request.Option) (*alexaforbusiness.CreateRoomOutput, error) {
	c.inc("CreateRoom")
	return c.svc.CreateRoomWithContext(ctx, input, opts...)
}

// CreateSkillGroupRequest is a passthrough to the underlying CreateSkillGroupRequest.
// It will increment the count of requests made to CreateSkillGroup.
func (c *AlexaForBusiness) CreateSkillGroupRequest(input *alexaforbusiness.CreateSkillGroupInput) (req *request.Request, output *alexaforbusiness.CreateSkillGroupOutput) {
	c.inc("CreateSkillGroup")
	return c.svc.CreateSkillGroupRequest(input)
}

// CreateSkillGroup is a passthrough to the underlying CreateSkillGroup method.
// It will increment the count of requests made to CreateSkillGroup.
func (c *AlexaForBusiness) CreateSkillGroup(input *alexaforbusiness.CreateSkillGroupInput) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	c.inc("CreateSkillGroup")
	return c.svc.CreateSkillGroup(input)
}

// CreateSkillGroupWithContext is a passthrough to the underlying CreateSkillGroupWithContext method.
// It will increment the count of requests made to CreateSkillGroup.
func (c *AlexaForBusiness) CreateSkillGroupWithContext(ctx aws.Context, input *alexaforbusiness.CreateSkillGroupInput, opts ...request.Option) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	c.inc("CreateSkillGroup")
	return c.svc.CreateSkillGroupWithContext(ctx, input, opts...)
}

// CreateUserRequest is a passthrough to the underlying CreateUserRequest.
// It will increment the count of requests made to CreateUser.
func (c *AlexaForBusiness) CreateUserRequest(input *alexaforbusiness.CreateUserInput) (req *request.Request, output *alexaforbusiness.CreateUserOutput) {
	c.inc("CreateUser")
	return c.svc.CreateUserRequest(input)
}

// CreateUser is a passthrough to the underlying CreateUser method.
// It will increment the count of requests made to CreateUser.
func (c *AlexaForBusiness) CreateUser(input *alexaforbusiness.CreateUserInput) (*alexaforbusiness.CreateUserOutput, error) {
	c.inc("CreateUser")
	return c.svc.CreateUser(input)
}

// CreateUserWithContext is a passthrough to the underlying CreateUserWithContext method.
// It will increment the count of requests made to CreateUser.
func (c *AlexaForBusiness) CreateUserWithContext(ctx aws.Context, input *alexaforbusiness.CreateUserInput, opts ...request.Option) (*alexaforbusiness.CreateUserOutput, error) {
	c.inc("CreateUser")
	return c.svc.CreateUserWithContext(ctx, input, opts...)
}

// DeleteProfileRequest is a passthrough to the underlying DeleteProfileRequest.
// It will increment the count of requests made to DeleteProfile.
func (c *AlexaForBusiness) DeleteProfileRequest(input *alexaforbusiness.DeleteProfileInput) (req *request.Request, output *alexaforbusiness.DeleteProfileOutput) {
	c.inc("DeleteProfile")
	return c.svc.DeleteProfileRequest(input)
}

// DeleteProfile is a passthrough to the underlying DeleteProfile method.
// It will increment the count of requests made to DeleteProfile.
func (c *AlexaForBusiness) DeleteProfile(input *alexaforbusiness.DeleteProfileInput) (*alexaforbusiness.DeleteProfileOutput, error) {
	c.inc("DeleteProfile")
	return c.svc.DeleteProfile(input)
}

// DeleteProfileWithContext is a passthrough to the underlying DeleteProfileWithContext method.
// It will increment the count of requests made to DeleteProfile.
func (c *AlexaForBusiness) DeleteProfileWithContext(ctx aws.Context, input *alexaforbusiness.DeleteProfileInput, opts ...request.Option) (*alexaforbusiness.DeleteProfileOutput, error) {
	c.inc("DeleteProfile")
	return c.svc.DeleteProfileWithContext(ctx, input, opts...)
}

// DeleteRoomRequest is a passthrough to the underlying DeleteRoomRequest.
// It will increment the count of requests made to DeleteRoom.
func (c *AlexaForBusiness) DeleteRoomRequest(input *alexaforbusiness.DeleteRoomInput) (req *request.Request, output *alexaforbusiness.DeleteRoomOutput) {
	c.inc("DeleteRoom")
	return c.svc.DeleteRoomRequest(input)
}

// DeleteRoom is a passthrough to the underlying DeleteRoom method.
// It will increment the count of requests made to DeleteRoom.
func (c *AlexaForBusiness) DeleteRoom(input *alexaforbusiness.DeleteRoomInput) (*alexaforbusiness.DeleteRoomOutput, error) {
	c.inc("DeleteRoom")
	return c.svc.DeleteRoom(input)
}

// DeleteRoomWithContext is a passthrough to the underlying DeleteRoomWithContext method.
// It will increment the count of requests made to DeleteRoom.
func (c *AlexaForBusiness) DeleteRoomWithContext(ctx aws.Context, input *alexaforbusiness.DeleteRoomInput, opts ...request.Option) (*alexaforbusiness.DeleteRoomOutput, error) {
	c.inc("DeleteRoom")
	return c.svc.DeleteRoomWithContext(ctx, input, opts...)
}

// DeleteRoomSkillParameterRequest is a passthrough to the underlying DeleteRoomSkillParameterRequest.
// It will increment the count of requests made to DeleteRoomSkillParameter.
func (c *AlexaForBusiness) DeleteRoomSkillParameterRequest(input *alexaforbusiness.DeleteRoomSkillParameterInput) (req *request.Request, output *alexaforbusiness.DeleteRoomSkillParameterOutput) {
	c.inc("DeleteRoomSkillParameter")
	return c.svc.DeleteRoomSkillParameterRequest(input)
}

// DeleteRoomSkillParameter is a passthrough to the underlying DeleteRoomSkillParameter method.
// It will increment the count of requests made to DeleteRoomSkillParameter.
func (c *AlexaForBusiness) DeleteRoomSkillParameter(input *alexaforbusiness.DeleteRoomSkillParameterInput) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	c.inc("DeleteRoomSkillParameter")
	return c.svc.DeleteRoomSkillParameter(input)
}

// DeleteRoomSkillParameterWithContext is a passthrough to the underlying DeleteRoomSkillParameterWithContext method.
// It will increment the count of requests made to DeleteRoomSkillParameter.
func (c *AlexaForBusiness) DeleteRoomSkillParameterWithContext(ctx aws.Context, input *alexaforbusiness.DeleteRoomSkillParameterInput, opts ...request.Option) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	c.inc("DeleteRoomSkillParameter")
	return c.svc.DeleteRoomSkillParameterWithContext(ctx, input, opts...)
}

// DeleteSkillGroupRequest is a passthrough to the underlying DeleteSkillGroupRequest.
// It will increment the count of requests made to DeleteSkillGroup.
func (c *AlexaForBusiness) DeleteSkillGroupRequest(input *alexaforbusiness.DeleteSkillGroupInput) (req *request.Request, output *alexaforbusiness.DeleteSkillGroupOutput) {
	c.inc("DeleteSkillGroup")
	return c.svc.DeleteSkillGroupRequest(input)
}

// DeleteSkillGroup is a passthrough to the underlying DeleteSkillGroup method.
// It will increment the count of requests made to DeleteSkillGroup.
func (c *AlexaForBusiness) DeleteSkillGroup(input *alexaforbusiness.DeleteSkillGroupInput) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	c.inc("DeleteSkillGroup")
	return c.svc.DeleteSkillGroup(input)
}

// DeleteSkillGroupWithContext is a passthrough to the underlying DeleteSkillGroupWithContext method.
// It will increment the count of requests made to DeleteSkillGroup.
func (c *AlexaForBusiness) DeleteSkillGroupWithContext(ctx aws.Context, input *alexaforbusiness.DeleteSkillGroupInput, opts ...request.Option) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	c.inc("DeleteSkillGroup")
	return c.svc.DeleteSkillGroupWithContext(ctx, input, opts...)
}

// DeleteUserRequest is a passthrough to the underlying DeleteUserRequest.
// It will increment the count of requests made to DeleteUser.
func (c *AlexaForBusiness) DeleteUserRequest(input *alexaforbusiness.DeleteUserInput) (req *request.Request, output *alexaforbusiness.DeleteUserOutput) {
	c.inc("DeleteUser")
	return c.svc.DeleteUserRequest(input)
}

// DeleteUser is a passthrough to the underlying DeleteUser method.
// It will increment the count of requests made to DeleteUser.
func (c *AlexaForBusiness) DeleteUser(input *alexaforbusiness.DeleteUserInput) (*alexaforbusiness.DeleteUserOutput, error) {
	c.inc("DeleteUser")
	return c.svc.DeleteUser(input)
}

// DeleteUserWithContext is a passthrough to the underlying DeleteUserWithContext method.
// It will increment the count of requests made to DeleteUser.
func (c *AlexaForBusiness) DeleteUserWithContext(ctx aws.Context, input *alexaforbusiness.DeleteUserInput, opts ...request.Option) (*alexaforbusiness.DeleteUserOutput, error) {
	c.inc("DeleteUser")
	return c.svc.DeleteUserWithContext(ctx, input, opts...)
}

// DisassociateDeviceFromRoomRequest is a passthrough to the underlying DisassociateDeviceFromRoomRequest.
// It will increment the count of requests made to DisassociateDeviceFromRoom.
func (c *AlexaForBusiness) DisassociateDeviceFromRoomRequest(input *alexaforbusiness.DisassociateDeviceFromRoomInput) (req *request.Request, output *alexaforbusiness.DisassociateDeviceFromRoomOutput) {
	c.inc("DisassociateDeviceFromRoom")
	return c.svc.DisassociateDeviceFromRoomRequest(input)
}

// DisassociateDeviceFromRoom is a passthrough to the underlying DisassociateDeviceFromRoom method.
// It will increment the count of requests made to DisassociateDeviceFromRoom.
func (c *AlexaForBusiness) DisassociateDeviceFromRoom(input *alexaforbusiness.DisassociateDeviceFromRoomInput) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	c.inc("DisassociateDeviceFromRoom")
	return c.svc.DisassociateDeviceFromRoom(input)
}

// DisassociateDeviceFromRoomWithContext is a passthrough to the underlying DisassociateDeviceFromRoomWithContext method.
// It will increment the count of requests made to DisassociateDeviceFromRoom.
func (c *AlexaForBusiness) DisassociateDeviceFromRoomWithContext(ctx aws.Context, input *alexaforbusiness.DisassociateDeviceFromRoomInput, opts ...request.Option) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	c.inc("DisassociateDeviceFromRoom")
	return c.svc.DisassociateDeviceFromRoomWithContext(ctx, input, opts...)
}

// DisassociateSkillGroupFromRoomRequest is a passthrough to the underlying DisassociateSkillGroupFromRoomRequest.
// It will increment the count of requests made to DisassociateSkillGroupFromRoom.
func (c *AlexaForBusiness) DisassociateSkillGroupFromRoomRequest(input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) (req *request.Request, output *alexaforbusiness.DisassociateSkillGroupFromRoomOutput) {
	c.inc("DisassociateSkillGroupFromRoom")
	return c.svc.DisassociateSkillGroupFromRoomRequest(input)
}

// DisassociateSkillGroupFromRoom is a passthrough to the underlying DisassociateSkillGroupFromRoom method.
// It will increment the count of requests made to DisassociateSkillGroupFromRoom.
func (c *AlexaForBusiness) DisassociateSkillGroupFromRoom(input *alexaforbusiness.DisassociateSkillGroupFromRoomInput) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	c.inc("DisassociateSkillGroupFromRoom")
	return c.svc.DisassociateSkillGroupFromRoom(input)
}

// DisassociateSkillGroupFromRoomWithContext is a passthrough to the underlying DisassociateSkillGroupFromRoomWithContext method.
// It will increment the count of requests made to DisassociateSkillGroupFromRoom.
func (c *AlexaForBusiness) DisassociateSkillGroupFromRoomWithContext(ctx aws.Context, input *alexaforbusiness.DisassociateSkillGroupFromRoomInput, opts ...request.Option) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	c.inc("DisassociateSkillGroupFromRoom")
	return c.svc.DisassociateSkillGroupFromRoomWithContext(ctx, input, opts...)
}

// GetDeviceRequest is a passthrough to the underlying GetDeviceRequest.
// It will increment the count of requests made to GetDevice.
func (c *AlexaForBusiness) GetDeviceRequest(input *alexaforbusiness.GetDeviceInput) (req *request.Request, output *alexaforbusiness.GetDeviceOutput) {
	c.inc("GetDevice")
	return c.svc.GetDeviceRequest(input)
}

// GetDevice is a passthrough to the underlying GetDevice method.
// It will increment the count of requests made to GetDevice.
func (c *AlexaForBusiness) GetDevice(input *alexaforbusiness.GetDeviceInput) (*alexaforbusiness.GetDeviceOutput, error) {
	c.inc("GetDevice")
	return c.svc.GetDevice(input)
}

// GetDeviceWithContext is a passthrough to the underlying GetDeviceWithContext method.
// It will increment the count of requests made to GetDevice.
func (c *AlexaForBusiness) GetDeviceWithContext(ctx aws.Context, input *alexaforbusiness.GetDeviceInput, opts ...request.Option) (*alexaforbusiness.GetDeviceOutput, error) {
	c.inc("GetDevice")
	return c.svc.GetDeviceWithContext(ctx, input, opts...)
}

// GetProfileRequest is a passthrough to the underlying GetProfileRequest.
// It will increment the count of requests made to GetProfile.
func (c *AlexaForBusiness) GetProfileRequest(input *alexaforbusiness.GetProfileInput) (req *request.Request, output *alexaforbusiness.GetProfileOutput) {
	c.inc("GetProfile")
	return c.svc.GetProfileRequest(input)
}

// GetProfile is a passthrough to the underlying GetProfile method.
// It will increment the count of requests made to GetProfile.
func (c *AlexaForBusiness) GetProfile(input *alexaforbusiness.GetProfileInput) (*alexaforbusiness.GetProfileOutput, error) {
	c.inc("GetProfile")
	return c.svc.GetProfile(input)
}

// GetProfileWithContext is a passthrough to the underlying GetProfileWithContext method.
// It will increment the count of requests made to GetProfile.
func (c *AlexaForBusiness) GetProfileWithContext(ctx aws.Context, input *alexaforbusiness.GetProfileInput, opts ...request.Option) (*alexaforbusiness.GetProfileOutput, error) {
	c.inc("GetProfile")
	return c.svc.GetProfileWithContext(ctx, input, opts...)
}

// GetRoomRequest is a passthrough to the underlying GetRoomRequest.
// It will increment the count of requests made to GetRoom.
func (c *AlexaForBusiness) GetRoomRequest(input *alexaforbusiness.GetRoomInput) (req *request.Request, output *alexaforbusiness.GetRoomOutput) {
	c.inc("GetRoom")
	return c.svc.GetRoomRequest(input)
}

// GetRoom is a passthrough to the underlying GetRoom method.
// It will increment the count of requests made to GetRoom.
func (c *AlexaForBusiness) GetRoom(input *alexaforbusiness.GetRoomInput) (*alexaforbusiness.GetRoomOutput, error) {
	c.inc("GetRoom")
	return c.svc.GetRoom(input)
}

// GetRoomWithContext is a passthrough to the underlying GetRoomWithContext method.
// It will increment the count of requests made to GetRoom.
func (c *AlexaForBusiness) GetRoomWithContext(ctx aws.Context, input *alexaforbusiness.GetRoomInput, opts ...request.Option) (*alexaforbusiness.GetRoomOutput, error) {
	c.inc("GetRoom")
	return c.svc.GetRoomWithContext(ctx, input, opts...)
}

// GetRoomSkillParameterRequest is a passthrough to the underlying GetRoomSkillParameterRequest.
// It will increment the count of requests made to GetRoomSkillParameter.
func (c *AlexaForBusiness) GetRoomSkillParameterRequest(input *alexaforbusiness.GetRoomSkillParameterInput) (req *request.Request, output *alexaforbusiness.GetRoomSkillParameterOutput) {
	c.inc("GetRoomSkillParameter")
	return c.svc.GetRoomSkillParameterRequest(input)
}

// GetRoomSkillParameter is a passthrough to the underlying GetRoomSkillParameter method.
// It will increment the count of requests made to GetRoomSkillParameter.
func (c *AlexaForBusiness) GetRoomSkillParameter(input *alexaforbusiness.GetRoomSkillParameterInput) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	c.inc("GetRoomSkillParameter")
	return c.svc.GetRoomSkillParameter(input)
}

// GetRoomSkillParameterWithContext is a passthrough to the underlying GetRoomSkillParameterWithContext method.
// It will increment the count of requests made to GetRoomSkillParameter.
func (c *AlexaForBusiness) GetRoomSkillParameterWithContext(ctx aws.Context, input *alexaforbusiness.GetRoomSkillParameterInput, opts ...request.Option) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	c.inc("GetRoomSkillParameter")
	return c.svc.GetRoomSkillParameterWithContext(ctx, input, opts...)
}

// GetSkillGroupRequest is a passthrough to the underlying GetSkillGroupRequest.
// It will increment the count of requests made to GetSkillGroup.
func (c *AlexaForBusiness) GetSkillGroupRequest(input *alexaforbusiness.GetSkillGroupInput) (req *request.Request, output *alexaforbusiness.GetSkillGroupOutput) {
	c.inc("GetSkillGroup")
	return c.svc.GetSkillGroupRequest(input)
}

// GetSkillGroup is a passthrough to the underlying GetSkillGroup method.
// It will increment the count of requests made to GetSkillGroup.
func (c *AlexaForBusiness) GetSkillGroup(input *alexaforbusiness.GetSkillGroupInput) (*alexaforbusiness.GetSkillGroupOutput, error) {
	c.inc("GetSkillGroup")
	return c.svc.GetSkillGroup(input)
}

// GetSkillGroupWithContext is a passthrough to the underlying GetSkillGroupWithContext method.
// It will increment the count of requests made to GetSkillGroup.
func (c *AlexaForBusiness) GetSkillGroupWithContext(ctx aws.Context, input *alexaforbusiness.GetSkillGroupInput, opts ...request.Option) (*alexaforbusiness.GetSkillGroupOutput, error) {
	c.inc("GetSkillGroup")
	return c.svc.GetSkillGroupWithContext(ctx, input, opts...)
}

// ListSkillsRequest is a passthrough to the underlying ListSkillsRequest.
// It will increment the count of requests made to ListSkills.
func (c *AlexaForBusiness) ListSkillsRequest(input *alexaforbusiness.ListSkillsInput) (req *request.Request, output *alexaforbusiness.ListSkillsOutput) {
	c.inc("ListSkills")
	return c.svc.ListSkillsRequest(input)
}

// ListSkills is a passthrough to the underlying ListSkills method.
// It will increment the count of requests made to ListSkills.
func (c *AlexaForBusiness) ListSkills(input *alexaforbusiness.ListSkillsInput) (*alexaforbusiness.ListSkillsOutput, error) {
	c.inc("ListSkills")
	return c.svc.ListSkills(input)
}

// ListSkillsWithContext is a passthrough to the underlying ListSkillsWithContext method.
// It will increment the count of requests made to ListSkills.
func (c *AlexaForBusiness) ListSkillsWithContext(ctx aws.Context, input *alexaforbusiness.ListSkillsInput, opts ...request.Option) (*alexaforbusiness.ListSkillsOutput, error) {
	c.inc("ListSkills")
	return c.svc.ListSkillsWithContext(ctx, input, opts...)
}

// ListSkillsPages is a passthrough to the underlying ListSkillsPages method.
// It will increment the count of requests made to ListSkills on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListSkillsPagesWithContext to avoid this.
func (c *AlexaForBusiness) ListSkillsPages(input *alexaforbusiness.ListSkillsInput, fn func(*alexaforbusiness.ListSkillsOutput, bool) bool) error {
	wrappedFn := func(page *alexaforbusiness.ListSkillsOutput, lastPage bool) bool {
		c.inc("ListSkills")
		return fn(page, lastPage)
	}
	return c.svc.ListSkillsPages(input, wrappedFn)
}

// ListSkillsPagesWithContext is a passthrough to the underlying ListSkillsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListSkills when applied to the request.
func (c *AlexaForBusiness) ListSkillsPagesWithContext(ctx aws.Context, input *alexaforbusiness.ListSkillsInput, fn func(*alexaforbusiness.ListSkillsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListSkills"))
	return c.svc.ListSkillsPagesWithContext(ctx, input, fn, opts...)
}

// ListTagsRequest is a passthrough to the underlying ListTagsRequest.
// It will increment the count of requests made to ListTags.
func (c *AlexaForBusiness) ListTagsRequest(input *alexaforbusiness.ListTagsInput) (req *request.Request, output *alexaforbusiness.ListTagsOutput) {
	c.inc("ListTags")
	return c.svc.ListTagsRequest(input)
}

// ListTags is a passthrough to the underlying ListTags method.
// It will increment the count of requests made to ListTags.
func (c *AlexaForBusiness) ListTags(input *alexaforbusiness.ListTagsInput) (*alexaforbusiness.ListTagsOutput, error) {
	c.inc("ListTags")
	return c.svc.ListTags(input)
}

// ListTagsWithContext is a passthrough to the underlying ListTagsWithContext method.
// It will increment the count of requests made to ListTags.
func (c *AlexaForBusiness) ListTagsWithContext(ctx aws.Context, input *alexaforbusiness.ListTagsInput, opts ...request.Option) (*alexaforbusiness.ListTagsOutput, error) {
	c.inc("ListTags")
	return c.svc.ListTagsWithContext(ctx, input, opts...)
}

// ListTagsPages is a passthrough to the underlying ListTagsPages method.
// It will increment the count of requests made to ListTags on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListTagsPagesWithContext to avoid this.
func (c *AlexaForBusiness) ListTagsPages(input *alexaforbusiness.ListTagsInput, fn func(*alexaforbusiness.ListTagsOutput, bool) bool) error {
	wrappedFn := func(page *alexaforbusiness.ListTagsOutput, lastPage bool) bool {
		c.inc("ListTags")
		return fn(page, lastPage)
	}
	return c.svc.ListTagsPages(input, wrappedFn)
}

// ListTagsPagesWithContext is a passthrough to the underlying ListTagsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListTags when applied to the request.
func (c *AlexaForBusiness) ListTagsPagesWithContext(ctx aws.Context, input *alexaforbusiness.ListTagsInput, fn func(*alexaforbusiness.ListTagsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListTags"))
	return c.svc.ListTagsPagesWithContext(ctx, input, fn, opts...)
}

// PutRoomSkillParameterRequest is a passthrough to the underlying PutRoomSkillParameterRequest.
// It will increment the count of requests made to PutRoomSkillParameter.
func (c *AlexaForBusiness) PutRoomSkillParameterRequest(input *alexaforbusiness.PutRoomSkillParameterInput) (req *request.Request, output *alexaforbusiness.PutRoomSkillParameterOutput) {
	c.inc("PutRoomSkillParameter")
	return c.svc.PutRoomSkillParameterRequest(input)
}

// PutRoomSkillParameter is a passthrough to the underlying PutRoomSkillParameter method.
// It will increment the count of requests made to PutRoomSkillParameter.
func (c *AlexaForBusiness) PutRoomSkillParameter(input *alexaforbusiness.PutRoomSkillParameterInput) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	c.inc("PutRoomSkillParameter")
	return c.svc.PutRoomSkillParameter(input)
}

// PutRoomSkillParameterWithContext is a passthrough to the underlying PutRoomSkillParameterWithContext method.
// It will increment the count of requests made to PutRoomSkillParameter.
func (c *AlexaForBusiness) PutRoomSkillParameterWithContext(ctx aws.Context, input *alexaforbusiness.PutRoomSkillParameterInput, opts ...request.Option) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	c.inc("PutRoomSkillParameter")
	return c.svc.PutRoomSkillParameterWithContext(ctx, input, opts...)
}

// ResolveRoomRequest is a passthrough to the underlying ResolveRoomRequest.
// It will increment the count of requests made to ResolveRoom.
func (c *AlexaForBusiness) ResolveRoomRequest(input *alexaforbusiness.ResolveRoomInput) (req *request.Request, output *alexaforbusiness.ResolveRoomOutput) {
	c.inc("ResolveRoom")
	return c.svc.ResolveRoomRequest(input)
}

// ResolveRoom is a passthrough to the underlying ResolveRoom method.
// It will increment the count of requests made to ResolveRoom.
func (c *AlexaForBusiness) ResolveRoom(input *alexaforbusiness.ResolveRoomInput) (*alexaforbusiness.ResolveRoomOutput, error) {
	c.inc("ResolveRoom")
	return c.svc.ResolveRoom(input)
}

// ResolveRoomWithContext is a passthrough to the underlying ResolveRoomWithContext method.
// It will increment the count of requests made to ResolveRoom.
func (c *AlexaForBusiness) ResolveRoomWithContext(ctx aws.Context, input *alexaforbusiness.ResolveRoomInput, opts ...request.Option) (*alexaforbusiness.ResolveRoomOutput, error) {
	c.inc("ResolveRoom")
	return c.svc.ResolveRoomWithContext(ctx, input, opts...)
}

// RevokeInvitationRequest is a passthrough to the underlying RevokeInvitationRequest.
// It will increment the count of requests made to RevokeInvitation.
func (c *AlexaForBusiness) RevokeInvitationRequest(input *alexaforbusiness.RevokeInvitationInput) (req *request.Request, output *alexaforbusiness.RevokeInvitationOutput) {
	c.inc("RevokeInvitation")
	return c.svc.RevokeInvitationRequest(input)
}

// RevokeInvitation is a passthrough to the underlying RevokeInvitation method.
// It will increment the count of requests made to RevokeInvitation.
func (c *AlexaForBusiness) RevokeInvitation(input *alexaforbusiness.RevokeInvitationInput) (*alexaforbusiness.RevokeInvitationOutput, error) {
	c.inc("RevokeInvitation")
	return c.svc.RevokeInvitation(input)
}

// RevokeInvitationWithContext is a passthrough to the underlying RevokeInvitationWithContext method.
// It will increment the count of requests made to RevokeInvitation.
func (c *AlexaForBusiness) RevokeInvitationWithContext(ctx aws.Context, input *alexaforbusiness.RevokeInvitationInput, opts ...request.Option) (*alexaforbusiness.RevokeInvitationOutput, error) {
	c.inc("RevokeInvitation")
	return c.svc.RevokeInvitationWithContext(ctx, input, opts...)
}

// SearchDevicesRequest is a passthrough to the underlying SearchDevicesRequest.
// It will increment the count of requests made to SearchDevices.
func (c *AlexaForBusiness) SearchDevicesRequest(input *alexaforbusiness.SearchDevicesInput) (req *request.Request, output *alexaforbusiness.SearchDevicesOutput) {
	c.inc("SearchDevices")
	return c.svc.SearchDevicesRequest(input)
}

// SearchDevices is a passthrough to the underlying SearchDevices method.
// It will increment the count of requests made to SearchDevices.
func (c *AlexaForBusiness) SearchDevices(input *alexaforbusiness.SearchDevicesInput) (*alexaforbusiness.SearchDevicesOutput, error) {
	c.inc("SearchDevices")
	return c.svc.SearchDevices(input)
}

// SearchDevicesWithContext is a passthrough to the underlying SearchDevicesWithContext method.
// It will increment the count of requests made to SearchDevices.
func (c *AlexaForBusiness) SearchDevicesWithContext(ctx aws.Context, input *alexaforbusiness.SearchDevicesInput, opts ...request.Option) (*alexaforbusiness.SearchDevicesOutput, error) {
	c.inc("SearchDevices")
	return c.svc.SearchDevicesWithContext(ctx, input, opts...)
}

// SearchDevicesPages is a passthrough to the underlying SearchDevicesPages method.
// It will increment the count of requests made to SearchDevices on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use SearchDevicesPagesWithContext to avoid this.
func (c *AlexaForBusiness) SearchDevicesPages(input *alexaforbusiness.SearchDevicesInput, fn func(*alexaforbusiness.SearchDevicesOutput, bool) bool) error {
	wrappedFn := func(page *alexaforbusiness.SearchDevicesOutput, lastPage bool) bool {
		c.inc("SearchDevices")
		return fn(page, lastPage)
	}
	return c.svc.SearchDevicesPages(input, wrappedFn)
}

// SearchDevicesPagesWithContext is a passthrough to the underlying SearchDevicesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to SearchDevices when applied to the request.
func (c *AlexaForBusiness) SearchDevicesPagesWithContext(ctx aws.Context, input *alexaforbusiness.SearchDevicesInput, fn func(*alexaforbusiness.SearchDevicesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("SearchDevices"))
	return c.svc.SearchDevicesPagesWithContext(ctx, input, fn, opts...)
}

// SearchProfilesRequest is a passthrough to the underlying SearchProfilesRequest.
// It will increment the count of requests made to SearchProfiles.
func (c *AlexaForBusiness) SearchProfilesRequest(input *alexaforbusiness.SearchProfilesInput) (req *request.Request, output *alexaforbusiness.SearchProfilesOutput) {
	c.inc("SearchProfiles")
	return c.svc.SearchProfilesRequest(input)
}

// SearchProfiles is a passthrough to the underlying SearchProfiles method.
// It will increment the count of requests made to SearchProfiles.
func (c *AlexaForBusiness) SearchProfiles(input *alexaforbusiness.SearchProfilesInput) (*alexaforbusiness.SearchProfilesOutput, error) {
	c.inc("SearchProfiles")
	return c.svc.SearchProfiles(input)
}

// SearchProfilesWithContext is a passthrough to the underlying SearchProfilesWithContext method.
// It will increment the count of requests made to SearchProfiles.
func (c *AlexaForBusiness) SearchProfilesWithContext(ctx aws.Context, input *alexaforbusiness.SearchProfilesInput, opts ...request.Option) (*alexaforbusiness.SearchProfilesOutput, error) {
	c.inc("SearchProfiles")
	return c.svc.SearchProfilesWithContext(ctx, input, opts...)
}

// SearchProfilesPages is a passthrough to the underlying SearchProfilesPages method.
// It will increment the count of requests made to SearchProfiles on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use SearchProfilesPagesWithContext to avoid this.
func (c *AlexaForBusiness) SearchProfilesPages(input *alexaforbusiness.SearchProfilesInput, fn func(*alexaforbusiness.SearchProfilesOutput, bool) bool) error {
	wrappedFn := func(page *alexaforbusiness.SearchProfilesOutput, lastPage bool) bool {
		c.inc("SearchProfiles")
		return fn(page, lastPage)
	}
	return c.svc.SearchProfilesPages(input, wrappedFn)
}

// SearchProfilesPagesWithContext is a passthrough to the underlying SearchProfilesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to SearchProfiles when applied to the request.
func (c *AlexaForBusiness) SearchProfilesPagesWithContext(ctx aws.Context, input *alexaforbusiness.SearchProfilesInput, fn func(*alexaforbusiness.SearchProfilesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("SearchProfiles"))
	return c.svc.SearchProfilesPagesWithContext(ctx, input, fn, opts...)
}

// SearchRoomsRequest is a passthrough to the underlying SearchRoomsRequest.
// It will increment the count of requests made to SearchRooms.
func (c *AlexaForBusiness) SearchRoomsRequest(input *alexaforbusiness.SearchRoomsInput) (req *request.Request, output *alexaforbusiness.SearchRoomsOutput) {
	c.inc("SearchRooms")
	return c.svc.SearchRoomsRequest(input)
}

// SearchRooms is a passthrough to the underlying SearchRooms method.
// It will increment the count of requests made to SearchRooms.
func (c *AlexaForBusiness) SearchRooms(input *alexaforbusiness.SearchRoomsInput) (*alexaforbusiness.SearchRoomsOutput, error) {
	c.inc("SearchRooms")
	return c.svc.SearchRooms(input)
}

// SearchRoomsWithContext is a passthrough to the underlying SearchRoomsWithContext method.
// It will increment the count of requests made to SearchRooms.
func (c *AlexaForBusiness) SearchRoomsWithContext(ctx aws.Context, input *alexaforbusiness.SearchRoomsInput, opts ...request.Option) (*alexaforbusiness.SearchRoomsOutput, error) {
	c.inc("SearchRooms")
	return c.svc.SearchRoomsWithContext(ctx, input, opts...)
}

// SearchRoomsPages is a passthrough to the underlying SearchRoomsPages method.
// It will increment the count of requests made to SearchRooms on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use SearchRoomsPagesWithContext to avoid this.
func (c *AlexaForBusiness) SearchRoomsPages(input *alexaforbusiness.SearchRoomsInput, fn func(*alexaforbusiness.SearchRoomsOutput, bool) bool) error {
	wrappedFn := func(page *alexaforbusiness.SearchRoomsOutput, lastPage bool) bool {
		c.inc("SearchRooms")
		return fn(page, lastPage)
	}
	return c.svc.SearchRoomsPages(input, wrappedFn)
}

// SearchRoomsPagesWithContext is a passthrough to the underlying SearchRoomsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to SearchRooms when applied to the request.
func (c *AlexaForBusiness) SearchRoomsPagesWithContext(ctx aws.Context, input *alexaforbusiness.SearchRoomsInput, fn func(*alexaforbusiness.SearchRoomsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("SearchRooms"))
	return c.svc.SearchRoomsPagesWithContext(ctx, input, fn, opts...)
}

// SearchSkillGroupsRequest is a passthrough to the underlying SearchSkillGroupsRequest.
// It will increment the count of requests made to SearchSkillGroups.
func (c *AlexaForBusiness) SearchSkillGroupsRequest(input *alexaforbusiness.SearchSkillGroupsInput) (req *request.Request, output *alexaforbusiness.SearchSkillGroupsOutput) {
	c.inc("SearchSkillGroups")
	return c.svc.SearchSkillGroupsRequest(input)
}

// SearchSkillGroups is a passthrough to the underlying SearchSkillGroups method.
// It will increment the count of requests made to SearchSkillGroups.
func (c *AlexaForBusiness) SearchSkillGroups(input *alexaforbusiness.SearchSkillGroupsInput) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	c.inc("SearchSkillGroups")
	return c.svc.SearchSkillGroups(input)
}

// SearchSkillGroupsWithContext is a passthrough to the underlying SearchSkillGroupsWithContext method.
// It will increment the count of requests made to SearchSkillGroups.
func (c *AlexaForBusiness) SearchSkillGroupsWithContext(ctx aws.Context, input *alexaforbusiness.SearchSkillGroupsInput, opts ...request.Option) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	c.inc("SearchSkillGroups")
	return c.svc.SearchSkillGroupsWithContext(ctx, input, opts...)
}

// SearchSkillGroupsPages is a passthrough to the underlying SearchSkillGroupsPages method.
// It will increment the count of requests made to SearchSkillGroups on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use SearchSkillGroupsPagesWithContext to avoid this.
func (c *AlexaForBusiness) SearchSkillGroupsPages(input *alexaforbusiness.SearchSkillGroupsInput, fn func(*alexaforbusiness.SearchSkillGroupsOutput, bool) bool) error {
	wrappedFn := func(page *alexaforbusiness.SearchSkillGroupsOutput, lastPage bool) bool {
		c.inc("SearchSkillGroups")
		return fn(page, lastPage)
	}
	return c.svc.SearchSkillGroupsPages(input, wrappedFn)
}

// SearchSkillGroupsPagesWithContext is a passthrough to the underlying SearchSkillGroupsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to SearchSkillGroups when applied to the request.
func (c *AlexaForBusiness) SearchSkillGroupsPagesWithContext(ctx aws.Context, input *alexaforbusiness.SearchSkillGroupsInput, fn func(*alexaforbusiness.SearchSkillGroupsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("SearchSkillGroups"))
	return c.svc.SearchSkillGroupsPagesWithContext(ctx, input, fn, opts...)
}

// SearchUsersRequest is a passthrough to the underlying SearchUsersRequest.
// It will increment the count of requests made to SearchUsers.
func (c *AlexaForBusiness) SearchUsersRequest(input *alexaforbusiness.SearchUsersInput) (req *request.Request, output *alexaforbusiness.SearchUsersOutput) {
	c.inc("SearchUsers")
	return c.svc.SearchUsersRequest(input)
}

// SearchUsers is a passthrough to the underlying SearchUsers method.
// It will increment the count of requests made to SearchUsers.
func (c *AlexaForBusiness) SearchUsers(input *alexaforbusiness.SearchUsersInput) (*alexaforbusiness.SearchUsersOutput, error) {
	c.inc("SearchUsers")
	return c.svc.SearchUsers(input)
}

// SearchUsersWithContext is a passthrough to the underlying SearchUsersWithContext method.
// It will increment the count of requests made to SearchUsers.
func (c *AlexaForBusiness) SearchUsersWithContext(ctx aws.Context, input *alexaforbusiness.SearchUsersInput, opts ...request.Option) (*alexaforbusiness.SearchUsersOutput, error) {
	c.inc("SearchUsers")
	return c.svc.SearchUsersWithContext(ctx, input, opts...)
}

// SearchUsersPages is a passthrough to the underlying SearchUsersPages method.
// It will increment the count of requests made to SearchUsers on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use SearchUsersPagesWithContext to avoid this.
func (c *AlexaForBusiness) SearchUsersPages(input *alexaforbusiness.SearchUsersInput, fn func(*alexaforbusiness.SearchUsersOutput, bool) bool) error {
	wrappedFn := func(page *alexaforbusiness.SearchUsersOutput, lastPage bool) bool {
		c.inc("SearchUsers")
		return fn(page, lastPage)
	}
	return c.svc.SearchUsersPages(input, wrappedFn)
}

// SearchUsersPagesWithContext is a passthrough to the underlying SearchUsersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to SearchUsers when applied to the request.
func (c *AlexaForBusiness) SearchUsersPagesWithContext(ctx aws.Context, input *alexaforbusiness.SearchUsersInput, fn func(*alexaforbusiness.SearchUsersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("SearchUsers"))
	return c.svc.SearchUsersPagesWithContext(ctx, input, fn, opts...)
}

// SendInvitationRequest is a passthrough to the underlying SendInvitationRequest.
// It will increment the count of requests made to SendInvitation.
func (c *AlexaForBusiness) SendInvitationRequest(input *alexaforbusiness.SendInvitationInput) (req *request.Request, output *alexaforbusiness.SendInvitationOutput) {
	c.inc("SendInvitation")
	return c.svc.SendInvitationRequest(input)
}

// SendInvitation is a passthrough to the underlying SendInvitation method.
// It will increment the count of requests made to SendInvitation.
func (c *AlexaForBusiness) SendInvitation(input *alexaforbusiness.SendInvitationInput) (*alexaforbusiness.SendInvitationOutput, error) {
	c.inc("SendInvitation")
	return c.svc.SendInvitation(input)
}

// SendInvitationWithContext is a passthrough to the underlying SendInvitationWithContext method.
// It will increment the count of requests made to SendInvitation.
func (c *AlexaForBusiness) SendInvitationWithContext(ctx aws.Context, input *alexaforbusiness.SendInvitationInput, opts ...request.Option) (*alexaforbusiness.SendInvitationOutput, error) {
	c.inc("SendInvitation")
	return c.svc.SendInvitationWithContext(ctx, input, opts...)
}

// StartDeviceSyncRequest is a passthrough to the underlying StartDeviceSyncRequest.
// It will increment the count of requests made to StartDeviceSync.
func (c *AlexaForBusiness) StartDeviceSyncRequest(input *alexaforbusiness.StartDeviceSyncInput) (req *request.Request, output *alexaforbusiness.StartDeviceSyncOutput) {
	c.inc("StartDeviceSync")
	return c.svc.StartDeviceSyncRequest(input)
}

// StartDeviceSync is a passthrough to the underlying StartDeviceSync method.
// It will increment the count of requests made to StartDeviceSync.
func (c *AlexaForBusiness) StartDeviceSync(input *alexaforbusiness.StartDeviceSyncInput) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	c.inc("StartDeviceSync")
	return c.svc.StartDeviceSync(input)
}

// StartDeviceSyncWithContext is a passthrough to the underlying StartDeviceSyncWithContext method.
// It will increment the count of requests made to StartDeviceSync.
func (c *AlexaForBusiness) StartDeviceSyncWithContext(ctx aws.Context, input *alexaforbusiness.StartDeviceSyncInput, opts ...request.Option) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	c.inc("StartDeviceSync")
	return c.svc.StartDeviceSyncWithContext(ctx, input, opts...)
}

// TagResourceRequest is a passthrough to the underlying TagResourceRequest.
// It will increment the count of requests made to TagResource.
func (c *AlexaForBusiness) TagResourceRequest(input *alexaforbusiness.TagResourceInput) (req *request.Request, output *alexaforbusiness.TagResourceOutput) {
	c.inc("TagResource")
	return c.svc.TagResourceRequest(input)
}

// TagResource is a passthrough to the underlying TagResource method.
// It will increment the count of requests made to TagResource.
func (c *AlexaForBusiness) TagResource(input *alexaforbusiness.TagResourceInput) (*alexaforbusiness.TagResourceOutput, error) {
	c.inc("TagResource")
	return c.svc.TagResource(input)
}

// TagResourceWithContext is a passthrough to the underlying TagResourceWithContext method.
// It will increment the count of requests made to TagResource.
func (c *AlexaForBusiness) TagResourceWithContext(ctx aws.Context, input *alexaforbusiness.TagResourceInput, opts ...request.Option) (*alexaforbusiness.TagResourceOutput, error) {
	c.inc("TagResource")
	return c.svc.TagResourceWithContext(ctx, input, opts...)
}

// UntagResourceRequest is a passthrough to the underlying UntagResourceRequest.
// It will increment the count of requests made to UntagResource.
func (c *AlexaForBusiness) UntagResourceRequest(input *alexaforbusiness.UntagResourceInput) (req *request.Request, output *alexaforbusiness.UntagResourceOutput) {
	c.inc("UntagResource")
	return c.svc.UntagResourceRequest(input)
}

// UntagResource is a passthrough to the underlying UntagResource method.
// It will increment the count of requests made to UntagResource.
func (c *AlexaForBusiness) UntagResource(input *alexaforbusiness.UntagResourceInput) (*alexaforbusiness.UntagResourceOutput, error) {
	c.inc("UntagResource")
	return c.svc.UntagResource(input)
}

// UntagResourceWithContext is a passthrough to the underlying UntagResourceWithContext method.
// It will increment the count of requests made to UntagResource.
func (c *AlexaForBusiness) UntagResourceWithContext(ctx aws.Context, input *alexaforbusiness.UntagResourceInput, opts ...request.Option) (*alexaforbusiness.UntagResourceOutput, error) {
	c.inc("UntagResource")
	return c.svc.UntagResourceWithContext(ctx, input, opts...)
}

// UpdateDeviceRequest is a passthrough to the underlying UpdateDeviceRequest.
// It will increment the count of requests made to UpdateDevice.
func (c *AlexaForBusiness) UpdateDeviceRequest(input *alexaforbusiness.UpdateDeviceInput) (req *request.Request, output *alexaforbusiness.UpdateDeviceOutput) {
	c.inc("UpdateDevice")
	return c.svc.UpdateDeviceRequest(input)
}

// UpdateDevice is a passthrough to the underlying UpdateDevice method.
// It will increment the count of requests made to UpdateDevice.
func (c *AlexaForBusiness) UpdateDevice(input *alexaforbusiness.UpdateDeviceInput) (*alexaforbusiness.UpdateDeviceOutput, error) {
	c.inc("UpdateDevice")
	return c.svc.UpdateDevice(input)
}

// UpdateDeviceWithContext is a passthrough to the underlying UpdateDeviceWithContext method.
// It will increment the count of requests made to UpdateDevice.
func (c *AlexaForBusiness) UpdateDeviceWithContext(ctx aws.Context, input *alexaforbusiness.UpdateDeviceInput, opts ...request.Option) (*alexaforbusiness.UpdateDeviceOutput, error) {
	c.inc("UpdateDevice")
	return c.svc.UpdateDeviceWithContext(ctx, input, opts...)
}

// UpdateProfileRequest is a passthrough to the underlying UpdateProfileRequest.
// It will increment the count of requests made to UpdateProfile.
func (c *AlexaForBusiness) UpdateProfileRequest(input *alexaforbusiness.UpdateProfileInput) (req *request.Request, output *alexaforbusiness.UpdateProfileOutput) {
	c.inc("UpdateProfile")
	return c.svc.UpdateProfileRequest(input)
}

// UpdateProfile is a passthrough to the underlying UpdateProfile method.
// It will increment the count of requests made to UpdateProfile.
func (c *AlexaForBusiness) UpdateProfile(input *alexaforbusiness.UpdateProfileInput) (*alexaforbusiness.UpdateProfileOutput, error) {
	c.inc("UpdateProfile")
	return c.svc.UpdateProfile(input)
}

// UpdateProfileWithContext is a passthrough to the underlying UpdateProfileWithContext method.
// It will increment the count of requests made to UpdateProfile.
func (c *AlexaForBusiness) UpdateProfileWithContext(ctx aws.Context, input *alexaforbusiness.UpdateProfileInput, opts ...request.Option) (*alexaforbusiness.UpdateProfileOutput, error) {
	c.inc("UpdateProfile")
	return c.svc.UpdateProfileWithContext(ctx, input, opts...)
}

// UpdateRoomRequest is a passthrough to the underlying UpdateRoomRequest.
// It will increment the count of requests made to UpdateRoom.
func (c *AlexaForBusiness) UpdateRoomRequest(input *alexaforbusiness.UpdateRoomInput) (req *request.Request, output *alexaforbusiness.UpdateRoomOutput) {
	c.inc("UpdateRoom")
	return c.svc.UpdateRoomRequest(input)
}

// UpdateRoom is a passthrough to the underlying UpdateRoom method.
// It will increment the count of requests made to UpdateRoom.
func (c *AlexaForBusiness) UpdateRoom(input *alexaforbusiness.UpdateRoomInput) (*alexaforbusiness.UpdateRoomOutput, error) {
	c.inc("UpdateRoom")
	return c.svc.UpdateRoom(input)
}

// UpdateRoomWithContext is a passthrough to the underlying UpdateRoomWithContext method.
// It will increment the count of requests made to UpdateRoom.
func (c *AlexaForBusiness) UpdateRoomWithContext(ctx aws.Context, input *alexaforbusiness.UpdateRoomInput, opts ...request.Option) (*alexaforbusiness.UpdateRoomOutput, error) {
	c.inc("UpdateRoom")
	return c.svc.UpdateRoomWithContext(ctx, input, opts...)
}

// UpdateSkillGroupRequest is a passthrough to the underlying UpdateSkillGroupRequest.
// It will increment the count of requests made to UpdateSkillGroup.
func (c *AlexaForBusiness) UpdateSkillGroupRequest(input *alexaforbusiness.UpdateSkillGroupInput) (req *request.Request, output *alexaforbusiness.UpdateSkillGroupOutput) {
	c.inc("UpdateSkillGroup")
	return c.svc.UpdateSkillGroupRequest(input)
}

// UpdateSkillGroup is a passthrough to the underlying UpdateSkillGroup method.
// It will increment the count of requests made to UpdateSkillGroup.
func (c *AlexaForBusiness) UpdateSkillGroup(input *alexaforbusiness.UpdateSkillGroupInput) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	c.inc("UpdateSkillGroup")
	return c.svc.UpdateSkillGroup(input)
}

// UpdateSkillGroupWithContext is a passthrough to the underlying UpdateSkillGroupWithContext method.
// It will increment the count of requests made to UpdateSkillGroup.
func (c *AlexaForBusiness) UpdateSkillGroupWithContext(ctx aws.Context, input *alexaforbusiness.UpdateSkillGroupInput, opts ...request.Option) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	c.inc("UpdateSkillGroup")
	return c.svc.UpdateSkillGroupWithContext(ctx, input, opts...)
}
