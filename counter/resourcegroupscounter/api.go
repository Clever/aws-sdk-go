// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package resourcegroupscounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/resourcegroups"
)

// CreateGroupRequest is a passthrough to the underlying CreateGroupRequest.
// It will increment the count of requests made to CreateGroup.
func (c *ResourceGroups) CreateGroupRequest(input *resourcegroups.CreateGroupInput) (req *request.Request, output *resourcegroups.CreateGroupOutput) {
	c.inc("CreateGroup")
	return c.svc.CreateGroupRequest(input)
}

// CreateGroup is a passthrough to the underlying CreateGroup method.
// It will increment the count of requests made to CreateGroup.
func (c *ResourceGroups) CreateGroup(input *resourcegroups.CreateGroupInput) (*resourcegroups.CreateGroupOutput, error) {
	c.inc("CreateGroup")
	return c.svc.CreateGroup(input)
}

// CreateGroupWithContext is a passthrough to the underlying CreateGroupWithContext method.
// It will increment the count of requests made to CreateGroup.
func (c *ResourceGroups) CreateGroupWithContext(ctx aws.Context, input *resourcegroups.CreateGroupInput, opts ...request.Option) (*resourcegroups.CreateGroupOutput, error) {
	c.inc("CreateGroup")
	return c.svc.CreateGroupWithContext(ctx, input, opts...)
}

// DeleteGroupRequest is a passthrough to the underlying DeleteGroupRequest.
// It will increment the count of requests made to DeleteGroup.
func (c *ResourceGroups) DeleteGroupRequest(input *resourcegroups.DeleteGroupInput) (req *request.Request, output *resourcegroups.DeleteGroupOutput) {
	c.inc("DeleteGroup")
	return c.svc.DeleteGroupRequest(input)
}

// DeleteGroup is a passthrough to the underlying DeleteGroup method.
// It will increment the count of requests made to DeleteGroup.
func (c *ResourceGroups) DeleteGroup(input *resourcegroups.DeleteGroupInput) (*resourcegroups.DeleteGroupOutput, error) {
	c.inc("DeleteGroup")
	return c.svc.DeleteGroup(input)
}

// DeleteGroupWithContext is a passthrough to the underlying DeleteGroupWithContext method.
// It will increment the count of requests made to DeleteGroup.
func (c *ResourceGroups) DeleteGroupWithContext(ctx aws.Context, input *resourcegroups.DeleteGroupInput, opts ...request.Option) (*resourcegroups.DeleteGroupOutput, error) {
	c.inc("DeleteGroup")
	return c.svc.DeleteGroupWithContext(ctx, input, opts...)
}

// GetGroupRequest is a passthrough to the underlying GetGroupRequest.
// It will increment the count of requests made to GetGroup.
func (c *ResourceGroups) GetGroupRequest(input *resourcegroups.GetGroupInput) (req *request.Request, output *resourcegroups.GetGroupOutput) {
	c.inc("GetGroup")
	return c.svc.GetGroupRequest(input)
}

// GetGroup is a passthrough to the underlying GetGroup method.
// It will increment the count of requests made to GetGroup.
func (c *ResourceGroups) GetGroup(input *resourcegroups.GetGroupInput) (*resourcegroups.GetGroupOutput, error) {
	c.inc("GetGroup")
	return c.svc.GetGroup(input)
}

// GetGroupWithContext is a passthrough to the underlying GetGroupWithContext method.
// It will increment the count of requests made to GetGroup.
func (c *ResourceGroups) GetGroupWithContext(ctx aws.Context, input *resourcegroups.GetGroupInput, opts ...request.Option) (*resourcegroups.GetGroupOutput, error) {
	c.inc("GetGroup")
	return c.svc.GetGroupWithContext(ctx, input, opts...)
}

// GetGroupQueryRequest is a passthrough to the underlying GetGroupQueryRequest.
// It will increment the count of requests made to GetGroupQuery.
func (c *ResourceGroups) GetGroupQueryRequest(input *resourcegroups.GetGroupQueryInput) (req *request.Request, output *resourcegroups.GetGroupQueryOutput) {
	c.inc("GetGroupQuery")
	return c.svc.GetGroupQueryRequest(input)
}

// GetGroupQuery is a passthrough to the underlying GetGroupQuery method.
// It will increment the count of requests made to GetGroupQuery.
func (c *ResourceGroups) GetGroupQuery(input *resourcegroups.GetGroupQueryInput) (*resourcegroups.GetGroupQueryOutput, error) {
	c.inc("GetGroupQuery")
	return c.svc.GetGroupQuery(input)
}

// GetGroupQueryWithContext is a passthrough to the underlying GetGroupQueryWithContext method.
// It will increment the count of requests made to GetGroupQuery.
func (c *ResourceGroups) GetGroupQueryWithContext(ctx aws.Context, input *resourcegroups.GetGroupQueryInput, opts ...request.Option) (*resourcegroups.GetGroupQueryOutput, error) {
	c.inc("GetGroupQuery")
	return c.svc.GetGroupQueryWithContext(ctx, input, opts...)
}

// GetTagsRequest is a passthrough to the underlying GetTagsRequest.
// It will increment the count of requests made to GetTags.
func (c *ResourceGroups) GetTagsRequest(input *resourcegroups.GetTagsInput) (req *request.Request, output *resourcegroups.GetTagsOutput) {
	c.inc("GetTags")
	return c.svc.GetTagsRequest(input)
}

// GetTags is a passthrough to the underlying GetTags method.
// It will increment the count of requests made to GetTags.
func (c *ResourceGroups) GetTags(input *resourcegroups.GetTagsInput) (*resourcegroups.GetTagsOutput, error) {
	c.inc("GetTags")
	return c.svc.GetTags(input)
}

// GetTagsWithContext is a passthrough to the underlying GetTagsWithContext method.
// It will increment the count of requests made to GetTags.
func (c *ResourceGroups) GetTagsWithContext(ctx aws.Context, input *resourcegroups.GetTagsInput, opts ...request.Option) (*resourcegroups.GetTagsOutput, error) {
	c.inc("GetTags")
	return c.svc.GetTagsWithContext(ctx, input, opts...)
}

// ListGroupResourcesRequest is a passthrough to the underlying ListGroupResourcesRequest.
// It will increment the count of requests made to ListGroupResources.
func (c *ResourceGroups) ListGroupResourcesRequest(input *resourcegroups.ListGroupResourcesInput) (req *request.Request, output *resourcegroups.ListGroupResourcesOutput) {
	c.inc("ListGroupResources")
	return c.svc.ListGroupResourcesRequest(input)
}

// ListGroupResources is a passthrough to the underlying ListGroupResources method.
// It will increment the count of requests made to ListGroupResources.
func (c *ResourceGroups) ListGroupResources(input *resourcegroups.ListGroupResourcesInput) (*resourcegroups.ListGroupResourcesOutput, error) {
	c.inc("ListGroupResources")
	return c.svc.ListGroupResources(input)
}

// ListGroupResourcesWithContext is a passthrough to the underlying ListGroupResourcesWithContext method.
// It will increment the count of requests made to ListGroupResources.
func (c *ResourceGroups) ListGroupResourcesWithContext(ctx aws.Context, input *resourcegroups.ListGroupResourcesInput, opts ...request.Option) (*resourcegroups.ListGroupResourcesOutput, error) {
	c.inc("ListGroupResources")
	return c.svc.ListGroupResourcesWithContext(ctx, input, opts...)
}

// ListGroupResourcesPages is a passthrough to the underlying ListGroupResourcesPages method.
// It will increment the count of requests made to ListGroupResources on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListGroupResourcesPagesWithContext to avoid this.
func (c *ResourceGroups) ListGroupResourcesPages(input *resourcegroups.ListGroupResourcesInput, fn func(*resourcegroups.ListGroupResourcesOutput, bool) bool) error {
	wrappedFn := func(page *resourcegroups.ListGroupResourcesOutput, lastPage bool) bool {
		c.inc("ListGroupResources")
		return fn(page, lastPage)
	}
	return c.svc.ListGroupResourcesPages(input, wrappedFn)
}

// ListGroupResourcesPagesWithContext is a passthrough to the underlying ListGroupResourcesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListGroupResources when applied to the request.
func (c *ResourceGroups) ListGroupResourcesPagesWithContext(ctx aws.Context, input *resourcegroups.ListGroupResourcesInput, fn func(*resourcegroups.ListGroupResourcesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListGroupResources"))
	return c.svc.ListGroupResourcesPagesWithContext(ctx, input, fn, opts...)
}

// ListGroupsRequest is a passthrough to the underlying ListGroupsRequest.
// It will increment the count of requests made to ListGroups.
func (c *ResourceGroups) ListGroupsRequest(input *resourcegroups.ListGroupsInput) (req *request.Request, output *resourcegroups.ListGroupsOutput) {
	c.inc("ListGroups")
	return c.svc.ListGroupsRequest(input)
}

// ListGroups is a passthrough to the underlying ListGroups method.
// It will increment the count of requests made to ListGroups.
func (c *ResourceGroups) ListGroups(input *resourcegroups.ListGroupsInput) (*resourcegroups.ListGroupsOutput, error) {
	c.inc("ListGroups")
	return c.svc.ListGroups(input)
}

// ListGroupsWithContext is a passthrough to the underlying ListGroupsWithContext method.
// It will increment the count of requests made to ListGroups.
func (c *ResourceGroups) ListGroupsWithContext(ctx aws.Context, input *resourcegroups.ListGroupsInput, opts ...request.Option) (*resourcegroups.ListGroupsOutput, error) {
	c.inc("ListGroups")
	return c.svc.ListGroupsWithContext(ctx, input, opts...)
}

// ListGroupsPages is a passthrough to the underlying ListGroupsPages method.
// It will increment the count of requests made to ListGroups on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListGroupsPagesWithContext to avoid this.
func (c *ResourceGroups) ListGroupsPages(input *resourcegroups.ListGroupsInput, fn func(*resourcegroups.ListGroupsOutput, bool) bool) error {
	wrappedFn := func(page *resourcegroups.ListGroupsOutput, lastPage bool) bool {
		c.inc("ListGroups")
		return fn(page, lastPage)
	}
	return c.svc.ListGroupsPages(input, wrappedFn)
}

// ListGroupsPagesWithContext is a passthrough to the underlying ListGroupsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListGroups when applied to the request.
func (c *ResourceGroups) ListGroupsPagesWithContext(ctx aws.Context, input *resourcegroups.ListGroupsInput, fn func(*resourcegroups.ListGroupsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListGroups"))
	return c.svc.ListGroupsPagesWithContext(ctx, input, fn, opts...)
}

// SearchResourcesRequest is a passthrough to the underlying SearchResourcesRequest.
// It will increment the count of requests made to SearchResources.
func (c *ResourceGroups) SearchResourcesRequest(input *resourcegroups.SearchResourcesInput) (req *request.Request, output *resourcegroups.SearchResourcesOutput) {
	c.inc("SearchResources")
	return c.svc.SearchResourcesRequest(input)
}

// SearchResources is a passthrough to the underlying SearchResources method.
// It will increment the count of requests made to SearchResources.
func (c *ResourceGroups) SearchResources(input *resourcegroups.SearchResourcesInput) (*resourcegroups.SearchResourcesOutput, error) {
	c.inc("SearchResources")
	return c.svc.SearchResources(input)
}

// SearchResourcesWithContext is a passthrough to the underlying SearchResourcesWithContext method.
// It will increment the count of requests made to SearchResources.
func (c *ResourceGroups) SearchResourcesWithContext(ctx aws.Context, input *resourcegroups.SearchResourcesInput, opts ...request.Option) (*resourcegroups.SearchResourcesOutput, error) {
	c.inc("SearchResources")
	return c.svc.SearchResourcesWithContext(ctx, input, opts...)
}

// SearchResourcesPages is a passthrough to the underlying SearchResourcesPages method.
// It will increment the count of requests made to SearchResources on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use SearchResourcesPagesWithContext to avoid this.
func (c *ResourceGroups) SearchResourcesPages(input *resourcegroups.SearchResourcesInput, fn func(*resourcegroups.SearchResourcesOutput, bool) bool) error {
	wrappedFn := func(page *resourcegroups.SearchResourcesOutput, lastPage bool) bool {
		c.inc("SearchResources")
		return fn(page, lastPage)
	}
	return c.svc.SearchResourcesPages(input, wrappedFn)
}

// SearchResourcesPagesWithContext is a passthrough to the underlying SearchResourcesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to SearchResources when applied to the request.
func (c *ResourceGroups) SearchResourcesPagesWithContext(ctx aws.Context, input *resourcegroups.SearchResourcesInput, fn func(*resourcegroups.SearchResourcesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("SearchResources"))
	return c.svc.SearchResourcesPagesWithContext(ctx, input, fn, opts...)
}

// TagRequest is a passthrough to the underlying TagRequest.
// It will increment the count of requests made to Tag.
func (c *ResourceGroups) TagRequest(input *resourcegroups.TagInput) (req *request.Request, output *resourcegroups.TagOutput) {
	c.inc("Tag")
	return c.svc.TagRequest(input)
}

// Tag is a passthrough to the underlying Tag method.
// It will increment the count of requests made to Tag.
func (c *ResourceGroups) Tag(input *resourcegroups.TagInput) (*resourcegroups.TagOutput, error) {
	c.inc("Tag")
	return c.svc.Tag(input)
}

// TagWithContext is a passthrough to the underlying TagWithContext method.
// It will increment the count of requests made to Tag.
func (c *ResourceGroups) TagWithContext(ctx aws.Context, input *resourcegroups.TagInput, opts ...request.Option) (*resourcegroups.TagOutput, error) {
	c.inc("Tag")
	return c.svc.TagWithContext(ctx, input, opts...)
}

// UntagRequest is a passthrough to the underlying UntagRequest.
// It will increment the count of requests made to Untag.
func (c *ResourceGroups) UntagRequest(input *resourcegroups.UntagInput) (req *request.Request, output *resourcegroups.UntagOutput) {
	c.inc("Untag")
	return c.svc.UntagRequest(input)
}

// Untag is a passthrough to the underlying Untag method.
// It will increment the count of requests made to Untag.
func (c *ResourceGroups) Untag(input *resourcegroups.UntagInput) (*resourcegroups.UntagOutput, error) {
	c.inc("Untag")
	return c.svc.Untag(input)
}

// UntagWithContext is a passthrough to the underlying UntagWithContext method.
// It will increment the count of requests made to Untag.
func (c *ResourceGroups) UntagWithContext(ctx aws.Context, input *resourcegroups.UntagInput, opts ...request.Option) (*resourcegroups.UntagOutput, error) {
	c.inc("Untag")
	return c.svc.UntagWithContext(ctx, input, opts...)
}

// UpdateGroupRequest is a passthrough to the underlying UpdateGroupRequest.
// It will increment the count of requests made to UpdateGroup.
func (c *ResourceGroups) UpdateGroupRequest(input *resourcegroups.UpdateGroupInput) (req *request.Request, output *resourcegroups.UpdateGroupOutput) {
	c.inc("UpdateGroup")
	return c.svc.UpdateGroupRequest(input)
}

// UpdateGroup is a passthrough to the underlying UpdateGroup method.
// It will increment the count of requests made to UpdateGroup.
func (c *ResourceGroups) UpdateGroup(input *resourcegroups.UpdateGroupInput) (*resourcegroups.UpdateGroupOutput, error) {
	c.inc("UpdateGroup")
	return c.svc.UpdateGroup(input)
}

// UpdateGroupWithContext is a passthrough to the underlying UpdateGroupWithContext method.
// It will increment the count of requests made to UpdateGroup.
func (c *ResourceGroups) UpdateGroupWithContext(ctx aws.Context, input *resourcegroups.UpdateGroupInput, opts ...request.Option) (*resourcegroups.UpdateGroupOutput, error) {
	c.inc("UpdateGroup")
	return c.svc.UpdateGroupWithContext(ctx, input, opts...)
}

// UpdateGroupQueryRequest is a passthrough to the underlying UpdateGroupQueryRequest.
// It will increment the count of requests made to UpdateGroupQuery.
func (c *ResourceGroups) UpdateGroupQueryRequest(input *resourcegroups.UpdateGroupQueryInput) (req *request.Request, output *resourcegroups.UpdateGroupQueryOutput) {
	c.inc("UpdateGroupQuery")
	return c.svc.UpdateGroupQueryRequest(input)
}

// UpdateGroupQuery is a passthrough to the underlying UpdateGroupQuery method.
// It will increment the count of requests made to UpdateGroupQuery.
func (c *ResourceGroups) UpdateGroupQuery(input *resourcegroups.UpdateGroupQueryInput) (*resourcegroups.UpdateGroupQueryOutput, error) {
	c.inc("UpdateGroupQuery")
	return c.svc.UpdateGroupQuery(input)
}

// UpdateGroupQueryWithContext is a passthrough to the underlying UpdateGroupQueryWithContext method.
// It will increment the count of requests made to UpdateGroupQuery.
func (c *ResourceGroups) UpdateGroupQueryWithContext(ctx aws.Context, input *resourcegroups.UpdateGroupQueryInput, opts ...request.Option) (*resourcegroups.UpdateGroupQueryOutput, error) {
	c.inc("UpdateGroupQuery")
	return c.svc.UpdateGroupQueryWithContext(ctx, input, opts...)
}
