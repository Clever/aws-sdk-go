// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package codecommitcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/codecommit"
)

// BatchGetRepositoriesRequest is a passthrough to the underlying BatchGetRepositoriesRequest.
// It will increment the count of requests made to BatchGetRepositories.
func (c *CodeCommit) BatchGetRepositoriesRequest(input *codecommit.BatchGetRepositoriesInput) (req *request.Request, output *codecommit.BatchGetRepositoriesOutput) {
	c.inc("BatchGetRepositories")
	return c.svc.BatchGetRepositoriesRequest(input)
}

// BatchGetRepositories is a passthrough to the underlying BatchGetRepositories method.
// It will increment the count of requests made to BatchGetRepositories.
func (c *CodeCommit) BatchGetRepositories(input *codecommit.BatchGetRepositoriesInput) (*codecommit.BatchGetRepositoriesOutput, error) {
	c.inc("BatchGetRepositories")
	return c.svc.BatchGetRepositories(input)
}

// BatchGetRepositoriesWithContext is a passthrough to the underlying BatchGetRepositoriesWithContext method.
// It will increment the count of requests made to BatchGetRepositories.
func (c *CodeCommit) BatchGetRepositoriesWithContext(ctx aws.Context, input *codecommit.BatchGetRepositoriesInput, opts ...request.Option) (*codecommit.BatchGetRepositoriesOutput, error) {
	c.inc("BatchGetRepositories")
	return c.svc.BatchGetRepositoriesWithContext(ctx, input, opts...)
}

// CreateBranchRequest is a passthrough to the underlying CreateBranchRequest.
// It will increment the count of requests made to CreateBranch.
func (c *CodeCommit) CreateBranchRequest(input *codecommit.CreateBranchInput) (req *request.Request, output *codecommit.CreateBranchOutput) {
	c.inc("CreateBranch")
	return c.svc.CreateBranchRequest(input)
}

// CreateBranch is a passthrough to the underlying CreateBranch method.
// It will increment the count of requests made to CreateBranch.
func (c *CodeCommit) CreateBranch(input *codecommit.CreateBranchInput) (*codecommit.CreateBranchOutput, error) {
	c.inc("CreateBranch")
	return c.svc.CreateBranch(input)
}

// CreateBranchWithContext is a passthrough to the underlying CreateBranchWithContext method.
// It will increment the count of requests made to CreateBranch.
func (c *CodeCommit) CreateBranchWithContext(ctx aws.Context, input *codecommit.CreateBranchInput, opts ...request.Option) (*codecommit.CreateBranchOutput, error) {
	c.inc("CreateBranch")
	return c.svc.CreateBranchWithContext(ctx, input, opts...)
}

// CreateRepositoryRequest is a passthrough to the underlying CreateRepositoryRequest.
// It will increment the count of requests made to CreateRepository.
func (c *CodeCommit) CreateRepositoryRequest(input *codecommit.CreateRepositoryInput) (req *request.Request, output *codecommit.CreateRepositoryOutput) {
	c.inc("CreateRepository")
	return c.svc.CreateRepositoryRequest(input)
}

// CreateRepository is a passthrough to the underlying CreateRepository method.
// It will increment the count of requests made to CreateRepository.
func (c *CodeCommit) CreateRepository(input *codecommit.CreateRepositoryInput) (*codecommit.CreateRepositoryOutput, error) {
	c.inc("CreateRepository")
	return c.svc.CreateRepository(input)
}

// CreateRepositoryWithContext is a passthrough to the underlying CreateRepositoryWithContext method.
// It will increment the count of requests made to CreateRepository.
func (c *CodeCommit) CreateRepositoryWithContext(ctx aws.Context, input *codecommit.CreateRepositoryInput, opts ...request.Option) (*codecommit.CreateRepositoryOutput, error) {
	c.inc("CreateRepository")
	return c.svc.CreateRepositoryWithContext(ctx, input, opts...)
}

// DeleteBranchRequest is a passthrough to the underlying DeleteBranchRequest.
// It will increment the count of requests made to DeleteBranch.
func (c *CodeCommit) DeleteBranchRequest(input *codecommit.DeleteBranchInput) (req *request.Request, output *codecommit.DeleteBranchOutput) {
	c.inc("DeleteBranch")
	return c.svc.DeleteBranchRequest(input)
}

// DeleteBranch is a passthrough to the underlying DeleteBranch method.
// It will increment the count of requests made to DeleteBranch.
func (c *CodeCommit) DeleteBranch(input *codecommit.DeleteBranchInput) (*codecommit.DeleteBranchOutput, error) {
	c.inc("DeleteBranch")
	return c.svc.DeleteBranch(input)
}

// DeleteBranchWithContext is a passthrough to the underlying DeleteBranchWithContext method.
// It will increment the count of requests made to DeleteBranch.
func (c *CodeCommit) DeleteBranchWithContext(ctx aws.Context, input *codecommit.DeleteBranchInput, opts ...request.Option) (*codecommit.DeleteBranchOutput, error) {
	c.inc("DeleteBranch")
	return c.svc.DeleteBranchWithContext(ctx, input, opts...)
}

// DeleteRepositoryRequest is a passthrough to the underlying DeleteRepositoryRequest.
// It will increment the count of requests made to DeleteRepository.
func (c *CodeCommit) DeleteRepositoryRequest(input *codecommit.DeleteRepositoryInput) (req *request.Request, output *codecommit.DeleteRepositoryOutput) {
	c.inc("DeleteRepository")
	return c.svc.DeleteRepositoryRequest(input)
}

// DeleteRepository is a passthrough to the underlying DeleteRepository method.
// It will increment the count of requests made to DeleteRepository.
func (c *CodeCommit) DeleteRepository(input *codecommit.DeleteRepositoryInput) (*codecommit.DeleteRepositoryOutput, error) {
	c.inc("DeleteRepository")
	return c.svc.DeleteRepository(input)
}

// DeleteRepositoryWithContext is a passthrough to the underlying DeleteRepositoryWithContext method.
// It will increment the count of requests made to DeleteRepository.
func (c *CodeCommit) DeleteRepositoryWithContext(ctx aws.Context, input *codecommit.DeleteRepositoryInput, opts ...request.Option) (*codecommit.DeleteRepositoryOutput, error) {
	c.inc("DeleteRepository")
	return c.svc.DeleteRepositoryWithContext(ctx, input, opts...)
}

// GetBlobRequest is a passthrough to the underlying GetBlobRequest.
// It will increment the count of requests made to GetBlob.
func (c *CodeCommit) GetBlobRequest(input *codecommit.GetBlobInput) (req *request.Request, output *codecommit.GetBlobOutput) {
	c.inc("GetBlob")
	return c.svc.GetBlobRequest(input)
}

// GetBlob is a passthrough to the underlying GetBlob method.
// It will increment the count of requests made to GetBlob.
func (c *CodeCommit) GetBlob(input *codecommit.GetBlobInput) (*codecommit.GetBlobOutput, error) {
	c.inc("GetBlob")
	return c.svc.GetBlob(input)
}

// GetBlobWithContext is a passthrough to the underlying GetBlobWithContext method.
// It will increment the count of requests made to GetBlob.
func (c *CodeCommit) GetBlobWithContext(ctx aws.Context, input *codecommit.GetBlobInput, opts ...request.Option) (*codecommit.GetBlobOutput, error) {
	c.inc("GetBlob")
	return c.svc.GetBlobWithContext(ctx, input, opts...)
}

// GetBranchRequest is a passthrough to the underlying GetBranchRequest.
// It will increment the count of requests made to GetBranch.
func (c *CodeCommit) GetBranchRequest(input *codecommit.GetBranchInput) (req *request.Request, output *codecommit.GetBranchOutput) {
	c.inc("GetBranch")
	return c.svc.GetBranchRequest(input)
}

// GetBranch is a passthrough to the underlying GetBranch method.
// It will increment the count of requests made to GetBranch.
func (c *CodeCommit) GetBranch(input *codecommit.GetBranchInput) (*codecommit.GetBranchOutput, error) {
	c.inc("GetBranch")
	return c.svc.GetBranch(input)
}

// GetBranchWithContext is a passthrough to the underlying GetBranchWithContext method.
// It will increment the count of requests made to GetBranch.
func (c *CodeCommit) GetBranchWithContext(ctx aws.Context, input *codecommit.GetBranchInput, opts ...request.Option) (*codecommit.GetBranchOutput, error) {
	c.inc("GetBranch")
	return c.svc.GetBranchWithContext(ctx, input, opts...)
}

// GetCommitRequest is a passthrough to the underlying GetCommitRequest.
// It will increment the count of requests made to GetCommit.
func (c *CodeCommit) GetCommitRequest(input *codecommit.GetCommitInput) (req *request.Request, output *codecommit.GetCommitOutput) {
	c.inc("GetCommit")
	return c.svc.GetCommitRequest(input)
}

// GetCommit is a passthrough to the underlying GetCommit method.
// It will increment the count of requests made to GetCommit.
func (c *CodeCommit) GetCommit(input *codecommit.GetCommitInput) (*codecommit.GetCommitOutput, error) {
	c.inc("GetCommit")
	return c.svc.GetCommit(input)
}

// GetCommitWithContext is a passthrough to the underlying GetCommitWithContext method.
// It will increment the count of requests made to GetCommit.
func (c *CodeCommit) GetCommitWithContext(ctx aws.Context, input *codecommit.GetCommitInput, opts ...request.Option) (*codecommit.GetCommitOutput, error) {
	c.inc("GetCommit")
	return c.svc.GetCommitWithContext(ctx, input, opts...)
}

// GetDifferencesRequest is a passthrough to the underlying GetDifferencesRequest.
// It will increment the count of requests made to GetDifferences.
func (c *CodeCommit) GetDifferencesRequest(input *codecommit.GetDifferencesInput) (req *request.Request, output *codecommit.GetDifferencesOutput) {
	c.inc("GetDifferences")
	return c.svc.GetDifferencesRequest(input)
}

// GetDifferences is a passthrough to the underlying GetDifferences method.
// It will increment the count of requests made to GetDifferences.
func (c *CodeCommit) GetDifferences(input *codecommit.GetDifferencesInput) (*codecommit.GetDifferencesOutput, error) {
	c.inc("GetDifferences")
	return c.svc.GetDifferences(input)
}

// GetDifferencesWithContext is a passthrough to the underlying GetDifferencesWithContext method.
// It will increment the count of requests made to GetDifferences.
func (c *CodeCommit) GetDifferencesWithContext(ctx aws.Context, input *codecommit.GetDifferencesInput, opts ...request.Option) (*codecommit.GetDifferencesOutput, error) {
	c.inc("GetDifferences")
	return c.svc.GetDifferencesWithContext(ctx, input, opts...)
}

// GetDifferencesPages is a passthrough to the underlying GetDifferencesPages method.
// It will increment the count of requests made to GetDifferences on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetDifferencesPagesWithContext to avoid this.
func (c *CodeCommit) GetDifferencesPages(input *codecommit.GetDifferencesInput, fn func(*codecommit.GetDifferencesOutput, bool) bool) error {
	wrappedFn := func(page *codecommit.GetDifferencesOutput, lastPage bool) bool {
		c.inc("GetDifferences")
		return fn(page, lastPage)
	}
	return c.GetDifferencesPages(input, wrappedFn)
}

// GetDifferencesPagesWithContext is a passthrough to the underlying GetDifferencesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetDifferences when applied to the request.
func (c *CodeCommit) GetDifferencesPagesWithContext(ctx aws.Context, input *codecommit.GetDifferencesInput, fn func(*codecommit.GetDifferencesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetDifferences"))
	return c.GetDifferencesPagesWithContext(ctx, input, fn, opts...)
}

// GetRepositoryRequest is a passthrough to the underlying GetRepositoryRequest.
// It will increment the count of requests made to GetRepository.
func (c *CodeCommit) GetRepositoryRequest(input *codecommit.GetRepositoryInput) (req *request.Request, output *codecommit.GetRepositoryOutput) {
	c.inc("GetRepository")
	return c.svc.GetRepositoryRequest(input)
}

// GetRepository is a passthrough to the underlying GetRepository method.
// It will increment the count of requests made to GetRepository.
func (c *CodeCommit) GetRepository(input *codecommit.GetRepositoryInput) (*codecommit.GetRepositoryOutput, error) {
	c.inc("GetRepository")
	return c.svc.GetRepository(input)
}

// GetRepositoryWithContext is a passthrough to the underlying GetRepositoryWithContext method.
// It will increment the count of requests made to GetRepository.
func (c *CodeCommit) GetRepositoryWithContext(ctx aws.Context, input *codecommit.GetRepositoryInput, opts ...request.Option) (*codecommit.GetRepositoryOutput, error) {
	c.inc("GetRepository")
	return c.svc.GetRepositoryWithContext(ctx, input, opts...)
}

// GetRepositoryTriggersRequest is a passthrough to the underlying GetRepositoryTriggersRequest.
// It will increment the count of requests made to GetRepositoryTriggers.
func (c *CodeCommit) GetRepositoryTriggersRequest(input *codecommit.GetRepositoryTriggersInput) (req *request.Request, output *codecommit.GetRepositoryTriggersOutput) {
	c.inc("GetRepositoryTriggers")
	return c.svc.GetRepositoryTriggersRequest(input)
}

// GetRepositoryTriggers is a passthrough to the underlying GetRepositoryTriggers method.
// It will increment the count of requests made to GetRepositoryTriggers.
func (c *CodeCommit) GetRepositoryTriggers(input *codecommit.GetRepositoryTriggersInput) (*codecommit.GetRepositoryTriggersOutput, error) {
	c.inc("GetRepositoryTriggers")
	return c.svc.GetRepositoryTriggers(input)
}

// GetRepositoryTriggersWithContext is a passthrough to the underlying GetRepositoryTriggersWithContext method.
// It will increment the count of requests made to GetRepositoryTriggers.
func (c *CodeCommit) GetRepositoryTriggersWithContext(ctx aws.Context, input *codecommit.GetRepositoryTriggersInput, opts ...request.Option) (*codecommit.GetRepositoryTriggersOutput, error) {
	c.inc("GetRepositoryTriggers")
	return c.svc.GetRepositoryTriggersWithContext(ctx, input, opts...)
}

// ListBranchesRequest is a passthrough to the underlying ListBranchesRequest.
// It will increment the count of requests made to ListBranches.
func (c *CodeCommit) ListBranchesRequest(input *codecommit.ListBranchesInput) (req *request.Request, output *codecommit.ListBranchesOutput) {
	c.inc("ListBranches")
	return c.svc.ListBranchesRequest(input)
}

// ListBranches is a passthrough to the underlying ListBranches method.
// It will increment the count of requests made to ListBranches.
func (c *CodeCommit) ListBranches(input *codecommit.ListBranchesInput) (*codecommit.ListBranchesOutput, error) {
	c.inc("ListBranches")
	return c.svc.ListBranches(input)
}

// ListBranchesWithContext is a passthrough to the underlying ListBranchesWithContext method.
// It will increment the count of requests made to ListBranches.
func (c *CodeCommit) ListBranchesWithContext(ctx aws.Context, input *codecommit.ListBranchesInput, opts ...request.Option) (*codecommit.ListBranchesOutput, error) {
	c.inc("ListBranches")
	return c.svc.ListBranchesWithContext(ctx, input, opts...)
}

// ListBranchesPages is a passthrough to the underlying ListBranchesPages method.
// It will increment the count of requests made to ListBranches on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListBranchesPagesWithContext to avoid this.
func (c *CodeCommit) ListBranchesPages(input *codecommit.ListBranchesInput, fn func(*codecommit.ListBranchesOutput, bool) bool) error {
	wrappedFn := func(page *codecommit.ListBranchesOutput, lastPage bool) bool {
		c.inc("ListBranches")
		return fn(page, lastPage)
	}
	return c.ListBranchesPages(input, wrappedFn)
}

// ListBranchesPagesWithContext is a passthrough to the underlying ListBranchesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListBranches when applied to the request.
func (c *CodeCommit) ListBranchesPagesWithContext(ctx aws.Context, input *codecommit.ListBranchesInput, fn func(*codecommit.ListBranchesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListBranches"))
	return c.ListBranchesPagesWithContext(ctx, input, fn, opts...)
}

// ListRepositoriesRequest is a passthrough to the underlying ListRepositoriesRequest.
// It will increment the count of requests made to ListRepositories.
func (c *CodeCommit) ListRepositoriesRequest(input *codecommit.ListRepositoriesInput) (req *request.Request, output *codecommit.ListRepositoriesOutput) {
	c.inc("ListRepositories")
	return c.svc.ListRepositoriesRequest(input)
}

// ListRepositories is a passthrough to the underlying ListRepositories method.
// It will increment the count of requests made to ListRepositories.
func (c *CodeCommit) ListRepositories(input *codecommit.ListRepositoriesInput) (*codecommit.ListRepositoriesOutput, error) {
	c.inc("ListRepositories")
	return c.svc.ListRepositories(input)
}

// ListRepositoriesWithContext is a passthrough to the underlying ListRepositoriesWithContext method.
// It will increment the count of requests made to ListRepositories.
func (c *CodeCommit) ListRepositoriesWithContext(ctx aws.Context, input *codecommit.ListRepositoriesInput, opts ...request.Option) (*codecommit.ListRepositoriesOutput, error) {
	c.inc("ListRepositories")
	return c.svc.ListRepositoriesWithContext(ctx, input, opts...)
}

// ListRepositoriesPages is a passthrough to the underlying ListRepositoriesPages method.
// It will increment the count of requests made to ListRepositories on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListRepositoriesPagesWithContext to avoid this.
func (c *CodeCommit) ListRepositoriesPages(input *codecommit.ListRepositoriesInput, fn func(*codecommit.ListRepositoriesOutput, bool) bool) error {
	wrappedFn := func(page *codecommit.ListRepositoriesOutput, lastPage bool) bool {
		c.inc("ListRepositories")
		return fn(page, lastPage)
	}
	return c.ListRepositoriesPages(input, wrappedFn)
}

// ListRepositoriesPagesWithContext is a passthrough to the underlying ListRepositoriesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListRepositories when applied to the request.
func (c *CodeCommit) ListRepositoriesPagesWithContext(ctx aws.Context, input *codecommit.ListRepositoriesInput, fn func(*codecommit.ListRepositoriesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListRepositories"))
	return c.ListRepositoriesPagesWithContext(ctx, input, fn, opts...)
}

// PutRepositoryTriggersRequest is a passthrough to the underlying PutRepositoryTriggersRequest.
// It will increment the count of requests made to PutRepositoryTriggers.
func (c *CodeCommit) PutRepositoryTriggersRequest(input *codecommit.PutRepositoryTriggersInput) (req *request.Request, output *codecommit.PutRepositoryTriggersOutput) {
	c.inc("PutRepositoryTriggers")
	return c.svc.PutRepositoryTriggersRequest(input)
}

// PutRepositoryTriggers is a passthrough to the underlying PutRepositoryTriggers method.
// It will increment the count of requests made to PutRepositoryTriggers.
func (c *CodeCommit) PutRepositoryTriggers(input *codecommit.PutRepositoryTriggersInput) (*codecommit.PutRepositoryTriggersOutput, error) {
	c.inc("PutRepositoryTriggers")
	return c.svc.PutRepositoryTriggers(input)
}

// PutRepositoryTriggersWithContext is a passthrough to the underlying PutRepositoryTriggersWithContext method.
// It will increment the count of requests made to PutRepositoryTriggers.
func (c *CodeCommit) PutRepositoryTriggersWithContext(ctx aws.Context, input *codecommit.PutRepositoryTriggersInput, opts ...request.Option) (*codecommit.PutRepositoryTriggersOutput, error) {
	c.inc("PutRepositoryTriggers")
	return c.svc.PutRepositoryTriggersWithContext(ctx, input, opts...)
}

// TestRepositoryTriggersRequest is a passthrough to the underlying TestRepositoryTriggersRequest.
// It will increment the count of requests made to TestRepositoryTriggers.
func (c *CodeCommit) TestRepositoryTriggersRequest(input *codecommit.TestRepositoryTriggersInput) (req *request.Request, output *codecommit.TestRepositoryTriggersOutput) {
	c.inc("TestRepositoryTriggers")
	return c.svc.TestRepositoryTriggersRequest(input)
}

// TestRepositoryTriggers is a passthrough to the underlying TestRepositoryTriggers method.
// It will increment the count of requests made to TestRepositoryTriggers.
func (c *CodeCommit) TestRepositoryTriggers(input *codecommit.TestRepositoryTriggersInput) (*codecommit.TestRepositoryTriggersOutput, error) {
	c.inc("TestRepositoryTriggers")
	return c.svc.TestRepositoryTriggers(input)
}

// TestRepositoryTriggersWithContext is a passthrough to the underlying TestRepositoryTriggersWithContext method.
// It will increment the count of requests made to TestRepositoryTriggers.
func (c *CodeCommit) TestRepositoryTriggersWithContext(ctx aws.Context, input *codecommit.TestRepositoryTriggersInput, opts ...request.Option) (*codecommit.TestRepositoryTriggersOutput, error) {
	c.inc("TestRepositoryTriggers")
	return c.svc.TestRepositoryTriggersWithContext(ctx, input, opts...)
}

// UpdateDefaultBranchRequest is a passthrough to the underlying UpdateDefaultBranchRequest.
// It will increment the count of requests made to UpdateDefaultBranch.
func (c *CodeCommit) UpdateDefaultBranchRequest(input *codecommit.UpdateDefaultBranchInput) (req *request.Request, output *codecommit.UpdateDefaultBranchOutput) {
	c.inc("UpdateDefaultBranch")
	return c.svc.UpdateDefaultBranchRequest(input)
}

// UpdateDefaultBranch is a passthrough to the underlying UpdateDefaultBranch method.
// It will increment the count of requests made to UpdateDefaultBranch.
func (c *CodeCommit) UpdateDefaultBranch(input *codecommit.UpdateDefaultBranchInput) (*codecommit.UpdateDefaultBranchOutput, error) {
	c.inc("UpdateDefaultBranch")
	return c.svc.UpdateDefaultBranch(input)
}

// UpdateDefaultBranchWithContext is a passthrough to the underlying UpdateDefaultBranchWithContext method.
// It will increment the count of requests made to UpdateDefaultBranch.
func (c *CodeCommit) UpdateDefaultBranchWithContext(ctx aws.Context, input *codecommit.UpdateDefaultBranchInput, opts ...request.Option) (*codecommit.UpdateDefaultBranchOutput, error) {
	c.inc("UpdateDefaultBranch")
	return c.svc.UpdateDefaultBranchWithContext(ctx, input, opts...)
}

// UpdateRepositoryDescriptionRequest is a passthrough to the underlying UpdateRepositoryDescriptionRequest.
// It will increment the count of requests made to UpdateRepositoryDescription.
func (c *CodeCommit) UpdateRepositoryDescriptionRequest(input *codecommit.UpdateRepositoryDescriptionInput) (req *request.Request, output *codecommit.UpdateRepositoryDescriptionOutput) {
	c.inc("UpdateRepositoryDescription")
	return c.svc.UpdateRepositoryDescriptionRequest(input)
}

// UpdateRepositoryDescription is a passthrough to the underlying UpdateRepositoryDescription method.
// It will increment the count of requests made to UpdateRepositoryDescription.
func (c *CodeCommit) UpdateRepositoryDescription(input *codecommit.UpdateRepositoryDescriptionInput) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	c.inc("UpdateRepositoryDescription")
	return c.svc.UpdateRepositoryDescription(input)
}

// UpdateRepositoryDescriptionWithContext is a passthrough to the underlying UpdateRepositoryDescriptionWithContext method.
// It will increment the count of requests made to UpdateRepositoryDescription.
func (c *CodeCommit) UpdateRepositoryDescriptionWithContext(ctx aws.Context, input *codecommit.UpdateRepositoryDescriptionInput, opts ...request.Option) (*codecommit.UpdateRepositoryDescriptionOutput, error) {
	c.inc("UpdateRepositoryDescription")
	return c.svc.UpdateRepositoryDescriptionWithContext(ctx, input, opts...)
}

// UpdateRepositoryNameRequest is a passthrough to the underlying UpdateRepositoryNameRequest.
// It will increment the count of requests made to UpdateRepositoryName.
func (c *CodeCommit) UpdateRepositoryNameRequest(input *codecommit.UpdateRepositoryNameInput) (req *request.Request, output *codecommit.UpdateRepositoryNameOutput) {
	c.inc("UpdateRepositoryName")
	return c.svc.UpdateRepositoryNameRequest(input)
}

// UpdateRepositoryName is a passthrough to the underlying UpdateRepositoryName method.
// It will increment the count of requests made to UpdateRepositoryName.
func (c *CodeCommit) UpdateRepositoryName(input *codecommit.UpdateRepositoryNameInput) (*codecommit.UpdateRepositoryNameOutput, error) {
	c.inc("UpdateRepositoryName")
	return c.svc.UpdateRepositoryName(input)
}

// UpdateRepositoryNameWithContext is a passthrough to the underlying UpdateRepositoryNameWithContext method.
// It will increment the count of requests made to UpdateRepositoryName.
func (c *CodeCommit) UpdateRepositoryNameWithContext(ctx aws.Context, input *codecommit.UpdateRepositoryNameInput, opts ...request.Option) (*codecommit.UpdateRepositoryNameOutput, error) {
	c.inc("UpdateRepositoryName")
	return c.svc.UpdateRepositoryNameWithContext(ctx, input, opts...)
}
