// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package dynamodbcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/dynamodb"
)

// BatchGetItemRequest is a passthrough to the underlying BatchGetItemRequest.
// It will increment the count of requests made to BatchGetItem.
func (c *DynamoDB) BatchGetItemRequest(input *dynamodb.BatchGetItemInput) (req *request.Request, output *dynamodb.BatchGetItemOutput) {
	c.inc("BatchGetItem")
	return c.svc.BatchGetItemRequest(input)
}

// BatchGetItem is a passthrough to the underlying BatchGetItem method.
// It will increment the count of requests made to BatchGetItem.
func (c *DynamoDB) BatchGetItem(input *dynamodb.BatchGetItemInput) (*dynamodb.BatchGetItemOutput, error) {
	c.inc("BatchGetItem")
	return c.svc.BatchGetItem(input)
}

// BatchGetItemWithContext is a passthrough to the underlying BatchGetItemWithContext method.
// It will increment the count of requests made to BatchGetItem.
func (c *DynamoDB) BatchGetItemWithContext(ctx aws.Context, input *dynamodb.BatchGetItemInput, opts ...request.Option) (*dynamodb.BatchGetItemOutput, error) {
	c.inc("BatchGetItem")
	return c.svc.BatchGetItemWithContext(ctx, input, opts...)
}

// BatchGetItemPages is a passthrough to the underlying BatchGetItemPages method.
// It will increment the count of requests made to BatchGetItem on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use BatchGetItemPagesWithContext to avoid this.
func (c *DynamoDB) BatchGetItemPages(input *dynamodb.BatchGetItemInput, fn func(*dynamodb.BatchGetItemOutput, bool) bool) error {
	wrappedFn := func(page *dynamodb.BatchGetItemOutput, lastPage bool) bool {
		c.inc("BatchGetItem")
		return fn(page, lastPage)
	}
	return c.svc.BatchGetItemPages(input, wrappedFn)
}

// BatchGetItemPagesWithContext is a passthrough to the underlying BatchGetItemPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to BatchGetItem when applied to the request.
func (c *DynamoDB) BatchGetItemPagesWithContext(ctx aws.Context, input *dynamodb.BatchGetItemInput, fn func(*dynamodb.BatchGetItemOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("BatchGetItem"))
	return c.svc.BatchGetItemPagesWithContext(ctx, input, fn, opts...)
}

// BatchWriteItemRequest is a passthrough to the underlying BatchWriteItemRequest.
// It will increment the count of requests made to BatchWriteItem.
func (c *DynamoDB) BatchWriteItemRequest(input *dynamodb.BatchWriteItemInput) (req *request.Request, output *dynamodb.BatchWriteItemOutput) {
	c.inc("BatchWriteItem")
	return c.svc.BatchWriteItemRequest(input)
}

// BatchWriteItem is a passthrough to the underlying BatchWriteItem method.
// It will increment the count of requests made to BatchWriteItem.
func (c *DynamoDB) BatchWriteItem(input *dynamodb.BatchWriteItemInput) (*dynamodb.BatchWriteItemOutput, error) {
	c.inc("BatchWriteItem")
	return c.svc.BatchWriteItem(input)
}

// BatchWriteItemWithContext is a passthrough to the underlying BatchWriteItemWithContext method.
// It will increment the count of requests made to BatchWriteItem.
func (c *DynamoDB) BatchWriteItemWithContext(ctx aws.Context, input *dynamodb.BatchWriteItemInput, opts ...request.Option) (*dynamodb.BatchWriteItemOutput, error) {
	c.inc("BatchWriteItem")
	return c.svc.BatchWriteItemWithContext(ctx, input, opts...)
}

// CreateBackupRequest is a passthrough to the underlying CreateBackupRequest.
// It will increment the count of requests made to CreateBackup.
func (c *DynamoDB) CreateBackupRequest(input *dynamodb.CreateBackupInput) (req *request.Request, output *dynamodb.CreateBackupOutput) {
	c.inc("CreateBackup")
	return c.svc.CreateBackupRequest(input)
}

// CreateBackup is a passthrough to the underlying CreateBackup method.
// It will increment the count of requests made to CreateBackup.
func (c *DynamoDB) CreateBackup(input *dynamodb.CreateBackupInput) (*dynamodb.CreateBackupOutput, error) {
	c.inc("CreateBackup")
	return c.svc.CreateBackup(input)
}

// CreateBackupWithContext is a passthrough to the underlying CreateBackupWithContext method.
// It will increment the count of requests made to CreateBackup.
func (c *DynamoDB) CreateBackupWithContext(ctx aws.Context, input *dynamodb.CreateBackupInput, opts ...request.Option) (*dynamodb.CreateBackupOutput, error) {
	c.inc("CreateBackup")
	return c.svc.CreateBackupWithContext(ctx, input, opts...)
}

// CreateGlobalTableRequest is a passthrough to the underlying CreateGlobalTableRequest.
// It will increment the count of requests made to CreateGlobalTable.
func (c *DynamoDB) CreateGlobalTableRequest(input *dynamodb.CreateGlobalTableInput) (req *request.Request, output *dynamodb.CreateGlobalTableOutput) {
	c.inc("CreateGlobalTable")
	return c.svc.CreateGlobalTableRequest(input)
}

// CreateGlobalTable is a passthrough to the underlying CreateGlobalTable method.
// It will increment the count of requests made to CreateGlobalTable.
func (c *DynamoDB) CreateGlobalTable(input *dynamodb.CreateGlobalTableInput) (*dynamodb.CreateGlobalTableOutput, error) {
	c.inc("CreateGlobalTable")
	return c.svc.CreateGlobalTable(input)
}

// CreateGlobalTableWithContext is a passthrough to the underlying CreateGlobalTableWithContext method.
// It will increment the count of requests made to CreateGlobalTable.
func (c *DynamoDB) CreateGlobalTableWithContext(ctx aws.Context, input *dynamodb.CreateGlobalTableInput, opts ...request.Option) (*dynamodb.CreateGlobalTableOutput, error) {
	c.inc("CreateGlobalTable")
	return c.svc.CreateGlobalTableWithContext(ctx, input, opts...)
}

// CreateTableRequest is a passthrough to the underlying CreateTableRequest.
// It will increment the count of requests made to CreateTable.
func (c *DynamoDB) CreateTableRequest(input *dynamodb.CreateTableInput) (req *request.Request, output *dynamodb.CreateTableOutput) {
	c.inc("CreateTable")
	return c.svc.CreateTableRequest(input)
}

// CreateTable is a passthrough to the underlying CreateTable method.
// It will increment the count of requests made to CreateTable.
func (c *DynamoDB) CreateTable(input *dynamodb.CreateTableInput) (*dynamodb.CreateTableOutput, error) {
	c.inc("CreateTable")
	return c.svc.CreateTable(input)
}

// CreateTableWithContext is a passthrough to the underlying CreateTableWithContext method.
// It will increment the count of requests made to CreateTable.
func (c *DynamoDB) CreateTableWithContext(ctx aws.Context, input *dynamodb.CreateTableInput, opts ...request.Option) (*dynamodb.CreateTableOutput, error) {
	c.inc("CreateTable")
	return c.svc.CreateTableWithContext(ctx, input, opts...)
}

// DeleteBackupRequest is a passthrough to the underlying DeleteBackupRequest.
// It will increment the count of requests made to DeleteBackup.
func (c *DynamoDB) DeleteBackupRequest(input *dynamodb.DeleteBackupInput) (req *request.Request, output *dynamodb.DeleteBackupOutput) {
	c.inc("DeleteBackup")
	return c.svc.DeleteBackupRequest(input)
}

// DeleteBackup is a passthrough to the underlying DeleteBackup method.
// It will increment the count of requests made to DeleteBackup.
func (c *DynamoDB) DeleteBackup(input *dynamodb.DeleteBackupInput) (*dynamodb.DeleteBackupOutput, error) {
	c.inc("DeleteBackup")
	return c.svc.DeleteBackup(input)
}

// DeleteBackupWithContext is a passthrough to the underlying DeleteBackupWithContext method.
// It will increment the count of requests made to DeleteBackup.
func (c *DynamoDB) DeleteBackupWithContext(ctx aws.Context, input *dynamodb.DeleteBackupInput, opts ...request.Option) (*dynamodb.DeleteBackupOutput, error) {
	c.inc("DeleteBackup")
	return c.svc.DeleteBackupWithContext(ctx, input, opts...)
}

// DeleteItemRequest is a passthrough to the underlying DeleteItemRequest.
// It will increment the count of requests made to DeleteItem.
func (c *DynamoDB) DeleteItemRequest(input *dynamodb.DeleteItemInput) (req *request.Request, output *dynamodb.DeleteItemOutput) {
	c.inc("DeleteItem")
	return c.svc.DeleteItemRequest(input)
}

// DeleteItem is a passthrough to the underlying DeleteItem method.
// It will increment the count of requests made to DeleteItem.
func (c *DynamoDB) DeleteItem(input *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error) {
	c.inc("DeleteItem")
	return c.svc.DeleteItem(input)
}

// DeleteItemWithContext is a passthrough to the underlying DeleteItemWithContext method.
// It will increment the count of requests made to DeleteItem.
func (c *DynamoDB) DeleteItemWithContext(ctx aws.Context, input *dynamodb.DeleteItemInput, opts ...request.Option) (*dynamodb.DeleteItemOutput, error) {
	c.inc("DeleteItem")
	return c.svc.DeleteItemWithContext(ctx, input, opts...)
}

// DeleteTableRequest is a passthrough to the underlying DeleteTableRequest.
// It will increment the count of requests made to DeleteTable.
func (c *DynamoDB) DeleteTableRequest(input *dynamodb.DeleteTableInput) (req *request.Request, output *dynamodb.DeleteTableOutput) {
	c.inc("DeleteTable")
	return c.svc.DeleteTableRequest(input)
}

// DeleteTable is a passthrough to the underlying DeleteTable method.
// It will increment the count of requests made to DeleteTable.
func (c *DynamoDB) DeleteTable(input *dynamodb.DeleteTableInput) (*dynamodb.DeleteTableOutput, error) {
	c.inc("DeleteTable")
	return c.svc.DeleteTable(input)
}

// DeleteTableWithContext is a passthrough to the underlying DeleteTableWithContext method.
// It will increment the count of requests made to DeleteTable.
func (c *DynamoDB) DeleteTableWithContext(ctx aws.Context, input *dynamodb.DeleteTableInput, opts ...request.Option) (*dynamodb.DeleteTableOutput, error) {
	c.inc("DeleteTable")
	return c.svc.DeleteTableWithContext(ctx, input, opts...)
}

// DescribeBackupRequest is a passthrough to the underlying DescribeBackupRequest.
// It will increment the count of requests made to DescribeBackup.
func (c *DynamoDB) DescribeBackupRequest(input *dynamodb.DescribeBackupInput) (req *request.Request, output *dynamodb.DescribeBackupOutput) {
	c.inc("DescribeBackup")
	return c.svc.DescribeBackupRequest(input)
}

// DescribeBackup is a passthrough to the underlying DescribeBackup method.
// It will increment the count of requests made to DescribeBackup.
func (c *DynamoDB) DescribeBackup(input *dynamodb.DescribeBackupInput) (*dynamodb.DescribeBackupOutput, error) {
	c.inc("DescribeBackup")
	return c.svc.DescribeBackup(input)
}

// DescribeBackupWithContext is a passthrough to the underlying DescribeBackupWithContext method.
// It will increment the count of requests made to DescribeBackup.
func (c *DynamoDB) DescribeBackupWithContext(ctx aws.Context, input *dynamodb.DescribeBackupInput, opts ...request.Option) (*dynamodb.DescribeBackupOutput, error) {
	c.inc("DescribeBackup")
	return c.svc.DescribeBackupWithContext(ctx, input, opts...)
}

// DescribeContinuousBackupsRequest is a passthrough to the underlying DescribeContinuousBackupsRequest.
// It will increment the count of requests made to DescribeContinuousBackups.
func (c *DynamoDB) DescribeContinuousBackupsRequest(input *dynamodb.DescribeContinuousBackupsInput) (req *request.Request, output *dynamodb.DescribeContinuousBackupsOutput) {
	c.inc("DescribeContinuousBackups")
	return c.svc.DescribeContinuousBackupsRequest(input)
}

// DescribeContinuousBackups is a passthrough to the underlying DescribeContinuousBackups method.
// It will increment the count of requests made to DescribeContinuousBackups.
func (c *DynamoDB) DescribeContinuousBackups(input *dynamodb.DescribeContinuousBackupsInput) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	c.inc("DescribeContinuousBackups")
	return c.svc.DescribeContinuousBackups(input)
}

// DescribeContinuousBackupsWithContext is a passthrough to the underlying DescribeContinuousBackupsWithContext method.
// It will increment the count of requests made to DescribeContinuousBackups.
func (c *DynamoDB) DescribeContinuousBackupsWithContext(ctx aws.Context, input *dynamodb.DescribeContinuousBackupsInput, opts ...request.Option) (*dynamodb.DescribeContinuousBackupsOutput, error) {
	c.inc("DescribeContinuousBackups")
	return c.svc.DescribeContinuousBackupsWithContext(ctx, input, opts...)
}

// DescribeGlobalTableRequest is a passthrough to the underlying DescribeGlobalTableRequest.
// It will increment the count of requests made to DescribeGlobalTable.
func (c *DynamoDB) DescribeGlobalTableRequest(input *dynamodb.DescribeGlobalTableInput) (req *request.Request, output *dynamodb.DescribeGlobalTableOutput) {
	c.inc("DescribeGlobalTable")
	return c.svc.DescribeGlobalTableRequest(input)
}

// DescribeGlobalTable is a passthrough to the underlying DescribeGlobalTable method.
// It will increment the count of requests made to DescribeGlobalTable.
func (c *DynamoDB) DescribeGlobalTable(input *dynamodb.DescribeGlobalTableInput) (*dynamodb.DescribeGlobalTableOutput, error) {
	c.inc("DescribeGlobalTable")
	return c.svc.DescribeGlobalTable(input)
}

// DescribeGlobalTableWithContext is a passthrough to the underlying DescribeGlobalTableWithContext method.
// It will increment the count of requests made to DescribeGlobalTable.
func (c *DynamoDB) DescribeGlobalTableWithContext(ctx aws.Context, input *dynamodb.DescribeGlobalTableInput, opts ...request.Option) (*dynamodb.DescribeGlobalTableOutput, error) {
	c.inc("DescribeGlobalTable")
	return c.svc.DescribeGlobalTableWithContext(ctx, input, opts...)
}

// DescribeLimitsRequest is a passthrough to the underlying DescribeLimitsRequest.
// It will increment the count of requests made to DescribeLimits.
func (c *DynamoDB) DescribeLimitsRequest(input *dynamodb.DescribeLimitsInput) (req *request.Request, output *dynamodb.DescribeLimitsOutput) {
	c.inc("DescribeLimits")
	return c.svc.DescribeLimitsRequest(input)
}

// DescribeLimits is a passthrough to the underlying DescribeLimits method.
// It will increment the count of requests made to DescribeLimits.
func (c *DynamoDB) DescribeLimits(input *dynamodb.DescribeLimitsInput) (*dynamodb.DescribeLimitsOutput, error) {
	c.inc("DescribeLimits")
	return c.svc.DescribeLimits(input)
}

// DescribeLimitsWithContext is a passthrough to the underlying DescribeLimitsWithContext method.
// It will increment the count of requests made to DescribeLimits.
func (c *DynamoDB) DescribeLimitsWithContext(ctx aws.Context, input *dynamodb.DescribeLimitsInput, opts ...request.Option) (*dynamodb.DescribeLimitsOutput, error) {
	c.inc("DescribeLimits")
	return c.svc.DescribeLimitsWithContext(ctx, input, opts...)
}

// DescribeTableRequest is a passthrough to the underlying DescribeTableRequest.
// It will increment the count of requests made to DescribeTable.
func (c *DynamoDB) DescribeTableRequest(input *dynamodb.DescribeTableInput) (req *request.Request, output *dynamodb.DescribeTableOutput) {
	c.inc("DescribeTable")
	return c.svc.DescribeTableRequest(input)
}

// DescribeTable is a passthrough to the underlying DescribeTable method.
// It will increment the count of requests made to DescribeTable.
func (c *DynamoDB) DescribeTable(input *dynamodb.DescribeTableInput) (*dynamodb.DescribeTableOutput, error) {
	c.inc("DescribeTable")
	return c.svc.DescribeTable(input)
}

// DescribeTableWithContext is a passthrough to the underlying DescribeTableWithContext method.
// It will increment the count of requests made to DescribeTable.
func (c *DynamoDB) DescribeTableWithContext(ctx aws.Context, input *dynamodb.DescribeTableInput, opts ...request.Option) (*dynamodb.DescribeTableOutput, error) {
	c.inc("DescribeTable")
	return c.svc.DescribeTableWithContext(ctx, input, opts...)
}

// DescribeTimeToLiveRequest is a passthrough to the underlying DescribeTimeToLiveRequest.
// It will increment the count of requests made to DescribeTimeToLive.
func (c *DynamoDB) DescribeTimeToLiveRequest(input *dynamodb.DescribeTimeToLiveInput) (req *request.Request, output *dynamodb.DescribeTimeToLiveOutput) {
	c.inc("DescribeTimeToLive")
	return c.svc.DescribeTimeToLiveRequest(input)
}

// DescribeTimeToLive is a passthrough to the underlying DescribeTimeToLive method.
// It will increment the count of requests made to DescribeTimeToLive.
func (c *DynamoDB) DescribeTimeToLive(input *dynamodb.DescribeTimeToLiveInput) (*dynamodb.DescribeTimeToLiveOutput, error) {
	c.inc("DescribeTimeToLive")
	return c.svc.DescribeTimeToLive(input)
}

// DescribeTimeToLiveWithContext is a passthrough to the underlying DescribeTimeToLiveWithContext method.
// It will increment the count of requests made to DescribeTimeToLive.
func (c *DynamoDB) DescribeTimeToLiveWithContext(ctx aws.Context, input *dynamodb.DescribeTimeToLiveInput, opts ...request.Option) (*dynamodb.DescribeTimeToLiveOutput, error) {
	c.inc("DescribeTimeToLive")
	return c.svc.DescribeTimeToLiveWithContext(ctx, input, opts...)
}

// GetItemRequest is a passthrough to the underlying GetItemRequest.
// It will increment the count of requests made to GetItem.
func (c *DynamoDB) GetItemRequest(input *dynamodb.GetItemInput) (req *request.Request, output *dynamodb.GetItemOutput) {
	c.inc("GetItem")
	return c.svc.GetItemRequest(input)
}

// GetItem is a passthrough to the underlying GetItem method.
// It will increment the count of requests made to GetItem.
func (c *DynamoDB) GetItem(input *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	c.inc("GetItem")
	return c.svc.GetItem(input)
}

// GetItemWithContext is a passthrough to the underlying GetItemWithContext method.
// It will increment the count of requests made to GetItem.
func (c *DynamoDB) GetItemWithContext(ctx aws.Context, input *dynamodb.GetItemInput, opts ...request.Option) (*dynamodb.GetItemOutput, error) {
	c.inc("GetItem")
	return c.svc.GetItemWithContext(ctx, input, opts...)
}

// ListBackupsRequest is a passthrough to the underlying ListBackupsRequest.
// It will increment the count of requests made to ListBackups.
func (c *DynamoDB) ListBackupsRequest(input *dynamodb.ListBackupsInput) (req *request.Request, output *dynamodb.ListBackupsOutput) {
	c.inc("ListBackups")
	return c.svc.ListBackupsRequest(input)
}

// ListBackups is a passthrough to the underlying ListBackups method.
// It will increment the count of requests made to ListBackups.
func (c *DynamoDB) ListBackups(input *dynamodb.ListBackupsInput) (*dynamodb.ListBackupsOutput, error) {
	c.inc("ListBackups")
	return c.svc.ListBackups(input)
}

// ListBackupsWithContext is a passthrough to the underlying ListBackupsWithContext method.
// It will increment the count of requests made to ListBackups.
func (c *DynamoDB) ListBackupsWithContext(ctx aws.Context, input *dynamodb.ListBackupsInput, opts ...request.Option) (*dynamodb.ListBackupsOutput, error) {
	c.inc("ListBackups")
	return c.svc.ListBackupsWithContext(ctx, input, opts...)
}

// ListGlobalTablesRequest is a passthrough to the underlying ListGlobalTablesRequest.
// It will increment the count of requests made to ListGlobalTables.
func (c *DynamoDB) ListGlobalTablesRequest(input *dynamodb.ListGlobalTablesInput) (req *request.Request, output *dynamodb.ListGlobalTablesOutput) {
	c.inc("ListGlobalTables")
	return c.svc.ListGlobalTablesRequest(input)
}

// ListGlobalTables is a passthrough to the underlying ListGlobalTables method.
// It will increment the count of requests made to ListGlobalTables.
func (c *DynamoDB) ListGlobalTables(input *dynamodb.ListGlobalTablesInput) (*dynamodb.ListGlobalTablesOutput, error) {
	c.inc("ListGlobalTables")
	return c.svc.ListGlobalTables(input)
}

// ListGlobalTablesWithContext is a passthrough to the underlying ListGlobalTablesWithContext method.
// It will increment the count of requests made to ListGlobalTables.
func (c *DynamoDB) ListGlobalTablesWithContext(ctx aws.Context, input *dynamodb.ListGlobalTablesInput, opts ...request.Option) (*dynamodb.ListGlobalTablesOutput, error) {
	c.inc("ListGlobalTables")
	return c.svc.ListGlobalTablesWithContext(ctx, input, opts...)
}

// ListTablesRequest is a passthrough to the underlying ListTablesRequest.
// It will increment the count of requests made to ListTables.
func (c *DynamoDB) ListTablesRequest(input *dynamodb.ListTablesInput) (req *request.Request, output *dynamodb.ListTablesOutput) {
	c.inc("ListTables")
	return c.svc.ListTablesRequest(input)
}

// ListTables is a passthrough to the underlying ListTables method.
// It will increment the count of requests made to ListTables.
func (c *DynamoDB) ListTables(input *dynamodb.ListTablesInput) (*dynamodb.ListTablesOutput, error) {
	c.inc("ListTables")
	return c.svc.ListTables(input)
}

// ListTablesWithContext is a passthrough to the underlying ListTablesWithContext method.
// It will increment the count of requests made to ListTables.
func (c *DynamoDB) ListTablesWithContext(ctx aws.Context, input *dynamodb.ListTablesInput, opts ...request.Option) (*dynamodb.ListTablesOutput, error) {
	c.inc("ListTables")
	return c.svc.ListTablesWithContext(ctx, input, opts...)
}

// ListTablesPages is a passthrough to the underlying ListTablesPages method.
// It will increment the count of requests made to ListTables on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListTablesPagesWithContext to avoid this.
func (c *DynamoDB) ListTablesPages(input *dynamodb.ListTablesInput, fn func(*dynamodb.ListTablesOutput, bool) bool) error {
	wrappedFn := func(page *dynamodb.ListTablesOutput, lastPage bool) bool {
		c.inc("ListTables")
		return fn(page, lastPage)
	}
	return c.svc.ListTablesPages(input, wrappedFn)
}

// ListTablesPagesWithContext is a passthrough to the underlying ListTablesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListTables when applied to the request.
func (c *DynamoDB) ListTablesPagesWithContext(ctx aws.Context, input *dynamodb.ListTablesInput, fn func(*dynamodb.ListTablesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListTables"))
	return c.svc.ListTablesPagesWithContext(ctx, input, fn, opts...)
}

// ListTagsOfResourceRequest is a passthrough to the underlying ListTagsOfResourceRequest.
// It will increment the count of requests made to ListTagsOfResource.
func (c *DynamoDB) ListTagsOfResourceRequest(input *dynamodb.ListTagsOfResourceInput) (req *request.Request, output *dynamodb.ListTagsOfResourceOutput) {
	c.inc("ListTagsOfResource")
	return c.svc.ListTagsOfResourceRequest(input)
}

// ListTagsOfResource is a passthrough to the underlying ListTagsOfResource method.
// It will increment the count of requests made to ListTagsOfResource.
func (c *DynamoDB) ListTagsOfResource(input *dynamodb.ListTagsOfResourceInput) (*dynamodb.ListTagsOfResourceOutput, error) {
	c.inc("ListTagsOfResource")
	return c.svc.ListTagsOfResource(input)
}

// ListTagsOfResourceWithContext is a passthrough to the underlying ListTagsOfResourceWithContext method.
// It will increment the count of requests made to ListTagsOfResource.
func (c *DynamoDB) ListTagsOfResourceWithContext(ctx aws.Context, input *dynamodb.ListTagsOfResourceInput, opts ...request.Option) (*dynamodb.ListTagsOfResourceOutput, error) {
	c.inc("ListTagsOfResource")
	return c.svc.ListTagsOfResourceWithContext(ctx, input, opts...)
}

// PutItemRequest is a passthrough to the underlying PutItemRequest.
// It will increment the count of requests made to PutItem.
func (c *DynamoDB) PutItemRequest(input *dynamodb.PutItemInput) (req *request.Request, output *dynamodb.PutItemOutput) {
	c.inc("PutItem")
	return c.svc.PutItemRequest(input)
}

// PutItem is a passthrough to the underlying PutItem method.
// It will increment the count of requests made to PutItem.
func (c *DynamoDB) PutItem(input *dynamodb.PutItemInput) (*dynamodb.PutItemOutput, error) {
	c.inc("PutItem")
	return c.svc.PutItem(input)
}

// PutItemWithContext is a passthrough to the underlying PutItemWithContext method.
// It will increment the count of requests made to PutItem.
func (c *DynamoDB) PutItemWithContext(ctx aws.Context, input *dynamodb.PutItemInput, opts ...request.Option) (*dynamodb.PutItemOutput, error) {
	c.inc("PutItem")
	return c.svc.PutItemWithContext(ctx, input, opts...)
}

// QueryRequest is a passthrough to the underlying QueryRequest.
// It will increment the count of requests made to Query.
func (c *DynamoDB) QueryRequest(input *dynamodb.QueryInput) (req *request.Request, output *dynamodb.QueryOutput) {
	c.inc("Query")
	return c.svc.QueryRequest(input)
}

// Query is a passthrough to the underlying Query method.
// It will increment the count of requests made to Query.
func (c *DynamoDB) Query(input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) {
	c.inc("Query")
	return c.svc.Query(input)
}

// QueryWithContext is a passthrough to the underlying QueryWithContext method.
// It will increment the count of requests made to Query.
func (c *DynamoDB) QueryWithContext(ctx aws.Context, input *dynamodb.QueryInput, opts ...request.Option) (*dynamodb.QueryOutput, error) {
	c.inc("Query")
	return c.svc.QueryWithContext(ctx, input, opts...)
}

// QueryPages is a passthrough to the underlying QueryPages method.
// It will increment the count of requests made to Query on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use QueryPagesWithContext to avoid this.
func (c *DynamoDB) QueryPages(input *dynamodb.QueryInput, fn func(*dynamodb.QueryOutput, bool) bool) error {
	wrappedFn := func(page *dynamodb.QueryOutput, lastPage bool) bool {
		c.inc("Query")
		return fn(page, lastPage)
	}
	return c.svc.QueryPages(input, wrappedFn)
}

// QueryPagesWithContext is a passthrough to the underlying QueryPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to Query when applied to the request.
func (c *DynamoDB) QueryPagesWithContext(ctx aws.Context, input *dynamodb.QueryInput, fn func(*dynamodb.QueryOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("Query"))
	return c.svc.QueryPagesWithContext(ctx, input, fn, opts...)
}

// RestoreTableFromBackupRequest is a passthrough to the underlying RestoreTableFromBackupRequest.
// It will increment the count of requests made to RestoreTableFromBackup.
func (c *DynamoDB) RestoreTableFromBackupRequest(input *dynamodb.RestoreTableFromBackupInput) (req *request.Request, output *dynamodb.RestoreTableFromBackupOutput) {
	c.inc("RestoreTableFromBackup")
	return c.svc.RestoreTableFromBackupRequest(input)
}

// RestoreTableFromBackup is a passthrough to the underlying RestoreTableFromBackup method.
// It will increment the count of requests made to RestoreTableFromBackup.
func (c *DynamoDB) RestoreTableFromBackup(input *dynamodb.RestoreTableFromBackupInput) (*dynamodb.RestoreTableFromBackupOutput, error) {
	c.inc("RestoreTableFromBackup")
	return c.svc.RestoreTableFromBackup(input)
}

// RestoreTableFromBackupWithContext is a passthrough to the underlying RestoreTableFromBackupWithContext method.
// It will increment the count of requests made to RestoreTableFromBackup.
func (c *DynamoDB) RestoreTableFromBackupWithContext(ctx aws.Context, input *dynamodb.RestoreTableFromBackupInput, opts ...request.Option) (*dynamodb.RestoreTableFromBackupOutput, error) {
	c.inc("RestoreTableFromBackup")
	return c.svc.RestoreTableFromBackupWithContext(ctx, input, opts...)
}

// ScanRequest is a passthrough to the underlying ScanRequest.
// It will increment the count of requests made to Scan.
func (c *DynamoDB) ScanRequest(input *dynamodb.ScanInput) (req *request.Request, output *dynamodb.ScanOutput) {
	c.inc("Scan")
	return c.svc.ScanRequest(input)
}

// Scan is a passthrough to the underlying Scan method.
// It will increment the count of requests made to Scan.
func (c *DynamoDB) Scan(input *dynamodb.ScanInput) (*dynamodb.ScanOutput, error) {
	c.inc("Scan")
	return c.svc.Scan(input)
}

// ScanWithContext is a passthrough to the underlying ScanWithContext method.
// It will increment the count of requests made to Scan.
func (c *DynamoDB) ScanWithContext(ctx aws.Context, input *dynamodb.ScanInput, opts ...request.Option) (*dynamodb.ScanOutput, error) {
	c.inc("Scan")
	return c.svc.ScanWithContext(ctx, input, opts...)
}

// ScanPages is a passthrough to the underlying ScanPages method.
// It will increment the count of requests made to Scan on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ScanPagesWithContext to avoid this.
func (c *DynamoDB) ScanPages(input *dynamodb.ScanInput, fn func(*dynamodb.ScanOutput, bool) bool) error {
	wrappedFn := func(page *dynamodb.ScanOutput, lastPage bool) bool {
		c.inc("Scan")
		return fn(page, lastPage)
	}
	return c.svc.ScanPages(input, wrappedFn)
}

// ScanPagesWithContext is a passthrough to the underlying ScanPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to Scan when applied to the request.
func (c *DynamoDB) ScanPagesWithContext(ctx aws.Context, input *dynamodb.ScanInput, fn func(*dynamodb.ScanOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("Scan"))
	return c.svc.ScanPagesWithContext(ctx, input, fn, opts...)
}

// TagResourceRequest is a passthrough to the underlying TagResourceRequest.
// It will increment the count of requests made to TagResource.
func (c *DynamoDB) TagResourceRequest(input *dynamodb.TagResourceInput) (req *request.Request, output *dynamodb.TagResourceOutput) {
	c.inc("TagResource")
	return c.svc.TagResourceRequest(input)
}

// TagResource is a passthrough to the underlying TagResource method.
// It will increment the count of requests made to TagResource.
func (c *DynamoDB) TagResource(input *dynamodb.TagResourceInput) (*dynamodb.TagResourceOutput, error) {
	c.inc("TagResource")
	return c.svc.TagResource(input)
}

// TagResourceWithContext is a passthrough to the underlying TagResourceWithContext method.
// It will increment the count of requests made to TagResource.
func (c *DynamoDB) TagResourceWithContext(ctx aws.Context, input *dynamodb.TagResourceInput, opts ...request.Option) (*dynamodb.TagResourceOutput, error) {
	c.inc("TagResource")
	return c.svc.TagResourceWithContext(ctx, input, opts...)
}

// UntagResourceRequest is a passthrough to the underlying UntagResourceRequest.
// It will increment the count of requests made to UntagResource.
func (c *DynamoDB) UntagResourceRequest(input *dynamodb.UntagResourceInput) (req *request.Request, output *dynamodb.UntagResourceOutput) {
	c.inc("UntagResource")
	return c.svc.UntagResourceRequest(input)
}

// UntagResource is a passthrough to the underlying UntagResource method.
// It will increment the count of requests made to UntagResource.
func (c *DynamoDB) UntagResource(input *dynamodb.UntagResourceInput) (*dynamodb.UntagResourceOutput, error) {
	c.inc("UntagResource")
	return c.svc.UntagResource(input)
}

// UntagResourceWithContext is a passthrough to the underlying UntagResourceWithContext method.
// It will increment the count of requests made to UntagResource.
func (c *DynamoDB) UntagResourceWithContext(ctx aws.Context, input *dynamodb.UntagResourceInput, opts ...request.Option) (*dynamodb.UntagResourceOutput, error) {
	c.inc("UntagResource")
	return c.svc.UntagResourceWithContext(ctx, input, opts...)
}

// UpdateGlobalTableRequest is a passthrough to the underlying UpdateGlobalTableRequest.
// It will increment the count of requests made to UpdateGlobalTable.
func (c *DynamoDB) UpdateGlobalTableRequest(input *dynamodb.UpdateGlobalTableInput) (req *request.Request, output *dynamodb.UpdateGlobalTableOutput) {
	c.inc("UpdateGlobalTable")
	return c.svc.UpdateGlobalTableRequest(input)
}

// UpdateGlobalTable is a passthrough to the underlying UpdateGlobalTable method.
// It will increment the count of requests made to UpdateGlobalTable.
func (c *DynamoDB) UpdateGlobalTable(input *dynamodb.UpdateGlobalTableInput) (*dynamodb.UpdateGlobalTableOutput, error) {
	c.inc("UpdateGlobalTable")
	return c.svc.UpdateGlobalTable(input)
}

// UpdateGlobalTableWithContext is a passthrough to the underlying UpdateGlobalTableWithContext method.
// It will increment the count of requests made to UpdateGlobalTable.
func (c *DynamoDB) UpdateGlobalTableWithContext(ctx aws.Context, input *dynamodb.UpdateGlobalTableInput, opts ...request.Option) (*dynamodb.UpdateGlobalTableOutput, error) {
	c.inc("UpdateGlobalTable")
	return c.svc.UpdateGlobalTableWithContext(ctx, input, opts...)
}

// UpdateItemRequest is a passthrough to the underlying UpdateItemRequest.
// It will increment the count of requests made to UpdateItem.
func (c *DynamoDB) UpdateItemRequest(input *dynamodb.UpdateItemInput) (req *request.Request, output *dynamodb.UpdateItemOutput) {
	c.inc("UpdateItem")
	return c.svc.UpdateItemRequest(input)
}

// UpdateItem is a passthrough to the underlying UpdateItem method.
// It will increment the count of requests made to UpdateItem.
func (c *DynamoDB) UpdateItem(input *dynamodb.UpdateItemInput) (*dynamodb.UpdateItemOutput, error) {
	c.inc("UpdateItem")
	return c.svc.UpdateItem(input)
}

// UpdateItemWithContext is a passthrough to the underlying UpdateItemWithContext method.
// It will increment the count of requests made to UpdateItem.
func (c *DynamoDB) UpdateItemWithContext(ctx aws.Context, input *dynamodb.UpdateItemInput, opts ...request.Option) (*dynamodb.UpdateItemOutput, error) {
	c.inc("UpdateItem")
	return c.svc.UpdateItemWithContext(ctx, input, opts...)
}

// UpdateTableRequest is a passthrough to the underlying UpdateTableRequest.
// It will increment the count of requests made to UpdateTable.
func (c *DynamoDB) UpdateTableRequest(input *dynamodb.UpdateTableInput) (req *request.Request, output *dynamodb.UpdateTableOutput) {
	c.inc("UpdateTable")
	return c.svc.UpdateTableRequest(input)
}

// UpdateTable is a passthrough to the underlying UpdateTable method.
// It will increment the count of requests made to UpdateTable.
func (c *DynamoDB) UpdateTable(input *dynamodb.UpdateTableInput) (*dynamodb.UpdateTableOutput, error) {
	c.inc("UpdateTable")
	return c.svc.UpdateTable(input)
}

// UpdateTableWithContext is a passthrough to the underlying UpdateTableWithContext method.
// It will increment the count of requests made to UpdateTable.
func (c *DynamoDB) UpdateTableWithContext(ctx aws.Context, input *dynamodb.UpdateTableInput, opts ...request.Option) (*dynamodb.UpdateTableOutput, error) {
	c.inc("UpdateTable")
	return c.svc.UpdateTableWithContext(ctx, input, opts...)
}

// UpdateTimeToLiveRequest is a passthrough to the underlying UpdateTimeToLiveRequest.
// It will increment the count of requests made to UpdateTimeToLive.
func (c *DynamoDB) UpdateTimeToLiveRequest(input *dynamodb.UpdateTimeToLiveInput) (req *request.Request, output *dynamodb.UpdateTimeToLiveOutput) {
	c.inc("UpdateTimeToLive")
	return c.svc.UpdateTimeToLiveRequest(input)
}

// UpdateTimeToLive is a passthrough to the underlying UpdateTimeToLive method.
// It will increment the count of requests made to UpdateTimeToLive.
func (c *DynamoDB) UpdateTimeToLive(input *dynamodb.UpdateTimeToLiveInput) (*dynamodb.UpdateTimeToLiveOutput, error) {
	c.inc("UpdateTimeToLive")
	return c.svc.UpdateTimeToLive(input)
}

// UpdateTimeToLiveWithContext is a passthrough to the underlying UpdateTimeToLiveWithContext method.
// It will increment the count of requests made to UpdateTimeToLive.
func (c *DynamoDB) UpdateTimeToLiveWithContext(ctx aws.Context, input *dynamodb.UpdateTimeToLiveInput, opts ...request.Option) (*dynamodb.UpdateTimeToLiveOutput, error) {
	c.inc("UpdateTimeToLive")
	return c.svc.UpdateTimeToLiveWithContext(ctx, input, opts...)
}
