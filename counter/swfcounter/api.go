// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package swfcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/swf"
)

// CountClosedWorkflowExecutionsRequest is a passthrough to the underlying CountClosedWorkflowExecutionsRequest.
// It will increment the count of requests made to CountClosedWorkflowExecutions.
func (c *SWF) CountClosedWorkflowExecutionsRequest(input *swf.CountClosedWorkflowExecutionsInput) (req *request.Request, output *swf.WorkflowExecutionCount) {
	c.inc("CountClosedWorkflowExecutions")
	return c.svc.CountClosedWorkflowExecutionsRequest(input)
}

// CountClosedWorkflowExecutions is a passthrough to the underlying CountClosedWorkflowExecutions method.
// It will increment the count of requests made to CountClosedWorkflowExecutions.
func (c *SWF) CountClosedWorkflowExecutions(input *swf.CountClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error) {
	c.inc("CountClosedWorkflowExecutions")
	return c.svc.CountClosedWorkflowExecutions(input)
}

// CountClosedWorkflowExecutionsWithContext is a passthrough to the underlying CountClosedWorkflowExecutionsWithContext method.
// It will increment the count of requests made to CountClosedWorkflowExecutions.
func (c *SWF) CountClosedWorkflowExecutionsWithContext(ctx aws.Context, input *swf.CountClosedWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionCount, error) {
	c.inc("CountClosedWorkflowExecutions")
	return c.svc.CountClosedWorkflowExecutionsWithContext(ctx, input, opts...)
}

// CountOpenWorkflowExecutionsRequest is a passthrough to the underlying CountOpenWorkflowExecutionsRequest.
// It will increment the count of requests made to CountOpenWorkflowExecutions.
func (c *SWF) CountOpenWorkflowExecutionsRequest(input *swf.CountOpenWorkflowExecutionsInput) (req *request.Request, output *swf.WorkflowExecutionCount) {
	c.inc("CountOpenWorkflowExecutions")
	return c.svc.CountOpenWorkflowExecutionsRequest(input)
}

// CountOpenWorkflowExecutions is a passthrough to the underlying CountOpenWorkflowExecutions method.
// It will increment the count of requests made to CountOpenWorkflowExecutions.
func (c *SWF) CountOpenWorkflowExecutions(input *swf.CountOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionCount, error) {
	c.inc("CountOpenWorkflowExecutions")
	return c.svc.CountOpenWorkflowExecutions(input)
}

// CountOpenWorkflowExecutionsWithContext is a passthrough to the underlying CountOpenWorkflowExecutionsWithContext method.
// It will increment the count of requests made to CountOpenWorkflowExecutions.
func (c *SWF) CountOpenWorkflowExecutionsWithContext(ctx aws.Context, input *swf.CountOpenWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionCount, error) {
	c.inc("CountOpenWorkflowExecutions")
	return c.svc.CountOpenWorkflowExecutionsWithContext(ctx, input, opts...)
}

// CountPendingActivityTasksRequest is a passthrough to the underlying CountPendingActivityTasksRequest.
// It will increment the count of requests made to CountPendingActivityTasks.
func (c *SWF) CountPendingActivityTasksRequest(input *swf.CountPendingActivityTasksInput) (req *request.Request, output *swf.PendingTaskCount) {
	c.inc("CountPendingActivityTasks")
	return c.svc.CountPendingActivityTasksRequest(input)
}

// CountPendingActivityTasks is a passthrough to the underlying CountPendingActivityTasks method.
// It will increment the count of requests made to CountPendingActivityTasks.
func (c *SWF) CountPendingActivityTasks(input *swf.CountPendingActivityTasksInput) (*swf.PendingTaskCount, error) {
	c.inc("CountPendingActivityTasks")
	return c.svc.CountPendingActivityTasks(input)
}

// CountPendingActivityTasksWithContext is a passthrough to the underlying CountPendingActivityTasksWithContext method.
// It will increment the count of requests made to CountPendingActivityTasks.
func (c *SWF) CountPendingActivityTasksWithContext(ctx aws.Context, input *swf.CountPendingActivityTasksInput, opts ...request.Option) (*swf.PendingTaskCount, error) {
	c.inc("CountPendingActivityTasks")
	return c.svc.CountPendingActivityTasksWithContext(ctx, input, opts...)
}

// CountPendingDecisionTasksRequest is a passthrough to the underlying CountPendingDecisionTasksRequest.
// It will increment the count of requests made to CountPendingDecisionTasks.
func (c *SWF) CountPendingDecisionTasksRequest(input *swf.CountPendingDecisionTasksInput) (req *request.Request, output *swf.PendingTaskCount) {
	c.inc("CountPendingDecisionTasks")
	return c.svc.CountPendingDecisionTasksRequest(input)
}

// CountPendingDecisionTasks is a passthrough to the underlying CountPendingDecisionTasks method.
// It will increment the count of requests made to CountPendingDecisionTasks.
func (c *SWF) CountPendingDecisionTasks(input *swf.CountPendingDecisionTasksInput) (*swf.PendingTaskCount, error) {
	c.inc("CountPendingDecisionTasks")
	return c.svc.CountPendingDecisionTasks(input)
}

// CountPendingDecisionTasksWithContext is a passthrough to the underlying CountPendingDecisionTasksWithContext method.
// It will increment the count of requests made to CountPendingDecisionTasks.
func (c *SWF) CountPendingDecisionTasksWithContext(ctx aws.Context, input *swf.CountPendingDecisionTasksInput, opts ...request.Option) (*swf.PendingTaskCount, error) {
	c.inc("CountPendingDecisionTasks")
	return c.svc.CountPendingDecisionTasksWithContext(ctx, input, opts...)
}

// DeprecateActivityTypeRequest is a passthrough to the underlying DeprecateActivityTypeRequest.
// It will increment the count of requests made to DeprecateActivityType.
func (c *SWF) DeprecateActivityTypeRequest(input *swf.DeprecateActivityTypeInput) (req *request.Request, output *swf.DeprecateActivityTypeOutput) {
	c.inc("DeprecateActivityType")
	return c.svc.DeprecateActivityTypeRequest(input)
}

// DeprecateActivityType is a passthrough to the underlying DeprecateActivityType method.
// It will increment the count of requests made to DeprecateActivityType.
func (c *SWF) DeprecateActivityType(input *swf.DeprecateActivityTypeInput) (*swf.DeprecateActivityTypeOutput, error) {
	c.inc("DeprecateActivityType")
	return c.svc.DeprecateActivityType(input)
}

// DeprecateActivityTypeWithContext is a passthrough to the underlying DeprecateActivityTypeWithContext method.
// It will increment the count of requests made to DeprecateActivityType.
func (c *SWF) DeprecateActivityTypeWithContext(ctx aws.Context, input *swf.DeprecateActivityTypeInput, opts ...request.Option) (*swf.DeprecateActivityTypeOutput, error) {
	c.inc("DeprecateActivityType")
	return c.svc.DeprecateActivityTypeWithContext(ctx, input, opts...)
}

// DeprecateDomainRequest is a passthrough to the underlying DeprecateDomainRequest.
// It will increment the count of requests made to DeprecateDomain.
func (c *SWF) DeprecateDomainRequest(input *swf.DeprecateDomainInput) (req *request.Request, output *swf.DeprecateDomainOutput) {
	c.inc("DeprecateDomain")
	return c.svc.DeprecateDomainRequest(input)
}

// DeprecateDomain is a passthrough to the underlying DeprecateDomain method.
// It will increment the count of requests made to DeprecateDomain.
func (c *SWF) DeprecateDomain(input *swf.DeprecateDomainInput) (*swf.DeprecateDomainOutput, error) {
	c.inc("DeprecateDomain")
	return c.svc.DeprecateDomain(input)
}

// DeprecateDomainWithContext is a passthrough to the underlying DeprecateDomainWithContext method.
// It will increment the count of requests made to DeprecateDomain.
func (c *SWF) DeprecateDomainWithContext(ctx aws.Context, input *swf.DeprecateDomainInput, opts ...request.Option) (*swf.DeprecateDomainOutput, error) {
	c.inc("DeprecateDomain")
	return c.svc.DeprecateDomainWithContext(ctx, input, opts...)
}

// DeprecateWorkflowTypeRequest is a passthrough to the underlying DeprecateWorkflowTypeRequest.
// It will increment the count of requests made to DeprecateWorkflowType.
func (c *SWF) DeprecateWorkflowTypeRequest(input *swf.DeprecateWorkflowTypeInput) (req *request.Request, output *swf.DeprecateWorkflowTypeOutput) {
	c.inc("DeprecateWorkflowType")
	return c.svc.DeprecateWorkflowTypeRequest(input)
}

// DeprecateWorkflowType is a passthrough to the underlying DeprecateWorkflowType method.
// It will increment the count of requests made to DeprecateWorkflowType.
func (c *SWF) DeprecateWorkflowType(input *swf.DeprecateWorkflowTypeInput) (*swf.DeprecateWorkflowTypeOutput, error) {
	c.inc("DeprecateWorkflowType")
	return c.svc.DeprecateWorkflowType(input)
}

// DeprecateWorkflowTypeWithContext is a passthrough to the underlying DeprecateWorkflowTypeWithContext method.
// It will increment the count of requests made to DeprecateWorkflowType.
func (c *SWF) DeprecateWorkflowTypeWithContext(ctx aws.Context, input *swf.DeprecateWorkflowTypeInput, opts ...request.Option) (*swf.DeprecateWorkflowTypeOutput, error) {
	c.inc("DeprecateWorkflowType")
	return c.svc.DeprecateWorkflowTypeWithContext(ctx, input, opts...)
}

// DescribeActivityTypeRequest is a passthrough to the underlying DescribeActivityTypeRequest.
// It will increment the count of requests made to DescribeActivityType.
func (c *SWF) DescribeActivityTypeRequest(input *swf.DescribeActivityTypeInput) (req *request.Request, output *swf.DescribeActivityTypeOutput) {
	c.inc("DescribeActivityType")
	return c.svc.DescribeActivityTypeRequest(input)
}

// DescribeActivityType is a passthrough to the underlying DescribeActivityType method.
// It will increment the count of requests made to DescribeActivityType.
func (c *SWF) DescribeActivityType(input *swf.DescribeActivityTypeInput) (*swf.DescribeActivityTypeOutput, error) {
	c.inc("DescribeActivityType")
	return c.svc.DescribeActivityType(input)
}

// DescribeActivityTypeWithContext is a passthrough to the underlying DescribeActivityTypeWithContext method.
// It will increment the count of requests made to DescribeActivityType.
func (c *SWF) DescribeActivityTypeWithContext(ctx aws.Context, input *swf.DescribeActivityTypeInput, opts ...request.Option) (*swf.DescribeActivityTypeOutput, error) {
	c.inc("DescribeActivityType")
	return c.svc.DescribeActivityTypeWithContext(ctx, input, opts...)
}

// DescribeDomainRequest is a passthrough to the underlying DescribeDomainRequest.
// It will increment the count of requests made to DescribeDomain.
func (c *SWF) DescribeDomainRequest(input *swf.DescribeDomainInput) (req *request.Request, output *swf.DescribeDomainOutput) {
	c.inc("DescribeDomain")
	return c.svc.DescribeDomainRequest(input)
}

// DescribeDomain is a passthrough to the underlying DescribeDomain method.
// It will increment the count of requests made to DescribeDomain.
func (c *SWF) DescribeDomain(input *swf.DescribeDomainInput) (*swf.DescribeDomainOutput, error) {
	c.inc("DescribeDomain")
	return c.svc.DescribeDomain(input)
}

// DescribeDomainWithContext is a passthrough to the underlying DescribeDomainWithContext method.
// It will increment the count of requests made to DescribeDomain.
func (c *SWF) DescribeDomainWithContext(ctx aws.Context, input *swf.DescribeDomainInput, opts ...request.Option) (*swf.DescribeDomainOutput, error) {
	c.inc("DescribeDomain")
	return c.svc.DescribeDomainWithContext(ctx, input, opts...)
}

// DescribeWorkflowExecutionRequest is a passthrough to the underlying DescribeWorkflowExecutionRequest.
// It will increment the count of requests made to DescribeWorkflowExecution.
func (c *SWF) DescribeWorkflowExecutionRequest(input *swf.DescribeWorkflowExecutionInput) (req *request.Request, output *swf.DescribeWorkflowExecutionOutput) {
	c.inc("DescribeWorkflowExecution")
	return c.svc.DescribeWorkflowExecutionRequest(input)
}

// DescribeWorkflowExecution is a passthrough to the underlying DescribeWorkflowExecution method.
// It will increment the count of requests made to DescribeWorkflowExecution.
func (c *SWF) DescribeWorkflowExecution(input *swf.DescribeWorkflowExecutionInput) (*swf.DescribeWorkflowExecutionOutput, error) {
	c.inc("DescribeWorkflowExecution")
	return c.svc.DescribeWorkflowExecution(input)
}

// DescribeWorkflowExecutionWithContext is a passthrough to the underlying DescribeWorkflowExecutionWithContext method.
// It will increment the count of requests made to DescribeWorkflowExecution.
func (c *SWF) DescribeWorkflowExecutionWithContext(ctx aws.Context, input *swf.DescribeWorkflowExecutionInput, opts ...request.Option) (*swf.DescribeWorkflowExecutionOutput, error) {
	c.inc("DescribeWorkflowExecution")
	return c.svc.DescribeWorkflowExecutionWithContext(ctx, input, opts...)
}

// DescribeWorkflowTypeRequest is a passthrough to the underlying DescribeWorkflowTypeRequest.
// It will increment the count of requests made to DescribeWorkflowType.
func (c *SWF) DescribeWorkflowTypeRequest(input *swf.DescribeWorkflowTypeInput) (req *request.Request, output *swf.DescribeWorkflowTypeOutput) {
	c.inc("DescribeWorkflowType")
	return c.svc.DescribeWorkflowTypeRequest(input)
}

// DescribeWorkflowType is a passthrough to the underlying DescribeWorkflowType method.
// It will increment the count of requests made to DescribeWorkflowType.
func (c *SWF) DescribeWorkflowType(input *swf.DescribeWorkflowTypeInput) (*swf.DescribeWorkflowTypeOutput, error) {
	c.inc("DescribeWorkflowType")
	return c.svc.DescribeWorkflowType(input)
}

// DescribeWorkflowTypeWithContext is a passthrough to the underlying DescribeWorkflowTypeWithContext method.
// It will increment the count of requests made to DescribeWorkflowType.
func (c *SWF) DescribeWorkflowTypeWithContext(ctx aws.Context, input *swf.DescribeWorkflowTypeInput, opts ...request.Option) (*swf.DescribeWorkflowTypeOutput, error) {
	c.inc("DescribeWorkflowType")
	return c.svc.DescribeWorkflowTypeWithContext(ctx, input, opts...)
}

// GetWorkflowExecutionHistoryRequest is a passthrough to the underlying GetWorkflowExecutionHistoryRequest.
// It will increment the count of requests made to GetWorkflowExecutionHistory.
func (c *SWF) GetWorkflowExecutionHistoryRequest(input *swf.GetWorkflowExecutionHistoryInput) (req *request.Request, output *swf.GetWorkflowExecutionHistoryOutput) {
	c.inc("GetWorkflowExecutionHistory")
	return c.svc.GetWorkflowExecutionHistoryRequest(input)
}

// GetWorkflowExecutionHistory is a passthrough to the underlying GetWorkflowExecutionHistory method.
// It will increment the count of requests made to GetWorkflowExecutionHistory.
func (c *SWF) GetWorkflowExecutionHistory(input *swf.GetWorkflowExecutionHistoryInput) (*swf.GetWorkflowExecutionHistoryOutput, error) {
	c.inc("GetWorkflowExecutionHistory")
	return c.svc.GetWorkflowExecutionHistory(input)
}

// GetWorkflowExecutionHistoryWithContext is a passthrough to the underlying GetWorkflowExecutionHistoryWithContext method.
// It will increment the count of requests made to GetWorkflowExecutionHistory.
func (c *SWF) GetWorkflowExecutionHistoryWithContext(ctx aws.Context, input *swf.GetWorkflowExecutionHistoryInput, opts ...request.Option) (*swf.GetWorkflowExecutionHistoryOutput, error) {
	c.inc("GetWorkflowExecutionHistory")
	return c.svc.GetWorkflowExecutionHistoryWithContext(ctx, input, opts...)
}

// GetWorkflowExecutionHistoryPages is a passthrough to the underlying GetWorkflowExecutionHistoryPages method.
// It will increment the count of requests made to GetWorkflowExecutionHistory on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetWorkflowExecutionHistoryPagesWithContext to avoid this.
func (c *SWF) GetWorkflowExecutionHistoryPages(input *swf.GetWorkflowExecutionHistoryInput, fn func(*swf.GetWorkflowExecutionHistoryOutput, bool) bool) error {
	wrappedFn := func(page *swf.GetWorkflowExecutionHistoryOutput, lastPage bool) bool {
		c.inc("GetWorkflowExecutionHistory")
		return fn(page, lastPage)
	}
	return c.svc.GetWorkflowExecutionHistoryPages(input, wrappedFn)
}

// GetWorkflowExecutionHistoryPagesWithContext is a passthrough to the underlying GetWorkflowExecutionHistoryPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetWorkflowExecutionHistory when applied to the request.
func (c *SWF) GetWorkflowExecutionHistoryPagesWithContext(ctx aws.Context, input *swf.GetWorkflowExecutionHistoryInput, fn func(*swf.GetWorkflowExecutionHistoryOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetWorkflowExecutionHistory"))
	return c.svc.GetWorkflowExecutionHistoryPagesWithContext(ctx, input, fn, opts...)
}

// ListActivityTypesRequest is a passthrough to the underlying ListActivityTypesRequest.
// It will increment the count of requests made to ListActivityTypes.
func (c *SWF) ListActivityTypesRequest(input *swf.ListActivityTypesInput) (req *request.Request, output *swf.ListActivityTypesOutput) {
	c.inc("ListActivityTypes")
	return c.svc.ListActivityTypesRequest(input)
}

// ListActivityTypes is a passthrough to the underlying ListActivityTypes method.
// It will increment the count of requests made to ListActivityTypes.
func (c *SWF) ListActivityTypes(input *swf.ListActivityTypesInput) (*swf.ListActivityTypesOutput, error) {
	c.inc("ListActivityTypes")
	return c.svc.ListActivityTypes(input)
}

// ListActivityTypesWithContext is a passthrough to the underlying ListActivityTypesWithContext method.
// It will increment the count of requests made to ListActivityTypes.
func (c *SWF) ListActivityTypesWithContext(ctx aws.Context, input *swf.ListActivityTypesInput, opts ...request.Option) (*swf.ListActivityTypesOutput, error) {
	c.inc("ListActivityTypes")
	return c.svc.ListActivityTypesWithContext(ctx, input, opts...)
}

// ListActivityTypesPages is a passthrough to the underlying ListActivityTypesPages method.
// It will increment the count of requests made to ListActivityTypes on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListActivityTypesPagesWithContext to avoid this.
func (c *SWF) ListActivityTypesPages(input *swf.ListActivityTypesInput, fn func(*swf.ListActivityTypesOutput, bool) bool) error {
	wrappedFn := func(page *swf.ListActivityTypesOutput, lastPage bool) bool {
		c.inc("ListActivityTypes")
		return fn(page, lastPage)
	}
	return c.svc.ListActivityTypesPages(input, wrappedFn)
}

// ListActivityTypesPagesWithContext is a passthrough to the underlying ListActivityTypesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListActivityTypes when applied to the request.
func (c *SWF) ListActivityTypesPagesWithContext(ctx aws.Context, input *swf.ListActivityTypesInput, fn func(*swf.ListActivityTypesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListActivityTypes"))
	return c.svc.ListActivityTypesPagesWithContext(ctx, input, fn, opts...)
}

// ListClosedWorkflowExecutionsRequest is a passthrough to the underlying ListClosedWorkflowExecutionsRequest.
// It will increment the count of requests made to ListClosedWorkflowExecutions.
func (c *SWF) ListClosedWorkflowExecutionsRequest(input *swf.ListClosedWorkflowExecutionsInput) (req *request.Request, output *swf.WorkflowExecutionInfos) {
	c.inc("ListClosedWorkflowExecutions")
	return c.svc.ListClosedWorkflowExecutionsRequest(input)
}

// ListClosedWorkflowExecutions is a passthrough to the underlying ListClosedWorkflowExecutions method.
// It will increment the count of requests made to ListClosedWorkflowExecutions.
func (c *SWF) ListClosedWorkflowExecutions(input *swf.ListClosedWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error) {
	c.inc("ListClosedWorkflowExecutions")
	return c.svc.ListClosedWorkflowExecutions(input)
}

// ListClosedWorkflowExecutionsWithContext is a passthrough to the underlying ListClosedWorkflowExecutionsWithContext method.
// It will increment the count of requests made to ListClosedWorkflowExecutions.
func (c *SWF) ListClosedWorkflowExecutionsWithContext(ctx aws.Context, input *swf.ListClosedWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionInfos, error) {
	c.inc("ListClosedWorkflowExecutions")
	return c.svc.ListClosedWorkflowExecutionsWithContext(ctx, input, opts...)
}

// ListClosedWorkflowExecutionsPages is a passthrough to the underlying ListClosedWorkflowExecutionsPages method.
// It will increment the count of requests made to ListClosedWorkflowExecutions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListClosedWorkflowExecutionsPagesWithContext to avoid this.
func (c *SWF) ListClosedWorkflowExecutionsPages(input *swf.ListClosedWorkflowExecutionsInput, fn func(*swf.WorkflowExecutionInfos, bool) bool) error {
	wrappedFn := func(page *swf.WorkflowExecutionInfos, lastPage bool) bool {
		c.inc("ListClosedWorkflowExecutions")
		return fn(page, lastPage)
	}
	return c.svc.ListClosedWorkflowExecutionsPages(input, wrappedFn)
}

// ListClosedWorkflowExecutionsPagesWithContext is a passthrough to the underlying ListClosedWorkflowExecutionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListClosedWorkflowExecutions when applied to the request.
func (c *SWF) ListClosedWorkflowExecutionsPagesWithContext(ctx aws.Context, input *swf.ListClosedWorkflowExecutionsInput, fn func(*swf.WorkflowExecutionInfos, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListClosedWorkflowExecutions"))
	return c.svc.ListClosedWorkflowExecutionsPagesWithContext(ctx, input, fn, opts...)
}

// ListDomainsRequest is a passthrough to the underlying ListDomainsRequest.
// It will increment the count of requests made to ListDomains.
func (c *SWF) ListDomainsRequest(input *swf.ListDomainsInput) (req *request.Request, output *swf.ListDomainsOutput) {
	c.inc("ListDomains")
	return c.svc.ListDomainsRequest(input)
}

// ListDomains is a passthrough to the underlying ListDomains method.
// It will increment the count of requests made to ListDomains.
func (c *SWF) ListDomains(input *swf.ListDomainsInput) (*swf.ListDomainsOutput, error) {
	c.inc("ListDomains")
	return c.svc.ListDomains(input)
}

// ListDomainsWithContext is a passthrough to the underlying ListDomainsWithContext method.
// It will increment the count of requests made to ListDomains.
func (c *SWF) ListDomainsWithContext(ctx aws.Context, input *swf.ListDomainsInput, opts ...request.Option) (*swf.ListDomainsOutput, error) {
	c.inc("ListDomains")
	return c.svc.ListDomainsWithContext(ctx, input, opts...)
}

// ListDomainsPages is a passthrough to the underlying ListDomainsPages method.
// It will increment the count of requests made to ListDomains on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListDomainsPagesWithContext to avoid this.
func (c *SWF) ListDomainsPages(input *swf.ListDomainsInput, fn func(*swf.ListDomainsOutput, bool) bool) error {
	wrappedFn := func(page *swf.ListDomainsOutput, lastPage bool) bool {
		c.inc("ListDomains")
		return fn(page, lastPage)
	}
	return c.svc.ListDomainsPages(input, wrappedFn)
}

// ListDomainsPagesWithContext is a passthrough to the underlying ListDomainsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListDomains when applied to the request.
func (c *SWF) ListDomainsPagesWithContext(ctx aws.Context, input *swf.ListDomainsInput, fn func(*swf.ListDomainsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListDomains"))
	return c.svc.ListDomainsPagesWithContext(ctx, input, fn, opts...)
}

// ListOpenWorkflowExecutionsRequest is a passthrough to the underlying ListOpenWorkflowExecutionsRequest.
// It will increment the count of requests made to ListOpenWorkflowExecutions.
func (c *SWF) ListOpenWorkflowExecutionsRequest(input *swf.ListOpenWorkflowExecutionsInput) (req *request.Request, output *swf.WorkflowExecutionInfos) {
	c.inc("ListOpenWorkflowExecutions")
	return c.svc.ListOpenWorkflowExecutionsRequest(input)
}

// ListOpenWorkflowExecutions is a passthrough to the underlying ListOpenWorkflowExecutions method.
// It will increment the count of requests made to ListOpenWorkflowExecutions.
func (c *SWF) ListOpenWorkflowExecutions(input *swf.ListOpenWorkflowExecutionsInput) (*swf.WorkflowExecutionInfos, error) {
	c.inc("ListOpenWorkflowExecutions")
	return c.svc.ListOpenWorkflowExecutions(input)
}

// ListOpenWorkflowExecutionsWithContext is a passthrough to the underlying ListOpenWorkflowExecutionsWithContext method.
// It will increment the count of requests made to ListOpenWorkflowExecutions.
func (c *SWF) ListOpenWorkflowExecutionsWithContext(ctx aws.Context, input *swf.ListOpenWorkflowExecutionsInput, opts ...request.Option) (*swf.WorkflowExecutionInfos, error) {
	c.inc("ListOpenWorkflowExecutions")
	return c.svc.ListOpenWorkflowExecutionsWithContext(ctx, input, opts...)
}

// ListOpenWorkflowExecutionsPages is a passthrough to the underlying ListOpenWorkflowExecutionsPages method.
// It will increment the count of requests made to ListOpenWorkflowExecutions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListOpenWorkflowExecutionsPagesWithContext to avoid this.
func (c *SWF) ListOpenWorkflowExecutionsPages(input *swf.ListOpenWorkflowExecutionsInput, fn func(*swf.WorkflowExecutionInfos, bool) bool) error {
	wrappedFn := func(page *swf.WorkflowExecutionInfos, lastPage bool) bool {
		c.inc("ListOpenWorkflowExecutions")
		return fn(page, lastPage)
	}
	return c.svc.ListOpenWorkflowExecutionsPages(input, wrappedFn)
}

// ListOpenWorkflowExecutionsPagesWithContext is a passthrough to the underlying ListOpenWorkflowExecutionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListOpenWorkflowExecutions when applied to the request.
func (c *SWF) ListOpenWorkflowExecutionsPagesWithContext(ctx aws.Context, input *swf.ListOpenWorkflowExecutionsInput, fn func(*swf.WorkflowExecutionInfos, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListOpenWorkflowExecutions"))
	return c.svc.ListOpenWorkflowExecutionsPagesWithContext(ctx, input, fn, opts...)
}

// ListWorkflowTypesRequest is a passthrough to the underlying ListWorkflowTypesRequest.
// It will increment the count of requests made to ListWorkflowTypes.
func (c *SWF) ListWorkflowTypesRequest(input *swf.ListWorkflowTypesInput) (req *request.Request, output *swf.ListWorkflowTypesOutput) {
	c.inc("ListWorkflowTypes")
	return c.svc.ListWorkflowTypesRequest(input)
}

// ListWorkflowTypes is a passthrough to the underlying ListWorkflowTypes method.
// It will increment the count of requests made to ListWorkflowTypes.
func (c *SWF) ListWorkflowTypes(input *swf.ListWorkflowTypesInput) (*swf.ListWorkflowTypesOutput, error) {
	c.inc("ListWorkflowTypes")
	return c.svc.ListWorkflowTypes(input)
}

// ListWorkflowTypesWithContext is a passthrough to the underlying ListWorkflowTypesWithContext method.
// It will increment the count of requests made to ListWorkflowTypes.
func (c *SWF) ListWorkflowTypesWithContext(ctx aws.Context, input *swf.ListWorkflowTypesInput, opts ...request.Option) (*swf.ListWorkflowTypesOutput, error) {
	c.inc("ListWorkflowTypes")
	return c.svc.ListWorkflowTypesWithContext(ctx, input, opts...)
}

// ListWorkflowTypesPages is a passthrough to the underlying ListWorkflowTypesPages method.
// It will increment the count of requests made to ListWorkflowTypes on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListWorkflowTypesPagesWithContext to avoid this.
func (c *SWF) ListWorkflowTypesPages(input *swf.ListWorkflowTypesInput, fn func(*swf.ListWorkflowTypesOutput, bool) bool) error {
	wrappedFn := func(page *swf.ListWorkflowTypesOutput, lastPage bool) bool {
		c.inc("ListWorkflowTypes")
		return fn(page, lastPage)
	}
	return c.svc.ListWorkflowTypesPages(input, wrappedFn)
}

// ListWorkflowTypesPagesWithContext is a passthrough to the underlying ListWorkflowTypesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListWorkflowTypes when applied to the request.
func (c *SWF) ListWorkflowTypesPagesWithContext(ctx aws.Context, input *swf.ListWorkflowTypesInput, fn func(*swf.ListWorkflowTypesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListWorkflowTypes"))
	return c.svc.ListWorkflowTypesPagesWithContext(ctx, input, fn, opts...)
}

// PollForActivityTaskRequest is a passthrough to the underlying PollForActivityTaskRequest.
// It will increment the count of requests made to PollForActivityTask.
func (c *SWF) PollForActivityTaskRequest(input *swf.PollForActivityTaskInput) (req *request.Request, output *swf.PollForActivityTaskOutput) {
	c.inc("PollForActivityTask")
	return c.svc.PollForActivityTaskRequest(input)
}

// PollForActivityTask is a passthrough to the underlying PollForActivityTask method.
// It will increment the count of requests made to PollForActivityTask.
func (c *SWF) PollForActivityTask(input *swf.PollForActivityTaskInput) (*swf.PollForActivityTaskOutput, error) {
	c.inc("PollForActivityTask")
	return c.svc.PollForActivityTask(input)
}

// PollForActivityTaskWithContext is a passthrough to the underlying PollForActivityTaskWithContext method.
// It will increment the count of requests made to PollForActivityTask.
func (c *SWF) PollForActivityTaskWithContext(ctx aws.Context, input *swf.PollForActivityTaskInput, opts ...request.Option) (*swf.PollForActivityTaskOutput, error) {
	c.inc("PollForActivityTask")
	return c.svc.PollForActivityTaskWithContext(ctx, input, opts...)
}

// PollForDecisionTaskRequest is a passthrough to the underlying PollForDecisionTaskRequest.
// It will increment the count of requests made to PollForDecisionTask.
func (c *SWF) PollForDecisionTaskRequest(input *swf.PollForDecisionTaskInput) (req *request.Request, output *swf.PollForDecisionTaskOutput) {
	c.inc("PollForDecisionTask")
	return c.svc.PollForDecisionTaskRequest(input)
}

// PollForDecisionTask is a passthrough to the underlying PollForDecisionTask method.
// It will increment the count of requests made to PollForDecisionTask.
func (c *SWF) PollForDecisionTask(input *swf.PollForDecisionTaskInput) (*swf.PollForDecisionTaskOutput, error) {
	c.inc("PollForDecisionTask")
	return c.svc.PollForDecisionTask(input)
}

// PollForDecisionTaskWithContext is a passthrough to the underlying PollForDecisionTaskWithContext method.
// It will increment the count of requests made to PollForDecisionTask.
func (c *SWF) PollForDecisionTaskWithContext(ctx aws.Context, input *swf.PollForDecisionTaskInput, opts ...request.Option) (*swf.PollForDecisionTaskOutput, error) {
	c.inc("PollForDecisionTask")
	return c.svc.PollForDecisionTaskWithContext(ctx, input, opts...)
}

// PollForDecisionTaskPages is a passthrough to the underlying PollForDecisionTaskPages method.
// It will increment the count of requests made to PollForDecisionTask on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use PollForDecisionTaskPagesWithContext to avoid this.
func (c *SWF) PollForDecisionTaskPages(input *swf.PollForDecisionTaskInput, fn func(*swf.PollForDecisionTaskOutput, bool) bool) error {
	wrappedFn := func(page *swf.PollForDecisionTaskOutput, lastPage bool) bool {
		c.inc("PollForDecisionTask")
		return fn(page, lastPage)
	}
	return c.svc.PollForDecisionTaskPages(input, wrappedFn)
}

// PollForDecisionTaskPagesWithContext is a passthrough to the underlying PollForDecisionTaskPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to PollForDecisionTask when applied to the request.
func (c *SWF) PollForDecisionTaskPagesWithContext(ctx aws.Context, input *swf.PollForDecisionTaskInput, fn func(*swf.PollForDecisionTaskOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("PollForDecisionTask"))
	return c.svc.PollForDecisionTaskPagesWithContext(ctx, input, fn, opts...)
}

// RecordActivityTaskHeartbeatRequest is a passthrough to the underlying RecordActivityTaskHeartbeatRequest.
// It will increment the count of requests made to RecordActivityTaskHeartbeat.
func (c *SWF) RecordActivityTaskHeartbeatRequest(input *swf.RecordActivityTaskHeartbeatInput) (req *request.Request, output *swf.RecordActivityTaskHeartbeatOutput) {
	c.inc("RecordActivityTaskHeartbeat")
	return c.svc.RecordActivityTaskHeartbeatRequest(input)
}

// RecordActivityTaskHeartbeat is a passthrough to the underlying RecordActivityTaskHeartbeat method.
// It will increment the count of requests made to RecordActivityTaskHeartbeat.
func (c *SWF) RecordActivityTaskHeartbeat(input *swf.RecordActivityTaskHeartbeatInput) (*swf.RecordActivityTaskHeartbeatOutput, error) {
	c.inc("RecordActivityTaskHeartbeat")
	return c.svc.RecordActivityTaskHeartbeat(input)
}

// RecordActivityTaskHeartbeatWithContext is a passthrough to the underlying RecordActivityTaskHeartbeatWithContext method.
// It will increment the count of requests made to RecordActivityTaskHeartbeat.
func (c *SWF) RecordActivityTaskHeartbeatWithContext(ctx aws.Context, input *swf.RecordActivityTaskHeartbeatInput, opts ...request.Option) (*swf.RecordActivityTaskHeartbeatOutput, error) {
	c.inc("RecordActivityTaskHeartbeat")
	return c.svc.RecordActivityTaskHeartbeatWithContext(ctx, input, opts...)
}

// RegisterActivityTypeRequest is a passthrough to the underlying RegisterActivityTypeRequest.
// It will increment the count of requests made to RegisterActivityType.
func (c *SWF) RegisterActivityTypeRequest(input *swf.RegisterActivityTypeInput) (req *request.Request, output *swf.RegisterActivityTypeOutput) {
	c.inc("RegisterActivityType")
	return c.svc.RegisterActivityTypeRequest(input)
}

// RegisterActivityType is a passthrough to the underlying RegisterActivityType method.
// It will increment the count of requests made to RegisterActivityType.
func (c *SWF) RegisterActivityType(input *swf.RegisterActivityTypeInput) (*swf.RegisterActivityTypeOutput, error) {
	c.inc("RegisterActivityType")
	return c.svc.RegisterActivityType(input)
}

// RegisterActivityTypeWithContext is a passthrough to the underlying RegisterActivityTypeWithContext method.
// It will increment the count of requests made to RegisterActivityType.
func (c *SWF) RegisterActivityTypeWithContext(ctx aws.Context, input *swf.RegisterActivityTypeInput, opts ...request.Option) (*swf.RegisterActivityTypeOutput, error) {
	c.inc("RegisterActivityType")
	return c.svc.RegisterActivityTypeWithContext(ctx, input, opts...)
}

// RegisterDomainRequest is a passthrough to the underlying RegisterDomainRequest.
// It will increment the count of requests made to RegisterDomain.
func (c *SWF) RegisterDomainRequest(input *swf.RegisterDomainInput) (req *request.Request, output *swf.RegisterDomainOutput) {
	c.inc("RegisterDomain")
	return c.svc.RegisterDomainRequest(input)
}

// RegisterDomain is a passthrough to the underlying RegisterDomain method.
// It will increment the count of requests made to RegisterDomain.
func (c *SWF) RegisterDomain(input *swf.RegisterDomainInput) (*swf.RegisterDomainOutput, error) {
	c.inc("RegisterDomain")
	return c.svc.RegisterDomain(input)
}

// RegisterDomainWithContext is a passthrough to the underlying RegisterDomainWithContext method.
// It will increment the count of requests made to RegisterDomain.
func (c *SWF) RegisterDomainWithContext(ctx aws.Context, input *swf.RegisterDomainInput, opts ...request.Option) (*swf.RegisterDomainOutput, error) {
	c.inc("RegisterDomain")
	return c.svc.RegisterDomainWithContext(ctx, input, opts...)
}

// RegisterWorkflowTypeRequest is a passthrough to the underlying RegisterWorkflowTypeRequest.
// It will increment the count of requests made to RegisterWorkflowType.
func (c *SWF) RegisterWorkflowTypeRequest(input *swf.RegisterWorkflowTypeInput) (req *request.Request, output *swf.RegisterWorkflowTypeOutput) {
	c.inc("RegisterWorkflowType")
	return c.svc.RegisterWorkflowTypeRequest(input)
}

// RegisterWorkflowType is a passthrough to the underlying RegisterWorkflowType method.
// It will increment the count of requests made to RegisterWorkflowType.
func (c *SWF) RegisterWorkflowType(input *swf.RegisterWorkflowTypeInput) (*swf.RegisterWorkflowTypeOutput, error) {
	c.inc("RegisterWorkflowType")
	return c.svc.RegisterWorkflowType(input)
}

// RegisterWorkflowTypeWithContext is a passthrough to the underlying RegisterWorkflowTypeWithContext method.
// It will increment the count of requests made to RegisterWorkflowType.
func (c *SWF) RegisterWorkflowTypeWithContext(ctx aws.Context, input *swf.RegisterWorkflowTypeInput, opts ...request.Option) (*swf.RegisterWorkflowTypeOutput, error) {
	c.inc("RegisterWorkflowType")
	return c.svc.RegisterWorkflowTypeWithContext(ctx, input, opts...)
}

// RequestCancelWorkflowExecutionRequest is a passthrough to the underlying RequestCancelWorkflowExecutionRequest.
// It will increment the count of requests made to RequestCancelWorkflowExecution.
func (c *SWF) RequestCancelWorkflowExecutionRequest(input *swf.RequestCancelWorkflowExecutionInput) (req *request.Request, output *swf.RequestCancelWorkflowExecutionOutput) {
	c.inc("RequestCancelWorkflowExecution")
	return c.svc.RequestCancelWorkflowExecutionRequest(input)
}

// RequestCancelWorkflowExecution is a passthrough to the underlying RequestCancelWorkflowExecution method.
// It will increment the count of requests made to RequestCancelWorkflowExecution.
func (c *SWF) RequestCancelWorkflowExecution(input *swf.RequestCancelWorkflowExecutionInput) (*swf.RequestCancelWorkflowExecutionOutput, error) {
	c.inc("RequestCancelWorkflowExecution")
	return c.svc.RequestCancelWorkflowExecution(input)
}

// RequestCancelWorkflowExecutionWithContext is a passthrough to the underlying RequestCancelWorkflowExecutionWithContext method.
// It will increment the count of requests made to RequestCancelWorkflowExecution.
func (c *SWF) RequestCancelWorkflowExecutionWithContext(ctx aws.Context, input *swf.RequestCancelWorkflowExecutionInput, opts ...request.Option) (*swf.RequestCancelWorkflowExecutionOutput, error) {
	c.inc("RequestCancelWorkflowExecution")
	return c.svc.RequestCancelWorkflowExecutionWithContext(ctx, input, opts...)
}

// RespondActivityTaskCanceledRequest is a passthrough to the underlying RespondActivityTaskCanceledRequest.
// It will increment the count of requests made to RespondActivityTaskCanceled.
func (c *SWF) RespondActivityTaskCanceledRequest(input *swf.RespondActivityTaskCanceledInput) (req *request.Request, output *swf.RespondActivityTaskCanceledOutput) {
	c.inc("RespondActivityTaskCanceled")
	return c.svc.RespondActivityTaskCanceledRequest(input)
}

// RespondActivityTaskCanceled is a passthrough to the underlying RespondActivityTaskCanceled method.
// It will increment the count of requests made to RespondActivityTaskCanceled.
func (c *SWF) RespondActivityTaskCanceled(input *swf.RespondActivityTaskCanceledInput) (*swf.RespondActivityTaskCanceledOutput, error) {
	c.inc("RespondActivityTaskCanceled")
	return c.svc.RespondActivityTaskCanceled(input)
}

// RespondActivityTaskCanceledWithContext is a passthrough to the underlying RespondActivityTaskCanceledWithContext method.
// It will increment the count of requests made to RespondActivityTaskCanceled.
func (c *SWF) RespondActivityTaskCanceledWithContext(ctx aws.Context, input *swf.RespondActivityTaskCanceledInput, opts ...request.Option) (*swf.RespondActivityTaskCanceledOutput, error) {
	c.inc("RespondActivityTaskCanceled")
	return c.svc.RespondActivityTaskCanceledWithContext(ctx, input, opts...)
}

// RespondActivityTaskCompletedRequest is a passthrough to the underlying RespondActivityTaskCompletedRequest.
// It will increment the count of requests made to RespondActivityTaskCompleted.
func (c *SWF) RespondActivityTaskCompletedRequest(input *swf.RespondActivityTaskCompletedInput) (req *request.Request, output *swf.RespondActivityTaskCompletedOutput) {
	c.inc("RespondActivityTaskCompleted")
	return c.svc.RespondActivityTaskCompletedRequest(input)
}

// RespondActivityTaskCompleted is a passthrough to the underlying RespondActivityTaskCompleted method.
// It will increment the count of requests made to RespondActivityTaskCompleted.
func (c *SWF) RespondActivityTaskCompleted(input *swf.RespondActivityTaskCompletedInput) (*swf.RespondActivityTaskCompletedOutput, error) {
	c.inc("RespondActivityTaskCompleted")
	return c.svc.RespondActivityTaskCompleted(input)
}

// RespondActivityTaskCompletedWithContext is a passthrough to the underlying RespondActivityTaskCompletedWithContext method.
// It will increment the count of requests made to RespondActivityTaskCompleted.
func (c *SWF) RespondActivityTaskCompletedWithContext(ctx aws.Context, input *swf.RespondActivityTaskCompletedInput, opts ...request.Option) (*swf.RespondActivityTaskCompletedOutput, error) {
	c.inc("RespondActivityTaskCompleted")
	return c.svc.RespondActivityTaskCompletedWithContext(ctx, input, opts...)
}

// RespondActivityTaskFailedRequest is a passthrough to the underlying RespondActivityTaskFailedRequest.
// It will increment the count of requests made to RespondActivityTaskFailed.
func (c *SWF) RespondActivityTaskFailedRequest(input *swf.RespondActivityTaskFailedInput) (req *request.Request, output *swf.RespondActivityTaskFailedOutput) {
	c.inc("RespondActivityTaskFailed")
	return c.svc.RespondActivityTaskFailedRequest(input)
}

// RespondActivityTaskFailed is a passthrough to the underlying RespondActivityTaskFailed method.
// It will increment the count of requests made to RespondActivityTaskFailed.
func (c *SWF) RespondActivityTaskFailed(input *swf.RespondActivityTaskFailedInput) (*swf.RespondActivityTaskFailedOutput, error) {
	c.inc("RespondActivityTaskFailed")
	return c.svc.RespondActivityTaskFailed(input)
}

// RespondActivityTaskFailedWithContext is a passthrough to the underlying RespondActivityTaskFailedWithContext method.
// It will increment the count of requests made to RespondActivityTaskFailed.
func (c *SWF) RespondActivityTaskFailedWithContext(ctx aws.Context, input *swf.RespondActivityTaskFailedInput, opts ...request.Option) (*swf.RespondActivityTaskFailedOutput, error) {
	c.inc("RespondActivityTaskFailed")
	return c.svc.RespondActivityTaskFailedWithContext(ctx, input, opts...)
}

// RespondDecisionTaskCompletedRequest is a passthrough to the underlying RespondDecisionTaskCompletedRequest.
// It will increment the count of requests made to RespondDecisionTaskCompleted.
func (c *SWF) RespondDecisionTaskCompletedRequest(input *swf.RespondDecisionTaskCompletedInput) (req *request.Request, output *swf.RespondDecisionTaskCompletedOutput) {
	c.inc("RespondDecisionTaskCompleted")
	return c.svc.RespondDecisionTaskCompletedRequest(input)
}

// RespondDecisionTaskCompleted is a passthrough to the underlying RespondDecisionTaskCompleted method.
// It will increment the count of requests made to RespondDecisionTaskCompleted.
func (c *SWF) RespondDecisionTaskCompleted(input *swf.RespondDecisionTaskCompletedInput) (*swf.RespondDecisionTaskCompletedOutput, error) {
	c.inc("RespondDecisionTaskCompleted")
	return c.svc.RespondDecisionTaskCompleted(input)
}

// RespondDecisionTaskCompletedWithContext is a passthrough to the underlying RespondDecisionTaskCompletedWithContext method.
// It will increment the count of requests made to RespondDecisionTaskCompleted.
func (c *SWF) RespondDecisionTaskCompletedWithContext(ctx aws.Context, input *swf.RespondDecisionTaskCompletedInput, opts ...request.Option) (*swf.RespondDecisionTaskCompletedOutput, error) {
	c.inc("RespondDecisionTaskCompleted")
	return c.svc.RespondDecisionTaskCompletedWithContext(ctx, input, opts...)
}

// SignalWorkflowExecutionRequest is a passthrough to the underlying SignalWorkflowExecutionRequest.
// It will increment the count of requests made to SignalWorkflowExecution.
func (c *SWF) SignalWorkflowExecutionRequest(input *swf.SignalWorkflowExecutionInput) (req *request.Request, output *swf.SignalWorkflowExecutionOutput) {
	c.inc("SignalWorkflowExecution")
	return c.svc.SignalWorkflowExecutionRequest(input)
}

// SignalWorkflowExecution is a passthrough to the underlying SignalWorkflowExecution method.
// It will increment the count of requests made to SignalWorkflowExecution.
func (c *SWF) SignalWorkflowExecution(input *swf.SignalWorkflowExecutionInput) (*swf.SignalWorkflowExecutionOutput, error) {
	c.inc("SignalWorkflowExecution")
	return c.svc.SignalWorkflowExecution(input)
}

// SignalWorkflowExecutionWithContext is a passthrough to the underlying SignalWorkflowExecutionWithContext method.
// It will increment the count of requests made to SignalWorkflowExecution.
func (c *SWF) SignalWorkflowExecutionWithContext(ctx aws.Context, input *swf.SignalWorkflowExecutionInput, opts ...request.Option) (*swf.SignalWorkflowExecutionOutput, error) {
	c.inc("SignalWorkflowExecution")
	return c.svc.SignalWorkflowExecutionWithContext(ctx, input, opts...)
}

// StartWorkflowExecutionRequest is a passthrough to the underlying StartWorkflowExecutionRequest.
// It will increment the count of requests made to StartWorkflowExecution.
func (c *SWF) StartWorkflowExecutionRequest(input *swf.StartWorkflowExecutionInput) (req *request.Request, output *swf.StartWorkflowExecutionOutput) {
	c.inc("StartWorkflowExecution")
	return c.svc.StartWorkflowExecutionRequest(input)
}

// StartWorkflowExecution is a passthrough to the underlying StartWorkflowExecution method.
// It will increment the count of requests made to StartWorkflowExecution.
func (c *SWF) StartWorkflowExecution(input *swf.StartWorkflowExecutionInput) (*swf.StartWorkflowExecutionOutput, error) {
	c.inc("StartWorkflowExecution")
	return c.svc.StartWorkflowExecution(input)
}

// StartWorkflowExecutionWithContext is a passthrough to the underlying StartWorkflowExecutionWithContext method.
// It will increment the count of requests made to StartWorkflowExecution.
func (c *SWF) StartWorkflowExecutionWithContext(ctx aws.Context, input *swf.StartWorkflowExecutionInput, opts ...request.Option) (*swf.StartWorkflowExecutionOutput, error) {
	c.inc("StartWorkflowExecution")
	return c.svc.StartWorkflowExecutionWithContext(ctx, input, opts...)
}

// TerminateWorkflowExecutionRequest is a passthrough to the underlying TerminateWorkflowExecutionRequest.
// It will increment the count of requests made to TerminateWorkflowExecution.
func (c *SWF) TerminateWorkflowExecutionRequest(input *swf.TerminateWorkflowExecutionInput) (req *request.Request, output *swf.TerminateWorkflowExecutionOutput) {
	c.inc("TerminateWorkflowExecution")
	return c.svc.TerminateWorkflowExecutionRequest(input)
}

// TerminateWorkflowExecution is a passthrough to the underlying TerminateWorkflowExecution method.
// It will increment the count of requests made to TerminateWorkflowExecution.
func (c *SWF) TerminateWorkflowExecution(input *swf.TerminateWorkflowExecutionInput) (*swf.TerminateWorkflowExecutionOutput, error) {
	c.inc("TerminateWorkflowExecution")
	return c.svc.TerminateWorkflowExecution(input)
}

// TerminateWorkflowExecutionWithContext is a passthrough to the underlying TerminateWorkflowExecutionWithContext method.
// It will increment the count of requests made to TerminateWorkflowExecution.
func (c *SWF) TerminateWorkflowExecutionWithContext(ctx aws.Context, input *swf.TerminateWorkflowExecutionInput, opts ...request.Option) (*swf.TerminateWorkflowExecutionOutput, error) {
	c.inc("TerminateWorkflowExecution")
	return c.svc.TerminateWorkflowExecutionWithContext(ctx, input, opts...)
}
