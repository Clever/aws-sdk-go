// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package glaciercounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/glacier"
)

// AbortMultipartUploadRequest is a passthrough to the underlying AbortMultipartUploadRequest.
// It will increment the count of requests made to AbortMultipartUpload.
func (c *Glacier) AbortMultipartUploadRequest(input *glacier.AbortMultipartUploadInput) (req *request.Request, output *glacier.AbortMultipartUploadOutput) {
	c.inc("AbortMultipartUpload")
	return c.svc.AbortMultipartUploadRequest(input)
}

// AbortMultipartUpload is a passthrough to the underlying AbortMultipartUpload method.
// It will increment the count of requests made to AbortMultipartUpload.
func (c *Glacier) AbortMultipartUpload(input *glacier.AbortMultipartUploadInput) (*glacier.AbortMultipartUploadOutput, error) {
	c.inc("AbortMultipartUpload")
	return c.svc.AbortMultipartUpload(input)
}

// AbortMultipartUploadWithContext is a passthrough to the underlying AbortMultipartUploadWithContext method.
// It will increment the count of requests made to AbortMultipartUpload.
func (c *Glacier) AbortMultipartUploadWithContext(ctx aws.Context, input *glacier.AbortMultipartUploadInput, opts ...request.Option) (*glacier.AbortMultipartUploadOutput, error) {
	c.inc("AbortMultipartUpload")
	return c.svc.AbortMultipartUploadWithContext(ctx, input, opts...)
}

// AbortVaultLockRequest is a passthrough to the underlying AbortVaultLockRequest.
// It will increment the count of requests made to AbortVaultLock.
func (c *Glacier) AbortVaultLockRequest(input *glacier.AbortVaultLockInput) (req *request.Request, output *glacier.AbortVaultLockOutput) {
	c.inc("AbortVaultLock")
	return c.svc.AbortVaultLockRequest(input)
}

// AbortVaultLock is a passthrough to the underlying AbortVaultLock method.
// It will increment the count of requests made to AbortVaultLock.
func (c *Glacier) AbortVaultLock(input *glacier.AbortVaultLockInput) (*glacier.AbortVaultLockOutput, error) {
	c.inc("AbortVaultLock")
	return c.svc.AbortVaultLock(input)
}

// AbortVaultLockWithContext is a passthrough to the underlying AbortVaultLockWithContext method.
// It will increment the count of requests made to AbortVaultLock.
func (c *Glacier) AbortVaultLockWithContext(ctx aws.Context, input *glacier.AbortVaultLockInput, opts ...request.Option) (*glacier.AbortVaultLockOutput, error) {
	c.inc("AbortVaultLock")
	return c.svc.AbortVaultLockWithContext(ctx, input, opts...)
}

// AddTagsToVaultRequest is a passthrough to the underlying AddTagsToVaultRequest.
// It will increment the count of requests made to AddTagsToVault.
func (c *Glacier) AddTagsToVaultRequest(input *glacier.AddTagsToVaultInput) (req *request.Request, output *glacier.AddTagsToVaultOutput) {
	c.inc("AddTagsToVault")
	return c.svc.AddTagsToVaultRequest(input)
}

// AddTagsToVault is a passthrough to the underlying AddTagsToVault method.
// It will increment the count of requests made to AddTagsToVault.
func (c *Glacier) AddTagsToVault(input *glacier.AddTagsToVaultInput) (*glacier.AddTagsToVaultOutput, error) {
	c.inc("AddTagsToVault")
	return c.svc.AddTagsToVault(input)
}

// AddTagsToVaultWithContext is a passthrough to the underlying AddTagsToVaultWithContext method.
// It will increment the count of requests made to AddTagsToVault.
func (c *Glacier) AddTagsToVaultWithContext(ctx aws.Context, input *glacier.AddTagsToVaultInput, opts ...request.Option) (*glacier.AddTagsToVaultOutput, error) {
	c.inc("AddTagsToVault")
	return c.svc.AddTagsToVaultWithContext(ctx, input, opts...)
}

// CompleteMultipartUploadRequest is a passthrough to the underlying CompleteMultipartUploadRequest.
// It will increment the count of requests made to CompleteMultipartUpload.
func (c *Glacier) CompleteMultipartUploadRequest(input *glacier.CompleteMultipartUploadInput) (req *request.Request, output *glacier.ArchiveCreationOutput) {
	c.inc("CompleteMultipartUpload")
	return c.svc.CompleteMultipartUploadRequest(input)
}

// CompleteMultipartUpload is a passthrough to the underlying CompleteMultipartUpload method.
// It will increment the count of requests made to CompleteMultipartUpload.
func (c *Glacier) CompleteMultipartUpload(input *glacier.CompleteMultipartUploadInput) (*glacier.ArchiveCreationOutput, error) {
	c.inc("CompleteMultipartUpload")
	return c.svc.CompleteMultipartUpload(input)
}

// CompleteMultipartUploadWithContext is a passthrough to the underlying CompleteMultipartUploadWithContext method.
// It will increment the count of requests made to CompleteMultipartUpload.
func (c *Glacier) CompleteMultipartUploadWithContext(ctx aws.Context, input *glacier.CompleteMultipartUploadInput, opts ...request.Option) (*glacier.ArchiveCreationOutput, error) {
	c.inc("CompleteMultipartUpload")
	return c.svc.CompleteMultipartUploadWithContext(ctx, input, opts...)
}

// CompleteVaultLockRequest is a passthrough to the underlying CompleteVaultLockRequest.
// It will increment the count of requests made to CompleteVaultLock.
func (c *Glacier) CompleteVaultLockRequest(input *glacier.CompleteVaultLockInput) (req *request.Request, output *glacier.CompleteVaultLockOutput) {
	c.inc("CompleteVaultLock")
	return c.svc.CompleteVaultLockRequest(input)
}

// CompleteVaultLock is a passthrough to the underlying CompleteVaultLock method.
// It will increment the count of requests made to CompleteVaultLock.
func (c *Glacier) CompleteVaultLock(input *glacier.CompleteVaultLockInput) (*glacier.CompleteVaultLockOutput, error) {
	c.inc("CompleteVaultLock")
	return c.svc.CompleteVaultLock(input)
}

// CompleteVaultLockWithContext is a passthrough to the underlying CompleteVaultLockWithContext method.
// It will increment the count of requests made to CompleteVaultLock.
func (c *Glacier) CompleteVaultLockWithContext(ctx aws.Context, input *glacier.CompleteVaultLockInput, opts ...request.Option) (*glacier.CompleteVaultLockOutput, error) {
	c.inc("CompleteVaultLock")
	return c.svc.CompleteVaultLockWithContext(ctx, input, opts...)
}

// CreateVaultRequest is a passthrough to the underlying CreateVaultRequest.
// It will increment the count of requests made to CreateVault.
func (c *Glacier) CreateVaultRequest(input *glacier.CreateVaultInput) (req *request.Request, output *glacier.CreateVaultOutput) {
	c.inc("CreateVault")
	return c.svc.CreateVaultRequest(input)
}

// CreateVault is a passthrough to the underlying CreateVault method.
// It will increment the count of requests made to CreateVault.
func (c *Glacier) CreateVault(input *glacier.CreateVaultInput) (*glacier.CreateVaultOutput, error) {
	c.inc("CreateVault")
	return c.svc.CreateVault(input)
}

// CreateVaultWithContext is a passthrough to the underlying CreateVaultWithContext method.
// It will increment the count of requests made to CreateVault.
func (c *Glacier) CreateVaultWithContext(ctx aws.Context, input *glacier.CreateVaultInput, opts ...request.Option) (*glacier.CreateVaultOutput, error) {
	c.inc("CreateVault")
	return c.svc.CreateVaultWithContext(ctx, input, opts...)
}

// DeleteArchiveRequest is a passthrough to the underlying DeleteArchiveRequest.
// It will increment the count of requests made to DeleteArchive.
func (c *Glacier) DeleteArchiveRequest(input *glacier.DeleteArchiveInput) (req *request.Request, output *glacier.DeleteArchiveOutput) {
	c.inc("DeleteArchive")
	return c.svc.DeleteArchiveRequest(input)
}

// DeleteArchive is a passthrough to the underlying DeleteArchive method.
// It will increment the count of requests made to DeleteArchive.
func (c *Glacier) DeleteArchive(input *glacier.DeleteArchiveInput) (*glacier.DeleteArchiveOutput, error) {
	c.inc("DeleteArchive")
	return c.svc.DeleteArchive(input)
}

// DeleteArchiveWithContext is a passthrough to the underlying DeleteArchiveWithContext method.
// It will increment the count of requests made to DeleteArchive.
func (c *Glacier) DeleteArchiveWithContext(ctx aws.Context, input *glacier.DeleteArchiveInput, opts ...request.Option) (*glacier.DeleteArchiveOutput, error) {
	c.inc("DeleteArchive")
	return c.svc.DeleteArchiveWithContext(ctx, input, opts...)
}

// DeleteVaultRequest is a passthrough to the underlying DeleteVaultRequest.
// It will increment the count of requests made to DeleteVault.
func (c *Glacier) DeleteVaultRequest(input *glacier.DeleteVaultInput) (req *request.Request, output *glacier.DeleteVaultOutput) {
	c.inc("DeleteVault")
	return c.svc.DeleteVaultRequest(input)
}

// DeleteVault is a passthrough to the underlying DeleteVault method.
// It will increment the count of requests made to DeleteVault.
func (c *Glacier) DeleteVault(input *glacier.DeleteVaultInput) (*glacier.DeleteVaultOutput, error) {
	c.inc("DeleteVault")
	return c.svc.DeleteVault(input)
}

// DeleteVaultWithContext is a passthrough to the underlying DeleteVaultWithContext method.
// It will increment the count of requests made to DeleteVault.
func (c *Glacier) DeleteVaultWithContext(ctx aws.Context, input *glacier.DeleteVaultInput, opts ...request.Option) (*glacier.DeleteVaultOutput, error) {
	c.inc("DeleteVault")
	return c.svc.DeleteVaultWithContext(ctx, input, opts...)
}

// DeleteVaultAccessPolicyRequest is a passthrough to the underlying DeleteVaultAccessPolicyRequest.
// It will increment the count of requests made to DeleteVaultAccessPolicy.
func (c *Glacier) DeleteVaultAccessPolicyRequest(input *glacier.DeleteVaultAccessPolicyInput) (req *request.Request, output *glacier.DeleteVaultAccessPolicyOutput) {
	c.inc("DeleteVaultAccessPolicy")
	return c.svc.DeleteVaultAccessPolicyRequest(input)
}

// DeleteVaultAccessPolicy is a passthrough to the underlying DeleteVaultAccessPolicy method.
// It will increment the count of requests made to DeleteVaultAccessPolicy.
func (c *Glacier) DeleteVaultAccessPolicy(input *glacier.DeleteVaultAccessPolicyInput) (*glacier.DeleteVaultAccessPolicyOutput, error) {
	c.inc("DeleteVaultAccessPolicy")
	return c.svc.DeleteVaultAccessPolicy(input)
}

// DeleteVaultAccessPolicyWithContext is a passthrough to the underlying DeleteVaultAccessPolicyWithContext method.
// It will increment the count of requests made to DeleteVaultAccessPolicy.
func (c *Glacier) DeleteVaultAccessPolicyWithContext(ctx aws.Context, input *glacier.DeleteVaultAccessPolicyInput, opts ...request.Option) (*glacier.DeleteVaultAccessPolicyOutput, error) {
	c.inc("DeleteVaultAccessPolicy")
	return c.svc.DeleteVaultAccessPolicyWithContext(ctx, input, opts...)
}

// DeleteVaultNotificationsRequest is a passthrough to the underlying DeleteVaultNotificationsRequest.
// It will increment the count of requests made to DeleteVaultNotifications.
func (c *Glacier) DeleteVaultNotificationsRequest(input *glacier.DeleteVaultNotificationsInput) (req *request.Request, output *glacier.DeleteVaultNotificationsOutput) {
	c.inc("DeleteVaultNotifications")
	return c.svc.DeleteVaultNotificationsRequest(input)
}

// DeleteVaultNotifications is a passthrough to the underlying DeleteVaultNotifications method.
// It will increment the count of requests made to DeleteVaultNotifications.
func (c *Glacier) DeleteVaultNotifications(input *glacier.DeleteVaultNotificationsInput) (*glacier.DeleteVaultNotificationsOutput, error) {
	c.inc("DeleteVaultNotifications")
	return c.svc.DeleteVaultNotifications(input)
}

// DeleteVaultNotificationsWithContext is a passthrough to the underlying DeleteVaultNotificationsWithContext method.
// It will increment the count of requests made to DeleteVaultNotifications.
func (c *Glacier) DeleteVaultNotificationsWithContext(ctx aws.Context, input *glacier.DeleteVaultNotificationsInput, opts ...request.Option) (*glacier.DeleteVaultNotificationsOutput, error) {
	c.inc("DeleteVaultNotifications")
	return c.svc.DeleteVaultNotificationsWithContext(ctx, input, opts...)
}

// DescribeJobRequest is a passthrough to the underlying DescribeJobRequest.
// It will increment the count of requests made to DescribeJob.
func (c *Glacier) DescribeJobRequest(input *glacier.DescribeJobInput) (req *request.Request, output *glacier.JobDescription) {
	c.inc("DescribeJob")
	return c.svc.DescribeJobRequest(input)
}

// DescribeJob is a passthrough to the underlying DescribeJob method.
// It will increment the count of requests made to DescribeJob.
func (c *Glacier) DescribeJob(input *glacier.DescribeJobInput) (*glacier.JobDescription, error) {
	c.inc("DescribeJob")
	return c.svc.DescribeJob(input)
}

// DescribeJobWithContext is a passthrough to the underlying DescribeJobWithContext method.
// It will increment the count of requests made to DescribeJob.
func (c *Glacier) DescribeJobWithContext(ctx aws.Context, input *glacier.DescribeJobInput, opts ...request.Option) (*glacier.JobDescription, error) {
	c.inc("DescribeJob")
	return c.svc.DescribeJobWithContext(ctx, input, opts...)
}

// DescribeVaultRequest is a passthrough to the underlying DescribeVaultRequest.
// It will increment the count of requests made to DescribeVault.
func (c *Glacier) DescribeVaultRequest(input *glacier.DescribeVaultInput) (req *request.Request, output *glacier.DescribeVaultOutput) {
	c.inc("DescribeVault")
	return c.svc.DescribeVaultRequest(input)
}

// DescribeVault is a passthrough to the underlying DescribeVault method.
// It will increment the count of requests made to DescribeVault.
func (c *Glacier) DescribeVault(input *glacier.DescribeVaultInput) (*glacier.DescribeVaultOutput, error) {
	c.inc("DescribeVault")
	return c.svc.DescribeVault(input)
}

// DescribeVaultWithContext is a passthrough to the underlying DescribeVaultWithContext method.
// It will increment the count of requests made to DescribeVault.
func (c *Glacier) DescribeVaultWithContext(ctx aws.Context, input *glacier.DescribeVaultInput, opts ...request.Option) (*glacier.DescribeVaultOutput, error) {
	c.inc("DescribeVault")
	return c.svc.DescribeVaultWithContext(ctx, input, opts...)
}

// GetDataRetrievalPolicyRequest is a passthrough to the underlying GetDataRetrievalPolicyRequest.
// It will increment the count of requests made to GetDataRetrievalPolicy.
func (c *Glacier) GetDataRetrievalPolicyRequest(input *glacier.GetDataRetrievalPolicyInput) (req *request.Request, output *glacier.GetDataRetrievalPolicyOutput) {
	c.inc("GetDataRetrievalPolicy")
	return c.svc.GetDataRetrievalPolicyRequest(input)
}

// GetDataRetrievalPolicy is a passthrough to the underlying GetDataRetrievalPolicy method.
// It will increment the count of requests made to GetDataRetrievalPolicy.
func (c *Glacier) GetDataRetrievalPolicy(input *glacier.GetDataRetrievalPolicyInput) (*glacier.GetDataRetrievalPolicyOutput, error) {
	c.inc("GetDataRetrievalPolicy")
	return c.svc.GetDataRetrievalPolicy(input)
}

// GetDataRetrievalPolicyWithContext is a passthrough to the underlying GetDataRetrievalPolicyWithContext method.
// It will increment the count of requests made to GetDataRetrievalPolicy.
func (c *Glacier) GetDataRetrievalPolicyWithContext(ctx aws.Context, input *glacier.GetDataRetrievalPolicyInput, opts ...request.Option) (*glacier.GetDataRetrievalPolicyOutput, error) {
	c.inc("GetDataRetrievalPolicy")
	return c.svc.GetDataRetrievalPolicyWithContext(ctx, input, opts...)
}

// GetJobOutputRequest is a passthrough to the underlying GetJobOutputRequest.
// It will increment the count of requests made to GetJobOutput.
func (c *Glacier) GetJobOutputRequest(input *glacier.GetJobOutputInput) (req *request.Request, output *glacier.GetJobOutputOutput) {
	c.inc("GetJobOutput")
	return c.svc.GetJobOutputRequest(input)
}

// GetJobOutput is a passthrough to the underlying GetJobOutput method.
// It will increment the count of requests made to GetJobOutput.
func (c *Glacier) GetJobOutput(input *glacier.GetJobOutputInput) (*glacier.GetJobOutputOutput, error) {
	c.inc("GetJobOutput")
	return c.svc.GetJobOutput(input)
}

// GetJobOutputWithContext is a passthrough to the underlying GetJobOutputWithContext method.
// It will increment the count of requests made to GetJobOutput.
func (c *Glacier) GetJobOutputWithContext(ctx aws.Context, input *glacier.GetJobOutputInput, opts ...request.Option) (*glacier.GetJobOutputOutput, error) {
	c.inc("GetJobOutput")
	return c.svc.GetJobOutputWithContext(ctx, input, opts...)
}

// GetVaultAccessPolicyRequest is a passthrough to the underlying GetVaultAccessPolicyRequest.
// It will increment the count of requests made to GetVaultAccessPolicy.
func (c *Glacier) GetVaultAccessPolicyRequest(input *glacier.GetVaultAccessPolicyInput) (req *request.Request, output *glacier.GetVaultAccessPolicyOutput) {
	c.inc("GetVaultAccessPolicy")
	return c.svc.GetVaultAccessPolicyRequest(input)
}

// GetVaultAccessPolicy is a passthrough to the underlying GetVaultAccessPolicy method.
// It will increment the count of requests made to GetVaultAccessPolicy.
func (c *Glacier) GetVaultAccessPolicy(input *glacier.GetVaultAccessPolicyInput) (*glacier.GetVaultAccessPolicyOutput, error) {
	c.inc("GetVaultAccessPolicy")
	return c.svc.GetVaultAccessPolicy(input)
}

// GetVaultAccessPolicyWithContext is a passthrough to the underlying GetVaultAccessPolicyWithContext method.
// It will increment the count of requests made to GetVaultAccessPolicy.
func (c *Glacier) GetVaultAccessPolicyWithContext(ctx aws.Context, input *glacier.GetVaultAccessPolicyInput, opts ...request.Option) (*glacier.GetVaultAccessPolicyOutput, error) {
	c.inc("GetVaultAccessPolicy")
	return c.svc.GetVaultAccessPolicyWithContext(ctx, input, opts...)
}

// GetVaultLockRequest is a passthrough to the underlying GetVaultLockRequest.
// It will increment the count of requests made to GetVaultLock.
func (c *Glacier) GetVaultLockRequest(input *glacier.GetVaultLockInput) (req *request.Request, output *glacier.GetVaultLockOutput) {
	c.inc("GetVaultLock")
	return c.svc.GetVaultLockRequest(input)
}

// GetVaultLock is a passthrough to the underlying GetVaultLock method.
// It will increment the count of requests made to GetVaultLock.
func (c *Glacier) GetVaultLock(input *glacier.GetVaultLockInput) (*glacier.GetVaultLockOutput, error) {
	c.inc("GetVaultLock")
	return c.svc.GetVaultLock(input)
}

// GetVaultLockWithContext is a passthrough to the underlying GetVaultLockWithContext method.
// It will increment the count of requests made to GetVaultLock.
func (c *Glacier) GetVaultLockWithContext(ctx aws.Context, input *glacier.GetVaultLockInput, opts ...request.Option) (*glacier.GetVaultLockOutput, error) {
	c.inc("GetVaultLock")
	return c.svc.GetVaultLockWithContext(ctx, input, opts...)
}

// GetVaultNotificationsRequest is a passthrough to the underlying GetVaultNotificationsRequest.
// It will increment the count of requests made to GetVaultNotifications.
func (c *Glacier) GetVaultNotificationsRequest(input *glacier.GetVaultNotificationsInput) (req *request.Request, output *glacier.GetVaultNotificationsOutput) {
	c.inc("GetVaultNotifications")
	return c.svc.GetVaultNotificationsRequest(input)
}

// GetVaultNotifications is a passthrough to the underlying GetVaultNotifications method.
// It will increment the count of requests made to GetVaultNotifications.
func (c *Glacier) GetVaultNotifications(input *glacier.GetVaultNotificationsInput) (*glacier.GetVaultNotificationsOutput, error) {
	c.inc("GetVaultNotifications")
	return c.svc.GetVaultNotifications(input)
}

// GetVaultNotificationsWithContext is a passthrough to the underlying GetVaultNotificationsWithContext method.
// It will increment the count of requests made to GetVaultNotifications.
func (c *Glacier) GetVaultNotificationsWithContext(ctx aws.Context, input *glacier.GetVaultNotificationsInput, opts ...request.Option) (*glacier.GetVaultNotificationsOutput, error) {
	c.inc("GetVaultNotifications")
	return c.svc.GetVaultNotificationsWithContext(ctx, input, opts...)
}

// InitiateJobRequest is a passthrough to the underlying InitiateJobRequest.
// It will increment the count of requests made to InitiateJob.
func (c *Glacier) InitiateJobRequest(input *glacier.InitiateJobInput) (req *request.Request, output *glacier.InitiateJobOutput) {
	c.inc("InitiateJob")
	return c.svc.InitiateJobRequest(input)
}

// InitiateJob is a passthrough to the underlying InitiateJob method.
// It will increment the count of requests made to InitiateJob.
func (c *Glacier) InitiateJob(input *glacier.InitiateJobInput) (*glacier.InitiateJobOutput, error) {
	c.inc("InitiateJob")
	return c.svc.InitiateJob(input)
}

// InitiateJobWithContext is a passthrough to the underlying InitiateJobWithContext method.
// It will increment the count of requests made to InitiateJob.
func (c *Glacier) InitiateJobWithContext(ctx aws.Context, input *glacier.InitiateJobInput, opts ...request.Option) (*glacier.InitiateJobOutput, error) {
	c.inc("InitiateJob")
	return c.svc.InitiateJobWithContext(ctx, input, opts...)
}

// InitiateMultipartUploadRequest is a passthrough to the underlying InitiateMultipartUploadRequest.
// It will increment the count of requests made to InitiateMultipartUpload.
func (c *Glacier) InitiateMultipartUploadRequest(input *glacier.InitiateMultipartUploadInput) (req *request.Request, output *glacier.InitiateMultipartUploadOutput) {
	c.inc("InitiateMultipartUpload")
	return c.svc.InitiateMultipartUploadRequest(input)
}

// InitiateMultipartUpload is a passthrough to the underlying InitiateMultipartUpload method.
// It will increment the count of requests made to InitiateMultipartUpload.
func (c *Glacier) InitiateMultipartUpload(input *glacier.InitiateMultipartUploadInput) (*glacier.InitiateMultipartUploadOutput, error) {
	c.inc("InitiateMultipartUpload")
	return c.svc.InitiateMultipartUpload(input)
}

// InitiateMultipartUploadWithContext is a passthrough to the underlying InitiateMultipartUploadWithContext method.
// It will increment the count of requests made to InitiateMultipartUpload.
func (c *Glacier) InitiateMultipartUploadWithContext(ctx aws.Context, input *glacier.InitiateMultipartUploadInput, opts ...request.Option) (*glacier.InitiateMultipartUploadOutput, error) {
	c.inc("InitiateMultipartUpload")
	return c.svc.InitiateMultipartUploadWithContext(ctx, input, opts...)
}

// InitiateVaultLockRequest is a passthrough to the underlying InitiateVaultLockRequest.
// It will increment the count of requests made to InitiateVaultLock.
func (c *Glacier) InitiateVaultLockRequest(input *glacier.InitiateVaultLockInput) (req *request.Request, output *glacier.InitiateVaultLockOutput) {
	c.inc("InitiateVaultLock")
	return c.svc.InitiateVaultLockRequest(input)
}

// InitiateVaultLock is a passthrough to the underlying InitiateVaultLock method.
// It will increment the count of requests made to InitiateVaultLock.
func (c *Glacier) InitiateVaultLock(input *glacier.InitiateVaultLockInput) (*glacier.InitiateVaultLockOutput, error) {
	c.inc("InitiateVaultLock")
	return c.svc.InitiateVaultLock(input)
}

// InitiateVaultLockWithContext is a passthrough to the underlying InitiateVaultLockWithContext method.
// It will increment the count of requests made to InitiateVaultLock.
func (c *Glacier) InitiateVaultLockWithContext(ctx aws.Context, input *glacier.InitiateVaultLockInput, opts ...request.Option) (*glacier.InitiateVaultLockOutput, error) {
	c.inc("InitiateVaultLock")
	return c.svc.InitiateVaultLockWithContext(ctx, input, opts...)
}

// ListJobsRequest is a passthrough to the underlying ListJobsRequest.
// It will increment the count of requests made to ListJobs.
func (c *Glacier) ListJobsRequest(input *glacier.ListJobsInput) (req *request.Request, output *glacier.ListJobsOutput) {
	c.inc("ListJobs")
	return c.svc.ListJobsRequest(input)
}

// ListJobs is a passthrough to the underlying ListJobs method.
// It will increment the count of requests made to ListJobs.
func (c *Glacier) ListJobs(input *glacier.ListJobsInput) (*glacier.ListJobsOutput, error) {
	c.inc("ListJobs")
	return c.svc.ListJobs(input)
}

// ListJobsWithContext is a passthrough to the underlying ListJobsWithContext method.
// It will increment the count of requests made to ListJobs.
func (c *Glacier) ListJobsWithContext(ctx aws.Context, input *glacier.ListJobsInput, opts ...request.Option) (*glacier.ListJobsOutput, error) {
	c.inc("ListJobs")
	return c.svc.ListJobsWithContext(ctx, input, opts...)
}

// ListJobsPages is a passthrough to the underlying ListJobsPages method.
// It will increment the count of requests made to ListJobs on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListJobsPagesWithContext to avoid this.
func (c *Glacier) ListJobsPages(input *glacier.ListJobsInput, fn func(*glacier.ListJobsOutput, bool) bool) error {
	wrappedFn := func(page *glacier.ListJobsOutput, lastPage bool) bool {
		c.inc("ListJobs")
		return fn(page, lastPage)
	}
	return c.ListJobsPages(input, wrappedFn)
}

// ListJobsPagesWithContext is a passthrough to the underlying ListJobsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListJobs when applied to the request.
func (c *Glacier) ListJobsPagesWithContext(ctx aws.Context, input *glacier.ListJobsInput, fn func(*glacier.ListJobsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListJobs"))
	return c.ListJobsPagesWithContext(ctx, input, fn, opts...)
}

// ListMultipartUploadsRequest is a passthrough to the underlying ListMultipartUploadsRequest.
// It will increment the count of requests made to ListMultipartUploads.
func (c *Glacier) ListMultipartUploadsRequest(input *glacier.ListMultipartUploadsInput) (req *request.Request, output *glacier.ListMultipartUploadsOutput) {
	c.inc("ListMultipartUploads")
	return c.svc.ListMultipartUploadsRequest(input)
}

// ListMultipartUploads is a passthrough to the underlying ListMultipartUploads method.
// It will increment the count of requests made to ListMultipartUploads.
func (c *Glacier) ListMultipartUploads(input *glacier.ListMultipartUploadsInput) (*glacier.ListMultipartUploadsOutput, error) {
	c.inc("ListMultipartUploads")
	return c.svc.ListMultipartUploads(input)
}

// ListMultipartUploadsWithContext is a passthrough to the underlying ListMultipartUploadsWithContext method.
// It will increment the count of requests made to ListMultipartUploads.
func (c *Glacier) ListMultipartUploadsWithContext(ctx aws.Context, input *glacier.ListMultipartUploadsInput, opts ...request.Option) (*glacier.ListMultipartUploadsOutput, error) {
	c.inc("ListMultipartUploads")
	return c.svc.ListMultipartUploadsWithContext(ctx, input, opts...)
}

// ListMultipartUploadsPages is a passthrough to the underlying ListMultipartUploadsPages method.
// It will increment the count of requests made to ListMultipartUploads on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListMultipartUploadsPagesWithContext to avoid this.
func (c *Glacier) ListMultipartUploadsPages(input *glacier.ListMultipartUploadsInput, fn func(*glacier.ListMultipartUploadsOutput, bool) bool) error {
	wrappedFn := func(page *glacier.ListMultipartUploadsOutput, lastPage bool) bool {
		c.inc("ListMultipartUploads")
		return fn(page, lastPage)
	}
	return c.ListMultipartUploadsPages(input, wrappedFn)
}

// ListMultipartUploadsPagesWithContext is a passthrough to the underlying ListMultipartUploadsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListMultipartUploads when applied to the request.
func (c *Glacier) ListMultipartUploadsPagesWithContext(ctx aws.Context, input *glacier.ListMultipartUploadsInput, fn func(*glacier.ListMultipartUploadsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListMultipartUploads"))
	return c.ListMultipartUploadsPagesWithContext(ctx, input, fn, opts...)
}

// ListPartsRequest is a passthrough to the underlying ListPartsRequest.
// It will increment the count of requests made to ListParts.
func (c *Glacier) ListPartsRequest(input *glacier.ListPartsInput) (req *request.Request, output *glacier.ListPartsOutput) {
	c.inc("ListParts")
	return c.svc.ListPartsRequest(input)
}

// ListParts is a passthrough to the underlying ListParts method.
// It will increment the count of requests made to ListParts.
func (c *Glacier) ListParts(input *glacier.ListPartsInput) (*glacier.ListPartsOutput, error) {
	c.inc("ListParts")
	return c.svc.ListParts(input)
}

// ListPartsWithContext is a passthrough to the underlying ListPartsWithContext method.
// It will increment the count of requests made to ListParts.
func (c *Glacier) ListPartsWithContext(ctx aws.Context, input *glacier.ListPartsInput, opts ...request.Option) (*glacier.ListPartsOutput, error) {
	c.inc("ListParts")
	return c.svc.ListPartsWithContext(ctx, input, opts...)
}

// ListPartsPages is a passthrough to the underlying ListPartsPages method.
// It will increment the count of requests made to ListParts on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListPartsPagesWithContext to avoid this.
func (c *Glacier) ListPartsPages(input *glacier.ListPartsInput, fn func(*glacier.ListPartsOutput, bool) bool) error {
	wrappedFn := func(page *glacier.ListPartsOutput, lastPage bool) bool {
		c.inc("ListParts")
		return fn(page, lastPage)
	}
	return c.ListPartsPages(input, wrappedFn)
}

// ListPartsPagesWithContext is a passthrough to the underlying ListPartsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListParts when applied to the request.
func (c *Glacier) ListPartsPagesWithContext(ctx aws.Context, input *glacier.ListPartsInput, fn func(*glacier.ListPartsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListParts"))
	return c.ListPartsPagesWithContext(ctx, input, fn, opts...)
}

// ListProvisionedCapacityRequest is a passthrough to the underlying ListProvisionedCapacityRequest.
// It will increment the count of requests made to ListProvisionedCapacity.
func (c *Glacier) ListProvisionedCapacityRequest(input *glacier.ListProvisionedCapacityInput) (req *request.Request, output *glacier.ListProvisionedCapacityOutput) {
	c.inc("ListProvisionedCapacity")
	return c.svc.ListProvisionedCapacityRequest(input)
}

// ListProvisionedCapacity is a passthrough to the underlying ListProvisionedCapacity method.
// It will increment the count of requests made to ListProvisionedCapacity.
func (c *Glacier) ListProvisionedCapacity(input *glacier.ListProvisionedCapacityInput) (*glacier.ListProvisionedCapacityOutput, error) {
	c.inc("ListProvisionedCapacity")
	return c.svc.ListProvisionedCapacity(input)
}

// ListProvisionedCapacityWithContext is a passthrough to the underlying ListProvisionedCapacityWithContext method.
// It will increment the count of requests made to ListProvisionedCapacity.
func (c *Glacier) ListProvisionedCapacityWithContext(ctx aws.Context, input *glacier.ListProvisionedCapacityInput, opts ...request.Option) (*glacier.ListProvisionedCapacityOutput, error) {
	c.inc("ListProvisionedCapacity")
	return c.svc.ListProvisionedCapacityWithContext(ctx, input, opts...)
}

// ListTagsForVaultRequest is a passthrough to the underlying ListTagsForVaultRequest.
// It will increment the count of requests made to ListTagsForVault.
func (c *Glacier) ListTagsForVaultRequest(input *glacier.ListTagsForVaultInput) (req *request.Request, output *glacier.ListTagsForVaultOutput) {
	c.inc("ListTagsForVault")
	return c.svc.ListTagsForVaultRequest(input)
}

// ListTagsForVault is a passthrough to the underlying ListTagsForVault method.
// It will increment the count of requests made to ListTagsForVault.
func (c *Glacier) ListTagsForVault(input *glacier.ListTagsForVaultInput) (*glacier.ListTagsForVaultOutput, error) {
	c.inc("ListTagsForVault")
	return c.svc.ListTagsForVault(input)
}

// ListTagsForVaultWithContext is a passthrough to the underlying ListTagsForVaultWithContext method.
// It will increment the count of requests made to ListTagsForVault.
func (c *Glacier) ListTagsForVaultWithContext(ctx aws.Context, input *glacier.ListTagsForVaultInput, opts ...request.Option) (*glacier.ListTagsForVaultOutput, error) {
	c.inc("ListTagsForVault")
	return c.svc.ListTagsForVaultWithContext(ctx, input, opts...)
}

// ListVaultsRequest is a passthrough to the underlying ListVaultsRequest.
// It will increment the count of requests made to ListVaults.
func (c *Glacier) ListVaultsRequest(input *glacier.ListVaultsInput) (req *request.Request, output *glacier.ListVaultsOutput) {
	c.inc("ListVaults")
	return c.svc.ListVaultsRequest(input)
}

// ListVaults is a passthrough to the underlying ListVaults method.
// It will increment the count of requests made to ListVaults.
func (c *Glacier) ListVaults(input *glacier.ListVaultsInput) (*glacier.ListVaultsOutput, error) {
	c.inc("ListVaults")
	return c.svc.ListVaults(input)
}

// ListVaultsWithContext is a passthrough to the underlying ListVaultsWithContext method.
// It will increment the count of requests made to ListVaults.
func (c *Glacier) ListVaultsWithContext(ctx aws.Context, input *glacier.ListVaultsInput, opts ...request.Option) (*glacier.ListVaultsOutput, error) {
	c.inc("ListVaults")
	return c.svc.ListVaultsWithContext(ctx, input, opts...)
}

// ListVaultsPages is a passthrough to the underlying ListVaultsPages method.
// It will increment the count of requests made to ListVaults on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListVaultsPagesWithContext to avoid this.
func (c *Glacier) ListVaultsPages(input *glacier.ListVaultsInput, fn func(*glacier.ListVaultsOutput, bool) bool) error {
	wrappedFn := func(page *glacier.ListVaultsOutput, lastPage bool) bool {
		c.inc("ListVaults")
		return fn(page, lastPage)
	}
	return c.ListVaultsPages(input, wrappedFn)
}

// ListVaultsPagesWithContext is a passthrough to the underlying ListVaultsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListVaults when applied to the request.
func (c *Glacier) ListVaultsPagesWithContext(ctx aws.Context, input *glacier.ListVaultsInput, fn func(*glacier.ListVaultsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListVaults"))
	return c.ListVaultsPagesWithContext(ctx, input, fn, opts...)
}

// PurchaseProvisionedCapacityRequest is a passthrough to the underlying PurchaseProvisionedCapacityRequest.
// It will increment the count of requests made to PurchaseProvisionedCapacity.
func (c *Glacier) PurchaseProvisionedCapacityRequest(input *glacier.PurchaseProvisionedCapacityInput) (req *request.Request, output *glacier.PurchaseProvisionedCapacityOutput) {
	c.inc("PurchaseProvisionedCapacity")
	return c.svc.PurchaseProvisionedCapacityRequest(input)
}

// PurchaseProvisionedCapacity is a passthrough to the underlying PurchaseProvisionedCapacity method.
// It will increment the count of requests made to PurchaseProvisionedCapacity.
func (c *Glacier) PurchaseProvisionedCapacity(input *glacier.PurchaseProvisionedCapacityInput) (*glacier.PurchaseProvisionedCapacityOutput, error) {
	c.inc("PurchaseProvisionedCapacity")
	return c.svc.PurchaseProvisionedCapacity(input)
}

// PurchaseProvisionedCapacityWithContext is a passthrough to the underlying PurchaseProvisionedCapacityWithContext method.
// It will increment the count of requests made to PurchaseProvisionedCapacity.
func (c *Glacier) PurchaseProvisionedCapacityWithContext(ctx aws.Context, input *glacier.PurchaseProvisionedCapacityInput, opts ...request.Option) (*glacier.PurchaseProvisionedCapacityOutput, error) {
	c.inc("PurchaseProvisionedCapacity")
	return c.svc.PurchaseProvisionedCapacityWithContext(ctx, input, opts...)
}

// RemoveTagsFromVaultRequest is a passthrough to the underlying RemoveTagsFromVaultRequest.
// It will increment the count of requests made to RemoveTagsFromVault.
func (c *Glacier) RemoveTagsFromVaultRequest(input *glacier.RemoveTagsFromVaultInput) (req *request.Request, output *glacier.RemoveTagsFromVaultOutput) {
	c.inc("RemoveTagsFromVault")
	return c.svc.RemoveTagsFromVaultRequest(input)
}

// RemoveTagsFromVault is a passthrough to the underlying RemoveTagsFromVault method.
// It will increment the count of requests made to RemoveTagsFromVault.
func (c *Glacier) RemoveTagsFromVault(input *glacier.RemoveTagsFromVaultInput) (*glacier.RemoveTagsFromVaultOutput, error) {
	c.inc("RemoveTagsFromVault")
	return c.svc.RemoveTagsFromVault(input)
}

// RemoveTagsFromVaultWithContext is a passthrough to the underlying RemoveTagsFromVaultWithContext method.
// It will increment the count of requests made to RemoveTagsFromVault.
func (c *Glacier) RemoveTagsFromVaultWithContext(ctx aws.Context, input *glacier.RemoveTagsFromVaultInput, opts ...request.Option) (*glacier.RemoveTagsFromVaultOutput, error) {
	c.inc("RemoveTagsFromVault")
	return c.svc.RemoveTagsFromVaultWithContext(ctx, input, opts...)
}

// SetDataRetrievalPolicyRequest is a passthrough to the underlying SetDataRetrievalPolicyRequest.
// It will increment the count of requests made to SetDataRetrievalPolicy.
func (c *Glacier) SetDataRetrievalPolicyRequest(input *glacier.SetDataRetrievalPolicyInput) (req *request.Request, output *glacier.SetDataRetrievalPolicyOutput) {
	c.inc("SetDataRetrievalPolicy")
	return c.svc.SetDataRetrievalPolicyRequest(input)
}

// SetDataRetrievalPolicy is a passthrough to the underlying SetDataRetrievalPolicy method.
// It will increment the count of requests made to SetDataRetrievalPolicy.
func (c *Glacier) SetDataRetrievalPolicy(input *glacier.SetDataRetrievalPolicyInput) (*glacier.SetDataRetrievalPolicyOutput, error) {
	c.inc("SetDataRetrievalPolicy")
	return c.svc.SetDataRetrievalPolicy(input)
}

// SetDataRetrievalPolicyWithContext is a passthrough to the underlying SetDataRetrievalPolicyWithContext method.
// It will increment the count of requests made to SetDataRetrievalPolicy.
func (c *Glacier) SetDataRetrievalPolicyWithContext(ctx aws.Context, input *glacier.SetDataRetrievalPolicyInput, opts ...request.Option) (*glacier.SetDataRetrievalPolicyOutput, error) {
	c.inc("SetDataRetrievalPolicy")
	return c.svc.SetDataRetrievalPolicyWithContext(ctx, input, opts...)
}

// SetVaultAccessPolicyRequest is a passthrough to the underlying SetVaultAccessPolicyRequest.
// It will increment the count of requests made to SetVaultAccessPolicy.
func (c *Glacier) SetVaultAccessPolicyRequest(input *glacier.SetVaultAccessPolicyInput) (req *request.Request, output *glacier.SetVaultAccessPolicyOutput) {
	c.inc("SetVaultAccessPolicy")
	return c.svc.SetVaultAccessPolicyRequest(input)
}

// SetVaultAccessPolicy is a passthrough to the underlying SetVaultAccessPolicy method.
// It will increment the count of requests made to SetVaultAccessPolicy.
func (c *Glacier) SetVaultAccessPolicy(input *glacier.SetVaultAccessPolicyInput) (*glacier.SetVaultAccessPolicyOutput, error) {
	c.inc("SetVaultAccessPolicy")
	return c.svc.SetVaultAccessPolicy(input)
}

// SetVaultAccessPolicyWithContext is a passthrough to the underlying SetVaultAccessPolicyWithContext method.
// It will increment the count of requests made to SetVaultAccessPolicy.
func (c *Glacier) SetVaultAccessPolicyWithContext(ctx aws.Context, input *glacier.SetVaultAccessPolicyInput, opts ...request.Option) (*glacier.SetVaultAccessPolicyOutput, error) {
	c.inc("SetVaultAccessPolicy")
	return c.svc.SetVaultAccessPolicyWithContext(ctx, input, opts...)
}

// SetVaultNotificationsRequest is a passthrough to the underlying SetVaultNotificationsRequest.
// It will increment the count of requests made to SetVaultNotifications.
func (c *Glacier) SetVaultNotificationsRequest(input *glacier.SetVaultNotificationsInput) (req *request.Request, output *glacier.SetVaultNotificationsOutput) {
	c.inc("SetVaultNotifications")
	return c.svc.SetVaultNotificationsRequest(input)
}

// SetVaultNotifications is a passthrough to the underlying SetVaultNotifications method.
// It will increment the count of requests made to SetVaultNotifications.
func (c *Glacier) SetVaultNotifications(input *glacier.SetVaultNotificationsInput) (*glacier.SetVaultNotificationsOutput, error) {
	c.inc("SetVaultNotifications")
	return c.svc.SetVaultNotifications(input)
}

// SetVaultNotificationsWithContext is a passthrough to the underlying SetVaultNotificationsWithContext method.
// It will increment the count of requests made to SetVaultNotifications.
func (c *Glacier) SetVaultNotificationsWithContext(ctx aws.Context, input *glacier.SetVaultNotificationsInput, opts ...request.Option) (*glacier.SetVaultNotificationsOutput, error) {
	c.inc("SetVaultNotifications")
	return c.svc.SetVaultNotificationsWithContext(ctx, input, opts...)
}

// UploadArchiveRequest is a passthrough to the underlying UploadArchiveRequest.
// It will increment the count of requests made to UploadArchive.
func (c *Glacier) UploadArchiveRequest(input *glacier.UploadArchiveInput) (req *request.Request, output *glacier.ArchiveCreationOutput) {
	c.inc("UploadArchive")
	return c.svc.UploadArchiveRequest(input)
}

// UploadArchive is a passthrough to the underlying UploadArchive method.
// It will increment the count of requests made to UploadArchive.
func (c *Glacier) UploadArchive(input *glacier.UploadArchiveInput) (*glacier.ArchiveCreationOutput, error) {
	c.inc("UploadArchive")
	return c.svc.UploadArchive(input)
}

// UploadArchiveWithContext is a passthrough to the underlying UploadArchiveWithContext method.
// It will increment the count of requests made to UploadArchive.
func (c *Glacier) UploadArchiveWithContext(ctx aws.Context, input *glacier.UploadArchiveInput, opts ...request.Option) (*glacier.ArchiveCreationOutput, error) {
	c.inc("UploadArchive")
	return c.svc.UploadArchiveWithContext(ctx, input, opts...)
}

// UploadMultipartPartRequest is a passthrough to the underlying UploadMultipartPartRequest.
// It will increment the count of requests made to UploadMultipartPart.
func (c *Glacier) UploadMultipartPartRequest(input *glacier.UploadMultipartPartInput) (req *request.Request, output *glacier.UploadMultipartPartOutput) {
	c.inc("UploadMultipartPart")
	return c.svc.UploadMultipartPartRequest(input)
}

// UploadMultipartPart is a passthrough to the underlying UploadMultipartPart method.
// It will increment the count of requests made to UploadMultipartPart.
func (c *Glacier) UploadMultipartPart(input *glacier.UploadMultipartPartInput) (*glacier.UploadMultipartPartOutput, error) {
	c.inc("UploadMultipartPart")
	return c.svc.UploadMultipartPart(input)
}

// UploadMultipartPartWithContext is a passthrough to the underlying UploadMultipartPartWithContext method.
// It will increment the count of requests made to UploadMultipartPart.
func (c *Glacier) UploadMultipartPartWithContext(ctx aws.Context, input *glacier.UploadMultipartPartInput, opts ...request.Option) (*glacier.UploadMultipartPartOutput, error) {
	c.inc("UploadMultipartPart")
	return c.svc.UploadMultipartPartWithContext(ctx, input, opts...)
}
