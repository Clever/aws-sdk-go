// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package iamcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/iam"
)

// AddClientIDToOpenIDConnectProviderRequest is a passthrough to the underlying AddClientIDToOpenIDConnectProviderRequest.
// It will increment the count of requests made to AddClientIDToOpenIDConnectProvider.
func (c *IAM) AddClientIDToOpenIDConnectProviderRequest(input *iam.AddClientIDToOpenIDConnectProviderInput) (req *request.Request, output *iam.AddClientIDToOpenIDConnectProviderOutput) {
	c.inc("AddClientIDToOpenIDConnectProvider")
	return c.svc.AddClientIDToOpenIDConnectProviderRequest(input)
}

// AddClientIDToOpenIDConnectProvider is a passthrough to the underlying AddClientIDToOpenIDConnectProvider method.
// It will increment the count of requests made to AddClientIDToOpenIDConnectProvider.
func (c *IAM) AddClientIDToOpenIDConnectProvider(input *iam.AddClientIDToOpenIDConnectProviderInput) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	c.inc("AddClientIDToOpenIDConnectProvider")
	return c.svc.AddClientIDToOpenIDConnectProvider(input)
}

// AddClientIDToOpenIDConnectProviderWithContext is a passthrough to the underlying AddClientIDToOpenIDConnectProviderWithContext method.
// It will increment the count of requests made to AddClientIDToOpenIDConnectProvider.
func (c *IAM) AddClientIDToOpenIDConnectProviderWithContext(ctx aws.Context, input *iam.AddClientIDToOpenIDConnectProviderInput, opts ...request.Option) (*iam.AddClientIDToOpenIDConnectProviderOutput, error) {
	c.inc("AddClientIDToOpenIDConnectProvider")
	return c.svc.AddClientIDToOpenIDConnectProviderWithContext(ctx, input, opts...)
}

// AddRoleToInstanceProfileRequest is a passthrough to the underlying AddRoleToInstanceProfileRequest.
// It will increment the count of requests made to AddRoleToInstanceProfile.
func (c *IAM) AddRoleToInstanceProfileRequest(input *iam.AddRoleToInstanceProfileInput) (req *request.Request, output *iam.AddRoleToInstanceProfileOutput) {
	c.inc("AddRoleToInstanceProfile")
	return c.svc.AddRoleToInstanceProfileRequest(input)
}

// AddRoleToInstanceProfile is a passthrough to the underlying AddRoleToInstanceProfile method.
// It will increment the count of requests made to AddRoleToInstanceProfile.
func (c *IAM) AddRoleToInstanceProfile(input *iam.AddRoleToInstanceProfileInput) (*iam.AddRoleToInstanceProfileOutput, error) {
	c.inc("AddRoleToInstanceProfile")
	return c.svc.AddRoleToInstanceProfile(input)
}

// AddRoleToInstanceProfileWithContext is a passthrough to the underlying AddRoleToInstanceProfileWithContext method.
// It will increment the count of requests made to AddRoleToInstanceProfile.
func (c *IAM) AddRoleToInstanceProfileWithContext(ctx aws.Context, input *iam.AddRoleToInstanceProfileInput, opts ...request.Option) (*iam.AddRoleToInstanceProfileOutput, error) {
	c.inc("AddRoleToInstanceProfile")
	return c.svc.AddRoleToInstanceProfileWithContext(ctx, input, opts...)
}

// AddUserToGroupRequest is a passthrough to the underlying AddUserToGroupRequest.
// It will increment the count of requests made to AddUserToGroup.
func (c *IAM) AddUserToGroupRequest(input *iam.AddUserToGroupInput) (req *request.Request, output *iam.AddUserToGroupOutput) {
	c.inc("AddUserToGroup")
	return c.svc.AddUserToGroupRequest(input)
}

// AddUserToGroup is a passthrough to the underlying AddUserToGroup method.
// It will increment the count of requests made to AddUserToGroup.
func (c *IAM) AddUserToGroup(input *iam.AddUserToGroupInput) (*iam.AddUserToGroupOutput, error) {
	c.inc("AddUserToGroup")
	return c.svc.AddUserToGroup(input)
}

// AddUserToGroupWithContext is a passthrough to the underlying AddUserToGroupWithContext method.
// It will increment the count of requests made to AddUserToGroup.
func (c *IAM) AddUserToGroupWithContext(ctx aws.Context, input *iam.AddUserToGroupInput, opts ...request.Option) (*iam.AddUserToGroupOutput, error) {
	c.inc("AddUserToGroup")
	return c.svc.AddUserToGroupWithContext(ctx, input, opts...)
}

// AttachGroupPolicyRequest is a passthrough to the underlying AttachGroupPolicyRequest.
// It will increment the count of requests made to AttachGroupPolicy.
func (c *IAM) AttachGroupPolicyRequest(input *iam.AttachGroupPolicyInput) (req *request.Request, output *iam.AttachGroupPolicyOutput) {
	c.inc("AttachGroupPolicy")
	return c.svc.AttachGroupPolicyRequest(input)
}

// AttachGroupPolicy is a passthrough to the underlying AttachGroupPolicy method.
// It will increment the count of requests made to AttachGroupPolicy.
func (c *IAM) AttachGroupPolicy(input *iam.AttachGroupPolicyInput) (*iam.AttachGroupPolicyOutput, error) {
	c.inc("AttachGroupPolicy")
	return c.svc.AttachGroupPolicy(input)
}

// AttachGroupPolicyWithContext is a passthrough to the underlying AttachGroupPolicyWithContext method.
// It will increment the count of requests made to AttachGroupPolicy.
func (c *IAM) AttachGroupPolicyWithContext(ctx aws.Context, input *iam.AttachGroupPolicyInput, opts ...request.Option) (*iam.AttachGroupPolicyOutput, error) {
	c.inc("AttachGroupPolicy")
	return c.svc.AttachGroupPolicyWithContext(ctx, input, opts...)
}

// AttachRolePolicyRequest is a passthrough to the underlying AttachRolePolicyRequest.
// It will increment the count of requests made to AttachRolePolicy.
func (c *IAM) AttachRolePolicyRequest(input *iam.AttachRolePolicyInput) (req *request.Request, output *iam.AttachRolePolicyOutput) {
	c.inc("AttachRolePolicy")
	return c.svc.AttachRolePolicyRequest(input)
}

// AttachRolePolicy is a passthrough to the underlying AttachRolePolicy method.
// It will increment the count of requests made to AttachRolePolicy.
func (c *IAM) AttachRolePolicy(input *iam.AttachRolePolicyInput) (*iam.AttachRolePolicyOutput, error) {
	c.inc("AttachRolePolicy")
	return c.svc.AttachRolePolicy(input)
}

// AttachRolePolicyWithContext is a passthrough to the underlying AttachRolePolicyWithContext method.
// It will increment the count of requests made to AttachRolePolicy.
func (c *IAM) AttachRolePolicyWithContext(ctx aws.Context, input *iam.AttachRolePolicyInput, opts ...request.Option) (*iam.AttachRolePolicyOutput, error) {
	c.inc("AttachRolePolicy")
	return c.svc.AttachRolePolicyWithContext(ctx, input, opts...)
}

// AttachUserPolicyRequest is a passthrough to the underlying AttachUserPolicyRequest.
// It will increment the count of requests made to AttachUserPolicy.
func (c *IAM) AttachUserPolicyRequest(input *iam.AttachUserPolicyInput) (req *request.Request, output *iam.AttachUserPolicyOutput) {
	c.inc("AttachUserPolicy")
	return c.svc.AttachUserPolicyRequest(input)
}

// AttachUserPolicy is a passthrough to the underlying AttachUserPolicy method.
// It will increment the count of requests made to AttachUserPolicy.
func (c *IAM) AttachUserPolicy(input *iam.AttachUserPolicyInput) (*iam.AttachUserPolicyOutput, error) {
	c.inc("AttachUserPolicy")
	return c.svc.AttachUserPolicy(input)
}

// AttachUserPolicyWithContext is a passthrough to the underlying AttachUserPolicyWithContext method.
// It will increment the count of requests made to AttachUserPolicy.
func (c *IAM) AttachUserPolicyWithContext(ctx aws.Context, input *iam.AttachUserPolicyInput, opts ...request.Option) (*iam.AttachUserPolicyOutput, error) {
	c.inc("AttachUserPolicy")
	return c.svc.AttachUserPolicyWithContext(ctx, input, opts...)
}

// ChangePasswordRequest is a passthrough to the underlying ChangePasswordRequest.
// It will increment the count of requests made to ChangePassword.
func (c *IAM) ChangePasswordRequest(input *iam.ChangePasswordInput) (req *request.Request, output *iam.ChangePasswordOutput) {
	c.inc("ChangePassword")
	return c.svc.ChangePasswordRequest(input)
}

// ChangePassword is a passthrough to the underlying ChangePassword method.
// It will increment the count of requests made to ChangePassword.
func (c *IAM) ChangePassword(input *iam.ChangePasswordInput) (*iam.ChangePasswordOutput, error) {
	c.inc("ChangePassword")
	return c.svc.ChangePassword(input)
}

// ChangePasswordWithContext is a passthrough to the underlying ChangePasswordWithContext method.
// It will increment the count of requests made to ChangePassword.
func (c *IAM) ChangePasswordWithContext(ctx aws.Context, input *iam.ChangePasswordInput, opts ...request.Option) (*iam.ChangePasswordOutput, error) {
	c.inc("ChangePassword")
	return c.svc.ChangePasswordWithContext(ctx, input, opts...)
}

// CreateAccessKeyRequest is a passthrough to the underlying CreateAccessKeyRequest.
// It will increment the count of requests made to CreateAccessKey.
func (c *IAM) CreateAccessKeyRequest(input *iam.CreateAccessKeyInput) (req *request.Request, output *iam.CreateAccessKeyOutput) {
	c.inc("CreateAccessKey")
	return c.svc.CreateAccessKeyRequest(input)
}

// CreateAccessKey is a passthrough to the underlying CreateAccessKey method.
// It will increment the count of requests made to CreateAccessKey.
func (c *IAM) CreateAccessKey(input *iam.CreateAccessKeyInput) (*iam.CreateAccessKeyOutput, error) {
	c.inc("CreateAccessKey")
	return c.svc.CreateAccessKey(input)
}

// CreateAccessKeyWithContext is a passthrough to the underlying CreateAccessKeyWithContext method.
// It will increment the count of requests made to CreateAccessKey.
func (c *IAM) CreateAccessKeyWithContext(ctx aws.Context, input *iam.CreateAccessKeyInput, opts ...request.Option) (*iam.CreateAccessKeyOutput, error) {
	c.inc("CreateAccessKey")
	return c.svc.CreateAccessKeyWithContext(ctx, input, opts...)
}

// CreateAccountAliasRequest is a passthrough to the underlying CreateAccountAliasRequest.
// It will increment the count of requests made to CreateAccountAlias.
func (c *IAM) CreateAccountAliasRequest(input *iam.CreateAccountAliasInput) (req *request.Request, output *iam.CreateAccountAliasOutput) {
	c.inc("CreateAccountAlias")
	return c.svc.CreateAccountAliasRequest(input)
}

// CreateAccountAlias is a passthrough to the underlying CreateAccountAlias method.
// It will increment the count of requests made to CreateAccountAlias.
func (c *IAM) CreateAccountAlias(input *iam.CreateAccountAliasInput) (*iam.CreateAccountAliasOutput, error) {
	c.inc("CreateAccountAlias")
	return c.svc.CreateAccountAlias(input)
}

// CreateAccountAliasWithContext is a passthrough to the underlying CreateAccountAliasWithContext method.
// It will increment the count of requests made to CreateAccountAlias.
func (c *IAM) CreateAccountAliasWithContext(ctx aws.Context, input *iam.CreateAccountAliasInput, opts ...request.Option) (*iam.CreateAccountAliasOutput, error) {
	c.inc("CreateAccountAlias")
	return c.svc.CreateAccountAliasWithContext(ctx, input, opts...)
}

// CreateGroupRequest is a passthrough to the underlying CreateGroupRequest.
// It will increment the count of requests made to CreateGroup.
func (c *IAM) CreateGroupRequest(input *iam.CreateGroupInput) (req *request.Request, output *iam.CreateGroupOutput) {
	c.inc("CreateGroup")
	return c.svc.CreateGroupRequest(input)
}

// CreateGroup is a passthrough to the underlying CreateGroup method.
// It will increment the count of requests made to CreateGroup.
func (c *IAM) CreateGroup(input *iam.CreateGroupInput) (*iam.CreateGroupOutput, error) {
	c.inc("CreateGroup")
	return c.svc.CreateGroup(input)
}

// CreateGroupWithContext is a passthrough to the underlying CreateGroupWithContext method.
// It will increment the count of requests made to CreateGroup.
func (c *IAM) CreateGroupWithContext(ctx aws.Context, input *iam.CreateGroupInput, opts ...request.Option) (*iam.CreateGroupOutput, error) {
	c.inc("CreateGroup")
	return c.svc.CreateGroupWithContext(ctx, input, opts...)
}

// CreateInstanceProfileRequest is a passthrough to the underlying CreateInstanceProfileRequest.
// It will increment the count of requests made to CreateInstanceProfile.
func (c *IAM) CreateInstanceProfileRequest(input *iam.CreateInstanceProfileInput) (req *request.Request, output *iam.CreateInstanceProfileOutput) {
	c.inc("CreateInstanceProfile")
	return c.svc.CreateInstanceProfileRequest(input)
}

// CreateInstanceProfile is a passthrough to the underlying CreateInstanceProfile method.
// It will increment the count of requests made to CreateInstanceProfile.
func (c *IAM) CreateInstanceProfile(input *iam.CreateInstanceProfileInput) (*iam.CreateInstanceProfileOutput, error) {
	c.inc("CreateInstanceProfile")
	return c.svc.CreateInstanceProfile(input)
}

// CreateInstanceProfileWithContext is a passthrough to the underlying CreateInstanceProfileWithContext method.
// It will increment the count of requests made to CreateInstanceProfile.
func (c *IAM) CreateInstanceProfileWithContext(ctx aws.Context, input *iam.CreateInstanceProfileInput, opts ...request.Option) (*iam.CreateInstanceProfileOutput, error) {
	c.inc("CreateInstanceProfile")
	return c.svc.CreateInstanceProfileWithContext(ctx, input, opts...)
}

// CreateLoginProfileRequest is a passthrough to the underlying CreateLoginProfileRequest.
// It will increment the count of requests made to CreateLoginProfile.
func (c *IAM) CreateLoginProfileRequest(input *iam.CreateLoginProfileInput) (req *request.Request, output *iam.CreateLoginProfileOutput) {
	c.inc("CreateLoginProfile")
	return c.svc.CreateLoginProfileRequest(input)
}

// CreateLoginProfile is a passthrough to the underlying CreateLoginProfile method.
// It will increment the count of requests made to CreateLoginProfile.
func (c *IAM) CreateLoginProfile(input *iam.CreateLoginProfileInput) (*iam.CreateLoginProfileOutput, error) {
	c.inc("CreateLoginProfile")
	return c.svc.CreateLoginProfile(input)
}

// CreateLoginProfileWithContext is a passthrough to the underlying CreateLoginProfileWithContext method.
// It will increment the count of requests made to CreateLoginProfile.
func (c *IAM) CreateLoginProfileWithContext(ctx aws.Context, input *iam.CreateLoginProfileInput, opts ...request.Option) (*iam.CreateLoginProfileOutput, error) {
	c.inc("CreateLoginProfile")
	return c.svc.CreateLoginProfileWithContext(ctx, input, opts...)
}

// CreateOpenIDConnectProviderRequest is a passthrough to the underlying CreateOpenIDConnectProviderRequest.
// It will increment the count of requests made to CreateOpenIDConnectProvider.
func (c *IAM) CreateOpenIDConnectProviderRequest(input *iam.CreateOpenIDConnectProviderInput) (req *request.Request, output *iam.CreateOpenIDConnectProviderOutput) {
	c.inc("CreateOpenIDConnectProvider")
	return c.svc.CreateOpenIDConnectProviderRequest(input)
}

// CreateOpenIDConnectProvider is a passthrough to the underlying CreateOpenIDConnectProvider method.
// It will increment the count of requests made to CreateOpenIDConnectProvider.
func (c *IAM) CreateOpenIDConnectProvider(input *iam.CreateOpenIDConnectProviderInput) (*iam.CreateOpenIDConnectProviderOutput, error) {
	c.inc("CreateOpenIDConnectProvider")
	return c.svc.CreateOpenIDConnectProvider(input)
}

// CreateOpenIDConnectProviderWithContext is a passthrough to the underlying CreateOpenIDConnectProviderWithContext method.
// It will increment the count of requests made to CreateOpenIDConnectProvider.
func (c *IAM) CreateOpenIDConnectProviderWithContext(ctx aws.Context, input *iam.CreateOpenIDConnectProviderInput, opts ...request.Option) (*iam.CreateOpenIDConnectProviderOutput, error) {
	c.inc("CreateOpenIDConnectProvider")
	return c.svc.CreateOpenIDConnectProviderWithContext(ctx, input, opts...)
}

// CreatePolicyRequest is a passthrough to the underlying CreatePolicyRequest.
// It will increment the count of requests made to CreatePolicy.
func (c *IAM) CreatePolicyRequest(input *iam.CreatePolicyInput) (req *request.Request, output *iam.CreatePolicyOutput) {
	c.inc("CreatePolicy")
	return c.svc.CreatePolicyRequest(input)
}

// CreatePolicy is a passthrough to the underlying CreatePolicy method.
// It will increment the count of requests made to CreatePolicy.
func (c *IAM) CreatePolicy(input *iam.CreatePolicyInput) (*iam.CreatePolicyOutput, error) {
	c.inc("CreatePolicy")
	return c.svc.CreatePolicy(input)
}

// CreatePolicyWithContext is a passthrough to the underlying CreatePolicyWithContext method.
// It will increment the count of requests made to CreatePolicy.
func (c *IAM) CreatePolicyWithContext(ctx aws.Context, input *iam.CreatePolicyInput, opts ...request.Option) (*iam.CreatePolicyOutput, error) {
	c.inc("CreatePolicy")
	return c.svc.CreatePolicyWithContext(ctx, input, opts...)
}

// CreatePolicyVersionRequest is a passthrough to the underlying CreatePolicyVersionRequest.
// It will increment the count of requests made to CreatePolicyVersion.
func (c *IAM) CreatePolicyVersionRequest(input *iam.CreatePolicyVersionInput) (req *request.Request, output *iam.CreatePolicyVersionOutput) {
	c.inc("CreatePolicyVersion")
	return c.svc.CreatePolicyVersionRequest(input)
}

// CreatePolicyVersion is a passthrough to the underlying CreatePolicyVersion method.
// It will increment the count of requests made to CreatePolicyVersion.
func (c *IAM) CreatePolicyVersion(input *iam.CreatePolicyVersionInput) (*iam.CreatePolicyVersionOutput, error) {
	c.inc("CreatePolicyVersion")
	return c.svc.CreatePolicyVersion(input)
}

// CreatePolicyVersionWithContext is a passthrough to the underlying CreatePolicyVersionWithContext method.
// It will increment the count of requests made to CreatePolicyVersion.
func (c *IAM) CreatePolicyVersionWithContext(ctx aws.Context, input *iam.CreatePolicyVersionInput, opts ...request.Option) (*iam.CreatePolicyVersionOutput, error) {
	c.inc("CreatePolicyVersion")
	return c.svc.CreatePolicyVersionWithContext(ctx, input, opts...)
}

// CreateRoleRequest is a passthrough to the underlying CreateRoleRequest.
// It will increment the count of requests made to CreateRole.
func (c *IAM) CreateRoleRequest(input *iam.CreateRoleInput) (req *request.Request, output *iam.CreateRoleOutput) {
	c.inc("CreateRole")
	return c.svc.CreateRoleRequest(input)
}

// CreateRole is a passthrough to the underlying CreateRole method.
// It will increment the count of requests made to CreateRole.
func (c *IAM) CreateRole(input *iam.CreateRoleInput) (*iam.CreateRoleOutput, error) {
	c.inc("CreateRole")
	return c.svc.CreateRole(input)
}

// CreateRoleWithContext is a passthrough to the underlying CreateRoleWithContext method.
// It will increment the count of requests made to CreateRole.
func (c *IAM) CreateRoleWithContext(ctx aws.Context, input *iam.CreateRoleInput, opts ...request.Option) (*iam.CreateRoleOutput, error) {
	c.inc("CreateRole")
	return c.svc.CreateRoleWithContext(ctx, input, opts...)
}

// CreateSAMLProviderRequest is a passthrough to the underlying CreateSAMLProviderRequest.
// It will increment the count of requests made to CreateSAMLProvider.
func (c *IAM) CreateSAMLProviderRequest(input *iam.CreateSAMLProviderInput) (req *request.Request, output *iam.CreateSAMLProviderOutput) {
	c.inc("CreateSAMLProvider")
	return c.svc.CreateSAMLProviderRequest(input)
}

// CreateSAMLProvider is a passthrough to the underlying CreateSAMLProvider method.
// It will increment the count of requests made to CreateSAMLProvider.
func (c *IAM) CreateSAMLProvider(input *iam.CreateSAMLProviderInput) (*iam.CreateSAMLProviderOutput, error) {
	c.inc("CreateSAMLProvider")
	return c.svc.CreateSAMLProvider(input)
}

// CreateSAMLProviderWithContext is a passthrough to the underlying CreateSAMLProviderWithContext method.
// It will increment the count of requests made to CreateSAMLProvider.
func (c *IAM) CreateSAMLProviderWithContext(ctx aws.Context, input *iam.CreateSAMLProviderInput, opts ...request.Option) (*iam.CreateSAMLProviderOutput, error) {
	c.inc("CreateSAMLProvider")
	return c.svc.CreateSAMLProviderWithContext(ctx, input, opts...)
}

// CreateServiceLinkedRoleRequest is a passthrough to the underlying CreateServiceLinkedRoleRequest.
// It will increment the count of requests made to CreateServiceLinkedRole.
func (c *IAM) CreateServiceLinkedRoleRequest(input *iam.CreateServiceLinkedRoleInput) (req *request.Request, output *iam.CreateServiceLinkedRoleOutput) {
	c.inc("CreateServiceLinkedRole")
	return c.svc.CreateServiceLinkedRoleRequest(input)
}

// CreateServiceLinkedRole is a passthrough to the underlying CreateServiceLinkedRole method.
// It will increment the count of requests made to CreateServiceLinkedRole.
func (c *IAM) CreateServiceLinkedRole(input *iam.CreateServiceLinkedRoleInput) (*iam.CreateServiceLinkedRoleOutput, error) {
	c.inc("CreateServiceLinkedRole")
	return c.svc.CreateServiceLinkedRole(input)
}

// CreateServiceLinkedRoleWithContext is a passthrough to the underlying CreateServiceLinkedRoleWithContext method.
// It will increment the count of requests made to CreateServiceLinkedRole.
func (c *IAM) CreateServiceLinkedRoleWithContext(ctx aws.Context, input *iam.CreateServiceLinkedRoleInput, opts ...request.Option) (*iam.CreateServiceLinkedRoleOutput, error) {
	c.inc("CreateServiceLinkedRole")
	return c.svc.CreateServiceLinkedRoleWithContext(ctx, input, opts...)
}

// CreateServiceSpecificCredentialRequest is a passthrough to the underlying CreateServiceSpecificCredentialRequest.
// It will increment the count of requests made to CreateServiceSpecificCredential.
func (c *IAM) CreateServiceSpecificCredentialRequest(input *iam.CreateServiceSpecificCredentialInput) (req *request.Request, output *iam.CreateServiceSpecificCredentialOutput) {
	c.inc("CreateServiceSpecificCredential")
	return c.svc.CreateServiceSpecificCredentialRequest(input)
}

// CreateServiceSpecificCredential is a passthrough to the underlying CreateServiceSpecificCredential method.
// It will increment the count of requests made to CreateServiceSpecificCredential.
func (c *IAM) CreateServiceSpecificCredential(input *iam.CreateServiceSpecificCredentialInput) (*iam.CreateServiceSpecificCredentialOutput, error) {
	c.inc("CreateServiceSpecificCredential")
	return c.svc.CreateServiceSpecificCredential(input)
}

// CreateServiceSpecificCredentialWithContext is a passthrough to the underlying CreateServiceSpecificCredentialWithContext method.
// It will increment the count of requests made to CreateServiceSpecificCredential.
func (c *IAM) CreateServiceSpecificCredentialWithContext(ctx aws.Context, input *iam.CreateServiceSpecificCredentialInput, opts ...request.Option) (*iam.CreateServiceSpecificCredentialOutput, error) {
	c.inc("CreateServiceSpecificCredential")
	return c.svc.CreateServiceSpecificCredentialWithContext(ctx, input, opts...)
}

// CreateUserRequest is a passthrough to the underlying CreateUserRequest.
// It will increment the count of requests made to CreateUser.
func (c *IAM) CreateUserRequest(input *iam.CreateUserInput) (req *request.Request, output *iam.CreateUserOutput) {
	c.inc("CreateUser")
	return c.svc.CreateUserRequest(input)
}

// CreateUser is a passthrough to the underlying CreateUser method.
// It will increment the count of requests made to CreateUser.
func (c *IAM) CreateUser(input *iam.CreateUserInput) (*iam.CreateUserOutput, error) {
	c.inc("CreateUser")
	return c.svc.CreateUser(input)
}

// CreateUserWithContext is a passthrough to the underlying CreateUserWithContext method.
// It will increment the count of requests made to CreateUser.
func (c *IAM) CreateUserWithContext(ctx aws.Context, input *iam.CreateUserInput, opts ...request.Option) (*iam.CreateUserOutput, error) {
	c.inc("CreateUser")
	return c.svc.CreateUserWithContext(ctx, input, opts...)
}

// CreateVirtualMFADeviceRequest is a passthrough to the underlying CreateVirtualMFADeviceRequest.
// It will increment the count of requests made to CreateVirtualMFADevice.
func (c *IAM) CreateVirtualMFADeviceRequest(input *iam.CreateVirtualMFADeviceInput) (req *request.Request, output *iam.CreateVirtualMFADeviceOutput) {
	c.inc("CreateVirtualMFADevice")
	return c.svc.CreateVirtualMFADeviceRequest(input)
}

// CreateVirtualMFADevice is a passthrough to the underlying CreateVirtualMFADevice method.
// It will increment the count of requests made to CreateVirtualMFADevice.
func (c *IAM) CreateVirtualMFADevice(input *iam.CreateVirtualMFADeviceInput) (*iam.CreateVirtualMFADeviceOutput, error) {
	c.inc("CreateVirtualMFADevice")
	return c.svc.CreateVirtualMFADevice(input)
}

// CreateVirtualMFADeviceWithContext is a passthrough to the underlying CreateVirtualMFADeviceWithContext method.
// It will increment the count of requests made to CreateVirtualMFADevice.
func (c *IAM) CreateVirtualMFADeviceWithContext(ctx aws.Context, input *iam.CreateVirtualMFADeviceInput, opts ...request.Option) (*iam.CreateVirtualMFADeviceOutput, error) {
	c.inc("CreateVirtualMFADevice")
	return c.svc.CreateVirtualMFADeviceWithContext(ctx, input, opts...)
}

// DeactivateMFADeviceRequest is a passthrough to the underlying DeactivateMFADeviceRequest.
// It will increment the count of requests made to DeactivateMFADevice.
func (c *IAM) DeactivateMFADeviceRequest(input *iam.DeactivateMFADeviceInput) (req *request.Request, output *iam.DeactivateMFADeviceOutput) {
	c.inc("DeactivateMFADevice")
	return c.svc.DeactivateMFADeviceRequest(input)
}

// DeactivateMFADevice is a passthrough to the underlying DeactivateMFADevice method.
// It will increment the count of requests made to DeactivateMFADevice.
func (c *IAM) DeactivateMFADevice(input *iam.DeactivateMFADeviceInput) (*iam.DeactivateMFADeviceOutput, error) {
	c.inc("DeactivateMFADevice")
	return c.svc.DeactivateMFADevice(input)
}

// DeactivateMFADeviceWithContext is a passthrough to the underlying DeactivateMFADeviceWithContext method.
// It will increment the count of requests made to DeactivateMFADevice.
func (c *IAM) DeactivateMFADeviceWithContext(ctx aws.Context, input *iam.DeactivateMFADeviceInput, opts ...request.Option) (*iam.DeactivateMFADeviceOutput, error) {
	c.inc("DeactivateMFADevice")
	return c.svc.DeactivateMFADeviceWithContext(ctx, input, opts...)
}

// DeleteAccessKeyRequest is a passthrough to the underlying DeleteAccessKeyRequest.
// It will increment the count of requests made to DeleteAccessKey.
func (c *IAM) DeleteAccessKeyRequest(input *iam.DeleteAccessKeyInput) (req *request.Request, output *iam.DeleteAccessKeyOutput) {
	c.inc("DeleteAccessKey")
	return c.svc.DeleteAccessKeyRequest(input)
}

// DeleteAccessKey is a passthrough to the underlying DeleteAccessKey method.
// It will increment the count of requests made to DeleteAccessKey.
func (c *IAM) DeleteAccessKey(input *iam.DeleteAccessKeyInput) (*iam.DeleteAccessKeyOutput, error) {
	c.inc("DeleteAccessKey")
	return c.svc.DeleteAccessKey(input)
}

// DeleteAccessKeyWithContext is a passthrough to the underlying DeleteAccessKeyWithContext method.
// It will increment the count of requests made to DeleteAccessKey.
func (c *IAM) DeleteAccessKeyWithContext(ctx aws.Context, input *iam.DeleteAccessKeyInput, opts ...request.Option) (*iam.DeleteAccessKeyOutput, error) {
	c.inc("DeleteAccessKey")
	return c.svc.DeleteAccessKeyWithContext(ctx, input, opts...)
}

// DeleteAccountAliasRequest is a passthrough to the underlying DeleteAccountAliasRequest.
// It will increment the count of requests made to DeleteAccountAlias.
func (c *IAM) DeleteAccountAliasRequest(input *iam.DeleteAccountAliasInput) (req *request.Request, output *iam.DeleteAccountAliasOutput) {
	c.inc("DeleteAccountAlias")
	return c.svc.DeleteAccountAliasRequest(input)
}

// DeleteAccountAlias is a passthrough to the underlying DeleteAccountAlias method.
// It will increment the count of requests made to DeleteAccountAlias.
func (c *IAM) DeleteAccountAlias(input *iam.DeleteAccountAliasInput) (*iam.DeleteAccountAliasOutput, error) {
	c.inc("DeleteAccountAlias")
	return c.svc.DeleteAccountAlias(input)
}

// DeleteAccountAliasWithContext is a passthrough to the underlying DeleteAccountAliasWithContext method.
// It will increment the count of requests made to DeleteAccountAlias.
func (c *IAM) DeleteAccountAliasWithContext(ctx aws.Context, input *iam.DeleteAccountAliasInput, opts ...request.Option) (*iam.DeleteAccountAliasOutput, error) {
	c.inc("DeleteAccountAlias")
	return c.svc.DeleteAccountAliasWithContext(ctx, input, opts...)
}

// DeleteAccountPasswordPolicyRequest is a passthrough to the underlying DeleteAccountPasswordPolicyRequest.
// It will increment the count of requests made to DeleteAccountPasswordPolicy.
func (c *IAM) DeleteAccountPasswordPolicyRequest(input *iam.DeleteAccountPasswordPolicyInput) (req *request.Request, output *iam.DeleteAccountPasswordPolicyOutput) {
	c.inc("DeleteAccountPasswordPolicy")
	return c.svc.DeleteAccountPasswordPolicyRequest(input)
}

// DeleteAccountPasswordPolicy is a passthrough to the underlying DeleteAccountPasswordPolicy method.
// It will increment the count of requests made to DeleteAccountPasswordPolicy.
func (c *IAM) DeleteAccountPasswordPolicy(input *iam.DeleteAccountPasswordPolicyInput) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	c.inc("DeleteAccountPasswordPolicy")
	return c.svc.DeleteAccountPasswordPolicy(input)
}

// DeleteAccountPasswordPolicyWithContext is a passthrough to the underlying DeleteAccountPasswordPolicyWithContext method.
// It will increment the count of requests made to DeleteAccountPasswordPolicy.
func (c *IAM) DeleteAccountPasswordPolicyWithContext(ctx aws.Context, input *iam.DeleteAccountPasswordPolicyInput, opts ...request.Option) (*iam.DeleteAccountPasswordPolicyOutput, error) {
	c.inc("DeleteAccountPasswordPolicy")
	return c.svc.DeleteAccountPasswordPolicyWithContext(ctx, input, opts...)
}

// DeleteGroupRequest is a passthrough to the underlying DeleteGroupRequest.
// It will increment the count of requests made to DeleteGroup.
func (c *IAM) DeleteGroupRequest(input *iam.DeleteGroupInput) (req *request.Request, output *iam.DeleteGroupOutput) {
	c.inc("DeleteGroup")
	return c.svc.DeleteGroupRequest(input)
}

// DeleteGroup is a passthrough to the underlying DeleteGroup method.
// It will increment the count of requests made to DeleteGroup.
func (c *IAM) DeleteGroup(input *iam.DeleteGroupInput) (*iam.DeleteGroupOutput, error) {
	c.inc("DeleteGroup")
	return c.svc.DeleteGroup(input)
}

// DeleteGroupWithContext is a passthrough to the underlying DeleteGroupWithContext method.
// It will increment the count of requests made to DeleteGroup.
func (c *IAM) DeleteGroupWithContext(ctx aws.Context, input *iam.DeleteGroupInput, opts ...request.Option) (*iam.DeleteGroupOutput, error) {
	c.inc("DeleteGroup")
	return c.svc.DeleteGroupWithContext(ctx, input, opts...)
}

// DeleteGroupPolicyRequest is a passthrough to the underlying DeleteGroupPolicyRequest.
// It will increment the count of requests made to DeleteGroupPolicy.
func (c *IAM) DeleteGroupPolicyRequest(input *iam.DeleteGroupPolicyInput) (req *request.Request, output *iam.DeleteGroupPolicyOutput) {
	c.inc("DeleteGroupPolicy")
	return c.svc.DeleteGroupPolicyRequest(input)
}

// DeleteGroupPolicy is a passthrough to the underlying DeleteGroupPolicy method.
// It will increment the count of requests made to DeleteGroupPolicy.
func (c *IAM) DeleteGroupPolicy(input *iam.DeleteGroupPolicyInput) (*iam.DeleteGroupPolicyOutput, error) {
	c.inc("DeleteGroupPolicy")
	return c.svc.DeleteGroupPolicy(input)
}

// DeleteGroupPolicyWithContext is a passthrough to the underlying DeleteGroupPolicyWithContext method.
// It will increment the count of requests made to DeleteGroupPolicy.
func (c *IAM) DeleteGroupPolicyWithContext(ctx aws.Context, input *iam.DeleteGroupPolicyInput, opts ...request.Option) (*iam.DeleteGroupPolicyOutput, error) {
	c.inc("DeleteGroupPolicy")
	return c.svc.DeleteGroupPolicyWithContext(ctx, input, opts...)
}

// DeleteInstanceProfileRequest is a passthrough to the underlying DeleteInstanceProfileRequest.
// It will increment the count of requests made to DeleteInstanceProfile.
func (c *IAM) DeleteInstanceProfileRequest(input *iam.DeleteInstanceProfileInput) (req *request.Request, output *iam.DeleteInstanceProfileOutput) {
	c.inc("DeleteInstanceProfile")
	return c.svc.DeleteInstanceProfileRequest(input)
}

// DeleteInstanceProfile is a passthrough to the underlying DeleteInstanceProfile method.
// It will increment the count of requests made to DeleteInstanceProfile.
func (c *IAM) DeleteInstanceProfile(input *iam.DeleteInstanceProfileInput) (*iam.DeleteInstanceProfileOutput, error) {
	c.inc("DeleteInstanceProfile")
	return c.svc.DeleteInstanceProfile(input)
}

// DeleteInstanceProfileWithContext is a passthrough to the underlying DeleteInstanceProfileWithContext method.
// It will increment the count of requests made to DeleteInstanceProfile.
func (c *IAM) DeleteInstanceProfileWithContext(ctx aws.Context, input *iam.DeleteInstanceProfileInput, opts ...request.Option) (*iam.DeleteInstanceProfileOutput, error) {
	c.inc("DeleteInstanceProfile")
	return c.svc.DeleteInstanceProfileWithContext(ctx, input, opts...)
}

// DeleteLoginProfileRequest is a passthrough to the underlying DeleteLoginProfileRequest.
// It will increment the count of requests made to DeleteLoginProfile.
func (c *IAM) DeleteLoginProfileRequest(input *iam.DeleteLoginProfileInput) (req *request.Request, output *iam.DeleteLoginProfileOutput) {
	c.inc("DeleteLoginProfile")
	return c.svc.DeleteLoginProfileRequest(input)
}

// DeleteLoginProfile is a passthrough to the underlying DeleteLoginProfile method.
// It will increment the count of requests made to DeleteLoginProfile.
func (c *IAM) DeleteLoginProfile(input *iam.DeleteLoginProfileInput) (*iam.DeleteLoginProfileOutput, error) {
	c.inc("DeleteLoginProfile")
	return c.svc.DeleteLoginProfile(input)
}

// DeleteLoginProfileWithContext is a passthrough to the underlying DeleteLoginProfileWithContext method.
// It will increment the count of requests made to DeleteLoginProfile.
func (c *IAM) DeleteLoginProfileWithContext(ctx aws.Context, input *iam.DeleteLoginProfileInput, opts ...request.Option) (*iam.DeleteLoginProfileOutput, error) {
	c.inc("DeleteLoginProfile")
	return c.svc.DeleteLoginProfileWithContext(ctx, input, opts...)
}

// DeleteOpenIDConnectProviderRequest is a passthrough to the underlying DeleteOpenIDConnectProviderRequest.
// It will increment the count of requests made to DeleteOpenIDConnectProvider.
func (c *IAM) DeleteOpenIDConnectProviderRequest(input *iam.DeleteOpenIDConnectProviderInput) (req *request.Request, output *iam.DeleteOpenIDConnectProviderOutput) {
	c.inc("DeleteOpenIDConnectProvider")
	return c.svc.DeleteOpenIDConnectProviderRequest(input)
}

// DeleteOpenIDConnectProvider is a passthrough to the underlying DeleteOpenIDConnectProvider method.
// It will increment the count of requests made to DeleteOpenIDConnectProvider.
func (c *IAM) DeleteOpenIDConnectProvider(input *iam.DeleteOpenIDConnectProviderInput) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	c.inc("DeleteOpenIDConnectProvider")
	return c.svc.DeleteOpenIDConnectProvider(input)
}

// DeleteOpenIDConnectProviderWithContext is a passthrough to the underlying DeleteOpenIDConnectProviderWithContext method.
// It will increment the count of requests made to DeleteOpenIDConnectProvider.
func (c *IAM) DeleteOpenIDConnectProviderWithContext(ctx aws.Context, input *iam.DeleteOpenIDConnectProviderInput, opts ...request.Option) (*iam.DeleteOpenIDConnectProviderOutput, error) {
	c.inc("DeleteOpenIDConnectProvider")
	return c.svc.DeleteOpenIDConnectProviderWithContext(ctx, input, opts...)
}

// DeletePolicyRequest is a passthrough to the underlying DeletePolicyRequest.
// It will increment the count of requests made to DeletePolicy.
func (c *IAM) DeletePolicyRequest(input *iam.DeletePolicyInput) (req *request.Request, output *iam.DeletePolicyOutput) {
	c.inc("DeletePolicy")
	return c.svc.DeletePolicyRequest(input)
}

// DeletePolicy is a passthrough to the underlying DeletePolicy method.
// It will increment the count of requests made to DeletePolicy.
func (c *IAM) DeletePolicy(input *iam.DeletePolicyInput) (*iam.DeletePolicyOutput, error) {
	c.inc("DeletePolicy")
	return c.svc.DeletePolicy(input)
}

// DeletePolicyWithContext is a passthrough to the underlying DeletePolicyWithContext method.
// It will increment the count of requests made to DeletePolicy.
func (c *IAM) DeletePolicyWithContext(ctx aws.Context, input *iam.DeletePolicyInput, opts ...request.Option) (*iam.DeletePolicyOutput, error) {
	c.inc("DeletePolicy")
	return c.svc.DeletePolicyWithContext(ctx, input, opts...)
}

// DeletePolicyVersionRequest is a passthrough to the underlying DeletePolicyVersionRequest.
// It will increment the count of requests made to DeletePolicyVersion.
func (c *IAM) DeletePolicyVersionRequest(input *iam.DeletePolicyVersionInput) (req *request.Request, output *iam.DeletePolicyVersionOutput) {
	c.inc("DeletePolicyVersion")
	return c.svc.DeletePolicyVersionRequest(input)
}

// DeletePolicyVersion is a passthrough to the underlying DeletePolicyVersion method.
// It will increment the count of requests made to DeletePolicyVersion.
func (c *IAM) DeletePolicyVersion(input *iam.DeletePolicyVersionInput) (*iam.DeletePolicyVersionOutput, error) {
	c.inc("DeletePolicyVersion")
	return c.svc.DeletePolicyVersion(input)
}

// DeletePolicyVersionWithContext is a passthrough to the underlying DeletePolicyVersionWithContext method.
// It will increment the count of requests made to DeletePolicyVersion.
func (c *IAM) DeletePolicyVersionWithContext(ctx aws.Context, input *iam.DeletePolicyVersionInput, opts ...request.Option) (*iam.DeletePolicyVersionOutput, error) {
	c.inc("DeletePolicyVersion")
	return c.svc.DeletePolicyVersionWithContext(ctx, input, opts...)
}

// DeleteRoleRequest is a passthrough to the underlying DeleteRoleRequest.
// It will increment the count of requests made to DeleteRole.
func (c *IAM) DeleteRoleRequest(input *iam.DeleteRoleInput) (req *request.Request, output *iam.DeleteRoleOutput) {
	c.inc("DeleteRole")
	return c.svc.DeleteRoleRequest(input)
}

// DeleteRole is a passthrough to the underlying DeleteRole method.
// It will increment the count of requests made to DeleteRole.
func (c *IAM) DeleteRole(input *iam.DeleteRoleInput) (*iam.DeleteRoleOutput, error) {
	c.inc("DeleteRole")
	return c.svc.DeleteRole(input)
}

// DeleteRoleWithContext is a passthrough to the underlying DeleteRoleWithContext method.
// It will increment the count of requests made to DeleteRole.
func (c *IAM) DeleteRoleWithContext(ctx aws.Context, input *iam.DeleteRoleInput, opts ...request.Option) (*iam.DeleteRoleOutput, error) {
	c.inc("DeleteRole")
	return c.svc.DeleteRoleWithContext(ctx, input, opts...)
}

// DeleteRolePolicyRequest is a passthrough to the underlying DeleteRolePolicyRequest.
// It will increment the count of requests made to DeleteRolePolicy.
func (c *IAM) DeleteRolePolicyRequest(input *iam.DeleteRolePolicyInput) (req *request.Request, output *iam.DeleteRolePolicyOutput) {
	c.inc("DeleteRolePolicy")
	return c.svc.DeleteRolePolicyRequest(input)
}

// DeleteRolePolicy is a passthrough to the underlying DeleteRolePolicy method.
// It will increment the count of requests made to DeleteRolePolicy.
func (c *IAM) DeleteRolePolicy(input *iam.DeleteRolePolicyInput) (*iam.DeleteRolePolicyOutput, error) {
	c.inc("DeleteRolePolicy")
	return c.svc.DeleteRolePolicy(input)
}

// DeleteRolePolicyWithContext is a passthrough to the underlying DeleteRolePolicyWithContext method.
// It will increment the count of requests made to DeleteRolePolicy.
func (c *IAM) DeleteRolePolicyWithContext(ctx aws.Context, input *iam.DeleteRolePolicyInput, opts ...request.Option) (*iam.DeleteRolePolicyOutput, error) {
	c.inc("DeleteRolePolicy")
	return c.svc.DeleteRolePolicyWithContext(ctx, input, opts...)
}

// DeleteSAMLProviderRequest is a passthrough to the underlying DeleteSAMLProviderRequest.
// It will increment the count of requests made to DeleteSAMLProvider.
func (c *IAM) DeleteSAMLProviderRequest(input *iam.DeleteSAMLProviderInput) (req *request.Request, output *iam.DeleteSAMLProviderOutput) {
	c.inc("DeleteSAMLProvider")
	return c.svc.DeleteSAMLProviderRequest(input)
}

// DeleteSAMLProvider is a passthrough to the underlying DeleteSAMLProvider method.
// It will increment the count of requests made to DeleteSAMLProvider.
func (c *IAM) DeleteSAMLProvider(input *iam.DeleteSAMLProviderInput) (*iam.DeleteSAMLProviderOutput, error) {
	c.inc("DeleteSAMLProvider")
	return c.svc.DeleteSAMLProvider(input)
}

// DeleteSAMLProviderWithContext is a passthrough to the underlying DeleteSAMLProviderWithContext method.
// It will increment the count of requests made to DeleteSAMLProvider.
func (c *IAM) DeleteSAMLProviderWithContext(ctx aws.Context, input *iam.DeleteSAMLProviderInput, opts ...request.Option) (*iam.DeleteSAMLProviderOutput, error) {
	c.inc("DeleteSAMLProvider")
	return c.svc.DeleteSAMLProviderWithContext(ctx, input, opts...)
}

// DeleteSSHPublicKeyRequest is a passthrough to the underlying DeleteSSHPublicKeyRequest.
// It will increment the count of requests made to DeleteSSHPublicKey.
func (c *IAM) DeleteSSHPublicKeyRequest(input *iam.DeleteSSHPublicKeyInput) (req *request.Request, output *iam.DeleteSSHPublicKeyOutput) {
	c.inc("DeleteSSHPublicKey")
	return c.svc.DeleteSSHPublicKeyRequest(input)
}

// DeleteSSHPublicKey is a passthrough to the underlying DeleteSSHPublicKey method.
// It will increment the count of requests made to DeleteSSHPublicKey.
func (c *IAM) DeleteSSHPublicKey(input *iam.DeleteSSHPublicKeyInput) (*iam.DeleteSSHPublicKeyOutput, error) {
	c.inc("DeleteSSHPublicKey")
	return c.svc.DeleteSSHPublicKey(input)
}

// DeleteSSHPublicKeyWithContext is a passthrough to the underlying DeleteSSHPublicKeyWithContext method.
// It will increment the count of requests made to DeleteSSHPublicKey.
func (c *IAM) DeleteSSHPublicKeyWithContext(ctx aws.Context, input *iam.DeleteSSHPublicKeyInput, opts ...request.Option) (*iam.DeleteSSHPublicKeyOutput, error) {
	c.inc("DeleteSSHPublicKey")
	return c.svc.DeleteSSHPublicKeyWithContext(ctx, input, opts...)
}

// DeleteServerCertificateRequest is a passthrough to the underlying DeleteServerCertificateRequest.
// It will increment the count of requests made to DeleteServerCertificate.
func (c *IAM) DeleteServerCertificateRequest(input *iam.DeleteServerCertificateInput) (req *request.Request, output *iam.DeleteServerCertificateOutput) {
	c.inc("DeleteServerCertificate")
	return c.svc.DeleteServerCertificateRequest(input)
}

// DeleteServerCertificate is a passthrough to the underlying DeleteServerCertificate method.
// It will increment the count of requests made to DeleteServerCertificate.
func (c *IAM) DeleteServerCertificate(input *iam.DeleteServerCertificateInput) (*iam.DeleteServerCertificateOutput, error) {
	c.inc("DeleteServerCertificate")
	return c.svc.DeleteServerCertificate(input)
}

// DeleteServerCertificateWithContext is a passthrough to the underlying DeleteServerCertificateWithContext method.
// It will increment the count of requests made to DeleteServerCertificate.
func (c *IAM) DeleteServerCertificateWithContext(ctx aws.Context, input *iam.DeleteServerCertificateInput, opts ...request.Option) (*iam.DeleteServerCertificateOutput, error) {
	c.inc("DeleteServerCertificate")
	return c.svc.DeleteServerCertificateWithContext(ctx, input, opts...)
}

// DeleteServiceLinkedRoleRequest is a passthrough to the underlying DeleteServiceLinkedRoleRequest.
// It will increment the count of requests made to DeleteServiceLinkedRole.
func (c *IAM) DeleteServiceLinkedRoleRequest(input *iam.DeleteServiceLinkedRoleInput) (req *request.Request, output *iam.DeleteServiceLinkedRoleOutput) {
	c.inc("DeleteServiceLinkedRole")
	return c.svc.DeleteServiceLinkedRoleRequest(input)
}

// DeleteServiceLinkedRole is a passthrough to the underlying DeleteServiceLinkedRole method.
// It will increment the count of requests made to DeleteServiceLinkedRole.
func (c *IAM) DeleteServiceLinkedRole(input *iam.DeleteServiceLinkedRoleInput) (*iam.DeleteServiceLinkedRoleOutput, error) {
	c.inc("DeleteServiceLinkedRole")
	return c.svc.DeleteServiceLinkedRole(input)
}

// DeleteServiceLinkedRoleWithContext is a passthrough to the underlying DeleteServiceLinkedRoleWithContext method.
// It will increment the count of requests made to DeleteServiceLinkedRole.
func (c *IAM) DeleteServiceLinkedRoleWithContext(ctx aws.Context, input *iam.DeleteServiceLinkedRoleInput, opts ...request.Option) (*iam.DeleteServiceLinkedRoleOutput, error) {
	c.inc("DeleteServiceLinkedRole")
	return c.svc.DeleteServiceLinkedRoleWithContext(ctx, input, opts...)
}

// DeleteServiceSpecificCredentialRequest is a passthrough to the underlying DeleteServiceSpecificCredentialRequest.
// It will increment the count of requests made to DeleteServiceSpecificCredential.
func (c *IAM) DeleteServiceSpecificCredentialRequest(input *iam.DeleteServiceSpecificCredentialInput) (req *request.Request, output *iam.DeleteServiceSpecificCredentialOutput) {
	c.inc("DeleteServiceSpecificCredential")
	return c.svc.DeleteServiceSpecificCredentialRequest(input)
}

// DeleteServiceSpecificCredential is a passthrough to the underlying DeleteServiceSpecificCredential method.
// It will increment the count of requests made to DeleteServiceSpecificCredential.
func (c *IAM) DeleteServiceSpecificCredential(input *iam.DeleteServiceSpecificCredentialInput) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	c.inc("DeleteServiceSpecificCredential")
	return c.svc.DeleteServiceSpecificCredential(input)
}

// DeleteServiceSpecificCredentialWithContext is a passthrough to the underlying DeleteServiceSpecificCredentialWithContext method.
// It will increment the count of requests made to DeleteServiceSpecificCredential.
func (c *IAM) DeleteServiceSpecificCredentialWithContext(ctx aws.Context, input *iam.DeleteServiceSpecificCredentialInput, opts ...request.Option) (*iam.DeleteServiceSpecificCredentialOutput, error) {
	c.inc("DeleteServiceSpecificCredential")
	return c.svc.DeleteServiceSpecificCredentialWithContext(ctx, input, opts...)
}

// DeleteSigningCertificateRequest is a passthrough to the underlying DeleteSigningCertificateRequest.
// It will increment the count of requests made to DeleteSigningCertificate.
func (c *IAM) DeleteSigningCertificateRequest(input *iam.DeleteSigningCertificateInput) (req *request.Request, output *iam.DeleteSigningCertificateOutput) {
	c.inc("DeleteSigningCertificate")
	return c.svc.DeleteSigningCertificateRequest(input)
}

// DeleteSigningCertificate is a passthrough to the underlying DeleteSigningCertificate method.
// It will increment the count of requests made to DeleteSigningCertificate.
func (c *IAM) DeleteSigningCertificate(input *iam.DeleteSigningCertificateInput) (*iam.DeleteSigningCertificateOutput, error) {
	c.inc("DeleteSigningCertificate")
	return c.svc.DeleteSigningCertificate(input)
}

// DeleteSigningCertificateWithContext is a passthrough to the underlying DeleteSigningCertificateWithContext method.
// It will increment the count of requests made to DeleteSigningCertificate.
func (c *IAM) DeleteSigningCertificateWithContext(ctx aws.Context, input *iam.DeleteSigningCertificateInput, opts ...request.Option) (*iam.DeleteSigningCertificateOutput, error) {
	c.inc("DeleteSigningCertificate")
	return c.svc.DeleteSigningCertificateWithContext(ctx, input, opts...)
}

// DeleteUserRequest is a passthrough to the underlying DeleteUserRequest.
// It will increment the count of requests made to DeleteUser.
func (c *IAM) DeleteUserRequest(input *iam.DeleteUserInput) (req *request.Request, output *iam.DeleteUserOutput) {
	c.inc("DeleteUser")
	return c.svc.DeleteUserRequest(input)
}

// DeleteUser is a passthrough to the underlying DeleteUser method.
// It will increment the count of requests made to DeleteUser.
func (c *IAM) DeleteUser(input *iam.DeleteUserInput) (*iam.DeleteUserOutput, error) {
	c.inc("DeleteUser")
	return c.svc.DeleteUser(input)
}

// DeleteUserWithContext is a passthrough to the underlying DeleteUserWithContext method.
// It will increment the count of requests made to DeleteUser.
func (c *IAM) DeleteUserWithContext(ctx aws.Context, input *iam.DeleteUserInput, opts ...request.Option) (*iam.DeleteUserOutput, error) {
	c.inc("DeleteUser")
	return c.svc.DeleteUserWithContext(ctx, input, opts...)
}

// DeleteUserPolicyRequest is a passthrough to the underlying DeleteUserPolicyRequest.
// It will increment the count of requests made to DeleteUserPolicy.
func (c *IAM) DeleteUserPolicyRequest(input *iam.DeleteUserPolicyInput) (req *request.Request, output *iam.DeleteUserPolicyOutput) {
	c.inc("DeleteUserPolicy")
	return c.svc.DeleteUserPolicyRequest(input)
}

// DeleteUserPolicy is a passthrough to the underlying DeleteUserPolicy method.
// It will increment the count of requests made to DeleteUserPolicy.
func (c *IAM) DeleteUserPolicy(input *iam.DeleteUserPolicyInput) (*iam.DeleteUserPolicyOutput, error) {
	c.inc("DeleteUserPolicy")
	return c.svc.DeleteUserPolicy(input)
}

// DeleteUserPolicyWithContext is a passthrough to the underlying DeleteUserPolicyWithContext method.
// It will increment the count of requests made to DeleteUserPolicy.
func (c *IAM) DeleteUserPolicyWithContext(ctx aws.Context, input *iam.DeleteUserPolicyInput, opts ...request.Option) (*iam.DeleteUserPolicyOutput, error) {
	c.inc("DeleteUserPolicy")
	return c.svc.DeleteUserPolicyWithContext(ctx, input, opts...)
}

// DeleteVirtualMFADeviceRequest is a passthrough to the underlying DeleteVirtualMFADeviceRequest.
// It will increment the count of requests made to DeleteVirtualMFADevice.
func (c *IAM) DeleteVirtualMFADeviceRequest(input *iam.DeleteVirtualMFADeviceInput) (req *request.Request, output *iam.DeleteVirtualMFADeviceOutput) {
	c.inc("DeleteVirtualMFADevice")
	return c.svc.DeleteVirtualMFADeviceRequest(input)
}

// DeleteVirtualMFADevice is a passthrough to the underlying DeleteVirtualMFADevice method.
// It will increment the count of requests made to DeleteVirtualMFADevice.
func (c *IAM) DeleteVirtualMFADevice(input *iam.DeleteVirtualMFADeviceInput) (*iam.DeleteVirtualMFADeviceOutput, error) {
	c.inc("DeleteVirtualMFADevice")
	return c.svc.DeleteVirtualMFADevice(input)
}

// DeleteVirtualMFADeviceWithContext is a passthrough to the underlying DeleteVirtualMFADeviceWithContext method.
// It will increment the count of requests made to DeleteVirtualMFADevice.
func (c *IAM) DeleteVirtualMFADeviceWithContext(ctx aws.Context, input *iam.DeleteVirtualMFADeviceInput, opts ...request.Option) (*iam.DeleteVirtualMFADeviceOutput, error) {
	c.inc("DeleteVirtualMFADevice")
	return c.svc.DeleteVirtualMFADeviceWithContext(ctx, input, opts...)
}

// DetachGroupPolicyRequest is a passthrough to the underlying DetachGroupPolicyRequest.
// It will increment the count of requests made to DetachGroupPolicy.
func (c *IAM) DetachGroupPolicyRequest(input *iam.DetachGroupPolicyInput) (req *request.Request, output *iam.DetachGroupPolicyOutput) {
	c.inc("DetachGroupPolicy")
	return c.svc.DetachGroupPolicyRequest(input)
}

// DetachGroupPolicy is a passthrough to the underlying DetachGroupPolicy method.
// It will increment the count of requests made to DetachGroupPolicy.
func (c *IAM) DetachGroupPolicy(input *iam.DetachGroupPolicyInput) (*iam.DetachGroupPolicyOutput, error) {
	c.inc("DetachGroupPolicy")
	return c.svc.DetachGroupPolicy(input)
}

// DetachGroupPolicyWithContext is a passthrough to the underlying DetachGroupPolicyWithContext method.
// It will increment the count of requests made to DetachGroupPolicy.
func (c *IAM) DetachGroupPolicyWithContext(ctx aws.Context, input *iam.DetachGroupPolicyInput, opts ...request.Option) (*iam.DetachGroupPolicyOutput, error) {
	c.inc("DetachGroupPolicy")
	return c.svc.DetachGroupPolicyWithContext(ctx, input, opts...)
}

// DetachRolePolicyRequest is a passthrough to the underlying DetachRolePolicyRequest.
// It will increment the count of requests made to DetachRolePolicy.
func (c *IAM) DetachRolePolicyRequest(input *iam.DetachRolePolicyInput) (req *request.Request, output *iam.DetachRolePolicyOutput) {
	c.inc("DetachRolePolicy")
	return c.svc.DetachRolePolicyRequest(input)
}

// DetachRolePolicy is a passthrough to the underlying DetachRolePolicy method.
// It will increment the count of requests made to DetachRolePolicy.
func (c *IAM) DetachRolePolicy(input *iam.DetachRolePolicyInput) (*iam.DetachRolePolicyOutput, error) {
	c.inc("DetachRolePolicy")
	return c.svc.DetachRolePolicy(input)
}

// DetachRolePolicyWithContext is a passthrough to the underlying DetachRolePolicyWithContext method.
// It will increment the count of requests made to DetachRolePolicy.
func (c *IAM) DetachRolePolicyWithContext(ctx aws.Context, input *iam.DetachRolePolicyInput, opts ...request.Option) (*iam.DetachRolePolicyOutput, error) {
	c.inc("DetachRolePolicy")
	return c.svc.DetachRolePolicyWithContext(ctx, input, opts...)
}

// DetachUserPolicyRequest is a passthrough to the underlying DetachUserPolicyRequest.
// It will increment the count of requests made to DetachUserPolicy.
func (c *IAM) DetachUserPolicyRequest(input *iam.DetachUserPolicyInput) (req *request.Request, output *iam.DetachUserPolicyOutput) {
	c.inc("DetachUserPolicy")
	return c.svc.DetachUserPolicyRequest(input)
}

// DetachUserPolicy is a passthrough to the underlying DetachUserPolicy method.
// It will increment the count of requests made to DetachUserPolicy.
func (c *IAM) DetachUserPolicy(input *iam.DetachUserPolicyInput) (*iam.DetachUserPolicyOutput, error) {
	c.inc("DetachUserPolicy")
	return c.svc.DetachUserPolicy(input)
}

// DetachUserPolicyWithContext is a passthrough to the underlying DetachUserPolicyWithContext method.
// It will increment the count of requests made to DetachUserPolicy.
func (c *IAM) DetachUserPolicyWithContext(ctx aws.Context, input *iam.DetachUserPolicyInput, opts ...request.Option) (*iam.DetachUserPolicyOutput, error) {
	c.inc("DetachUserPolicy")
	return c.svc.DetachUserPolicyWithContext(ctx, input, opts...)
}

// EnableMFADeviceRequest is a passthrough to the underlying EnableMFADeviceRequest.
// It will increment the count of requests made to EnableMFADevice.
func (c *IAM) EnableMFADeviceRequest(input *iam.EnableMFADeviceInput) (req *request.Request, output *iam.EnableMFADeviceOutput) {
	c.inc("EnableMFADevice")
	return c.svc.EnableMFADeviceRequest(input)
}

// EnableMFADevice is a passthrough to the underlying EnableMFADevice method.
// It will increment the count of requests made to EnableMFADevice.
func (c *IAM) EnableMFADevice(input *iam.EnableMFADeviceInput) (*iam.EnableMFADeviceOutput, error) {
	c.inc("EnableMFADevice")
	return c.svc.EnableMFADevice(input)
}

// EnableMFADeviceWithContext is a passthrough to the underlying EnableMFADeviceWithContext method.
// It will increment the count of requests made to EnableMFADevice.
func (c *IAM) EnableMFADeviceWithContext(ctx aws.Context, input *iam.EnableMFADeviceInput, opts ...request.Option) (*iam.EnableMFADeviceOutput, error) {
	c.inc("EnableMFADevice")
	return c.svc.EnableMFADeviceWithContext(ctx, input, opts...)
}

// GenerateCredentialReportRequest is a passthrough to the underlying GenerateCredentialReportRequest.
// It will increment the count of requests made to GenerateCredentialReport.
func (c *IAM) GenerateCredentialReportRequest(input *iam.GenerateCredentialReportInput) (req *request.Request, output *iam.GenerateCredentialReportOutput) {
	c.inc("GenerateCredentialReport")
	return c.svc.GenerateCredentialReportRequest(input)
}

// GenerateCredentialReport is a passthrough to the underlying GenerateCredentialReport method.
// It will increment the count of requests made to GenerateCredentialReport.
func (c *IAM) GenerateCredentialReport(input *iam.GenerateCredentialReportInput) (*iam.GenerateCredentialReportOutput, error) {
	c.inc("GenerateCredentialReport")
	return c.svc.GenerateCredentialReport(input)
}

// GenerateCredentialReportWithContext is a passthrough to the underlying GenerateCredentialReportWithContext method.
// It will increment the count of requests made to GenerateCredentialReport.
func (c *IAM) GenerateCredentialReportWithContext(ctx aws.Context, input *iam.GenerateCredentialReportInput, opts ...request.Option) (*iam.GenerateCredentialReportOutput, error) {
	c.inc("GenerateCredentialReport")
	return c.svc.GenerateCredentialReportWithContext(ctx, input, opts...)
}

// GetAccessKeyLastUsedRequest is a passthrough to the underlying GetAccessKeyLastUsedRequest.
// It will increment the count of requests made to GetAccessKeyLastUsed.
func (c *IAM) GetAccessKeyLastUsedRequest(input *iam.GetAccessKeyLastUsedInput) (req *request.Request, output *iam.GetAccessKeyLastUsedOutput) {
	c.inc("GetAccessKeyLastUsed")
	return c.svc.GetAccessKeyLastUsedRequest(input)
}

// GetAccessKeyLastUsed is a passthrough to the underlying GetAccessKeyLastUsed method.
// It will increment the count of requests made to GetAccessKeyLastUsed.
func (c *IAM) GetAccessKeyLastUsed(input *iam.GetAccessKeyLastUsedInput) (*iam.GetAccessKeyLastUsedOutput, error) {
	c.inc("GetAccessKeyLastUsed")
	return c.svc.GetAccessKeyLastUsed(input)
}

// GetAccessKeyLastUsedWithContext is a passthrough to the underlying GetAccessKeyLastUsedWithContext method.
// It will increment the count of requests made to GetAccessKeyLastUsed.
func (c *IAM) GetAccessKeyLastUsedWithContext(ctx aws.Context, input *iam.GetAccessKeyLastUsedInput, opts ...request.Option) (*iam.GetAccessKeyLastUsedOutput, error) {
	c.inc("GetAccessKeyLastUsed")
	return c.svc.GetAccessKeyLastUsedWithContext(ctx, input, opts...)
}

// GetAccountAuthorizationDetailsRequest is a passthrough to the underlying GetAccountAuthorizationDetailsRequest.
// It will increment the count of requests made to GetAccountAuthorizationDetails.
func (c *IAM) GetAccountAuthorizationDetailsRequest(input *iam.GetAccountAuthorizationDetailsInput) (req *request.Request, output *iam.GetAccountAuthorizationDetailsOutput) {
	c.inc("GetAccountAuthorizationDetails")
	return c.svc.GetAccountAuthorizationDetailsRequest(input)
}

// GetAccountAuthorizationDetails is a passthrough to the underlying GetAccountAuthorizationDetails method.
// It will increment the count of requests made to GetAccountAuthorizationDetails.
func (c *IAM) GetAccountAuthorizationDetails(input *iam.GetAccountAuthorizationDetailsInput) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	c.inc("GetAccountAuthorizationDetails")
	return c.svc.GetAccountAuthorizationDetails(input)
}

// GetAccountAuthorizationDetailsWithContext is a passthrough to the underlying GetAccountAuthorizationDetailsWithContext method.
// It will increment the count of requests made to GetAccountAuthorizationDetails.
func (c *IAM) GetAccountAuthorizationDetailsWithContext(ctx aws.Context, input *iam.GetAccountAuthorizationDetailsInput, opts ...request.Option) (*iam.GetAccountAuthorizationDetailsOutput, error) {
	c.inc("GetAccountAuthorizationDetails")
	return c.svc.GetAccountAuthorizationDetailsWithContext(ctx, input, opts...)
}

// GetAccountAuthorizationDetailsPages is a passthrough to the underlying GetAccountAuthorizationDetailsPages method.
// It will increment the count of requests made to GetAccountAuthorizationDetails on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetAccountAuthorizationDetailsPagesWithContext to avoid this.
func (c *IAM) GetAccountAuthorizationDetailsPages(input *iam.GetAccountAuthorizationDetailsInput, fn func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool) error {
	wrappedFn := func(page *iam.GetAccountAuthorizationDetailsOutput, lastPage bool) bool {
		c.inc("GetAccountAuthorizationDetails")
		return fn(page, lastPage)
	}
	return c.svc.GetAccountAuthorizationDetailsPages(input, wrappedFn)
}

// GetAccountAuthorizationDetailsPagesWithContext is a passthrough to the underlying GetAccountAuthorizationDetailsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetAccountAuthorizationDetails when applied to the request.
func (c *IAM) GetAccountAuthorizationDetailsPagesWithContext(ctx aws.Context, input *iam.GetAccountAuthorizationDetailsInput, fn func(*iam.GetAccountAuthorizationDetailsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetAccountAuthorizationDetails"))
	return c.svc.GetAccountAuthorizationDetailsPagesWithContext(ctx, input, fn, opts...)
}

// GetAccountPasswordPolicyRequest is a passthrough to the underlying GetAccountPasswordPolicyRequest.
// It will increment the count of requests made to GetAccountPasswordPolicy.
func (c *IAM) GetAccountPasswordPolicyRequest(input *iam.GetAccountPasswordPolicyInput) (req *request.Request, output *iam.GetAccountPasswordPolicyOutput) {
	c.inc("GetAccountPasswordPolicy")
	return c.svc.GetAccountPasswordPolicyRequest(input)
}

// GetAccountPasswordPolicy is a passthrough to the underlying GetAccountPasswordPolicy method.
// It will increment the count of requests made to GetAccountPasswordPolicy.
func (c *IAM) GetAccountPasswordPolicy(input *iam.GetAccountPasswordPolicyInput) (*iam.GetAccountPasswordPolicyOutput, error) {
	c.inc("GetAccountPasswordPolicy")
	return c.svc.GetAccountPasswordPolicy(input)
}

// GetAccountPasswordPolicyWithContext is a passthrough to the underlying GetAccountPasswordPolicyWithContext method.
// It will increment the count of requests made to GetAccountPasswordPolicy.
func (c *IAM) GetAccountPasswordPolicyWithContext(ctx aws.Context, input *iam.GetAccountPasswordPolicyInput, opts ...request.Option) (*iam.GetAccountPasswordPolicyOutput, error) {
	c.inc("GetAccountPasswordPolicy")
	return c.svc.GetAccountPasswordPolicyWithContext(ctx, input, opts...)
}

// GetAccountSummaryRequest is a passthrough to the underlying GetAccountSummaryRequest.
// It will increment the count of requests made to GetAccountSummary.
func (c *IAM) GetAccountSummaryRequest(input *iam.GetAccountSummaryInput) (req *request.Request, output *iam.GetAccountSummaryOutput) {
	c.inc("GetAccountSummary")
	return c.svc.GetAccountSummaryRequest(input)
}

// GetAccountSummary is a passthrough to the underlying GetAccountSummary method.
// It will increment the count of requests made to GetAccountSummary.
func (c *IAM) GetAccountSummary(input *iam.GetAccountSummaryInput) (*iam.GetAccountSummaryOutput, error) {
	c.inc("GetAccountSummary")
	return c.svc.GetAccountSummary(input)
}

// GetAccountSummaryWithContext is a passthrough to the underlying GetAccountSummaryWithContext method.
// It will increment the count of requests made to GetAccountSummary.
func (c *IAM) GetAccountSummaryWithContext(ctx aws.Context, input *iam.GetAccountSummaryInput, opts ...request.Option) (*iam.GetAccountSummaryOutput, error) {
	c.inc("GetAccountSummary")
	return c.svc.GetAccountSummaryWithContext(ctx, input, opts...)
}

// GetContextKeysForCustomPolicyRequest is a passthrough to the underlying GetContextKeysForCustomPolicyRequest.
// It will increment the count of requests made to GetContextKeysForCustomPolicy.
func (c *IAM) GetContextKeysForCustomPolicyRequest(input *iam.GetContextKeysForCustomPolicyInput) (req *request.Request, output *iam.GetContextKeysForPolicyResponse) {
	c.inc("GetContextKeysForCustomPolicy")
	return c.svc.GetContextKeysForCustomPolicyRequest(input)
}

// GetContextKeysForCustomPolicy is a passthrough to the underlying GetContextKeysForCustomPolicy method.
// It will increment the count of requests made to GetContextKeysForCustomPolicy.
func (c *IAM) GetContextKeysForCustomPolicy(input *iam.GetContextKeysForCustomPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	c.inc("GetContextKeysForCustomPolicy")
	return c.svc.GetContextKeysForCustomPolicy(input)
}

// GetContextKeysForCustomPolicyWithContext is a passthrough to the underlying GetContextKeysForCustomPolicyWithContext method.
// It will increment the count of requests made to GetContextKeysForCustomPolicy.
func (c *IAM) GetContextKeysForCustomPolicyWithContext(ctx aws.Context, input *iam.GetContextKeysForCustomPolicyInput, opts ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	c.inc("GetContextKeysForCustomPolicy")
	return c.svc.GetContextKeysForCustomPolicyWithContext(ctx, input, opts...)
}

// GetContextKeysForPrincipalPolicyRequest is a passthrough to the underlying GetContextKeysForPrincipalPolicyRequest.
// It will increment the count of requests made to GetContextKeysForPrincipalPolicy.
func (c *IAM) GetContextKeysForPrincipalPolicyRequest(input *iam.GetContextKeysForPrincipalPolicyInput) (req *request.Request, output *iam.GetContextKeysForPolicyResponse) {
	c.inc("GetContextKeysForPrincipalPolicy")
	return c.svc.GetContextKeysForPrincipalPolicyRequest(input)
}

// GetContextKeysForPrincipalPolicy is a passthrough to the underlying GetContextKeysForPrincipalPolicy method.
// It will increment the count of requests made to GetContextKeysForPrincipalPolicy.
func (c *IAM) GetContextKeysForPrincipalPolicy(input *iam.GetContextKeysForPrincipalPolicyInput) (*iam.GetContextKeysForPolicyResponse, error) {
	c.inc("GetContextKeysForPrincipalPolicy")
	return c.svc.GetContextKeysForPrincipalPolicy(input)
}

// GetContextKeysForPrincipalPolicyWithContext is a passthrough to the underlying GetContextKeysForPrincipalPolicyWithContext method.
// It will increment the count of requests made to GetContextKeysForPrincipalPolicy.
func (c *IAM) GetContextKeysForPrincipalPolicyWithContext(ctx aws.Context, input *iam.GetContextKeysForPrincipalPolicyInput, opts ...request.Option) (*iam.GetContextKeysForPolicyResponse, error) {
	c.inc("GetContextKeysForPrincipalPolicy")
	return c.svc.GetContextKeysForPrincipalPolicyWithContext(ctx, input, opts...)
}

// GetCredentialReportRequest is a passthrough to the underlying GetCredentialReportRequest.
// It will increment the count of requests made to GetCredentialReport.
func (c *IAM) GetCredentialReportRequest(input *iam.GetCredentialReportInput) (req *request.Request, output *iam.GetCredentialReportOutput) {
	c.inc("GetCredentialReport")
	return c.svc.GetCredentialReportRequest(input)
}

// GetCredentialReport is a passthrough to the underlying GetCredentialReport method.
// It will increment the count of requests made to GetCredentialReport.
func (c *IAM) GetCredentialReport(input *iam.GetCredentialReportInput) (*iam.GetCredentialReportOutput, error) {
	c.inc("GetCredentialReport")
	return c.svc.GetCredentialReport(input)
}

// GetCredentialReportWithContext is a passthrough to the underlying GetCredentialReportWithContext method.
// It will increment the count of requests made to GetCredentialReport.
func (c *IAM) GetCredentialReportWithContext(ctx aws.Context, input *iam.GetCredentialReportInput, opts ...request.Option) (*iam.GetCredentialReportOutput, error) {
	c.inc("GetCredentialReport")
	return c.svc.GetCredentialReportWithContext(ctx, input, opts...)
}

// GetGroupRequest is a passthrough to the underlying GetGroupRequest.
// It will increment the count of requests made to GetGroup.
func (c *IAM) GetGroupRequest(input *iam.GetGroupInput) (req *request.Request, output *iam.GetGroupOutput) {
	c.inc("GetGroup")
	return c.svc.GetGroupRequest(input)
}

// GetGroup is a passthrough to the underlying GetGroup method.
// It will increment the count of requests made to GetGroup.
func (c *IAM) GetGroup(input *iam.GetGroupInput) (*iam.GetGroupOutput, error) {
	c.inc("GetGroup")
	return c.svc.GetGroup(input)
}

// GetGroupWithContext is a passthrough to the underlying GetGroupWithContext method.
// It will increment the count of requests made to GetGroup.
func (c *IAM) GetGroupWithContext(ctx aws.Context, input *iam.GetGroupInput, opts ...request.Option) (*iam.GetGroupOutput, error) {
	c.inc("GetGroup")
	return c.svc.GetGroupWithContext(ctx, input, opts...)
}

// GetGroupPages is a passthrough to the underlying GetGroupPages method.
// It will increment the count of requests made to GetGroup on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetGroupPagesWithContext to avoid this.
func (c *IAM) GetGroupPages(input *iam.GetGroupInput, fn func(*iam.GetGroupOutput, bool) bool) error {
	wrappedFn := func(page *iam.GetGroupOutput, lastPage bool) bool {
		c.inc("GetGroup")
		return fn(page, lastPage)
	}
	return c.svc.GetGroupPages(input, wrappedFn)
}

// GetGroupPagesWithContext is a passthrough to the underlying GetGroupPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetGroup when applied to the request.
func (c *IAM) GetGroupPagesWithContext(ctx aws.Context, input *iam.GetGroupInput, fn func(*iam.GetGroupOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetGroup"))
	return c.svc.GetGroupPagesWithContext(ctx, input, fn, opts...)
}

// GetGroupPolicyRequest is a passthrough to the underlying GetGroupPolicyRequest.
// It will increment the count of requests made to GetGroupPolicy.
func (c *IAM) GetGroupPolicyRequest(input *iam.GetGroupPolicyInput) (req *request.Request, output *iam.GetGroupPolicyOutput) {
	c.inc("GetGroupPolicy")
	return c.svc.GetGroupPolicyRequest(input)
}

// GetGroupPolicy is a passthrough to the underlying GetGroupPolicy method.
// It will increment the count of requests made to GetGroupPolicy.
func (c *IAM) GetGroupPolicy(input *iam.GetGroupPolicyInput) (*iam.GetGroupPolicyOutput, error) {
	c.inc("GetGroupPolicy")
	return c.svc.GetGroupPolicy(input)
}

// GetGroupPolicyWithContext is a passthrough to the underlying GetGroupPolicyWithContext method.
// It will increment the count of requests made to GetGroupPolicy.
func (c *IAM) GetGroupPolicyWithContext(ctx aws.Context, input *iam.GetGroupPolicyInput, opts ...request.Option) (*iam.GetGroupPolicyOutput, error) {
	c.inc("GetGroupPolicy")
	return c.svc.GetGroupPolicyWithContext(ctx, input, opts...)
}

// GetInstanceProfileRequest is a passthrough to the underlying GetInstanceProfileRequest.
// It will increment the count of requests made to GetInstanceProfile.
func (c *IAM) GetInstanceProfileRequest(input *iam.GetInstanceProfileInput) (req *request.Request, output *iam.GetInstanceProfileOutput) {
	c.inc("GetInstanceProfile")
	return c.svc.GetInstanceProfileRequest(input)
}

// GetInstanceProfile is a passthrough to the underlying GetInstanceProfile method.
// It will increment the count of requests made to GetInstanceProfile.
func (c *IAM) GetInstanceProfile(input *iam.GetInstanceProfileInput) (*iam.GetInstanceProfileOutput, error) {
	c.inc("GetInstanceProfile")
	return c.svc.GetInstanceProfile(input)
}

// GetInstanceProfileWithContext is a passthrough to the underlying GetInstanceProfileWithContext method.
// It will increment the count of requests made to GetInstanceProfile.
func (c *IAM) GetInstanceProfileWithContext(ctx aws.Context, input *iam.GetInstanceProfileInput, opts ...request.Option) (*iam.GetInstanceProfileOutput, error) {
	c.inc("GetInstanceProfile")
	return c.svc.GetInstanceProfileWithContext(ctx, input, opts...)
}

// GetLoginProfileRequest is a passthrough to the underlying GetLoginProfileRequest.
// It will increment the count of requests made to GetLoginProfile.
func (c *IAM) GetLoginProfileRequest(input *iam.GetLoginProfileInput) (req *request.Request, output *iam.GetLoginProfileOutput) {
	c.inc("GetLoginProfile")
	return c.svc.GetLoginProfileRequest(input)
}

// GetLoginProfile is a passthrough to the underlying GetLoginProfile method.
// It will increment the count of requests made to GetLoginProfile.
func (c *IAM) GetLoginProfile(input *iam.GetLoginProfileInput) (*iam.GetLoginProfileOutput, error) {
	c.inc("GetLoginProfile")
	return c.svc.GetLoginProfile(input)
}

// GetLoginProfileWithContext is a passthrough to the underlying GetLoginProfileWithContext method.
// It will increment the count of requests made to GetLoginProfile.
func (c *IAM) GetLoginProfileWithContext(ctx aws.Context, input *iam.GetLoginProfileInput, opts ...request.Option) (*iam.GetLoginProfileOutput, error) {
	c.inc("GetLoginProfile")
	return c.svc.GetLoginProfileWithContext(ctx, input, opts...)
}

// GetOpenIDConnectProviderRequest is a passthrough to the underlying GetOpenIDConnectProviderRequest.
// It will increment the count of requests made to GetOpenIDConnectProvider.
func (c *IAM) GetOpenIDConnectProviderRequest(input *iam.GetOpenIDConnectProviderInput) (req *request.Request, output *iam.GetOpenIDConnectProviderOutput) {
	c.inc("GetOpenIDConnectProvider")
	return c.svc.GetOpenIDConnectProviderRequest(input)
}

// GetOpenIDConnectProvider is a passthrough to the underlying GetOpenIDConnectProvider method.
// It will increment the count of requests made to GetOpenIDConnectProvider.
func (c *IAM) GetOpenIDConnectProvider(input *iam.GetOpenIDConnectProviderInput) (*iam.GetOpenIDConnectProviderOutput, error) {
	c.inc("GetOpenIDConnectProvider")
	return c.svc.GetOpenIDConnectProvider(input)
}

// GetOpenIDConnectProviderWithContext is a passthrough to the underlying GetOpenIDConnectProviderWithContext method.
// It will increment the count of requests made to GetOpenIDConnectProvider.
func (c *IAM) GetOpenIDConnectProviderWithContext(ctx aws.Context, input *iam.GetOpenIDConnectProviderInput, opts ...request.Option) (*iam.GetOpenIDConnectProviderOutput, error) {
	c.inc("GetOpenIDConnectProvider")
	return c.svc.GetOpenIDConnectProviderWithContext(ctx, input, opts...)
}

// GetPolicyRequest is a passthrough to the underlying GetPolicyRequest.
// It will increment the count of requests made to GetPolicy.
func (c *IAM) GetPolicyRequest(input *iam.GetPolicyInput) (req *request.Request, output *iam.GetPolicyOutput) {
	c.inc("GetPolicy")
	return c.svc.GetPolicyRequest(input)
}

// GetPolicy is a passthrough to the underlying GetPolicy method.
// It will increment the count of requests made to GetPolicy.
func (c *IAM) GetPolicy(input *iam.GetPolicyInput) (*iam.GetPolicyOutput, error) {
	c.inc("GetPolicy")
	return c.svc.GetPolicy(input)
}

// GetPolicyWithContext is a passthrough to the underlying GetPolicyWithContext method.
// It will increment the count of requests made to GetPolicy.
func (c *IAM) GetPolicyWithContext(ctx aws.Context, input *iam.GetPolicyInput, opts ...request.Option) (*iam.GetPolicyOutput, error) {
	c.inc("GetPolicy")
	return c.svc.GetPolicyWithContext(ctx, input, opts...)
}

// GetPolicyVersionRequest is a passthrough to the underlying GetPolicyVersionRequest.
// It will increment the count of requests made to GetPolicyVersion.
func (c *IAM) GetPolicyVersionRequest(input *iam.GetPolicyVersionInput) (req *request.Request, output *iam.GetPolicyVersionOutput) {
	c.inc("GetPolicyVersion")
	return c.svc.GetPolicyVersionRequest(input)
}

// GetPolicyVersion is a passthrough to the underlying GetPolicyVersion method.
// It will increment the count of requests made to GetPolicyVersion.
func (c *IAM) GetPolicyVersion(input *iam.GetPolicyVersionInput) (*iam.GetPolicyVersionOutput, error) {
	c.inc("GetPolicyVersion")
	return c.svc.GetPolicyVersion(input)
}

// GetPolicyVersionWithContext is a passthrough to the underlying GetPolicyVersionWithContext method.
// It will increment the count of requests made to GetPolicyVersion.
func (c *IAM) GetPolicyVersionWithContext(ctx aws.Context, input *iam.GetPolicyVersionInput, opts ...request.Option) (*iam.GetPolicyVersionOutput, error) {
	c.inc("GetPolicyVersion")
	return c.svc.GetPolicyVersionWithContext(ctx, input, opts...)
}

// GetRoleRequest is a passthrough to the underlying GetRoleRequest.
// It will increment the count of requests made to GetRole.
func (c *IAM) GetRoleRequest(input *iam.GetRoleInput) (req *request.Request, output *iam.GetRoleOutput) {
	c.inc("GetRole")
	return c.svc.GetRoleRequest(input)
}

// GetRole is a passthrough to the underlying GetRole method.
// It will increment the count of requests made to GetRole.
func (c *IAM) GetRole(input *iam.GetRoleInput) (*iam.GetRoleOutput, error) {
	c.inc("GetRole")
	return c.svc.GetRole(input)
}

// GetRoleWithContext is a passthrough to the underlying GetRoleWithContext method.
// It will increment the count of requests made to GetRole.
func (c *IAM) GetRoleWithContext(ctx aws.Context, input *iam.GetRoleInput, opts ...request.Option) (*iam.GetRoleOutput, error) {
	c.inc("GetRole")
	return c.svc.GetRoleWithContext(ctx, input, opts...)
}

// GetRolePolicyRequest is a passthrough to the underlying GetRolePolicyRequest.
// It will increment the count of requests made to GetRolePolicy.
func (c *IAM) GetRolePolicyRequest(input *iam.GetRolePolicyInput) (req *request.Request, output *iam.GetRolePolicyOutput) {
	c.inc("GetRolePolicy")
	return c.svc.GetRolePolicyRequest(input)
}

// GetRolePolicy is a passthrough to the underlying GetRolePolicy method.
// It will increment the count of requests made to GetRolePolicy.
func (c *IAM) GetRolePolicy(input *iam.GetRolePolicyInput) (*iam.GetRolePolicyOutput, error) {
	c.inc("GetRolePolicy")
	return c.svc.GetRolePolicy(input)
}

// GetRolePolicyWithContext is a passthrough to the underlying GetRolePolicyWithContext method.
// It will increment the count of requests made to GetRolePolicy.
func (c *IAM) GetRolePolicyWithContext(ctx aws.Context, input *iam.GetRolePolicyInput, opts ...request.Option) (*iam.GetRolePolicyOutput, error) {
	c.inc("GetRolePolicy")
	return c.svc.GetRolePolicyWithContext(ctx, input, opts...)
}

// GetSAMLProviderRequest is a passthrough to the underlying GetSAMLProviderRequest.
// It will increment the count of requests made to GetSAMLProvider.
func (c *IAM) GetSAMLProviderRequest(input *iam.GetSAMLProviderInput) (req *request.Request, output *iam.GetSAMLProviderOutput) {
	c.inc("GetSAMLProvider")
	return c.svc.GetSAMLProviderRequest(input)
}

// GetSAMLProvider is a passthrough to the underlying GetSAMLProvider method.
// It will increment the count of requests made to GetSAMLProvider.
func (c *IAM) GetSAMLProvider(input *iam.GetSAMLProviderInput) (*iam.GetSAMLProviderOutput, error) {
	c.inc("GetSAMLProvider")
	return c.svc.GetSAMLProvider(input)
}

// GetSAMLProviderWithContext is a passthrough to the underlying GetSAMLProviderWithContext method.
// It will increment the count of requests made to GetSAMLProvider.
func (c *IAM) GetSAMLProviderWithContext(ctx aws.Context, input *iam.GetSAMLProviderInput, opts ...request.Option) (*iam.GetSAMLProviderOutput, error) {
	c.inc("GetSAMLProvider")
	return c.svc.GetSAMLProviderWithContext(ctx, input, opts...)
}

// GetSSHPublicKeyRequest is a passthrough to the underlying GetSSHPublicKeyRequest.
// It will increment the count of requests made to GetSSHPublicKey.
func (c *IAM) GetSSHPublicKeyRequest(input *iam.GetSSHPublicKeyInput) (req *request.Request, output *iam.GetSSHPublicKeyOutput) {
	c.inc("GetSSHPublicKey")
	return c.svc.GetSSHPublicKeyRequest(input)
}

// GetSSHPublicKey is a passthrough to the underlying GetSSHPublicKey method.
// It will increment the count of requests made to GetSSHPublicKey.
func (c *IAM) GetSSHPublicKey(input *iam.GetSSHPublicKeyInput) (*iam.GetSSHPublicKeyOutput, error) {
	c.inc("GetSSHPublicKey")
	return c.svc.GetSSHPublicKey(input)
}

// GetSSHPublicKeyWithContext is a passthrough to the underlying GetSSHPublicKeyWithContext method.
// It will increment the count of requests made to GetSSHPublicKey.
func (c *IAM) GetSSHPublicKeyWithContext(ctx aws.Context, input *iam.GetSSHPublicKeyInput, opts ...request.Option) (*iam.GetSSHPublicKeyOutput, error) {
	c.inc("GetSSHPublicKey")
	return c.svc.GetSSHPublicKeyWithContext(ctx, input, opts...)
}

// GetServerCertificateRequest is a passthrough to the underlying GetServerCertificateRequest.
// It will increment the count of requests made to GetServerCertificate.
func (c *IAM) GetServerCertificateRequest(input *iam.GetServerCertificateInput) (req *request.Request, output *iam.GetServerCertificateOutput) {
	c.inc("GetServerCertificate")
	return c.svc.GetServerCertificateRequest(input)
}

// GetServerCertificate is a passthrough to the underlying GetServerCertificate method.
// It will increment the count of requests made to GetServerCertificate.
func (c *IAM) GetServerCertificate(input *iam.GetServerCertificateInput) (*iam.GetServerCertificateOutput, error) {
	c.inc("GetServerCertificate")
	return c.svc.GetServerCertificate(input)
}

// GetServerCertificateWithContext is a passthrough to the underlying GetServerCertificateWithContext method.
// It will increment the count of requests made to GetServerCertificate.
func (c *IAM) GetServerCertificateWithContext(ctx aws.Context, input *iam.GetServerCertificateInput, opts ...request.Option) (*iam.GetServerCertificateOutput, error) {
	c.inc("GetServerCertificate")
	return c.svc.GetServerCertificateWithContext(ctx, input, opts...)
}

// GetServiceLinkedRoleDeletionStatusRequest is a passthrough to the underlying GetServiceLinkedRoleDeletionStatusRequest.
// It will increment the count of requests made to GetServiceLinkedRoleDeletionStatus.
func (c *IAM) GetServiceLinkedRoleDeletionStatusRequest(input *iam.GetServiceLinkedRoleDeletionStatusInput) (req *request.Request, output *iam.GetServiceLinkedRoleDeletionStatusOutput) {
	c.inc("GetServiceLinkedRoleDeletionStatus")
	return c.svc.GetServiceLinkedRoleDeletionStatusRequest(input)
}

// GetServiceLinkedRoleDeletionStatus is a passthrough to the underlying GetServiceLinkedRoleDeletionStatus method.
// It will increment the count of requests made to GetServiceLinkedRoleDeletionStatus.
func (c *IAM) GetServiceLinkedRoleDeletionStatus(input *iam.GetServiceLinkedRoleDeletionStatusInput) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	c.inc("GetServiceLinkedRoleDeletionStatus")
	return c.svc.GetServiceLinkedRoleDeletionStatus(input)
}

// GetServiceLinkedRoleDeletionStatusWithContext is a passthrough to the underlying GetServiceLinkedRoleDeletionStatusWithContext method.
// It will increment the count of requests made to GetServiceLinkedRoleDeletionStatus.
func (c *IAM) GetServiceLinkedRoleDeletionStatusWithContext(ctx aws.Context, input *iam.GetServiceLinkedRoleDeletionStatusInput, opts ...request.Option) (*iam.GetServiceLinkedRoleDeletionStatusOutput, error) {
	c.inc("GetServiceLinkedRoleDeletionStatus")
	return c.svc.GetServiceLinkedRoleDeletionStatusWithContext(ctx, input, opts...)
}

// GetUserRequest is a passthrough to the underlying GetUserRequest.
// It will increment the count of requests made to GetUser.
func (c *IAM) GetUserRequest(input *iam.GetUserInput) (req *request.Request, output *iam.GetUserOutput) {
	c.inc("GetUser")
	return c.svc.GetUserRequest(input)
}

// GetUser is a passthrough to the underlying GetUser method.
// It will increment the count of requests made to GetUser.
func (c *IAM) GetUser(input *iam.GetUserInput) (*iam.GetUserOutput, error) {
	c.inc("GetUser")
	return c.svc.GetUser(input)
}

// GetUserWithContext is a passthrough to the underlying GetUserWithContext method.
// It will increment the count of requests made to GetUser.
func (c *IAM) GetUserWithContext(ctx aws.Context, input *iam.GetUserInput, opts ...request.Option) (*iam.GetUserOutput, error) {
	c.inc("GetUser")
	return c.svc.GetUserWithContext(ctx, input, opts...)
}

// GetUserPolicyRequest is a passthrough to the underlying GetUserPolicyRequest.
// It will increment the count of requests made to GetUserPolicy.
func (c *IAM) GetUserPolicyRequest(input *iam.GetUserPolicyInput) (req *request.Request, output *iam.GetUserPolicyOutput) {
	c.inc("GetUserPolicy")
	return c.svc.GetUserPolicyRequest(input)
}

// GetUserPolicy is a passthrough to the underlying GetUserPolicy method.
// It will increment the count of requests made to GetUserPolicy.
func (c *IAM) GetUserPolicy(input *iam.GetUserPolicyInput) (*iam.GetUserPolicyOutput, error) {
	c.inc("GetUserPolicy")
	return c.svc.GetUserPolicy(input)
}

// GetUserPolicyWithContext is a passthrough to the underlying GetUserPolicyWithContext method.
// It will increment the count of requests made to GetUserPolicy.
func (c *IAM) GetUserPolicyWithContext(ctx aws.Context, input *iam.GetUserPolicyInput, opts ...request.Option) (*iam.GetUserPolicyOutput, error) {
	c.inc("GetUserPolicy")
	return c.svc.GetUserPolicyWithContext(ctx, input, opts...)
}

// ListAccessKeysRequest is a passthrough to the underlying ListAccessKeysRequest.
// It will increment the count of requests made to ListAccessKeys.
func (c *IAM) ListAccessKeysRequest(input *iam.ListAccessKeysInput) (req *request.Request, output *iam.ListAccessKeysOutput) {
	c.inc("ListAccessKeys")
	return c.svc.ListAccessKeysRequest(input)
}

// ListAccessKeys is a passthrough to the underlying ListAccessKeys method.
// It will increment the count of requests made to ListAccessKeys.
func (c *IAM) ListAccessKeys(input *iam.ListAccessKeysInput) (*iam.ListAccessKeysOutput, error) {
	c.inc("ListAccessKeys")
	return c.svc.ListAccessKeys(input)
}

// ListAccessKeysWithContext is a passthrough to the underlying ListAccessKeysWithContext method.
// It will increment the count of requests made to ListAccessKeys.
func (c *IAM) ListAccessKeysWithContext(ctx aws.Context, input *iam.ListAccessKeysInput, opts ...request.Option) (*iam.ListAccessKeysOutput, error) {
	c.inc("ListAccessKeys")
	return c.svc.ListAccessKeysWithContext(ctx, input, opts...)
}

// ListAccessKeysPages is a passthrough to the underlying ListAccessKeysPages method.
// It will increment the count of requests made to ListAccessKeys on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAccessKeysPagesWithContext to avoid this.
func (c *IAM) ListAccessKeysPages(input *iam.ListAccessKeysInput, fn func(*iam.ListAccessKeysOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListAccessKeysOutput, lastPage bool) bool {
		c.inc("ListAccessKeys")
		return fn(page, lastPage)
	}
	return c.svc.ListAccessKeysPages(input, wrappedFn)
}

// ListAccessKeysPagesWithContext is a passthrough to the underlying ListAccessKeysPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAccessKeys when applied to the request.
func (c *IAM) ListAccessKeysPagesWithContext(ctx aws.Context, input *iam.ListAccessKeysInput, fn func(*iam.ListAccessKeysOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAccessKeys"))
	return c.svc.ListAccessKeysPagesWithContext(ctx, input, fn, opts...)
}

// ListAccountAliasesRequest is a passthrough to the underlying ListAccountAliasesRequest.
// It will increment the count of requests made to ListAccountAliases.
func (c *IAM) ListAccountAliasesRequest(input *iam.ListAccountAliasesInput) (req *request.Request, output *iam.ListAccountAliasesOutput) {
	c.inc("ListAccountAliases")
	return c.svc.ListAccountAliasesRequest(input)
}

// ListAccountAliases is a passthrough to the underlying ListAccountAliases method.
// It will increment the count of requests made to ListAccountAliases.
func (c *IAM) ListAccountAliases(input *iam.ListAccountAliasesInput) (*iam.ListAccountAliasesOutput, error) {
	c.inc("ListAccountAliases")
	return c.svc.ListAccountAliases(input)
}

// ListAccountAliasesWithContext is a passthrough to the underlying ListAccountAliasesWithContext method.
// It will increment the count of requests made to ListAccountAliases.
func (c *IAM) ListAccountAliasesWithContext(ctx aws.Context, input *iam.ListAccountAliasesInput, opts ...request.Option) (*iam.ListAccountAliasesOutput, error) {
	c.inc("ListAccountAliases")
	return c.svc.ListAccountAliasesWithContext(ctx, input, opts...)
}

// ListAccountAliasesPages is a passthrough to the underlying ListAccountAliasesPages method.
// It will increment the count of requests made to ListAccountAliases on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAccountAliasesPagesWithContext to avoid this.
func (c *IAM) ListAccountAliasesPages(input *iam.ListAccountAliasesInput, fn func(*iam.ListAccountAliasesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListAccountAliasesOutput, lastPage bool) bool {
		c.inc("ListAccountAliases")
		return fn(page, lastPage)
	}
	return c.svc.ListAccountAliasesPages(input, wrappedFn)
}

// ListAccountAliasesPagesWithContext is a passthrough to the underlying ListAccountAliasesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAccountAliases when applied to the request.
func (c *IAM) ListAccountAliasesPagesWithContext(ctx aws.Context, input *iam.ListAccountAliasesInput, fn func(*iam.ListAccountAliasesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAccountAliases"))
	return c.svc.ListAccountAliasesPagesWithContext(ctx, input, fn, opts...)
}

// ListAttachedGroupPoliciesRequest is a passthrough to the underlying ListAttachedGroupPoliciesRequest.
// It will increment the count of requests made to ListAttachedGroupPolicies.
func (c *IAM) ListAttachedGroupPoliciesRequest(input *iam.ListAttachedGroupPoliciesInput) (req *request.Request, output *iam.ListAttachedGroupPoliciesOutput) {
	c.inc("ListAttachedGroupPolicies")
	return c.svc.ListAttachedGroupPoliciesRequest(input)
}

// ListAttachedGroupPolicies is a passthrough to the underlying ListAttachedGroupPolicies method.
// It will increment the count of requests made to ListAttachedGroupPolicies.
func (c *IAM) ListAttachedGroupPolicies(input *iam.ListAttachedGroupPoliciesInput) (*iam.ListAttachedGroupPoliciesOutput, error) {
	c.inc("ListAttachedGroupPolicies")
	return c.svc.ListAttachedGroupPolicies(input)
}

// ListAttachedGroupPoliciesWithContext is a passthrough to the underlying ListAttachedGroupPoliciesWithContext method.
// It will increment the count of requests made to ListAttachedGroupPolicies.
func (c *IAM) ListAttachedGroupPoliciesWithContext(ctx aws.Context, input *iam.ListAttachedGroupPoliciesInput, opts ...request.Option) (*iam.ListAttachedGroupPoliciesOutput, error) {
	c.inc("ListAttachedGroupPolicies")
	return c.svc.ListAttachedGroupPoliciesWithContext(ctx, input, opts...)
}

// ListAttachedGroupPoliciesPages is a passthrough to the underlying ListAttachedGroupPoliciesPages method.
// It will increment the count of requests made to ListAttachedGroupPolicies on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAttachedGroupPoliciesPagesWithContext to avoid this.
func (c *IAM) ListAttachedGroupPoliciesPages(input *iam.ListAttachedGroupPoliciesInput, fn func(*iam.ListAttachedGroupPoliciesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListAttachedGroupPoliciesOutput, lastPage bool) bool {
		c.inc("ListAttachedGroupPolicies")
		return fn(page, lastPage)
	}
	return c.svc.ListAttachedGroupPoliciesPages(input, wrappedFn)
}

// ListAttachedGroupPoliciesPagesWithContext is a passthrough to the underlying ListAttachedGroupPoliciesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAttachedGroupPolicies when applied to the request.
func (c *IAM) ListAttachedGroupPoliciesPagesWithContext(ctx aws.Context, input *iam.ListAttachedGroupPoliciesInput, fn func(*iam.ListAttachedGroupPoliciesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAttachedGroupPolicies"))
	return c.svc.ListAttachedGroupPoliciesPagesWithContext(ctx, input, fn, opts...)
}

// ListAttachedRolePoliciesRequest is a passthrough to the underlying ListAttachedRolePoliciesRequest.
// It will increment the count of requests made to ListAttachedRolePolicies.
func (c *IAM) ListAttachedRolePoliciesRequest(input *iam.ListAttachedRolePoliciesInput) (req *request.Request, output *iam.ListAttachedRolePoliciesOutput) {
	c.inc("ListAttachedRolePolicies")
	return c.svc.ListAttachedRolePoliciesRequest(input)
}

// ListAttachedRolePolicies is a passthrough to the underlying ListAttachedRolePolicies method.
// It will increment the count of requests made to ListAttachedRolePolicies.
func (c *IAM) ListAttachedRolePolicies(input *iam.ListAttachedRolePoliciesInput) (*iam.ListAttachedRolePoliciesOutput, error) {
	c.inc("ListAttachedRolePolicies")
	return c.svc.ListAttachedRolePolicies(input)
}

// ListAttachedRolePoliciesWithContext is a passthrough to the underlying ListAttachedRolePoliciesWithContext method.
// It will increment the count of requests made to ListAttachedRolePolicies.
func (c *IAM) ListAttachedRolePoliciesWithContext(ctx aws.Context, input *iam.ListAttachedRolePoliciesInput, opts ...request.Option) (*iam.ListAttachedRolePoliciesOutput, error) {
	c.inc("ListAttachedRolePolicies")
	return c.svc.ListAttachedRolePoliciesWithContext(ctx, input, opts...)
}

// ListAttachedRolePoliciesPages is a passthrough to the underlying ListAttachedRolePoliciesPages method.
// It will increment the count of requests made to ListAttachedRolePolicies on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAttachedRolePoliciesPagesWithContext to avoid this.
func (c *IAM) ListAttachedRolePoliciesPages(input *iam.ListAttachedRolePoliciesInput, fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListAttachedRolePoliciesOutput, lastPage bool) bool {
		c.inc("ListAttachedRolePolicies")
		return fn(page, lastPage)
	}
	return c.svc.ListAttachedRolePoliciesPages(input, wrappedFn)
}

// ListAttachedRolePoliciesPagesWithContext is a passthrough to the underlying ListAttachedRolePoliciesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAttachedRolePolicies when applied to the request.
func (c *IAM) ListAttachedRolePoliciesPagesWithContext(ctx aws.Context, input *iam.ListAttachedRolePoliciesInput, fn func(*iam.ListAttachedRolePoliciesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAttachedRolePolicies"))
	return c.svc.ListAttachedRolePoliciesPagesWithContext(ctx, input, fn, opts...)
}

// ListAttachedUserPoliciesRequest is a passthrough to the underlying ListAttachedUserPoliciesRequest.
// It will increment the count of requests made to ListAttachedUserPolicies.
func (c *IAM) ListAttachedUserPoliciesRequest(input *iam.ListAttachedUserPoliciesInput) (req *request.Request, output *iam.ListAttachedUserPoliciesOutput) {
	c.inc("ListAttachedUserPolicies")
	return c.svc.ListAttachedUserPoliciesRequest(input)
}

// ListAttachedUserPolicies is a passthrough to the underlying ListAttachedUserPolicies method.
// It will increment the count of requests made to ListAttachedUserPolicies.
func (c *IAM) ListAttachedUserPolicies(input *iam.ListAttachedUserPoliciesInput) (*iam.ListAttachedUserPoliciesOutput, error) {
	c.inc("ListAttachedUserPolicies")
	return c.svc.ListAttachedUserPolicies(input)
}

// ListAttachedUserPoliciesWithContext is a passthrough to the underlying ListAttachedUserPoliciesWithContext method.
// It will increment the count of requests made to ListAttachedUserPolicies.
func (c *IAM) ListAttachedUserPoliciesWithContext(ctx aws.Context, input *iam.ListAttachedUserPoliciesInput, opts ...request.Option) (*iam.ListAttachedUserPoliciesOutput, error) {
	c.inc("ListAttachedUserPolicies")
	return c.svc.ListAttachedUserPoliciesWithContext(ctx, input, opts...)
}

// ListAttachedUserPoliciesPages is a passthrough to the underlying ListAttachedUserPoliciesPages method.
// It will increment the count of requests made to ListAttachedUserPolicies on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAttachedUserPoliciesPagesWithContext to avoid this.
func (c *IAM) ListAttachedUserPoliciesPages(input *iam.ListAttachedUserPoliciesInput, fn func(*iam.ListAttachedUserPoliciesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListAttachedUserPoliciesOutput, lastPage bool) bool {
		c.inc("ListAttachedUserPolicies")
		return fn(page, lastPage)
	}
	return c.svc.ListAttachedUserPoliciesPages(input, wrappedFn)
}

// ListAttachedUserPoliciesPagesWithContext is a passthrough to the underlying ListAttachedUserPoliciesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAttachedUserPolicies when applied to the request.
func (c *IAM) ListAttachedUserPoliciesPagesWithContext(ctx aws.Context, input *iam.ListAttachedUserPoliciesInput, fn func(*iam.ListAttachedUserPoliciesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAttachedUserPolicies"))
	return c.svc.ListAttachedUserPoliciesPagesWithContext(ctx, input, fn, opts...)
}

// ListEntitiesForPolicyRequest is a passthrough to the underlying ListEntitiesForPolicyRequest.
// It will increment the count of requests made to ListEntitiesForPolicy.
func (c *IAM) ListEntitiesForPolicyRequest(input *iam.ListEntitiesForPolicyInput) (req *request.Request, output *iam.ListEntitiesForPolicyOutput) {
	c.inc("ListEntitiesForPolicy")
	return c.svc.ListEntitiesForPolicyRequest(input)
}

// ListEntitiesForPolicy is a passthrough to the underlying ListEntitiesForPolicy method.
// It will increment the count of requests made to ListEntitiesForPolicy.
func (c *IAM) ListEntitiesForPolicy(input *iam.ListEntitiesForPolicyInput) (*iam.ListEntitiesForPolicyOutput, error) {
	c.inc("ListEntitiesForPolicy")
	return c.svc.ListEntitiesForPolicy(input)
}

// ListEntitiesForPolicyWithContext is a passthrough to the underlying ListEntitiesForPolicyWithContext method.
// It will increment the count of requests made to ListEntitiesForPolicy.
func (c *IAM) ListEntitiesForPolicyWithContext(ctx aws.Context, input *iam.ListEntitiesForPolicyInput, opts ...request.Option) (*iam.ListEntitiesForPolicyOutput, error) {
	c.inc("ListEntitiesForPolicy")
	return c.svc.ListEntitiesForPolicyWithContext(ctx, input, opts...)
}

// ListEntitiesForPolicyPages is a passthrough to the underlying ListEntitiesForPolicyPages method.
// It will increment the count of requests made to ListEntitiesForPolicy on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListEntitiesForPolicyPagesWithContext to avoid this.
func (c *IAM) ListEntitiesForPolicyPages(input *iam.ListEntitiesForPolicyInput, fn func(*iam.ListEntitiesForPolicyOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListEntitiesForPolicyOutput, lastPage bool) bool {
		c.inc("ListEntitiesForPolicy")
		return fn(page, lastPage)
	}
	return c.svc.ListEntitiesForPolicyPages(input, wrappedFn)
}

// ListEntitiesForPolicyPagesWithContext is a passthrough to the underlying ListEntitiesForPolicyPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListEntitiesForPolicy when applied to the request.
func (c *IAM) ListEntitiesForPolicyPagesWithContext(ctx aws.Context, input *iam.ListEntitiesForPolicyInput, fn func(*iam.ListEntitiesForPolicyOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListEntitiesForPolicy"))
	return c.svc.ListEntitiesForPolicyPagesWithContext(ctx, input, fn, opts...)
}

// ListGroupPoliciesRequest is a passthrough to the underlying ListGroupPoliciesRequest.
// It will increment the count of requests made to ListGroupPolicies.
func (c *IAM) ListGroupPoliciesRequest(input *iam.ListGroupPoliciesInput) (req *request.Request, output *iam.ListGroupPoliciesOutput) {
	c.inc("ListGroupPolicies")
	return c.svc.ListGroupPoliciesRequest(input)
}

// ListGroupPolicies is a passthrough to the underlying ListGroupPolicies method.
// It will increment the count of requests made to ListGroupPolicies.
func (c *IAM) ListGroupPolicies(input *iam.ListGroupPoliciesInput) (*iam.ListGroupPoliciesOutput, error) {
	c.inc("ListGroupPolicies")
	return c.svc.ListGroupPolicies(input)
}

// ListGroupPoliciesWithContext is a passthrough to the underlying ListGroupPoliciesWithContext method.
// It will increment the count of requests made to ListGroupPolicies.
func (c *IAM) ListGroupPoliciesWithContext(ctx aws.Context, input *iam.ListGroupPoliciesInput, opts ...request.Option) (*iam.ListGroupPoliciesOutput, error) {
	c.inc("ListGroupPolicies")
	return c.svc.ListGroupPoliciesWithContext(ctx, input, opts...)
}

// ListGroupPoliciesPages is a passthrough to the underlying ListGroupPoliciesPages method.
// It will increment the count of requests made to ListGroupPolicies on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListGroupPoliciesPagesWithContext to avoid this.
func (c *IAM) ListGroupPoliciesPages(input *iam.ListGroupPoliciesInput, fn func(*iam.ListGroupPoliciesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListGroupPoliciesOutput, lastPage bool) bool {
		c.inc("ListGroupPolicies")
		return fn(page, lastPage)
	}
	return c.svc.ListGroupPoliciesPages(input, wrappedFn)
}

// ListGroupPoliciesPagesWithContext is a passthrough to the underlying ListGroupPoliciesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListGroupPolicies when applied to the request.
func (c *IAM) ListGroupPoliciesPagesWithContext(ctx aws.Context, input *iam.ListGroupPoliciesInput, fn func(*iam.ListGroupPoliciesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListGroupPolicies"))
	return c.svc.ListGroupPoliciesPagesWithContext(ctx, input, fn, opts...)
}

// ListGroupsRequest is a passthrough to the underlying ListGroupsRequest.
// It will increment the count of requests made to ListGroups.
func (c *IAM) ListGroupsRequest(input *iam.ListGroupsInput) (req *request.Request, output *iam.ListGroupsOutput) {
	c.inc("ListGroups")
	return c.svc.ListGroupsRequest(input)
}

// ListGroups is a passthrough to the underlying ListGroups method.
// It will increment the count of requests made to ListGroups.
func (c *IAM) ListGroups(input *iam.ListGroupsInput) (*iam.ListGroupsOutput, error) {
	c.inc("ListGroups")
	return c.svc.ListGroups(input)
}

// ListGroupsWithContext is a passthrough to the underlying ListGroupsWithContext method.
// It will increment the count of requests made to ListGroups.
func (c *IAM) ListGroupsWithContext(ctx aws.Context, input *iam.ListGroupsInput, opts ...request.Option) (*iam.ListGroupsOutput, error) {
	c.inc("ListGroups")
	return c.svc.ListGroupsWithContext(ctx, input, opts...)
}

// ListGroupsPages is a passthrough to the underlying ListGroupsPages method.
// It will increment the count of requests made to ListGroups on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListGroupsPagesWithContext to avoid this.
func (c *IAM) ListGroupsPages(input *iam.ListGroupsInput, fn func(*iam.ListGroupsOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListGroupsOutput, lastPage bool) bool {
		c.inc("ListGroups")
		return fn(page, lastPage)
	}
	return c.svc.ListGroupsPages(input, wrappedFn)
}

// ListGroupsPagesWithContext is a passthrough to the underlying ListGroupsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListGroups when applied to the request.
func (c *IAM) ListGroupsPagesWithContext(ctx aws.Context, input *iam.ListGroupsInput, fn func(*iam.ListGroupsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListGroups"))
	return c.svc.ListGroupsPagesWithContext(ctx, input, fn, opts...)
}

// ListGroupsForUserRequest is a passthrough to the underlying ListGroupsForUserRequest.
// It will increment the count of requests made to ListGroupsForUser.
func (c *IAM) ListGroupsForUserRequest(input *iam.ListGroupsForUserInput) (req *request.Request, output *iam.ListGroupsForUserOutput) {
	c.inc("ListGroupsForUser")
	return c.svc.ListGroupsForUserRequest(input)
}

// ListGroupsForUser is a passthrough to the underlying ListGroupsForUser method.
// It will increment the count of requests made to ListGroupsForUser.
func (c *IAM) ListGroupsForUser(input *iam.ListGroupsForUserInput) (*iam.ListGroupsForUserOutput, error) {
	c.inc("ListGroupsForUser")
	return c.svc.ListGroupsForUser(input)
}

// ListGroupsForUserWithContext is a passthrough to the underlying ListGroupsForUserWithContext method.
// It will increment the count of requests made to ListGroupsForUser.
func (c *IAM) ListGroupsForUserWithContext(ctx aws.Context, input *iam.ListGroupsForUserInput, opts ...request.Option) (*iam.ListGroupsForUserOutput, error) {
	c.inc("ListGroupsForUser")
	return c.svc.ListGroupsForUserWithContext(ctx, input, opts...)
}

// ListGroupsForUserPages is a passthrough to the underlying ListGroupsForUserPages method.
// It will increment the count of requests made to ListGroupsForUser on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListGroupsForUserPagesWithContext to avoid this.
func (c *IAM) ListGroupsForUserPages(input *iam.ListGroupsForUserInput, fn func(*iam.ListGroupsForUserOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListGroupsForUserOutput, lastPage bool) bool {
		c.inc("ListGroupsForUser")
		return fn(page, lastPage)
	}
	return c.svc.ListGroupsForUserPages(input, wrappedFn)
}

// ListGroupsForUserPagesWithContext is a passthrough to the underlying ListGroupsForUserPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListGroupsForUser when applied to the request.
func (c *IAM) ListGroupsForUserPagesWithContext(ctx aws.Context, input *iam.ListGroupsForUserInput, fn func(*iam.ListGroupsForUserOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListGroupsForUser"))
	return c.svc.ListGroupsForUserPagesWithContext(ctx, input, fn, opts...)
}

// ListInstanceProfilesRequest is a passthrough to the underlying ListInstanceProfilesRequest.
// It will increment the count of requests made to ListInstanceProfiles.
func (c *IAM) ListInstanceProfilesRequest(input *iam.ListInstanceProfilesInput) (req *request.Request, output *iam.ListInstanceProfilesOutput) {
	c.inc("ListInstanceProfiles")
	return c.svc.ListInstanceProfilesRequest(input)
}

// ListInstanceProfiles is a passthrough to the underlying ListInstanceProfiles method.
// It will increment the count of requests made to ListInstanceProfiles.
func (c *IAM) ListInstanceProfiles(input *iam.ListInstanceProfilesInput) (*iam.ListInstanceProfilesOutput, error) {
	c.inc("ListInstanceProfiles")
	return c.svc.ListInstanceProfiles(input)
}

// ListInstanceProfilesWithContext is a passthrough to the underlying ListInstanceProfilesWithContext method.
// It will increment the count of requests made to ListInstanceProfiles.
func (c *IAM) ListInstanceProfilesWithContext(ctx aws.Context, input *iam.ListInstanceProfilesInput, opts ...request.Option) (*iam.ListInstanceProfilesOutput, error) {
	c.inc("ListInstanceProfiles")
	return c.svc.ListInstanceProfilesWithContext(ctx, input, opts...)
}

// ListInstanceProfilesPages is a passthrough to the underlying ListInstanceProfilesPages method.
// It will increment the count of requests made to ListInstanceProfiles on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListInstanceProfilesPagesWithContext to avoid this.
func (c *IAM) ListInstanceProfilesPages(input *iam.ListInstanceProfilesInput, fn func(*iam.ListInstanceProfilesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListInstanceProfilesOutput, lastPage bool) bool {
		c.inc("ListInstanceProfiles")
		return fn(page, lastPage)
	}
	return c.svc.ListInstanceProfilesPages(input, wrappedFn)
}

// ListInstanceProfilesPagesWithContext is a passthrough to the underlying ListInstanceProfilesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListInstanceProfiles when applied to the request.
func (c *IAM) ListInstanceProfilesPagesWithContext(ctx aws.Context, input *iam.ListInstanceProfilesInput, fn func(*iam.ListInstanceProfilesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListInstanceProfiles"))
	return c.svc.ListInstanceProfilesPagesWithContext(ctx, input, fn, opts...)
}

// ListInstanceProfilesForRoleRequest is a passthrough to the underlying ListInstanceProfilesForRoleRequest.
// It will increment the count of requests made to ListInstanceProfilesForRole.
func (c *IAM) ListInstanceProfilesForRoleRequest(input *iam.ListInstanceProfilesForRoleInput) (req *request.Request, output *iam.ListInstanceProfilesForRoleOutput) {
	c.inc("ListInstanceProfilesForRole")
	return c.svc.ListInstanceProfilesForRoleRequest(input)
}

// ListInstanceProfilesForRole is a passthrough to the underlying ListInstanceProfilesForRole method.
// It will increment the count of requests made to ListInstanceProfilesForRole.
func (c *IAM) ListInstanceProfilesForRole(input *iam.ListInstanceProfilesForRoleInput) (*iam.ListInstanceProfilesForRoleOutput, error) {
	c.inc("ListInstanceProfilesForRole")
	return c.svc.ListInstanceProfilesForRole(input)
}

// ListInstanceProfilesForRoleWithContext is a passthrough to the underlying ListInstanceProfilesForRoleWithContext method.
// It will increment the count of requests made to ListInstanceProfilesForRole.
func (c *IAM) ListInstanceProfilesForRoleWithContext(ctx aws.Context, input *iam.ListInstanceProfilesForRoleInput, opts ...request.Option) (*iam.ListInstanceProfilesForRoleOutput, error) {
	c.inc("ListInstanceProfilesForRole")
	return c.svc.ListInstanceProfilesForRoleWithContext(ctx, input, opts...)
}

// ListInstanceProfilesForRolePages is a passthrough to the underlying ListInstanceProfilesForRolePages method.
// It will increment the count of requests made to ListInstanceProfilesForRole on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListInstanceProfilesForRolePagesWithContext to avoid this.
func (c *IAM) ListInstanceProfilesForRolePages(input *iam.ListInstanceProfilesForRoleInput, fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListInstanceProfilesForRoleOutput, lastPage bool) bool {
		c.inc("ListInstanceProfilesForRole")
		return fn(page, lastPage)
	}
	return c.svc.ListInstanceProfilesForRolePages(input, wrappedFn)
}

// ListInstanceProfilesForRolePagesWithContext is a passthrough to the underlying ListInstanceProfilesForRolePagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListInstanceProfilesForRole when applied to the request.
func (c *IAM) ListInstanceProfilesForRolePagesWithContext(ctx aws.Context, input *iam.ListInstanceProfilesForRoleInput, fn func(*iam.ListInstanceProfilesForRoleOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListInstanceProfilesForRole"))
	return c.svc.ListInstanceProfilesForRolePagesWithContext(ctx, input, fn, opts...)
}

// ListMFADevicesRequest is a passthrough to the underlying ListMFADevicesRequest.
// It will increment the count of requests made to ListMFADevices.
func (c *IAM) ListMFADevicesRequest(input *iam.ListMFADevicesInput) (req *request.Request, output *iam.ListMFADevicesOutput) {
	c.inc("ListMFADevices")
	return c.svc.ListMFADevicesRequest(input)
}

// ListMFADevices is a passthrough to the underlying ListMFADevices method.
// It will increment the count of requests made to ListMFADevices.
func (c *IAM) ListMFADevices(input *iam.ListMFADevicesInput) (*iam.ListMFADevicesOutput, error) {
	c.inc("ListMFADevices")
	return c.svc.ListMFADevices(input)
}

// ListMFADevicesWithContext is a passthrough to the underlying ListMFADevicesWithContext method.
// It will increment the count of requests made to ListMFADevices.
func (c *IAM) ListMFADevicesWithContext(ctx aws.Context, input *iam.ListMFADevicesInput, opts ...request.Option) (*iam.ListMFADevicesOutput, error) {
	c.inc("ListMFADevices")
	return c.svc.ListMFADevicesWithContext(ctx, input, opts...)
}

// ListMFADevicesPages is a passthrough to the underlying ListMFADevicesPages method.
// It will increment the count of requests made to ListMFADevices on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListMFADevicesPagesWithContext to avoid this.
func (c *IAM) ListMFADevicesPages(input *iam.ListMFADevicesInput, fn func(*iam.ListMFADevicesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListMFADevicesOutput, lastPage bool) bool {
		c.inc("ListMFADevices")
		return fn(page, lastPage)
	}
	return c.svc.ListMFADevicesPages(input, wrappedFn)
}

// ListMFADevicesPagesWithContext is a passthrough to the underlying ListMFADevicesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListMFADevices when applied to the request.
func (c *IAM) ListMFADevicesPagesWithContext(ctx aws.Context, input *iam.ListMFADevicesInput, fn func(*iam.ListMFADevicesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListMFADevices"))
	return c.svc.ListMFADevicesPagesWithContext(ctx, input, fn, opts...)
}

// ListOpenIDConnectProvidersRequest is a passthrough to the underlying ListOpenIDConnectProvidersRequest.
// It will increment the count of requests made to ListOpenIDConnectProviders.
func (c *IAM) ListOpenIDConnectProvidersRequest(input *iam.ListOpenIDConnectProvidersInput) (req *request.Request, output *iam.ListOpenIDConnectProvidersOutput) {
	c.inc("ListOpenIDConnectProviders")
	return c.svc.ListOpenIDConnectProvidersRequest(input)
}

// ListOpenIDConnectProviders is a passthrough to the underlying ListOpenIDConnectProviders method.
// It will increment the count of requests made to ListOpenIDConnectProviders.
func (c *IAM) ListOpenIDConnectProviders(input *iam.ListOpenIDConnectProvidersInput) (*iam.ListOpenIDConnectProvidersOutput, error) {
	c.inc("ListOpenIDConnectProviders")
	return c.svc.ListOpenIDConnectProviders(input)
}

// ListOpenIDConnectProvidersWithContext is a passthrough to the underlying ListOpenIDConnectProvidersWithContext method.
// It will increment the count of requests made to ListOpenIDConnectProviders.
func (c *IAM) ListOpenIDConnectProvidersWithContext(ctx aws.Context, input *iam.ListOpenIDConnectProvidersInput, opts ...request.Option) (*iam.ListOpenIDConnectProvidersOutput, error) {
	c.inc("ListOpenIDConnectProviders")
	return c.svc.ListOpenIDConnectProvidersWithContext(ctx, input, opts...)
}

// ListPoliciesRequest is a passthrough to the underlying ListPoliciesRequest.
// It will increment the count of requests made to ListPolicies.
func (c *IAM) ListPoliciesRequest(input *iam.ListPoliciesInput) (req *request.Request, output *iam.ListPoliciesOutput) {
	c.inc("ListPolicies")
	return c.svc.ListPoliciesRequest(input)
}

// ListPolicies is a passthrough to the underlying ListPolicies method.
// It will increment the count of requests made to ListPolicies.
func (c *IAM) ListPolicies(input *iam.ListPoliciesInput) (*iam.ListPoliciesOutput, error) {
	c.inc("ListPolicies")
	return c.svc.ListPolicies(input)
}

// ListPoliciesWithContext is a passthrough to the underlying ListPoliciesWithContext method.
// It will increment the count of requests made to ListPolicies.
func (c *IAM) ListPoliciesWithContext(ctx aws.Context, input *iam.ListPoliciesInput, opts ...request.Option) (*iam.ListPoliciesOutput, error) {
	c.inc("ListPolicies")
	return c.svc.ListPoliciesWithContext(ctx, input, opts...)
}

// ListPoliciesPages is a passthrough to the underlying ListPoliciesPages method.
// It will increment the count of requests made to ListPolicies on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListPoliciesPagesWithContext to avoid this.
func (c *IAM) ListPoliciesPages(input *iam.ListPoliciesInput, fn func(*iam.ListPoliciesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListPoliciesOutput, lastPage bool) bool {
		c.inc("ListPolicies")
		return fn(page, lastPage)
	}
	return c.svc.ListPoliciesPages(input, wrappedFn)
}

// ListPoliciesPagesWithContext is a passthrough to the underlying ListPoliciesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListPolicies when applied to the request.
func (c *IAM) ListPoliciesPagesWithContext(ctx aws.Context, input *iam.ListPoliciesInput, fn func(*iam.ListPoliciesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListPolicies"))
	return c.svc.ListPoliciesPagesWithContext(ctx, input, fn, opts...)
}

// ListPolicyVersionsRequest is a passthrough to the underlying ListPolicyVersionsRequest.
// It will increment the count of requests made to ListPolicyVersions.
func (c *IAM) ListPolicyVersionsRequest(input *iam.ListPolicyVersionsInput) (req *request.Request, output *iam.ListPolicyVersionsOutput) {
	c.inc("ListPolicyVersions")
	return c.svc.ListPolicyVersionsRequest(input)
}

// ListPolicyVersions is a passthrough to the underlying ListPolicyVersions method.
// It will increment the count of requests made to ListPolicyVersions.
func (c *IAM) ListPolicyVersions(input *iam.ListPolicyVersionsInput) (*iam.ListPolicyVersionsOutput, error) {
	c.inc("ListPolicyVersions")
	return c.svc.ListPolicyVersions(input)
}

// ListPolicyVersionsWithContext is a passthrough to the underlying ListPolicyVersionsWithContext method.
// It will increment the count of requests made to ListPolicyVersions.
func (c *IAM) ListPolicyVersionsWithContext(ctx aws.Context, input *iam.ListPolicyVersionsInput, opts ...request.Option) (*iam.ListPolicyVersionsOutput, error) {
	c.inc("ListPolicyVersions")
	return c.svc.ListPolicyVersionsWithContext(ctx, input, opts...)
}

// ListPolicyVersionsPages is a passthrough to the underlying ListPolicyVersionsPages method.
// It will increment the count of requests made to ListPolicyVersions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListPolicyVersionsPagesWithContext to avoid this.
func (c *IAM) ListPolicyVersionsPages(input *iam.ListPolicyVersionsInput, fn func(*iam.ListPolicyVersionsOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListPolicyVersionsOutput, lastPage bool) bool {
		c.inc("ListPolicyVersions")
		return fn(page, lastPage)
	}
	return c.svc.ListPolicyVersionsPages(input, wrappedFn)
}

// ListPolicyVersionsPagesWithContext is a passthrough to the underlying ListPolicyVersionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListPolicyVersions when applied to the request.
func (c *IAM) ListPolicyVersionsPagesWithContext(ctx aws.Context, input *iam.ListPolicyVersionsInput, fn func(*iam.ListPolicyVersionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListPolicyVersions"))
	return c.svc.ListPolicyVersionsPagesWithContext(ctx, input, fn, opts...)
}

// ListRolePoliciesRequest is a passthrough to the underlying ListRolePoliciesRequest.
// It will increment the count of requests made to ListRolePolicies.
func (c *IAM) ListRolePoliciesRequest(input *iam.ListRolePoliciesInput) (req *request.Request, output *iam.ListRolePoliciesOutput) {
	c.inc("ListRolePolicies")
	return c.svc.ListRolePoliciesRequest(input)
}

// ListRolePolicies is a passthrough to the underlying ListRolePolicies method.
// It will increment the count of requests made to ListRolePolicies.
func (c *IAM) ListRolePolicies(input *iam.ListRolePoliciesInput) (*iam.ListRolePoliciesOutput, error) {
	c.inc("ListRolePolicies")
	return c.svc.ListRolePolicies(input)
}

// ListRolePoliciesWithContext is a passthrough to the underlying ListRolePoliciesWithContext method.
// It will increment the count of requests made to ListRolePolicies.
func (c *IAM) ListRolePoliciesWithContext(ctx aws.Context, input *iam.ListRolePoliciesInput, opts ...request.Option) (*iam.ListRolePoliciesOutput, error) {
	c.inc("ListRolePolicies")
	return c.svc.ListRolePoliciesWithContext(ctx, input, opts...)
}

// ListRolePoliciesPages is a passthrough to the underlying ListRolePoliciesPages method.
// It will increment the count of requests made to ListRolePolicies on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListRolePoliciesPagesWithContext to avoid this.
func (c *IAM) ListRolePoliciesPages(input *iam.ListRolePoliciesInput, fn func(*iam.ListRolePoliciesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListRolePoliciesOutput, lastPage bool) bool {
		c.inc("ListRolePolicies")
		return fn(page, lastPage)
	}
	return c.svc.ListRolePoliciesPages(input, wrappedFn)
}

// ListRolePoliciesPagesWithContext is a passthrough to the underlying ListRolePoliciesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListRolePolicies when applied to the request.
func (c *IAM) ListRolePoliciesPagesWithContext(ctx aws.Context, input *iam.ListRolePoliciesInput, fn func(*iam.ListRolePoliciesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListRolePolicies"))
	return c.svc.ListRolePoliciesPagesWithContext(ctx, input, fn, opts...)
}

// ListRolesRequest is a passthrough to the underlying ListRolesRequest.
// It will increment the count of requests made to ListRoles.
func (c *IAM) ListRolesRequest(input *iam.ListRolesInput) (req *request.Request, output *iam.ListRolesOutput) {
	c.inc("ListRoles")
	return c.svc.ListRolesRequest(input)
}

// ListRoles is a passthrough to the underlying ListRoles method.
// It will increment the count of requests made to ListRoles.
func (c *IAM) ListRoles(input *iam.ListRolesInput) (*iam.ListRolesOutput, error) {
	c.inc("ListRoles")
	return c.svc.ListRoles(input)
}

// ListRolesWithContext is a passthrough to the underlying ListRolesWithContext method.
// It will increment the count of requests made to ListRoles.
func (c *IAM) ListRolesWithContext(ctx aws.Context, input *iam.ListRolesInput, opts ...request.Option) (*iam.ListRolesOutput, error) {
	c.inc("ListRoles")
	return c.svc.ListRolesWithContext(ctx, input, opts...)
}

// ListRolesPages is a passthrough to the underlying ListRolesPages method.
// It will increment the count of requests made to ListRoles on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListRolesPagesWithContext to avoid this.
func (c *IAM) ListRolesPages(input *iam.ListRolesInput, fn func(*iam.ListRolesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListRolesOutput, lastPage bool) bool {
		c.inc("ListRoles")
		return fn(page, lastPage)
	}
	return c.svc.ListRolesPages(input, wrappedFn)
}

// ListRolesPagesWithContext is a passthrough to the underlying ListRolesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListRoles when applied to the request.
func (c *IAM) ListRolesPagesWithContext(ctx aws.Context, input *iam.ListRolesInput, fn func(*iam.ListRolesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListRoles"))
	return c.svc.ListRolesPagesWithContext(ctx, input, fn, opts...)
}

// ListSAMLProvidersRequest is a passthrough to the underlying ListSAMLProvidersRequest.
// It will increment the count of requests made to ListSAMLProviders.
func (c *IAM) ListSAMLProvidersRequest(input *iam.ListSAMLProvidersInput) (req *request.Request, output *iam.ListSAMLProvidersOutput) {
	c.inc("ListSAMLProviders")
	return c.svc.ListSAMLProvidersRequest(input)
}

// ListSAMLProviders is a passthrough to the underlying ListSAMLProviders method.
// It will increment the count of requests made to ListSAMLProviders.
func (c *IAM) ListSAMLProviders(input *iam.ListSAMLProvidersInput) (*iam.ListSAMLProvidersOutput, error) {
	c.inc("ListSAMLProviders")
	return c.svc.ListSAMLProviders(input)
}

// ListSAMLProvidersWithContext is a passthrough to the underlying ListSAMLProvidersWithContext method.
// It will increment the count of requests made to ListSAMLProviders.
func (c *IAM) ListSAMLProvidersWithContext(ctx aws.Context, input *iam.ListSAMLProvidersInput, opts ...request.Option) (*iam.ListSAMLProvidersOutput, error) {
	c.inc("ListSAMLProviders")
	return c.svc.ListSAMLProvidersWithContext(ctx, input, opts...)
}

// ListSSHPublicKeysRequest is a passthrough to the underlying ListSSHPublicKeysRequest.
// It will increment the count of requests made to ListSSHPublicKeys.
func (c *IAM) ListSSHPublicKeysRequest(input *iam.ListSSHPublicKeysInput) (req *request.Request, output *iam.ListSSHPublicKeysOutput) {
	c.inc("ListSSHPublicKeys")
	return c.svc.ListSSHPublicKeysRequest(input)
}

// ListSSHPublicKeys is a passthrough to the underlying ListSSHPublicKeys method.
// It will increment the count of requests made to ListSSHPublicKeys.
func (c *IAM) ListSSHPublicKeys(input *iam.ListSSHPublicKeysInput) (*iam.ListSSHPublicKeysOutput, error) {
	c.inc("ListSSHPublicKeys")
	return c.svc.ListSSHPublicKeys(input)
}

// ListSSHPublicKeysWithContext is a passthrough to the underlying ListSSHPublicKeysWithContext method.
// It will increment the count of requests made to ListSSHPublicKeys.
func (c *IAM) ListSSHPublicKeysWithContext(ctx aws.Context, input *iam.ListSSHPublicKeysInput, opts ...request.Option) (*iam.ListSSHPublicKeysOutput, error) {
	c.inc("ListSSHPublicKeys")
	return c.svc.ListSSHPublicKeysWithContext(ctx, input, opts...)
}

// ListSSHPublicKeysPages is a passthrough to the underlying ListSSHPublicKeysPages method.
// It will increment the count of requests made to ListSSHPublicKeys on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListSSHPublicKeysPagesWithContext to avoid this.
func (c *IAM) ListSSHPublicKeysPages(input *iam.ListSSHPublicKeysInput, fn func(*iam.ListSSHPublicKeysOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListSSHPublicKeysOutput, lastPage bool) bool {
		c.inc("ListSSHPublicKeys")
		return fn(page, lastPage)
	}
	return c.svc.ListSSHPublicKeysPages(input, wrappedFn)
}

// ListSSHPublicKeysPagesWithContext is a passthrough to the underlying ListSSHPublicKeysPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListSSHPublicKeys when applied to the request.
func (c *IAM) ListSSHPublicKeysPagesWithContext(ctx aws.Context, input *iam.ListSSHPublicKeysInput, fn func(*iam.ListSSHPublicKeysOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListSSHPublicKeys"))
	return c.svc.ListSSHPublicKeysPagesWithContext(ctx, input, fn, opts...)
}

// ListServerCertificatesRequest is a passthrough to the underlying ListServerCertificatesRequest.
// It will increment the count of requests made to ListServerCertificates.
func (c *IAM) ListServerCertificatesRequest(input *iam.ListServerCertificatesInput) (req *request.Request, output *iam.ListServerCertificatesOutput) {
	c.inc("ListServerCertificates")
	return c.svc.ListServerCertificatesRequest(input)
}

// ListServerCertificates is a passthrough to the underlying ListServerCertificates method.
// It will increment the count of requests made to ListServerCertificates.
func (c *IAM) ListServerCertificates(input *iam.ListServerCertificatesInput) (*iam.ListServerCertificatesOutput, error) {
	c.inc("ListServerCertificates")
	return c.svc.ListServerCertificates(input)
}

// ListServerCertificatesWithContext is a passthrough to the underlying ListServerCertificatesWithContext method.
// It will increment the count of requests made to ListServerCertificates.
func (c *IAM) ListServerCertificatesWithContext(ctx aws.Context, input *iam.ListServerCertificatesInput, opts ...request.Option) (*iam.ListServerCertificatesOutput, error) {
	c.inc("ListServerCertificates")
	return c.svc.ListServerCertificatesWithContext(ctx, input, opts...)
}

// ListServerCertificatesPages is a passthrough to the underlying ListServerCertificatesPages method.
// It will increment the count of requests made to ListServerCertificates on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListServerCertificatesPagesWithContext to avoid this.
func (c *IAM) ListServerCertificatesPages(input *iam.ListServerCertificatesInput, fn func(*iam.ListServerCertificatesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListServerCertificatesOutput, lastPage bool) bool {
		c.inc("ListServerCertificates")
		return fn(page, lastPage)
	}
	return c.svc.ListServerCertificatesPages(input, wrappedFn)
}

// ListServerCertificatesPagesWithContext is a passthrough to the underlying ListServerCertificatesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListServerCertificates when applied to the request.
func (c *IAM) ListServerCertificatesPagesWithContext(ctx aws.Context, input *iam.ListServerCertificatesInput, fn func(*iam.ListServerCertificatesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListServerCertificates"))
	return c.svc.ListServerCertificatesPagesWithContext(ctx, input, fn, opts...)
}

// ListServiceSpecificCredentialsRequest is a passthrough to the underlying ListServiceSpecificCredentialsRequest.
// It will increment the count of requests made to ListServiceSpecificCredentials.
func (c *IAM) ListServiceSpecificCredentialsRequest(input *iam.ListServiceSpecificCredentialsInput) (req *request.Request, output *iam.ListServiceSpecificCredentialsOutput) {
	c.inc("ListServiceSpecificCredentials")
	return c.svc.ListServiceSpecificCredentialsRequest(input)
}

// ListServiceSpecificCredentials is a passthrough to the underlying ListServiceSpecificCredentials method.
// It will increment the count of requests made to ListServiceSpecificCredentials.
func (c *IAM) ListServiceSpecificCredentials(input *iam.ListServiceSpecificCredentialsInput) (*iam.ListServiceSpecificCredentialsOutput, error) {
	c.inc("ListServiceSpecificCredentials")
	return c.svc.ListServiceSpecificCredentials(input)
}

// ListServiceSpecificCredentialsWithContext is a passthrough to the underlying ListServiceSpecificCredentialsWithContext method.
// It will increment the count of requests made to ListServiceSpecificCredentials.
func (c *IAM) ListServiceSpecificCredentialsWithContext(ctx aws.Context, input *iam.ListServiceSpecificCredentialsInput, opts ...request.Option) (*iam.ListServiceSpecificCredentialsOutput, error) {
	c.inc("ListServiceSpecificCredentials")
	return c.svc.ListServiceSpecificCredentialsWithContext(ctx, input, opts...)
}

// ListSigningCertificatesRequest is a passthrough to the underlying ListSigningCertificatesRequest.
// It will increment the count of requests made to ListSigningCertificates.
func (c *IAM) ListSigningCertificatesRequest(input *iam.ListSigningCertificatesInput) (req *request.Request, output *iam.ListSigningCertificatesOutput) {
	c.inc("ListSigningCertificates")
	return c.svc.ListSigningCertificatesRequest(input)
}

// ListSigningCertificates is a passthrough to the underlying ListSigningCertificates method.
// It will increment the count of requests made to ListSigningCertificates.
func (c *IAM) ListSigningCertificates(input *iam.ListSigningCertificatesInput) (*iam.ListSigningCertificatesOutput, error) {
	c.inc("ListSigningCertificates")
	return c.svc.ListSigningCertificates(input)
}

// ListSigningCertificatesWithContext is a passthrough to the underlying ListSigningCertificatesWithContext method.
// It will increment the count of requests made to ListSigningCertificates.
func (c *IAM) ListSigningCertificatesWithContext(ctx aws.Context, input *iam.ListSigningCertificatesInput, opts ...request.Option) (*iam.ListSigningCertificatesOutput, error) {
	c.inc("ListSigningCertificates")
	return c.svc.ListSigningCertificatesWithContext(ctx, input, opts...)
}

// ListSigningCertificatesPages is a passthrough to the underlying ListSigningCertificatesPages method.
// It will increment the count of requests made to ListSigningCertificates on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListSigningCertificatesPagesWithContext to avoid this.
func (c *IAM) ListSigningCertificatesPages(input *iam.ListSigningCertificatesInput, fn func(*iam.ListSigningCertificatesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListSigningCertificatesOutput, lastPage bool) bool {
		c.inc("ListSigningCertificates")
		return fn(page, lastPage)
	}
	return c.svc.ListSigningCertificatesPages(input, wrappedFn)
}

// ListSigningCertificatesPagesWithContext is a passthrough to the underlying ListSigningCertificatesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListSigningCertificates when applied to the request.
func (c *IAM) ListSigningCertificatesPagesWithContext(ctx aws.Context, input *iam.ListSigningCertificatesInput, fn func(*iam.ListSigningCertificatesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListSigningCertificates"))
	return c.svc.ListSigningCertificatesPagesWithContext(ctx, input, fn, opts...)
}

// ListUserPoliciesRequest is a passthrough to the underlying ListUserPoliciesRequest.
// It will increment the count of requests made to ListUserPolicies.
func (c *IAM) ListUserPoliciesRequest(input *iam.ListUserPoliciesInput) (req *request.Request, output *iam.ListUserPoliciesOutput) {
	c.inc("ListUserPolicies")
	return c.svc.ListUserPoliciesRequest(input)
}

// ListUserPolicies is a passthrough to the underlying ListUserPolicies method.
// It will increment the count of requests made to ListUserPolicies.
func (c *IAM) ListUserPolicies(input *iam.ListUserPoliciesInput) (*iam.ListUserPoliciesOutput, error) {
	c.inc("ListUserPolicies")
	return c.svc.ListUserPolicies(input)
}

// ListUserPoliciesWithContext is a passthrough to the underlying ListUserPoliciesWithContext method.
// It will increment the count of requests made to ListUserPolicies.
func (c *IAM) ListUserPoliciesWithContext(ctx aws.Context, input *iam.ListUserPoliciesInput, opts ...request.Option) (*iam.ListUserPoliciesOutput, error) {
	c.inc("ListUserPolicies")
	return c.svc.ListUserPoliciesWithContext(ctx, input, opts...)
}

// ListUserPoliciesPages is a passthrough to the underlying ListUserPoliciesPages method.
// It will increment the count of requests made to ListUserPolicies on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListUserPoliciesPagesWithContext to avoid this.
func (c *IAM) ListUserPoliciesPages(input *iam.ListUserPoliciesInput, fn func(*iam.ListUserPoliciesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListUserPoliciesOutput, lastPage bool) bool {
		c.inc("ListUserPolicies")
		return fn(page, lastPage)
	}
	return c.svc.ListUserPoliciesPages(input, wrappedFn)
}

// ListUserPoliciesPagesWithContext is a passthrough to the underlying ListUserPoliciesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListUserPolicies when applied to the request.
func (c *IAM) ListUserPoliciesPagesWithContext(ctx aws.Context, input *iam.ListUserPoliciesInput, fn func(*iam.ListUserPoliciesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListUserPolicies"))
	return c.svc.ListUserPoliciesPagesWithContext(ctx, input, fn, opts...)
}

// ListUsersRequest is a passthrough to the underlying ListUsersRequest.
// It will increment the count of requests made to ListUsers.
func (c *IAM) ListUsersRequest(input *iam.ListUsersInput) (req *request.Request, output *iam.ListUsersOutput) {
	c.inc("ListUsers")
	return c.svc.ListUsersRequest(input)
}

// ListUsers is a passthrough to the underlying ListUsers method.
// It will increment the count of requests made to ListUsers.
func (c *IAM) ListUsers(input *iam.ListUsersInput) (*iam.ListUsersOutput, error) {
	c.inc("ListUsers")
	return c.svc.ListUsers(input)
}

// ListUsersWithContext is a passthrough to the underlying ListUsersWithContext method.
// It will increment the count of requests made to ListUsers.
func (c *IAM) ListUsersWithContext(ctx aws.Context, input *iam.ListUsersInput, opts ...request.Option) (*iam.ListUsersOutput, error) {
	c.inc("ListUsers")
	return c.svc.ListUsersWithContext(ctx, input, opts...)
}

// ListUsersPages is a passthrough to the underlying ListUsersPages method.
// It will increment the count of requests made to ListUsers on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListUsersPagesWithContext to avoid this.
func (c *IAM) ListUsersPages(input *iam.ListUsersInput, fn func(*iam.ListUsersOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListUsersOutput, lastPage bool) bool {
		c.inc("ListUsers")
		return fn(page, lastPage)
	}
	return c.svc.ListUsersPages(input, wrappedFn)
}

// ListUsersPagesWithContext is a passthrough to the underlying ListUsersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListUsers when applied to the request.
func (c *IAM) ListUsersPagesWithContext(ctx aws.Context, input *iam.ListUsersInput, fn func(*iam.ListUsersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListUsers"))
	return c.svc.ListUsersPagesWithContext(ctx, input, fn, opts...)
}

// ListVirtualMFADevicesRequest is a passthrough to the underlying ListVirtualMFADevicesRequest.
// It will increment the count of requests made to ListVirtualMFADevices.
func (c *IAM) ListVirtualMFADevicesRequest(input *iam.ListVirtualMFADevicesInput) (req *request.Request, output *iam.ListVirtualMFADevicesOutput) {
	c.inc("ListVirtualMFADevices")
	return c.svc.ListVirtualMFADevicesRequest(input)
}

// ListVirtualMFADevices is a passthrough to the underlying ListVirtualMFADevices method.
// It will increment the count of requests made to ListVirtualMFADevices.
func (c *IAM) ListVirtualMFADevices(input *iam.ListVirtualMFADevicesInput) (*iam.ListVirtualMFADevicesOutput, error) {
	c.inc("ListVirtualMFADevices")
	return c.svc.ListVirtualMFADevices(input)
}

// ListVirtualMFADevicesWithContext is a passthrough to the underlying ListVirtualMFADevicesWithContext method.
// It will increment the count of requests made to ListVirtualMFADevices.
func (c *IAM) ListVirtualMFADevicesWithContext(ctx aws.Context, input *iam.ListVirtualMFADevicesInput, opts ...request.Option) (*iam.ListVirtualMFADevicesOutput, error) {
	c.inc("ListVirtualMFADevices")
	return c.svc.ListVirtualMFADevicesWithContext(ctx, input, opts...)
}

// ListVirtualMFADevicesPages is a passthrough to the underlying ListVirtualMFADevicesPages method.
// It will increment the count of requests made to ListVirtualMFADevices on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListVirtualMFADevicesPagesWithContext to avoid this.
func (c *IAM) ListVirtualMFADevicesPages(input *iam.ListVirtualMFADevicesInput, fn func(*iam.ListVirtualMFADevicesOutput, bool) bool) error {
	wrappedFn := func(page *iam.ListVirtualMFADevicesOutput, lastPage bool) bool {
		c.inc("ListVirtualMFADevices")
		return fn(page, lastPage)
	}
	return c.svc.ListVirtualMFADevicesPages(input, wrappedFn)
}

// ListVirtualMFADevicesPagesWithContext is a passthrough to the underlying ListVirtualMFADevicesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListVirtualMFADevices when applied to the request.
func (c *IAM) ListVirtualMFADevicesPagesWithContext(ctx aws.Context, input *iam.ListVirtualMFADevicesInput, fn func(*iam.ListVirtualMFADevicesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListVirtualMFADevices"))
	return c.svc.ListVirtualMFADevicesPagesWithContext(ctx, input, fn, opts...)
}

// PutGroupPolicyRequest is a passthrough to the underlying PutGroupPolicyRequest.
// It will increment the count of requests made to PutGroupPolicy.
func (c *IAM) PutGroupPolicyRequest(input *iam.PutGroupPolicyInput) (req *request.Request, output *iam.PutGroupPolicyOutput) {
	c.inc("PutGroupPolicy")
	return c.svc.PutGroupPolicyRequest(input)
}

// PutGroupPolicy is a passthrough to the underlying PutGroupPolicy method.
// It will increment the count of requests made to PutGroupPolicy.
func (c *IAM) PutGroupPolicy(input *iam.PutGroupPolicyInput) (*iam.PutGroupPolicyOutput, error) {
	c.inc("PutGroupPolicy")
	return c.svc.PutGroupPolicy(input)
}

// PutGroupPolicyWithContext is a passthrough to the underlying PutGroupPolicyWithContext method.
// It will increment the count of requests made to PutGroupPolicy.
func (c *IAM) PutGroupPolicyWithContext(ctx aws.Context, input *iam.PutGroupPolicyInput, opts ...request.Option) (*iam.PutGroupPolicyOutput, error) {
	c.inc("PutGroupPolicy")
	return c.svc.PutGroupPolicyWithContext(ctx, input, opts...)
}

// PutRolePolicyRequest is a passthrough to the underlying PutRolePolicyRequest.
// It will increment the count of requests made to PutRolePolicy.
func (c *IAM) PutRolePolicyRequest(input *iam.PutRolePolicyInput) (req *request.Request, output *iam.PutRolePolicyOutput) {
	c.inc("PutRolePolicy")
	return c.svc.PutRolePolicyRequest(input)
}

// PutRolePolicy is a passthrough to the underlying PutRolePolicy method.
// It will increment the count of requests made to PutRolePolicy.
func (c *IAM) PutRolePolicy(input *iam.PutRolePolicyInput) (*iam.PutRolePolicyOutput, error) {
	c.inc("PutRolePolicy")
	return c.svc.PutRolePolicy(input)
}

// PutRolePolicyWithContext is a passthrough to the underlying PutRolePolicyWithContext method.
// It will increment the count of requests made to PutRolePolicy.
func (c *IAM) PutRolePolicyWithContext(ctx aws.Context, input *iam.PutRolePolicyInput, opts ...request.Option) (*iam.PutRolePolicyOutput, error) {
	c.inc("PutRolePolicy")
	return c.svc.PutRolePolicyWithContext(ctx, input, opts...)
}

// PutUserPolicyRequest is a passthrough to the underlying PutUserPolicyRequest.
// It will increment the count of requests made to PutUserPolicy.
func (c *IAM) PutUserPolicyRequest(input *iam.PutUserPolicyInput) (req *request.Request, output *iam.PutUserPolicyOutput) {
	c.inc("PutUserPolicy")
	return c.svc.PutUserPolicyRequest(input)
}

// PutUserPolicy is a passthrough to the underlying PutUserPolicy method.
// It will increment the count of requests made to PutUserPolicy.
func (c *IAM) PutUserPolicy(input *iam.PutUserPolicyInput) (*iam.PutUserPolicyOutput, error) {
	c.inc("PutUserPolicy")
	return c.svc.PutUserPolicy(input)
}

// PutUserPolicyWithContext is a passthrough to the underlying PutUserPolicyWithContext method.
// It will increment the count of requests made to PutUserPolicy.
func (c *IAM) PutUserPolicyWithContext(ctx aws.Context, input *iam.PutUserPolicyInput, opts ...request.Option) (*iam.PutUserPolicyOutput, error) {
	c.inc("PutUserPolicy")
	return c.svc.PutUserPolicyWithContext(ctx, input, opts...)
}

// RemoveClientIDFromOpenIDConnectProviderRequest is a passthrough to the underlying RemoveClientIDFromOpenIDConnectProviderRequest.
// It will increment the count of requests made to RemoveClientIDFromOpenIDConnectProvider.
func (c *IAM) RemoveClientIDFromOpenIDConnectProviderRequest(input *iam.RemoveClientIDFromOpenIDConnectProviderInput) (req *request.Request, output *iam.RemoveClientIDFromOpenIDConnectProviderOutput) {
	c.inc("RemoveClientIDFromOpenIDConnectProvider")
	return c.svc.RemoveClientIDFromOpenIDConnectProviderRequest(input)
}

// RemoveClientIDFromOpenIDConnectProvider is a passthrough to the underlying RemoveClientIDFromOpenIDConnectProvider method.
// It will increment the count of requests made to RemoveClientIDFromOpenIDConnectProvider.
func (c *IAM) RemoveClientIDFromOpenIDConnectProvider(input *iam.RemoveClientIDFromOpenIDConnectProviderInput) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	c.inc("RemoveClientIDFromOpenIDConnectProvider")
	return c.svc.RemoveClientIDFromOpenIDConnectProvider(input)
}

// RemoveClientIDFromOpenIDConnectProviderWithContext is a passthrough to the underlying RemoveClientIDFromOpenIDConnectProviderWithContext method.
// It will increment the count of requests made to RemoveClientIDFromOpenIDConnectProvider.
func (c *IAM) RemoveClientIDFromOpenIDConnectProviderWithContext(ctx aws.Context, input *iam.RemoveClientIDFromOpenIDConnectProviderInput, opts ...request.Option) (*iam.RemoveClientIDFromOpenIDConnectProviderOutput, error) {
	c.inc("RemoveClientIDFromOpenIDConnectProvider")
	return c.svc.RemoveClientIDFromOpenIDConnectProviderWithContext(ctx, input, opts...)
}

// RemoveRoleFromInstanceProfileRequest is a passthrough to the underlying RemoveRoleFromInstanceProfileRequest.
// It will increment the count of requests made to RemoveRoleFromInstanceProfile.
func (c *IAM) RemoveRoleFromInstanceProfileRequest(input *iam.RemoveRoleFromInstanceProfileInput) (req *request.Request, output *iam.RemoveRoleFromInstanceProfileOutput) {
	c.inc("RemoveRoleFromInstanceProfile")
	return c.svc.RemoveRoleFromInstanceProfileRequest(input)
}

// RemoveRoleFromInstanceProfile is a passthrough to the underlying RemoveRoleFromInstanceProfile method.
// It will increment the count of requests made to RemoveRoleFromInstanceProfile.
func (c *IAM) RemoveRoleFromInstanceProfile(input *iam.RemoveRoleFromInstanceProfileInput) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	c.inc("RemoveRoleFromInstanceProfile")
	return c.svc.RemoveRoleFromInstanceProfile(input)
}

// RemoveRoleFromInstanceProfileWithContext is a passthrough to the underlying RemoveRoleFromInstanceProfileWithContext method.
// It will increment the count of requests made to RemoveRoleFromInstanceProfile.
func (c *IAM) RemoveRoleFromInstanceProfileWithContext(ctx aws.Context, input *iam.RemoveRoleFromInstanceProfileInput, opts ...request.Option) (*iam.RemoveRoleFromInstanceProfileOutput, error) {
	c.inc("RemoveRoleFromInstanceProfile")
	return c.svc.RemoveRoleFromInstanceProfileWithContext(ctx, input, opts...)
}

// RemoveUserFromGroupRequest is a passthrough to the underlying RemoveUserFromGroupRequest.
// It will increment the count of requests made to RemoveUserFromGroup.
func (c *IAM) RemoveUserFromGroupRequest(input *iam.RemoveUserFromGroupInput) (req *request.Request, output *iam.RemoveUserFromGroupOutput) {
	c.inc("RemoveUserFromGroup")
	return c.svc.RemoveUserFromGroupRequest(input)
}

// RemoveUserFromGroup is a passthrough to the underlying RemoveUserFromGroup method.
// It will increment the count of requests made to RemoveUserFromGroup.
func (c *IAM) RemoveUserFromGroup(input *iam.RemoveUserFromGroupInput) (*iam.RemoveUserFromGroupOutput, error) {
	c.inc("RemoveUserFromGroup")
	return c.svc.RemoveUserFromGroup(input)
}

// RemoveUserFromGroupWithContext is a passthrough to the underlying RemoveUserFromGroupWithContext method.
// It will increment the count of requests made to RemoveUserFromGroup.
func (c *IAM) RemoveUserFromGroupWithContext(ctx aws.Context, input *iam.RemoveUserFromGroupInput, opts ...request.Option) (*iam.RemoveUserFromGroupOutput, error) {
	c.inc("RemoveUserFromGroup")
	return c.svc.RemoveUserFromGroupWithContext(ctx, input, opts...)
}

// ResetServiceSpecificCredentialRequest is a passthrough to the underlying ResetServiceSpecificCredentialRequest.
// It will increment the count of requests made to ResetServiceSpecificCredential.
func (c *IAM) ResetServiceSpecificCredentialRequest(input *iam.ResetServiceSpecificCredentialInput) (req *request.Request, output *iam.ResetServiceSpecificCredentialOutput) {
	c.inc("ResetServiceSpecificCredential")
	return c.svc.ResetServiceSpecificCredentialRequest(input)
}

// ResetServiceSpecificCredential is a passthrough to the underlying ResetServiceSpecificCredential method.
// It will increment the count of requests made to ResetServiceSpecificCredential.
func (c *IAM) ResetServiceSpecificCredential(input *iam.ResetServiceSpecificCredentialInput) (*iam.ResetServiceSpecificCredentialOutput, error) {
	c.inc("ResetServiceSpecificCredential")
	return c.svc.ResetServiceSpecificCredential(input)
}

// ResetServiceSpecificCredentialWithContext is a passthrough to the underlying ResetServiceSpecificCredentialWithContext method.
// It will increment the count of requests made to ResetServiceSpecificCredential.
func (c *IAM) ResetServiceSpecificCredentialWithContext(ctx aws.Context, input *iam.ResetServiceSpecificCredentialInput, opts ...request.Option) (*iam.ResetServiceSpecificCredentialOutput, error) {
	c.inc("ResetServiceSpecificCredential")
	return c.svc.ResetServiceSpecificCredentialWithContext(ctx, input, opts...)
}

// ResyncMFADeviceRequest is a passthrough to the underlying ResyncMFADeviceRequest.
// It will increment the count of requests made to ResyncMFADevice.
func (c *IAM) ResyncMFADeviceRequest(input *iam.ResyncMFADeviceInput) (req *request.Request, output *iam.ResyncMFADeviceOutput) {
	c.inc("ResyncMFADevice")
	return c.svc.ResyncMFADeviceRequest(input)
}

// ResyncMFADevice is a passthrough to the underlying ResyncMFADevice method.
// It will increment the count of requests made to ResyncMFADevice.
func (c *IAM) ResyncMFADevice(input *iam.ResyncMFADeviceInput) (*iam.ResyncMFADeviceOutput, error) {
	c.inc("ResyncMFADevice")
	return c.svc.ResyncMFADevice(input)
}

// ResyncMFADeviceWithContext is a passthrough to the underlying ResyncMFADeviceWithContext method.
// It will increment the count of requests made to ResyncMFADevice.
func (c *IAM) ResyncMFADeviceWithContext(ctx aws.Context, input *iam.ResyncMFADeviceInput, opts ...request.Option) (*iam.ResyncMFADeviceOutput, error) {
	c.inc("ResyncMFADevice")
	return c.svc.ResyncMFADeviceWithContext(ctx, input, opts...)
}

// SetDefaultPolicyVersionRequest is a passthrough to the underlying SetDefaultPolicyVersionRequest.
// It will increment the count of requests made to SetDefaultPolicyVersion.
func (c *IAM) SetDefaultPolicyVersionRequest(input *iam.SetDefaultPolicyVersionInput) (req *request.Request, output *iam.SetDefaultPolicyVersionOutput) {
	c.inc("SetDefaultPolicyVersion")
	return c.svc.SetDefaultPolicyVersionRequest(input)
}

// SetDefaultPolicyVersion is a passthrough to the underlying SetDefaultPolicyVersion method.
// It will increment the count of requests made to SetDefaultPolicyVersion.
func (c *IAM) SetDefaultPolicyVersion(input *iam.SetDefaultPolicyVersionInput) (*iam.SetDefaultPolicyVersionOutput, error) {
	c.inc("SetDefaultPolicyVersion")
	return c.svc.SetDefaultPolicyVersion(input)
}

// SetDefaultPolicyVersionWithContext is a passthrough to the underlying SetDefaultPolicyVersionWithContext method.
// It will increment the count of requests made to SetDefaultPolicyVersion.
func (c *IAM) SetDefaultPolicyVersionWithContext(ctx aws.Context, input *iam.SetDefaultPolicyVersionInput, opts ...request.Option) (*iam.SetDefaultPolicyVersionOutput, error) {
	c.inc("SetDefaultPolicyVersion")
	return c.svc.SetDefaultPolicyVersionWithContext(ctx, input, opts...)
}

// SimulateCustomPolicyRequest is a passthrough to the underlying SimulateCustomPolicyRequest.
// It will increment the count of requests made to SimulateCustomPolicy.
func (c *IAM) SimulateCustomPolicyRequest(input *iam.SimulateCustomPolicyInput) (req *request.Request, output *iam.SimulatePolicyResponse) {
	c.inc("SimulateCustomPolicy")
	return c.svc.SimulateCustomPolicyRequest(input)
}

// SimulateCustomPolicy is a passthrough to the underlying SimulateCustomPolicy method.
// It will increment the count of requests made to SimulateCustomPolicy.
func (c *IAM) SimulateCustomPolicy(input *iam.SimulateCustomPolicyInput) (*iam.SimulatePolicyResponse, error) {
	c.inc("SimulateCustomPolicy")
	return c.svc.SimulateCustomPolicy(input)
}

// SimulateCustomPolicyWithContext is a passthrough to the underlying SimulateCustomPolicyWithContext method.
// It will increment the count of requests made to SimulateCustomPolicy.
func (c *IAM) SimulateCustomPolicyWithContext(ctx aws.Context, input *iam.SimulateCustomPolicyInput, opts ...request.Option) (*iam.SimulatePolicyResponse, error) {
	c.inc("SimulateCustomPolicy")
	return c.svc.SimulateCustomPolicyWithContext(ctx, input, opts...)
}

// SimulateCustomPolicyPages is a passthrough to the underlying SimulateCustomPolicyPages method.
// It will increment the count of requests made to SimulateCustomPolicy on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use SimulateCustomPolicyPagesWithContext to avoid this.
func (c *IAM) SimulateCustomPolicyPages(input *iam.SimulateCustomPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool) error {
	wrappedFn := func(page *iam.SimulatePolicyResponse, lastPage bool) bool {
		c.inc("SimulateCustomPolicy")
		return fn(page, lastPage)
	}
	return c.svc.SimulateCustomPolicyPages(input, wrappedFn)
}

// SimulateCustomPolicyPagesWithContext is a passthrough to the underlying SimulateCustomPolicyPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to SimulateCustomPolicy when applied to the request.
func (c *IAM) SimulateCustomPolicyPagesWithContext(ctx aws.Context, input *iam.SimulateCustomPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("SimulateCustomPolicy"))
	return c.svc.SimulateCustomPolicyPagesWithContext(ctx, input, fn, opts...)
}

// SimulatePrincipalPolicyRequest is a passthrough to the underlying SimulatePrincipalPolicyRequest.
// It will increment the count of requests made to SimulatePrincipalPolicy.
func (c *IAM) SimulatePrincipalPolicyRequest(input *iam.SimulatePrincipalPolicyInput) (req *request.Request, output *iam.SimulatePolicyResponse) {
	c.inc("SimulatePrincipalPolicy")
	return c.svc.SimulatePrincipalPolicyRequest(input)
}

// SimulatePrincipalPolicy is a passthrough to the underlying SimulatePrincipalPolicy method.
// It will increment the count of requests made to SimulatePrincipalPolicy.
func (c *IAM) SimulatePrincipalPolicy(input *iam.SimulatePrincipalPolicyInput) (*iam.SimulatePolicyResponse, error) {
	c.inc("SimulatePrincipalPolicy")
	return c.svc.SimulatePrincipalPolicy(input)
}

// SimulatePrincipalPolicyWithContext is a passthrough to the underlying SimulatePrincipalPolicyWithContext method.
// It will increment the count of requests made to SimulatePrincipalPolicy.
func (c *IAM) SimulatePrincipalPolicyWithContext(ctx aws.Context, input *iam.SimulatePrincipalPolicyInput, opts ...request.Option) (*iam.SimulatePolicyResponse, error) {
	c.inc("SimulatePrincipalPolicy")
	return c.svc.SimulatePrincipalPolicyWithContext(ctx, input, opts...)
}

// SimulatePrincipalPolicyPages is a passthrough to the underlying SimulatePrincipalPolicyPages method.
// It will increment the count of requests made to SimulatePrincipalPolicy on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use SimulatePrincipalPolicyPagesWithContext to avoid this.
func (c *IAM) SimulatePrincipalPolicyPages(input *iam.SimulatePrincipalPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool) error {
	wrappedFn := func(page *iam.SimulatePolicyResponse, lastPage bool) bool {
		c.inc("SimulatePrincipalPolicy")
		return fn(page, lastPage)
	}
	return c.svc.SimulatePrincipalPolicyPages(input, wrappedFn)
}

// SimulatePrincipalPolicyPagesWithContext is a passthrough to the underlying SimulatePrincipalPolicyPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to SimulatePrincipalPolicy when applied to the request.
func (c *IAM) SimulatePrincipalPolicyPagesWithContext(ctx aws.Context, input *iam.SimulatePrincipalPolicyInput, fn func(*iam.SimulatePolicyResponse, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("SimulatePrincipalPolicy"))
	return c.svc.SimulatePrincipalPolicyPagesWithContext(ctx, input, fn, opts...)
}

// UpdateAccessKeyRequest is a passthrough to the underlying UpdateAccessKeyRequest.
// It will increment the count of requests made to UpdateAccessKey.
func (c *IAM) UpdateAccessKeyRequest(input *iam.UpdateAccessKeyInput) (req *request.Request, output *iam.UpdateAccessKeyOutput) {
	c.inc("UpdateAccessKey")
	return c.svc.UpdateAccessKeyRequest(input)
}

// UpdateAccessKey is a passthrough to the underlying UpdateAccessKey method.
// It will increment the count of requests made to UpdateAccessKey.
func (c *IAM) UpdateAccessKey(input *iam.UpdateAccessKeyInput) (*iam.UpdateAccessKeyOutput, error) {
	c.inc("UpdateAccessKey")
	return c.svc.UpdateAccessKey(input)
}

// UpdateAccessKeyWithContext is a passthrough to the underlying UpdateAccessKeyWithContext method.
// It will increment the count of requests made to UpdateAccessKey.
func (c *IAM) UpdateAccessKeyWithContext(ctx aws.Context, input *iam.UpdateAccessKeyInput, opts ...request.Option) (*iam.UpdateAccessKeyOutput, error) {
	c.inc("UpdateAccessKey")
	return c.svc.UpdateAccessKeyWithContext(ctx, input, opts...)
}

// UpdateAccountPasswordPolicyRequest is a passthrough to the underlying UpdateAccountPasswordPolicyRequest.
// It will increment the count of requests made to UpdateAccountPasswordPolicy.
func (c *IAM) UpdateAccountPasswordPolicyRequest(input *iam.UpdateAccountPasswordPolicyInput) (req *request.Request, output *iam.UpdateAccountPasswordPolicyOutput) {
	c.inc("UpdateAccountPasswordPolicy")
	return c.svc.UpdateAccountPasswordPolicyRequest(input)
}

// UpdateAccountPasswordPolicy is a passthrough to the underlying UpdateAccountPasswordPolicy method.
// It will increment the count of requests made to UpdateAccountPasswordPolicy.
func (c *IAM) UpdateAccountPasswordPolicy(input *iam.UpdateAccountPasswordPolicyInput) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	c.inc("UpdateAccountPasswordPolicy")
	return c.svc.UpdateAccountPasswordPolicy(input)
}

// UpdateAccountPasswordPolicyWithContext is a passthrough to the underlying UpdateAccountPasswordPolicyWithContext method.
// It will increment the count of requests made to UpdateAccountPasswordPolicy.
func (c *IAM) UpdateAccountPasswordPolicyWithContext(ctx aws.Context, input *iam.UpdateAccountPasswordPolicyInput, opts ...request.Option) (*iam.UpdateAccountPasswordPolicyOutput, error) {
	c.inc("UpdateAccountPasswordPolicy")
	return c.svc.UpdateAccountPasswordPolicyWithContext(ctx, input, opts...)
}

// UpdateAssumeRolePolicyRequest is a passthrough to the underlying UpdateAssumeRolePolicyRequest.
// It will increment the count of requests made to UpdateAssumeRolePolicy.
func (c *IAM) UpdateAssumeRolePolicyRequest(input *iam.UpdateAssumeRolePolicyInput) (req *request.Request, output *iam.UpdateAssumeRolePolicyOutput) {
	c.inc("UpdateAssumeRolePolicy")
	return c.svc.UpdateAssumeRolePolicyRequest(input)
}

// UpdateAssumeRolePolicy is a passthrough to the underlying UpdateAssumeRolePolicy method.
// It will increment the count of requests made to UpdateAssumeRolePolicy.
func (c *IAM) UpdateAssumeRolePolicy(input *iam.UpdateAssumeRolePolicyInput) (*iam.UpdateAssumeRolePolicyOutput, error) {
	c.inc("UpdateAssumeRolePolicy")
	return c.svc.UpdateAssumeRolePolicy(input)
}

// UpdateAssumeRolePolicyWithContext is a passthrough to the underlying UpdateAssumeRolePolicyWithContext method.
// It will increment the count of requests made to UpdateAssumeRolePolicy.
func (c *IAM) UpdateAssumeRolePolicyWithContext(ctx aws.Context, input *iam.UpdateAssumeRolePolicyInput, opts ...request.Option) (*iam.UpdateAssumeRolePolicyOutput, error) {
	c.inc("UpdateAssumeRolePolicy")
	return c.svc.UpdateAssumeRolePolicyWithContext(ctx, input, opts...)
}

// UpdateGroupRequest is a passthrough to the underlying UpdateGroupRequest.
// It will increment the count of requests made to UpdateGroup.
func (c *IAM) UpdateGroupRequest(input *iam.UpdateGroupInput) (req *request.Request, output *iam.UpdateGroupOutput) {
	c.inc("UpdateGroup")
	return c.svc.UpdateGroupRequest(input)
}

// UpdateGroup is a passthrough to the underlying UpdateGroup method.
// It will increment the count of requests made to UpdateGroup.
func (c *IAM) UpdateGroup(input *iam.UpdateGroupInput) (*iam.UpdateGroupOutput, error) {
	c.inc("UpdateGroup")
	return c.svc.UpdateGroup(input)
}

// UpdateGroupWithContext is a passthrough to the underlying UpdateGroupWithContext method.
// It will increment the count of requests made to UpdateGroup.
func (c *IAM) UpdateGroupWithContext(ctx aws.Context, input *iam.UpdateGroupInput, opts ...request.Option) (*iam.UpdateGroupOutput, error) {
	c.inc("UpdateGroup")
	return c.svc.UpdateGroupWithContext(ctx, input, opts...)
}

// UpdateLoginProfileRequest is a passthrough to the underlying UpdateLoginProfileRequest.
// It will increment the count of requests made to UpdateLoginProfile.
func (c *IAM) UpdateLoginProfileRequest(input *iam.UpdateLoginProfileInput) (req *request.Request, output *iam.UpdateLoginProfileOutput) {
	c.inc("UpdateLoginProfile")
	return c.svc.UpdateLoginProfileRequest(input)
}

// UpdateLoginProfile is a passthrough to the underlying UpdateLoginProfile method.
// It will increment the count of requests made to UpdateLoginProfile.
func (c *IAM) UpdateLoginProfile(input *iam.UpdateLoginProfileInput) (*iam.UpdateLoginProfileOutput, error) {
	c.inc("UpdateLoginProfile")
	return c.svc.UpdateLoginProfile(input)
}

// UpdateLoginProfileWithContext is a passthrough to the underlying UpdateLoginProfileWithContext method.
// It will increment the count of requests made to UpdateLoginProfile.
func (c *IAM) UpdateLoginProfileWithContext(ctx aws.Context, input *iam.UpdateLoginProfileInput, opts ...request.Option) (*iam.UpdateLoginProfileOutput, error) {
	c.inc("UpdateLoginProfile")
	return c.svc.UpdateLoginProfileWithContext(ctx, input, opts...)
}

// UpdateOpenIDConnectProviderThumbprintRequest is a passthrough to the underlying UpdateOpenIDConnectProviderThumbprintRequest.
// It will increment the count of requests made to UpdateOpenIDConnectProviderThumbprint.
func (c *IAM) UpdateOpenIDConnectProviderThumbprintRequest(input *iam.UpdateOpenIDConnectProviderThumbprintInput) (req *request.Request, output *iam.UpdateOpenIDConnectProviderThumbprintOutput) {
	c.inc("UpdateOpenIDConnectProviderThumbprint")
	return c.svc.UpdateOpenIDConnectProviderThumbprintRequest(input)
}

// UpdateOpenIDConnectProviderThumbprint is a passthrough to the underlying UpdateOpenIDConnectProviderThumbprint method.
// It will increment the count of requests made to UpdateOpenIDConnectProviderThumbprint.
func (c *IAM) UpdateOpenIDConnectProviderThumbprint(input *iam.UpdateOpenIDConnectProviderThumbprintInput) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	c.inc("UpdateOpenIDConnectProviderThumbprint")
	return c.svc.UpdateOpenIDConnectProviderThumbprint(input)
}

// UpdateOpenIDConnectProviderThumbprintWithContext is a passthrough to the underlying UpdateOpenIDConnectProviderThumbprintWithContext method.
// It will increment the count of requests made to UpdateOpenIDConnectProviderThumbprint.
func (c *IAM) UpdateOpenIDConnectProviderThumbprintWithContext(ctx aws.Context, input *iam.UpdateOpenIDConnectProviderThumbprintInput, opts ...request.Option) (*iam.UpdateOpenIDConnectProviderThumbprintOutput, error) {
	c.inc("UpdateOpenIDConnectProviderThumbprint")
	return c.svc.UpdateOpenIDConnectProviderThumbprintWithContext(ctx, input, opts...)
}

// UpdateRoleDescriptionRequest is a passthrough to the underlying UpdateRoleDescriptionRequest.
// It will increment the count of requests made to UpdateRoleDescription.
func (c *IAM) UpdateRoleDescriptionRequest(input *iam.UpdateRoleDescriptionInput) (req *request.Request, output *iam.UpdateRoleDescriptionOutput) {
	c.inc("UpdateRoleDescription")
	return c.svc.UpdateRoleDescriptionRequest(input)
}

// UpdateRoleDescription is a passthrough to the underlying UpdateRoleDescription method.
// It will increment the count of requests made to UpdateRoleDescription.
func (c *IAM) UpdateRoleDescription(input *iam.UpdateRoleDescriptionInput) (*iam.UpdateRoleDescriptionOutput, error) {
	c.inc("UpdateRoleDescription")
	return c.svc.UpdateRoleDescription(input)
}

// UpdateRoleDescriptionWithContext is a passthrough to the underlying UpdateRoleDescriptionWithContext method.
// It will increment the count of requests made to UpdateRoleDescription.
func (c *IAM) UpdateRoleDescriptionWithContext(ctx aws.Context, input *iam.UpdateRoleDescriptionInput, opts ...request.Option) (*iam.UpdateRoleDescriptionOutput, error) {
	c.inc("UpdateRoleDescription")
	return c.svc.UpdateRoleDescriptionWithContext(ctx, input, opts...)
}

// UpdateSAMLProviderRequest is a passthrough to the underlying UpdateSAMLProviderRequest.
// It will increment the count of requests made to UpdateSAMLProvider.
func (c *IAM) UpdateSAMLProviderRequest(input *iam.UpdateSAMLProviderInput) (req *request.Request, output *iam.UpdateSAMLProviderOutput) {
	c.inc("UpdateSAMLProvider")
	return c.svc.UpdateSAMLProviderRequest(input)
}

// UpdateSAMLProvider is a passthrough to the underlying UpdateSAMLProvider method.
// It will increment the count of requests made to UpdateSAMLProvider.
func (c *IAM) UpdateSAMLProvider(input *iam.UpdateSAMLProviderInput) (*iam.UpdateSAMLProviderOutput, error) {
	c.inc("UpdateSAMLProvider")
	return c.svc.UpdateSAMLProvider(input)
}

// UpdateSAMLProviderWithContext is a passthrough to the underlying UpdateSAMLProviderWithContext method.
// It will increment the count of requests made to UpdateSAMLProvider.
func (c *IAM) UpdateSAMLProviderWithContext(ctx aws.Context, input *iam.UpdateSAMLProviderInput, opts ...request.Option) (*iam.UpdateSAMLProviderOutput, error) {
	c.inc("UpdateSAMLProvider")
	return c.svc.UpdateSAMLProviderWithContext(ctx, input, opts...)
}

// UpdateSSHPublicKeyRequest is a passthrough to the underlying UpdateSSHPublicKeyRequest.
// It will increment the count of requests made to UpdateSSHPublicKey.
func (c *IAM) UpdateSSHPublicKeyRequest(input *iam.UpdateSSHPublicKeyInput) (req *request.Request, output *iam.UpdateSSHPublicKeyOutput) {
	c.inc("UpdateSSHPublicKey")
	return c.svc.UpdateSSHPublicKeyRequest(input)
}

// UpdateSSHPublicKey is a passthrough to the underlying UpdateSSHPublicKey method.
// It will increment the count of requests made to UpdateSSHPublicKey.
func (c *IAM) UpdateSSHPublicKey(input *iam.UpdateSSHPublicKeyInput) (*iam.UpdateSSHPublicKeyOutput, error) {
	c.inc("UpdateSSHPublicKey")
	return c.svc.UpdateSSHPublicKey(input)
}

// UpdateSSHPublicKeyWithContext is a passthrough to the underlying UpdateSSHPublicKeyWithContext method.
// It will increment the count of requests made to UpdateSSHPublicKey.
func (c *IAM) UpdateSSHPublicKeyWithContext(ctx aws.Context, input *iam.UpdateSSHPublicKeyInput, opts ...request.Option) (*iam.UpdateSSHPublicKeyOutput, error) {
	c.inc("UpdateSSHPublicKey")
	return c.svc.UpdateSSHPublicKeyWithContext(ctx, input, opts...)
}

// UpdateServerCertificateRequest is a passthrough to the underlying UpdateServerCertificateRequest.
// It will increment the count of requests made to UpdateServerCertificate.
func (c *IAM) UpdateServerCertificateRequest(input *iam.UpdateServerCertificateInput) (req *request.Request, output *iam.UpdateServerCertificateOutput) {
	c.inc("UpdateServerCertificate")
	return c.svc.UpdateServerCertificateRequest(input)
}

// UpdateServerCertificate is a passthrough to the underlying UpdateServerCertificate method.
// It will increment the count of requests made to UpdateServerCertificate.
func (c *IAM) UpdateServerCertificate(input *iam.UpdateServerCertificateInput) (*iam.UpdateServerCertificateOutput, error) {
	c.inc("UpdateServerCertificate")
	return c.svc.UpdateServerCertificate(input)
}

// UpdateServerCertificateWithContext is a passthrough to the underlying UpdateServerCertificateWithContext method.
// It will increment the count of requests made to UpdateServerCertificate.
func (c *IAM) UpdateServerCertificateWithContext(ctx aws.Context, input *iam.UpdateServerCertificateInput, opts ...request.Option) (*iam.UpdateServerCertificateOutput, error) {
	c.inc("UpdateServerCertificate")
	return c.svc.UpdateServerCertificateWithContext(ctx, input, opts...)
}

// UpdateServiceSpecificCredentialRequest is a passthrough to the underlying UpdateServiceSpecificCredentialRequest.
// It will increment the count of requests made to UpdateServiceSpecificCredential.
func (c *IAM) UpdateServiceSpecificCredentialRequest(input *iam.UpdateServiceSpecificCredentialInput) (req *request.Request, output *iam.UpdateServiceSpecificCredentialOutput) {
	c.inc("UpdateServiceSpecificCredential")
	return c.svc.UpdateServiceSpecificCredentialRequest(input)
}

// UpdateServiceSpecificCredential is a passthrough to the underlying UpdateServiceSpecificCredential method.
// It will increment the count of requests made to UpdateServiceSpecificCredential.
func (c *IAM) UpdateServiceSpecificCredential(input *iam.UpdateServiceSpecificCredentialInput) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	c.inc("UpdateServiceSpecificCredential")
	return c.svc.UpdateServiceSpecificCredential(input)
}

// UpdateServiceSpecificCredentialWithContext is a passthrough to the underlying UpdateServiceSpecificCredentialWithContext method.
// It will increment the count of requests made to UpdateServiceSpecificCredential.
func (c *IAM) UpdateServiceSpecificCredentialWithContext(ctx aws.Context, input *iam.UpdateServiceSpecificCredentialInput, opts ...request.Option) (*iam.UpdateServiceSpecificCredentialOutput, error) {
	c.inc("UpdateServiceSpecificCredential")
	return c.svc.UpdateServiceSpecificCredentialWithContext(ctx, input, opts...)
}

// UpdateSigningCertificateRequest is a passthrough to the underlying UpdateSigningCertificateRequest.
// It will increment the count of requests made to UpdateSigningCertificate.
func (c *IAM) UpdateSigningCertificateRequest(input *iam.UpdateSigningCertificateInput) (req *request.Request, output *iam.UpdateSigningCertificateOutput) {
	c.inc("UpdateSigningCertificate")
	return c.svc.UpdateSigningCertificateRequest(input)
}

// UpdateSigningCertificate is a passthrough to the underlying UpdateSigningCertificate method.
// It will increment the count of requests made to UpdateSigningCertificate.
func (c *IAM) UpdateSigningCertificate(input *iam.UpdateSigningCertificateInput) (*iam.UpdateSigningCertificateOutput, error) {
	c.inc("UpdateSigningCertificate")
	return c.svc.UpdateSigningCertificate(input)
}

// UpdateSigningCertificateWithContext is a passthrough to the underlying UpdateSigningCertificateWithContext method.
// It will increment the count of requests made to UpdateSigningCertificate.
func (c *IAM) UpdateSigningCertificateWithContext(ctx aws.Context, input *iam.UpdateSigningCertificateInput, opts ...request.Option) (*iam.UpdateSigningCertificateOutput, error) {
	c.inc("UpdateSigningCertificate")
	return c.svc.UpdateSigningCertificateWithContext(ctx, input, opts...)
}

// UpdateUserRequest is a passthrough to the underlying UpdateUserRequest.
// It will increment the count of requests made to UpdateUser.
func (c *IAM) UpdateUserRequest(input *iam.UpdateUserInput) (req *request.Request, output *iam.UpdateUserOutput) {
	c.inc("UpdateUser")
	return c.svc.UpdateUserRequest(input)
}

// UpdateUser is a passthrough to the underlying UpdateUser method.
// It will increment the count of requests made to UpdateUser.
func (c *IAM) UpdateUser(input *iam.UpdateUserInput) (*iam.UpdateUserOutput, error) {
	c.inc("UpdateUser")
	return c.svc.UpdateUser(input)
}

// UpdateUserWithContext is a passthrough to the underlying UpdateUserWithContext method.
// It will increment the count of requests made to UpdateUser.
func (c *IAM) UpdateUserWithContext(ctx aws.Context, input *iam.UpdateUserInput, opts ...request.Option) (*iam.UpdateUserOutput, error) {
	c.inc("UpdateUser")
	return c.svc.UpdateUserWithContext(ctx, input, opts...)
}

// UploadSSHPublicKeyRequest is a passthrough to the underlying UploadSSHPublicKeyRequest.
// It will increment the count of requests made to UploadSSHPublicKey.
func (c *IAM) UploadSSHPublicKeyRequest(input *iam.UploadSSHPublicKeyInput) (req *request.Request, output *iam.UploadSSHPublicKeyOutput) {
	c.inc("UploadSSHPublicKey")
	return c.svc.UploadSSHPublicKeyRequest(input)
}

// UploadSSHPublicKey is a passthrough to the underlying UploadSSHPublicKey method.
// It will increment the count of requests made to UploadSSHPublicKey.
func (c *IAM) UploadSSHPublicKey(input *iam.UploadSSHPublicKeyInput) (*iam.UploadSSHPublicKeyOutput, error) {
	c.inc("UploadSSHPublicKey")
	return c.svc.UploadSSHPublicKey(input)
}

// UploadSSHPublicKeyWithContext is a passthrough to the underlying UploadSSHPublicKeyWithContext method.
// It will increment the count of requests made to UploadSSHPublicKey.
func (c *IAM) UploadSSHPublicKeyWithContext(ctx aws.Context, input *iam.UploadSSHPublicKeyInput, opts ...request.Option) (*iam.UploadSSHPublicKeyOutput, error) {
	c.inc("UploadSSHPublicKey")
	return c.svc.UploadSSHPublicKeyWithContext(ctx, input, opts...)
}

// UploadServerCertificateRequest is a passthrough to the underlying UploadServerCertificateRequest.
// It will increment the count of requests made to UploadServerCertificate.
func (c *IAM) UploadServerCertificateRequest(input *iam.UploadServerCertificateInput) (req *request.Request, output *iam.UploadServerCertificateOutput) {
	c.inc("UploadServerCertificate")
	return c.svc.UploadServerCertificateRequest(input)
}

// UploadServerCertificate is a passthrough to the underlying UploadServerCertificate method.
// It will increment the count of requests made to UploadServerCertificate.
func (c *IAM) UploadServerCertificate(input *iam.UploadServerCertificateInput) (*iam.UploadServerCertificateOutput, error) {
	c.inc("UploadServerCertificate")
	return c.svc.UploadServerCertificate(input)
}

// UploadServerCertificateWithContext is a passthrough to the underlying UploadServerCertificateWithContext method.
// It will increment the count of requests made to UploadServerCertificate.
func (c *IAM) UploadServerCertificateWithContext(ctx aws.Context, input *iam.UploadServerCertificateInput, opts ...request.Option) (*iam.UploadServerCertificateOutput, error) {
	c.inc("UploadServerCertificate")
	return c.svc.UploadServerCertificateWithContext(ctx, input, opts...)
}

// UploadSigningCertificateRequest is a passthrough to the underlying UploadSigningCertificateRequest.
// It will increment the count of requests made to UploadSigningCertificate.
func (c *IAM) UploadSigningCertificateRequest(input *iam.UploadSigningCertificateInput) (req *request.Request, output *iam.UploadSigningCertificateOutput) {
	c.inc("UploadSigningCertificate")
	return c.svc.UploadSigningCertificateRequest(input)
}

// UploadSigningCertificate is a passthrough to the underlying UploadSigningCertificate method.
// It will increment the count of requests made to UploadSigningCertificate.
func (c *IAM) UploadSigningCertificate(input *iam.UploadSigningCertificateInput) (*iam.UploadSigningCertificateOutput, error) {
	c.inc("UploadSigningCertificate")
	return c.svc.UploadSigningCertificate(input)
}

// UploadSigningCertificateWithContext is a passthrough to the underlying UploadSigningCertificateWithContext method.
// It will increment the count of requests made to UploadSigningCertificate.
func (c *IAM) UploadSigningCertificateWithContext(ctx aws.Context, input *iam.UploadSigningCertificateInput, opts ...request.Option) (*iam.UploadSigningCertificateOutput, error) {
	c.inc("UploadSigningCertificate")
	return c.svc.UploadSigningCertificateWithContext(ctx, input, opts...)
}
