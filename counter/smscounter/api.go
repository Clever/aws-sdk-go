// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package smscounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sms"
)

// CreateReplicationJobRequest is a passthrough to the underlying CreateReplicationJobRequest.
// It will increment the count of requests made to CreateReplicationJob.
func (c *SMS) CreateReplicationJobRequest(input *sms.CreateReplicationJobInput) (req *request.Request, output *sms.CreateReplicationJobOutput) {
	c.inc("CreateReplicationJob")
	return c.svc.CreateReplicationJobRequest(input)
}

// CreateReplicationJob is a passthrough to the underlying CreateReplicationJob method.
// It will increment the count of requests made to CreateReplicationJob.
func (c *SMS) CreateReplicationJob(input *sms.CreateReplicationJobInput) (*sms.CreateReplicationJobOutput, error) {
	c.inc("CreateReplicationJob")
	return c.svc.CreateReplicationJob(input)
}

// CreateReplicationJobWithContext is a passthrough to the underlying CreateReplicationJobWithContext method.
// It will increment the count of requests made to CreateReplicationJob.
func (c *SMS) CreateReplicationJobWithContext(ctx aws.Context, input *sms.CreateReplicationJobInput, opts ...request.Option) (*sms.CreateReplicationJobOutput, error) {
	c.inc("CreateReplicationJob")
	return c.svc.CreateReplicationJobWithContext(ctx, input, opts...)
}

// DeleteReplicationJobRequest is a passthrough to the underlying DeleteReplicationJobRequest.
// It will increment the count of requests made to DeleteReplicationJob.
func (c *SMS) DeleteReplicationJobRequest(input *sms.DeleteReplicationJobInput) (req *request.Request, output *sms.DeleteReplicationJobOutput) {
	c.inc("DeleteReplicationJob")
	return c.svc.DeleteReplicationJobRequest(input)
}

// DeleteReplicationJob is a passthrough to the underlying DeleteReplicationJob method.
// It will increment the count of requests made to DeleteReplicationJob.
func (c *SMS) DeleteReplicationJob(input *sms.DeleteReplicationJobInput) (*sms.DeleteReplicationJobOutput, error) {
	c.inc("DeleteReplicationJob")
	return c.svc.DeleteReplicationJob(input)
}

// DeleteReplicationJobWithContext is a passthrough to the underlying DeleteReplicationJobWithContext method.
// It will increment the count of requests made to DeleteReplicationJob.
func (c *SMS) DeleteReplicationJobWithContext(ctx aws.Context, input *sms.DeleteReplicationJobInput, opts ...request.Option) (*sms.DeleteReplicationJobOutput, error) {
	c.inc("DeleteReplicationJob")
	return c.svc.DeleteReplicationJobWithContext(ctx, input, opts...)
}

// DeleteServerCatalogRequest is a passthrough to the underlying DeleteServerCatalogRequest.
// It will increment the count of requests made to DeleteServerCatalog.
func (c *SMS) DeleteServerCatalogRequest(input *sms.DeleteServerCatalogInput) (req *request.Request, output *sms.DeleteServerCatalogOutput) {
	c.inc("DeleteServerCatalog")
	return c.svc.DeleteServerCatalogRequest(input)
}

// DeleteServerCatalog is a passthrough to the underlying DeleteServerCatalog method.
// It will increment the count of requests made to DeleteServerCatalog.
func (c *SMS) DeleteServerCatalog(input *sms.DeleteServerCatalogInput) (*sms.DeleteServerCatalogOutput, error) {
	c.inc("DeleteServerCatalog")
	return c.svc.DeleteServerCatalog(input)
}

// DeleteServerCatalogWithContext is a passthrough to the underlying DeleteServerCatalogWithContext method.
// It will increment the count of requests made to DeleteServerCatalog.
func (c *SMS) DeleteServerCatalogWithContext(ctx aws.Context, input *sms.DeleteServerCatalogInput, opts ...request.Option) (*sms.DeleteServerCatalogOutput, error) {
	c.inc("DeleteServerCatalog")
	return c.svc.DeleteServerCatalogWithContext(ctx, input, opts...)
}

// DisassociateConnectorRequest is a passthrough to the underlying DisassociateConnectorRequest.
// It will increment the count of requests made to DisassociateConnector.
func (c *SMS) DisassociateConnectorRequest(input *sms.DisassociateConnectorInput) (req *request.Request, output *sms.DisassociateConnectorOutput) {
	c.inc("DisassociateConnector")
	return c.svc.DisassociateConnectorRequest(input)
}

// DisassociateConnector is a passthrough to the underlying DisassociateConnector method.
// It will increment the count of requests made to DisassociateConnector.
func (c *SMS) DisassociateConnector(input *sms.DisassociateConnectorInput) (*sms.DisassociateConnectorOutput, error) {
	c.inc("DisassociateConnector")
	return c.svc.DisassociateConnector(input)
}

// DisassociateConnectorWithContext is a passthrough to the underlying DisassociateConnectorWithContext method.
// It will increment the count of requests made to DisassociateConnector.
func (c *SMS) DisassociateConnectorWithContext(ctx aws.Context, input *sms.DisassociateConnectorInput, opts ...request.Option) (*sms.DisassociateConnectorOutput, error) {
	c.inc("DisassociateConnector")
	return c.svc.DisassociateConnectorWithContext(ctx, input, opts...)
}

// GetConnectorsRequest is a passthrough to the underlying GetConnectorsRequest.
// It will increment the count of requests made to GetConnectors.
func (c *SMS) GetConnectorsRequest(input *sms.GetConnectorsInput) (req *request.Request, output *sms.GetConnectorsOutput) {
	c.inc("GetConnectors")
	return c.svc.GetConnectorsRequest(input)
}

// GetConnectors is a passthrough to the underlying GetConnectors method.
// It will increment the count of requests made to GetConnectors.
func (c *SMS) GetConnectors(input *sms.GetConnectorsInput) (*sms.GetConnectorsOutput, error) {
	c.inc("GetConnectors")
	return c.svc.GetConnectors(input)
}

// GetConnectorsWithContext is a passthrough to the underlying GetConnectorsWithContext method.
// It will increment the count of requests made to GetConnectors.
func (c *SMS) GetConnectorsWithContext(ctx aws.Context, input *sms.GetConnectorsInput, opts ...request.Option) (*sms.GetConnectorsOutput, error) {
	c.inc("GetConnectors")
	return c.svc.GetConnectorsWithContext(ctx, input, opts...)
}

// GetConnectorsPages is a passthrough to the underlying GetConnectorsPages method.
// It will increment the count of requests made to GetConnectors on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetConnectorsPagesWithContext to avoid this.
func (c *SMS) GetConnectorsPages(input *sms.GetConnectorsInput, fn func(*sms.GetConnectorsOutput, bool) bool) error {
	wrappedFn := func(page *sms.GetConnectorsOutput, lastPage bool) bool {
		c.inc("GetConnectors")
		return fn(page, lastPage)
	}
	return c.svc.GetConnectorsPages(input, wrappedFn)
}

// GetConnectorsPagesWithContext is a passthrough to the underlying GetConnectorsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetConnectors when applied to the request.
func (c *SMS) GetConnectorsPagesWithContext(ctx aws.Context, input *sms.GetConnectorsInput, fn func(*sms.GetConnectorsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetConnectors"))
	return c.svc.GetConnectorsPagesWithContext(ctx, input, fn, opts...)
}

// GetReplicationJobsRequest is a passthrough to the underlying GetReplicationJobsRequest.
// It will increment the count of requests made to GetReplicationJobs.
func (c *SMS) GetReplicationJobsRequest(input *sms.GetReplicationJobsInput) (req *request.Request, output *sms.GetReplicationJobsOutput) {
	c.inc("GetReplicationJobs")
	return c.svc.GetReplicationJobsRequest(input)
}

// GetReplicationJobs is a passthrough to the underlying GetReplicationJobs method.
// It will increment the count of requests made to GetReplicationJobs.
func (c *SMS) GetReplicationJobs(input *sms.GetReplicationJobsInput) (*sms.GetReplicationJobsOutput, error) {
	c.inc("GetReplicationJobs")
	return c.svc.GetReplicationJobs(input)
}

// GetReplicationJobsWithContext is a passthrough to the underlying GetReplicationJobsWithContext method.
// It will increment the count of requests made to GetReplicationJobs.
func (c *SMS) GetReplicationJobsWithContext(ctx aws.Context, input *sms.GetReplicationJobsInput, opts ...request.Option) (*sms.GetReplicationJobsOutput, error) {
	c.inc("GetReplicationJobs")
	return c.svc.GetReplicationJobsWithContext(ctx, input, opts...)
}

// GetReplicationJobsPages is a passthrough to the underlying GetReplicationJobsPages method.
// It will increment the count of requests made to GetReplicationJobs on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetReplicationJobsPagesWithContext to avoid this.
func (c *SMS) GetReplicationJobsPages(input *sms.GetReplicationJobsInput, fn func(*sms.GetReplicationJobsOutput, bool) bool) error {
	wrappedFn := func(page *sms.GetReplicationJobsOutput, lastPage bool) bool {
		c.inc("GetReplicationJobs")
		return fn(page, lastPage)
	}
	return c.svc.GetReplicationJobsPages(input, wrappedFn)
}

// GetReplicationJobsPagesWithContext is a passthrough to the underlying GetReplicationJobsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetReplicationJobs when applied to the request.
func (c *SMS) GetReplicationJobsPagesWithContext(ctx aws.Context, input *sms.GetReplicationJobsInput, fn func(*sms.GetReplicationJobsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetReplicationJobs"))
	return c.svc.GetReplicationJobsPagesWithContext(ctx, input, fn, opts...)
}

// GetReplicationRunsRequest is a passthrough to the underlying GetReplicationRunsRequest.
// It will increment the count of requests made to GetReplicationRuns.
func (c *SMS) GetReplicationRunsRequest(input *sms.GetReplicationRunsInput) (req *request.Request, output *sms.GetReplicationRunsOutput) {
	c.inc("GetReplicationRuns")
	return c.svc.GetReplicationRunsRequest(input)
}

// GetReplicationRuns is a passthrough to the underlying GetReplicationRuns method.
// It will increment the count of requests made to GetReplicationRuns.
func (c *SMS) GetReplicationRuns(input *sms.GetReplicationRunsInput) (*sms.GetReplicationRunsOutput, error) {
	c.inc("GetReplicationRuns")
	return c.svc.GetReplicationRuns(input)
}

// GetReplicationRunsWithContext is a passthrough to the underlying GetReplicationRunsWithContext method.
// It will increment the count of requests made to GetReplicationRuns.
func (c *SMS) GetReplicationRunsWithContext(ctx aws.Context, input *sms.GetReplicationRunsInput, opts ...request.Option) (*sms.GetReplicationRunsOutput, error) {
	c.inc("GetReplicationRuns")
	return c.svc.GetReplicationRunsWithContext(ctx, input, opts...)
}

// GetReplicationRunsPages is a passthrough to the underlying GetReplicationRunsPages method.
// It will increment the count of requests made to GetReplicationRuns on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetReplicationRunsPagesWithContext to avoid this.
func (c *SMS) GetReplicationRunsPages(input *sms.GetReplicationRunsInput, fn func(*sms.GetReplicationRunsOutput, bool) bool) error {
	wrappedFn := func(page *sms.GetReplicationRunsOutput, lastPage bool) bool {
		c.inc("GetReplicationRuns")
		return fn(page, lastPage)
	}
	return c.svc.GetReplicationRunsPages(input, wrappedFn)
}

// GetReplicationRunsPagesWithContext is a passthrough to the underlying GetReplicationRunsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetReplicationRuns when applied to the request.
func (c *SMS) GetReplicationRunsPagesWithContext(ctx aws.Context, input *sms.GetReplicationRunsInput, fn func(*sms.GetReplicationRunsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetReplicationRuns"))
	return c.svc.GetReplicationRunsPagesWithContext(ctx, input, fn, opts...)
}

// GetServersRequest is a passthrough to the underlying GetServersRequest.
// It will increment the count of requests made to GetServers.
func (c *SMS) GetServersRequest(input *sms.GetServersInput) (req *request.Request, output *sms.GetServersOutput) {
	c.inc("GetServers")
	return c.svc.GetServersRequest(input)
}

// GetServers is a passthrough to the underlying GetServers method.
// It will increment the count of requests made to GetServers.
func (c *SMS) GetServers(input *sms.GetServersInput) (*sms.GetServersOutput, error) {
	c.inc("GetServers")
	return c.svc.GetServers(input)
}

// GetServersWithContext is a passthrough to the underlying GetServersWithContext method.
// It will increment the count of requests made to GetServers.
func (c *SMS) GetServersWithContext(ctx aws.Context, input *sms.GetServersInput, opts ...request.Option) (*sms.GetServersOutput, error) {
	c.inc("GetServers")
	return c.svc.GetServersWithContext(ctx, input, opts...)
}

// GetServersPages is a passthrough to the underlying GetServersPages method.
// It will increment the count of requests made to GetServers on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetServersPagesWithContext to avoid this.
func (c *SMS) GetServersPages(input *sms.GetServersInput, fn func(*sms.GetServersOutput, bool) bool) error {
	wrappedFn := func(page *sms.GetServersOutput, lastPage bool) bool {
		c.inc("GetServers")
		return fn(page, lastPage)
	}
	return c.svc.GetServersPages(input, wrappedFn)
}

// GetServersPagesWithContext is a passthrough to the underlying GetServersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetServers when applied to the request.
func (c *SMS) GetServersPagesWithContext(ctx aws.Context, input *sms.GetServersInput, fn func(*sms.GetServersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetServers"))
	return c.svc.GetServersPagesWithContext(ctx, input, fn, opts...)
}

// ImportServerCatalogRequest is a passthrough to the underlying ImportServerCatalogRequest.
// It will increment the count of requests made to ImportServerCatalog.
func (c *SMS) ImportServerCatalogRequest(input *sms.ImportServerCatalogInput) (req *request.Request, output *sms.ImportServerCatalogOutput) {
	c.inc("ImportServerCatalog")
	return c.svc.ImportServerCatalogRequest(input)
}

// ImportServerCatalog is a passthrough to the underlying ImportServerCatalog method.
// It will increment the count of requests made to ImportServerCatalog.
func (c *SMS) ImportServerCatalog(input *sms.ImportServerCatalogInput) (*sms.ImportServerCatalogOutput, error) {
	c.inc("ImportServerCatalog")
	return c.svc.ImportServerCatalog(input)
}

// ImportServerCatalogWithContext is a passthrough to the underlying ImportServerCatalogWithContext method.
// It will increment the count of requests made to ImportServerCatalog.
func (c *SMS) ImportServerCatalogWithContext(ctx aws.Context, input *sms.ImportServerCatalogInput, opts ...request.Option) (*sms.ImportServerCatalogOutput, error) {
	c.inc("ImportServerCatalog")
	return c.svc.ImportServerCatalogWithContext(ctx, input, opts...)
}

// StartOnDemandReplicationRunRequest is a passthrough to the underlying StartOnDemandReplicationRunRequest.
// It will increment the count of requests made to StartOnDemandReplicationRun.
func (c *SMS) StartOnDemandReplicationRunRequest(input *sms.StartOnDemandReplicationRunInput) (req *request.Request, output *sms.StartOnDemandReplicationRunOutput) {
	c.inc("StartOnDemandReplicationRun")
	return c.svc.StartOnDemandReplicationRunRequest(input)
}

// StartOnDemandReplicationRun is a passthrough to the underlying StartOnDemandReplicationRun method.
// It will increment the count of requests made to StartOnDemandReplicationRun.
func (c *SMS) StartOnDemandReplicationRun(input *sms.StartOnDemandReplicationRunInput) (*sms.StartOnDemandReplicationRunOutput, error) {
	c.inc("StartOnDemandReplicationRun")
	return c.svc.StartOnDemandReplicationRun(input)
}

// StartOnDemandReplicationRunWithContext is a passthrough to the underlying StartOnDemandReplicationRunWithContext method.
// It will increment the count of requests made to StartOnDemandReplicationRun.
func (c *SMS) StartOnDemandReplicationRunWithContext(ctx aws.Context, input *sms.StartOnDemandReplicationRunInput, opts ...request.Option) (*sms.StartOnDemandReplicationRunOutput, error) {
	c.inc("StartOnDemandReplicationRun")
	return c.svc.StartOnDemandReplicationRunWithContext(ctx, input, opts...)
}

// UpdateReplicationJobRequest is a passthrough to the underlying UpdateReplicationJobRequest.
// It will increment the count of requests made to UpdateReplicationJob.
func (c *SMS) UpdateReplicationJobRequest(input *sms.UpdateReplicationJobInput) (req *request.Request, output *sms.UpdateReplicationJobOutput) {
	c.inc("UpdateReplicationJob")
	return c.svc.UpdateReplicationJobRequest(input)
}

// UpdateReplicationJob is a passthrough to the underlying UpdateReplicationJob method.
// It will increment the count of requests made to UpdateReplicationJob.
func (c *SMS) UpdateReplicationJob(input *sms.UpdateReplicationJobInput) (*sms.UpdateReplicationJobOutput, error) {
	c.inc("UpdateReplicationJob")
	return c.svc.UpdateReplicationJob(input)
}

// UpdateReplicationJobWithContext is a passthrough to the underlying UpdateReplicationJobWithContext method.
// It will increment the count of requests made to UpdateReplicationJob.
func (c *SMS) UpdateReplicationJobWithContext(ctx aws.Context, input *sms.UpdateReplicationJobInput, opts ...request.Option) (*sms.UpdateReplicationJobOutput, error) {
	c.inc("UpdateReplicationJob")
	return c.svc.UpdateReplicationJobWithContext(ctx, input, opts...)
}
