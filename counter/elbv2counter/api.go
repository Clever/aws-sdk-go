// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package elbv2counter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elbv2"
)

// AddListenerCertificatesRequest is a passthrough to the underlying AddListenerCertificatesRequest.
// It will increment the count of requests made to AddListenerCertificates.
func (c *ELBV2) AddListenerCertificatesRequest(input *elbv2.AddListenerCertificatesInput) (req *request.Request, output *elbv2.AddListenerCertificatesOutput) {
	c.inc("AddListenerCertificates")
	return c.svc.AddListenerCertificatesRequest(input)
}

// AddListenerCertificates is a passthrough to the underlying AddListenerCertificates method.
// It will increment the count of requests made to AddListenerCertificates.
func (c *ELBV2) AddListenerCertificates(input *elbv2.AddListenerCertificatesInput) (*elbv2.AddListenerCertificatesOutput, error) {
	c.inc("AddListenerCertificates")
	return c.svc.AddListenerCertificates(input)
}

// AddListenerCertificatesWithContext is a passthrough to the underlying AddListenerCertificatesWithContext method.
// It will increment the count of requests made to AddListenerCertificates.
func (c *ELBV2) AddListenerCertificatesWithContext(ctx aws.Context, input *elbv2.AddListenerCertificatesInput, opts ...request.Option) (*elbv2.AddListenerCertificatesOutput, error) {
	c.inc("AddListenerCertificates")
	return c.svc.AddListenerCertificatesWithContext(ctx, input, opts...)
}

// AddTagsRequest is a passthrough to the underlying AddTagsRequest.
// It will increment the count of requests made to AddTags.
func (c *ELBV2) AddTagsRequest(input *elbv2.AddTagsInput) (req *request.Request, output *elbv2.AddTagsOutput) {
	c.inc("AddTags")
	return c.svc.AddTagsRequest(input)
}

// AddTags is a passthrough to the underlying AddTags method.
// It will increment the count of requests made to AddTags.
func (c *ELBV2) AddTags(input *elbv2.AddTagsInput) (*elbv2.AddTagsOutput, error) {
	c.inc("AddTags")
	return c.svc.AddTags(input)
}

// AddTagsWithContext is a passthrough to the underlying AddTagsWithContext method.
// It will increment the count of requests made to AddTags.
func (c *ELBV2) AddTagsWithContext(ctx aws.Context, input *elbv2.AddTagsInput, opts ...request.Option) (*elbv2.AddTagsOutput, error) {
	c.inc("AddTags")
	return c.svc.AddTagsWithContext(ctx, input, opts...)
}

// CreateListenerRequest is a passthrough to the underlying CreateListenerRequest.
// It will increment the count of requests made to CreateListener.
func (c *ELBV2) CreateListenerRequest(input *elbv2.CreateListenerInput) (req *request.Request, output *elbv2.CreateListenerOutput) {
	c.inc("CreateListener")
	return c.svc.CreateListenerRequest(input)
}

// CreateListener is a passthrough to the underlying CreateListener method.
// It will increment the count of requests made to CreateListener.
func (c *ELBV2) CreateListener(input *elbv2.CreateListenerInput) (*elbv2.CreateListenerOutput, error) {
	c.inc("CreateListener")
	return c.svc.CreateListener(input)
}

// CreateListenerWithContext is a passthrough to the underlying CreateListenerWithContext method.
// It will increment the count of requests made to CreateListener.
func (c *ELBV2) CreateListenerWithContext(ctx aws.Context, input *elbv2.CreateListenerInput, opts ...request.Option) (*elbv2.CreateListenerOutput, error) {
	c.inc("CreateListener")
	return c.svc.CreateListenerWithContext(ctx, input, opts...)
}

// CreateLoadBalancerRequest is a passthrough to the underlying CreateLoadBalancerRequest.
// It will increment the count of requests made to CreateLoadBalancer.
func (c *ELBV2) CreateLoadBalancerRequest(input *elbv2.CreateLoadBalancerInput) (req *request.Request, output *elbv2.CreateLoadBalancerOutput) {
	c.inc("CreateLoadBalancer")
	return c.svc.CreateLoadBalancerRequest(input)
}

// CreateLoadBalancer is a passthrough to the underlying CreateLoadBalancer method.
// It will increment the count of requests made to CreateLoadBalancer.
func (c *ELBV2) CreateLoadBalancer(input *elbv2.CreateLoadBalancerInput) (*elbv2.CreateLoadBalancerOutput, error) {
	c.inc("CreateLoadBalancer")
	return c.svc.CreateLoadBalancer(input)
}

// CreateLoadBalancerWithContext is a passthrough to the underlying CreateLoadBalancerWithContext method.
// It will increment the count of requests made to CreateLoadBalancer.
func (c *ELBV2) CreateLoadBalancerWithContext(ctx aws.Context, input *elbv2.CreateLoadBalancerInput, opts ...request.Option) (*elbv2.CreateLoadBalancerOutput, error) {
	c.inc("CreateLoadBalancer")
	return c.svc.CreateLoadBalancerWithContext(ctx, input, opts...)
}

// CreateRuleRequest is a passthrough to the underlying CreateRuleRequest.
// It will increment the count of requests made to CreateRule.
func (c *ELBV2) CreateRuleRequest(input *elbv2.CreateRuleInput) (req *request.Request, output *elbv2.CreateRuleOutput) {
	c.inc("CreateRule")
	return c.svc.CreateRuleRequest(input)
}

// CreateRule is a passthrough to the underlying CreateRule method.
// It will increment the count of requests made to CreateRule.
func (c *ELBV2) CreateRule(input *elbv2.CreateRuleInput) (*elbv2.CreateRuleOutput, error) {
	c.inc("CreateRule")
	return c.svc.CreateRule(input)
}

// CreateRuleWithContext is a passthrough to the underlying CreateRuleWithContext method.
// It will increment the count of requests made to CreateRule.
func (c *ELBV2) CreateRuleWithContext(ctx aws.Context, input *elbv2.CreateRuleInput, opts ...request.Option) (*elbv2.CreateRuleOutput, error) {
	c.inc("CreateRule")
	return c.svc.CreateRuleWithContext(ctx, input, opts...)
}

// CreateTargetGroupRequest is a passthrough to the underlying CreateTargetGroupRequest.
// It will increment the count of requests made to CreateTargetGroup.
func (c *ELBV2) CreateTargetGroupRequest(input *elbv2.CreateTargetGroupInput) (req *request.Request, output *elbv2.CreateTargetGroupOutput) {
	c.inc("CreateTargetGroup")
	return c.svc.CreateTargetGroupRequest(input)
}

// CreateTargetGroup is a passthrough to the underlying CreateTargetGroup method.
// It will increment the count of requests made to CreateTargetGroup.
func (c *ELBV2) CreateTargetGroup(input *elbv2.CreateTargetGroupInput) (*elbv2.CreateTargetGroupOutput, error) {
	c.inc("CreateTargetGroup")
	return c.svc.CreateTargetGroup(input)
}

// CreateTargetGroupWithContext is a passthrough to the underlying CreateTargetGroupWithContext method.
// It will increment the count of requests made to CreateTargetGroup.
func (c *ELBV2) CreateTargetGroupWithContext(ctx aws.Context, input *elbv2.CreateTargetGroupInput, opts ...request.Option) (*elbv2.CreateTargetGroupOutput, error) {
	c.inc("CreateTargetGroup")
	return c.svc.CreateTargetGroupWithContext(ctx, input, opts...)
}

// DeleteListenerRequest is a passthrough to the underlying DeleteListenerRequest.
// It will increment the count of requests made to DeleteListener.
func (c *ELBV2) DeleteListenerRequest(input *elbv2.DeleteListenerInput) (req *request.Request, output *elbv2.DeleteListenerOutput) {
	c.inc("DeleteListener")
	return c.svc.DeleteListenerRequest(input)
}

// DeleteListener is a passthrough to the underlying DeleteListener method.
// It will increment the count of requests made to DeleteListener.
func (c *ELBV2) DeleteListener(input *elbv2.DeleteListenerInput) (*elbv2.DeleteListenerOutput, error) {
	c.inc("DeleteListener")
	return c.svc.DeleteListener(input)
}

// DeleteListenerWithContext is a passthrough to the underlying DeleteListenerWithContext method.
// It will increment the count of requests made to DeleteListener.
func (c *ELBV2) DeleteListenerWithContext(ctx aws.Context, input *elbv2.DeleteListenerInput, opts ...request.Option) (*elbv2.DeleteListenerOutput, error) {
	c.inc("DeleteListener")
	return c.svc.DeleteListenerWithContext(ctx, input, opts...)
}

// DeleteLoadBalancerRequest is a passthrough to the underlying DeleteLoadBalancerRequest.
// It will increment the count of requests made to DeleteLoadBalancer.
func (c *ELBV2) DeleteLoadBalancerRequest(input *elbv2.DeleteLoadBalancerInput) (req *request.Request, output *elbv2.DeleteLoadBalancerOutput) {
	c.inc("DeleteLoadBalancer")
	return c.svc.DeleteLoadBalancerRequest(input)
}

// DeleteLoadBalancer is a passthrough to the underlying DeleteLoadBalancer method.
// It will increment the count of requests made to DeleteLoadBalancer.
func (c *ELBV2) DeleteLoadBalancer(input *elbv2.DeleteLoadBalancerInput) (*elbv2.DeleteLoadBalancerOutput, error) {
	c.inc("DeleteLoadBalancer")
	return c.svc.DeleteLoadBalancer(input)
}

// DeleteLoadBalancerWithContext is a passthrough to the underlying DeleteLoadBalancerWithContext method.
// It will increment the count of requests made to DeleteLoadBalancer.
func (c *ELBV2) DeleteLoadBalancerWithContext(ctx aws.Context, input *elbv2.DeleteLoadBalancerInput, opts ...request.Option) (*elbv2.DeleteLoadBalancerOutput, error) {
	c.inc("DeleteLoadBalancer")
	return c.svc.DeleteLoadBalancerWithContext(ctx, input, opts...)
}

// DeleteRuleRequest is a passthrough to the underlying DeleteRuleRequest.
// It will increment the count of requests made to DeleteRule.
func (c *ELBV2) DeleteRuleRequest(input *elbv2.DeleteRuleInput) (req *request.Request, output *elbv2.DeleteRuleOutput) {
	c.inc("DeleteRule")
	return c.svc.DeleteRuleRequest(input)
}

// DeleteRule is a passthrough to the underlying DeleteRule method.
// It will increment the count of requests made to DeleteRule.
func (c *ELBV2) DeleteRule(input *elbv2.DeleteRuleInput) (*elbv2.DeleteRuleOutput, error) {
	c.inc("DeleteRule")
	return c.svc.DeleteRule(input)
}

// DeleteRuleWithContext is a passthrough to the underlying DeleteRuleWithContext method.
// It will increment the count of requests made to DeleteRule.
func (c *ELBV2) DeleteRuleWithContext(ctx aws.Context, input *elbv2.DeleteRuleInput, opts ...request.Option) (*elbv2.DeleteRuleOutput, error) {
	c.inc("DeleteRule")
	return c.svc.DeleteRuleWithContext(ctx, input, opts...)
}

// DeleteTargetGroupRequest is a passthrough to the underlying DeleteTargetGroupRequest.
// It will increment the count of requests made to DeleteTargetGroup.
func (c *ELBV2) DeleteTargetGroupRequest(input *elbv2.DeleteTargetGroupInput) (req *request.Request, output *elbv2.DeleteTargetGroupOutput) {
	c.inc("DeleteTargetGroup")
	return c.svc.DeleteTargetGroupRequest(input)
}

// DeleteTargetGroup is a passthrough to the underlying DeleteTargetGroup method.
// It will increment the count of requests made to DeleteTargetGroup.
func (c *ELBV2) DeleteTargetGroup(input *elbv2.DeleteTargetGroupInput) (*elbv2.DeleteTargetGroupOutput, error) {
	c.inc("DeleteTargetGroup")
	return c.svc.DeleteTargetGroup(input)
}

// DeleteTargetGroupWithContext is a passthrough to the underlying DeleteTargetGroupWithContext method.
// It will increment the count of requests made to DeleteTargetGroup.
func (c *ELBV2) DeleteTargetGroupWithContext(ctx aws.Context, input *elbv2.DeleteTargetGroupInput, opts ...request.Option) (*elbv2.DeleteTargetGroupOutput, error) {
	c.inc("DeleteTargetGroup")
	return c.svc.DeleteTargetGroupWithContext(ctx, input, opts...)
}

// DeregisterTargetsRequest is a passthrough to the underlying DeregisterTargetsRequest.
// It will increment the count of requests made to DeregisterTargets.
func (c *ELBV2) DeregisterTargetsRequest(input *elbv2.DeregisterTargetsInput) (req *request.Request, output *elbv2.DeregisterTargetsOutput) {
	c.inc("DeregisterTargets")
	return c.svc.DeregisterTargetsRequest(input)
}

// DeregisterTargets is a passthrough to the underlying DeregisterTargets method.
// It will increment the count of requests made to DeregisterTargets.
func (c *ELBV2) DeregisterTargets(input *elbv2.DeregisterTargetsInput) (*elbv2.DeregisterTargetsOutput, error) {
	c.inc("DeregisterTargets")
	return c.svc.DeregisterTargets(input)
}

// DeregisterTargetsWithContext is a passthrough to the underlying DeregisterTargetsWithContext method.
// It will increment the count of requests made to DeregisterTargets.
func (c *ELBV2) DeregisterTargetsWithContext(ctx aws.Context, input *elbv2.DeregisterTargetsInput, opts ...request.Option) (*elbv2.DeregisterTargetsOutput, error) {
	c.inc("DeregisterTargets")
	return c.svc.DeregisterTargetsWithContext(ctx, input, opts...)
}

// DescribeAccountLimitsRequest is a passthrough to the underlying DescribeAccountLimitsRequest.
// It will increment the count of requests made to DescribeAccountLimits.
func (c *ELBV2) DescribeAccountLimitsRequest(input *elbv2.DescribeAccountLimitsInput) (req *request.Request, output *elbv2.DescribeAccountLimitsOutput) {
	c.inc("DescribeAccountLimits")
	return c.svc.DescribeAccountLimitsRequest(input)
}

// DescribeAccountLimits is a passthrough to the underlying DescribeAccountLimits method.
// It will increment the count of requests made to DescribeAccountLimits.
func (c *ELBV2) DescribeAccountLimits(input *elbv2.DescribeAccountLimitsInput) (*elbv2.DescribeAccountLimitsOutput, error) {
	c.inc("DescribeAccountLimits")
	return c.svc.DescribeAccountLimits(input)
}

// DescribeAccountLimitsWithContext is a passthrough to the underlying DescribeAccountLimitsWithContext method.
// It will increment the count of requests made to DescribeAccountLimits.
func (c *ELBV2) DescribeAccountLimitsWithContext(ctx aws.Context, input *elbv2.DescribeAccountLimitsInput, opts ...request.Option) (*elbv2.DescribeAccountLimitsOutput, error) {
	c.inc("DescribeAccountLimits")
	return c.svc.DescribeAccountLimitsWithContext(ctx, input, opts...)
}

// DescribeListenerCertificatesRequest is a passthrough to the underlying DescribeListenerCertificatesRequest.
// It will increment the count of requests made to DescribeListenerCertificates.
func (c *ELBV2) DescribeListenerCertificatesRequest(input *elbv2.DescribeListenerCertificatesInput) (req *request.Request, output *elbv2.DescribeListenerCertificatesOutput) {
	c.inc("DescribeListenerCertificates")
	return c.svc.DescribeListenerCertificatesRequest(input)
}

// DescribeListenerCertificates is a passthrough to the underlying DescribeListenerCertificates method.
// It will increment the count of requests made to DescribeListenerCertificates.
func (c *ELBV2) DescribeListenerCertificates(input *elbv2.DescribeListenerCertificatesInput) (*elbv2.DescribeListenerCertificatesOutput, error) {
	c.inc("DescribeListenerCertificates")
	return c.svc.DescribeListenerCertificates(input)
}

// DescribeListenerCertificatesWithContext is a passthrough to the underlying DescribeListenerCertificatesWithContext method.
// It will increment the count of requests made to DescribeListenerCertificates.
func (c *ELBV2) DescribeListenerCertificatesWithContext(ctx aws.Context, input *elbv2.DescribeListenerCertificatesInput, opts ...request.Option) (*elbv2.DescribeListenerCertificatesOutput, error) {
	c.inc("DescribeListenerCertificates")
	return c.svc.DescribeListenerCertificatesWithContext(ctx, input, opts...)
}

// DescribeListenersRequest is a passthrough to the underlying DescribeListenersRequest.
// It will increment the count of requests made to DescribeListeners.
func (c *ELBV2) DescribeListenersRequest(input *elbv2.DescribeListenersInput) (req *request.Request, output *elbv2.DescribeListenersOutput) {
	c.inc("DescribeListeners")
	return c.svc.DescribeListenersRequest(input)
}

// DescribeListeners is a passthrough to the underlying DescribeListeners method.
// It will increment the count of requests made to DescribeListeners.
func (c *ELBV2) DescribeListeners(input *elbv2.DescribeListenersInput) (*elbv2.DescribeListenersOutput, error) {
	c.inc("DescribeListeners")
	return c.svc.DescribeListeners(input)
}

// DescribeListenersWithContext is a passthrough to the underlying DescribeListenersWithContext method.
// It will increment the count of requests made to DescribeListeners.
func (c *ELBV2) DescribeListenersWithContext(ctx aws.Context, input *elbv2.DescribeListenersInput, opts ...request.Option) (*elbv2.DescribeListenersOutput, error) {
	c.inc("DescribeListeners")
	return c.svc.DescribeListenersWithContext(ctx, input, opts...)
}

// DescribeListenersPages is a passthrough to the underlying DescribeListenersPages method.
// It will increment the count of requests made to DescribeListeners on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeListenersPagesWithContext to avoid this.
func (c *ELBV2) DescribeListenersPages(input *elbv2.DescribeListenersInput, fn func(*elbv2.DescribeListenersOutput, bool) bool) error {
	wrappedFn := func(page *elbv2.DescribeListenersOutput, lastPage bool) bool {
		c.inc("DescribeListeners")
		return fn(page, lastPage)
	}
	return c.DescribeListenersPages(input, wrappedFn)
}

// DescribeListenersPagesWithContext is a passthrough to the underlying DescribeListenersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeListeners when applied to the request.
func (c *ELBV2) DescribeListenersPagesWithContext(ctx aws.Context, input *elbv2.DescribeListenersInput, fn func(*elbv2.DescribeListenersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeListeners"))
	return c.DescribeListenersPagesWithContext(ctx, input, fn, opts...)
}

// DescribeLoadBalancerAttributesRequest is a passthrough to the underlying DescribeLoadBalancerAttributesRequest.
// It will increment the count of requests made to DescribeLoadBalancerAttributes.
func (c *ELBV2) DescribeLoadBalancerAttributesRequest(input *elbv2.DescribeLoadBalancerAttributesInput) (req *request.Request, output *elbv2.DescribeLoadBalancerAttributesOutput) {
	c.inc("DescribeLoadBalancerAttributes")
	return c.svc.DescribeLoadBalancerAttributesRequest(input)
}

// DescribeLoadBalancerAttributes is a passthrough to the underlying DescribeLoadBalancerAttributes method.
// It will increment the count of requests made to DescribeLoadBalancerAttributes.
func (c *ELBV2) DescribeLoadBalancerAttributes(input *elbv2.DescribeLoadBalancerAttributesInput) (*elbv2.DescribeLoadBalancerAttributesOutput, error) {
	c.inc("DescribeLoadBalancerAttributes")
	return c.svc.DescribeLoadBalancerAttributes(input)
}

// DescribeLoadBalancerAttributesWithContext is a passthrough to the underlying DescribeLoadBalancerAttributesWithContext method.
// It will increment the count of requests made to DescribeLoadBalancerAttributes.
func (c *ELBV2) DescribeLoadBalancerAttributesWithContext(ctx aws.Context, input *elbv2.DescribeLoadBalancerAttributesInput, opts ...request.Option) (*elbv2.DescribeLoadBalancerAttributesOutput, error) {
	c.inc("DescribeLoadBalancerAttributes")
	return c.svc.DescribeLoadBalancerAttributesWithContext(ctx, input, opts...)
}

// DescribeLoadBalancersRequest is a passthrough to the underlying DescribeLoadBalancersRequest.
// It will increment the count of requests made to DescribeLoadBalancers.
func (c *ELBV2) DescribeLoadBalancersRequest(input *elbv2.DescribeLoadBalancersInput) (req *request.Request, output *elbv2.DescribeLoadBalancersOutput) {
	c.inc("DescribeLoadBalancers")
	return c.svc.DescribeLoadBalancersRequest(input)
}

// DescribeLoadBalancers is a passthrough to the underlying DescribeLoadBalancers method.
// It will increment the count of requests made to DescribeLoadBalancers.
func (c *ELBV2) DescribeLoadBalancers(input *elbv2.DescribeLoadBalancersInput) (*elbv2.DescribeLoadBalancersOutput, error) {
	c.inc("DescribeLoadBalancers")
	return c.svc.DescribeLoadBalancers(input)
}

// DescribeLoadBalancersWithContext is a passthrough to the underlying DescribeLoadBalancersWithContext method.
// It will increment the count of requests made to DescribeLoadBalancers.
func (c *ELBV2) DescribeLoadBalancersWithContext(ctx aws.Context, input *elbv2.DescribeLoadBalancersInput, opts ...request.Option) (*elbv2.DescribeLoadBalancersOutput, error) {
	c.inc("DescribeLoadBalancers")
	return c.svc.DescribeLoadBalancersWithContext(ctx, input, opts...)
}

// DescribeLoadBalancersPages is a passthrough to the underlying DescribeLoadBalancersPages method.
// It will increment the count of requests made to DescribeLoadBalancers on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeLoadBalancersPagesWithContext to avoid this.
func (c *ELBV2) DescribeLoadBalancersPages(input *elbv2.DescribeLoadBalancersInput, fn func(*elbv2.DescribeLoadBalancersOutput, bool) bool) error {
	wrappedFn := func(page *elbv2.DescribeLoadBalancersOutput, lastPage bool) bool {
		c.inc("DescribeLoadBalancers")
		return fn(page, lastPage)
	}
	return c.DescribeLoadBalancersPages(input, wrappedFn)
}

// DescribeLoadBalancersPagesWithContext is a passthrough to the underlying DescribeLoadBalancersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeLoadBalancers when applied to the request.
func (c *ELBV2) DescribeLoadBalancersPagesWithContext(ctx aws.Context, input *elbv2.DescribeLoadBalancersInput, fn func(*elbv2.DescribeLoadBalancersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeLoadBalancers"))
	return c.DescribeLoadBalancersPagesWithContext(ctx, input, fn, opts...)
}

// DescribeRulesRequest is a passthrough to the underlying DescribeRulesRequest.
// It will increment the count of requests made to DescribeRules.
func (c *ELBV2) DescribeRulesRequest(input *elbv2.DescribeRulesInput) (req *request.Request, output *elbv2.DescribeRulesOutput) {
	c.inc("DescribeRules")
	return c.svc.DescribeRulesRequest(input)
}

// DescribeRules is a passthrough to the underlying DescribeRules method.
// It will increment the count of requests made to DescribeRules.
func (c *ELBV2) DescribeRules(input *elbv2.DescribeRulesInput) (*elbv2.DescribeRulesOutput, error) {
	c.inc("DescribeRules")
	return c.svc.DescribeRules(input)
}

// DescribeRulesWithContext is a passthrough to the underlying DescribeRulesWithContext method.
// It will increment the count of requests made to DescribeRules.
func (c *ELBV2) DescribeRulesWithContext(ctx aws.Context, input *elbv2.DescribeRulesInput, opts ...request.Option) (*elbv2.DescribeRulesOutput, error) {
	c.inc("DescribeRules")
	return c.svc.DescribeRulesWithContext(ctx, input, opts...)
}

// DescribeSSLPoliciesRequest is a passthrough to the underlying DescribeSSLPoliciesRequest.
// It will increment the count of requests made to DescribeSSLPolicies.
func (c *ELBV2) DescribeSSLPoliciesRequest(input *elbv2.DescribeSSLPoliciesInput) (req *request.Request, output *elbv2.DescribeSSLPoliciesOutput) {
	c.inc("DescribeSSLPolicies")
	return c.svc.DescribeSSLPoliciesRequest(input)
}

// DescribeSSLPolicies is a passthrough to the underlying DescribeSSLPolicies method.
// It will increment the count of requests made to DescribeSSLPolicies.
func (c *ELBV2) DescribeSSLPolicies(input *elbv2.DescribeSSLPoliciesInput) (*elbv2.DescribeSSLPoliciesOutput, error) {
	c.inc("DescribeSSLPolicies")
	return c.svc.DescribeSSLPolicies(input)
}

// DescribeSSLPoliciesWithContext is a passthrough to the underlying DescribeSSLPoliciesWithContext method.
// It will increment the count of requests made to DescribeSSLPolicies.
func (c *ELBV2) DescribeSSLPoliciesWithContext(ctx aws.Context, input *elbv2.DescribeSSLPoliciesInput, opts ...request.Option) (*elbv2.DescribeSSLPoliciesOutput, error) {
	c.inc("DescribeSSLPolicies")
	return c.svc.DescribeSSLPoliciesWithContext(ctx, input, opts...)
}

// DescribeTagsRequest is a passthrough to the underlying DescribeTagsRequest.
// It will increment the count of requests made to DescribeTags.
func (c *ELBV2) DescribeTagsRequest(input *elbv2.DescribeTagsInput) (req *request.Request, output *elbv2.DescribeTagsOutput) {
	c.inc("DescribeTags")
	return c.svc.DescribeTagsRequest(input)
}

// DescribeTags is a passthrough to the underlying DescribeTags method.
// It will increment the count of requests made to DescribeTags.
func (c *ELBV2) DescribeTags(input *elbv2.DescribeTagsInput) (*elbv2.DescribeTagsOutput, error) {
	c.inc("DescribeTags")
	return c.svc.DescribeTags(input)
}

// DescribeTagsWithContext is a passthrough to the underlying DescribeTagsWithContext method.
// It will increment the count of requests made to DescribeTags.
func (c *ELBV2) DescribeTagsWithContext(ctx aws.Context, input *elbv2.DescribeTagsInput, opts ...request.Option) (*elbv2.DescribeTagsOutput, error) {
	c.inc("DescribeTags")
	return c.svc.DescribeTagsWithContext(ctx, input, opts...)
}

// DescribeTargetGroupAttributesRequest is a passthrough to the underlying DescribeTargetGroupAttributesRequest.
// It will increment the count of requests made to DescribeTargetGroupAttributes.
func (c *ELBV2) DescribeTargetGroupAttributesRequest(input *elbv2.DescribeTargetGroupAttributesInput) (req *request.Request, output *elbv2.DescribeTargetGroupAttributesOutput) {
	c.inc("DescribeTargetGroupAttributes")
	return c.svc.DescribeTargetGroupAttributesRequest(input)
}

// DescribeTargetGroupAttributes is a passthrough to the underlying DescribeTargetGroupAttributes method.
// It will increment the count of requests made to DescribeTargetGroupAttributes.
func (c *ELBV2) DescribeTargetGroupAttributes(input *elbv2.DescribeTargetGroupAttributesInput) (*elbv2.DescribeTargetGroupAttributesOutput, error) {
	c.inc("DescribeTargetGroupAttributes")
	return c.svc.DescribeTargetGroupAttributes(input)
}

// DescribeTargetGroupAttributesWithContext is a passthrough to the underlying DescribeTargetGroupAttributesWithContext method.
// It will increment the count of requests made to DescribeTargetGroupAttributes.
func (c *ELBV2) DescribeTargetGroupAttributesWithContext(ctx aws.Context, input *elbv2.DescribeTargetGroupAttributesInput, opts ...request.Option) (*elbv2.DescribeTargetGroupAttributesOutput, error) {
	c.inc("DescribeTargetGroupAttributes")
	return c.svc.DescribeTargetGroupAttributesWithContext(ctx, input, opts...)
}

// DescribeTargetGroupsRequest is a passthrough to the underlying DescribeTargetGroupsRequest.
// It will increment the count of requests made to DescribeTargetGroups.
func (c *ELBV2) DescribeTargetGroupsRequest(input *elbv2.DescribeTargetGroupsInput) (req *request.Request, output *elbv2.DescribeTargetGroupsOutput) {
	c.inc("DescribeTargetGroups")
	return c.svc.DescribeTargetGroupsRequest(input)
}

// DescribeTargetGroups is a passthrough to the underlying DescribeTargetGroups method.
// It will increment the count of requests made to DescribeTargetGroups.
func (c *ELBV2) DescribeTargetGroups(input *elbv2.DescribeTargetGroupsInput) (*elbv2.DescribeTargetGroupsOutput, error) {
	c.inc("DescribeTargetGroups")
	return c.svc.DescribeTargetGroups(input)
}

// DescribeTargetGroupsWithContext is a passthrough to the underlying DescribeTargetGroupsWithContext method.
// It will increment the count of requests made to DescribeTargetGroups.
func (c *ELBV2) DescribeTargetGroupsWithContext(ctx aws.Context, input *elbv2.DescribeTargetGroupsInput, opts ...request.Option) (*elbv2.DescribeTargetGroupsOutput, error) {
	c.inc("DescribeTargetGroups")
	return c.svc.DescribeTargetGroupsWithContext(ctx, input, opts...)
}

// DescribeTargetGroupsPages is a passthrough to the underlying DescribeTargetGroupsPages method.
// It will increment the count of requests made to DescribeTargetGroups on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeTargetGroupsPagesWithContext to avoid this.
func (c *ELBV2) DescribeTargetGroupsPages(input *elbv2.DescribeTargetGroupsInput, fn func(*elbv2.DescribeTargetGroupsOutput, bool) bool) error {
	wrappedFn := func(page *elbv2.DescribeTargetGroupsOutput, lastPage bool) bool {
		c.inc("DescribeTargetGroups")
		return fn(page, lastPage)
	}
	return c.DescribeTargetGroupsPages(input, wrappedFn)
}

// DescribeTargetGroupsPagesWithContext is a passthrough to the underlying DescribeTargetGroupsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeTargetGroups when applied to the request.
func (c *ELBV2) DescribeTargetGroupsPagesWithContext(ctx aws.Context, input *elbv2.DescribeTargetGroupsInput, fn func(*elbv2.DescribeTargetGroupsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeTargetGroups"))
	return c.DescribeTargetGroupsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeTargetHealthRequest is a passthrough to the underlying DescribeTargetHealthRequest.
// It will increment the count of requests made to DescribeTargetHealth.
func (c *ELBV2) DescribeTargetHealthRequest(input *elbv2.DescribeTargetHealthInput) (req *request.Request, output *elbv2.DescribeTargetHealthOutput) {
	c.inc("DescribeTargetHealth")
	return c.svc.DescribeTargetHealthRequest(input)
}

// DescribeTargetHealth is a passthrough to the underlying DescribeTargetHealth method.
// It will increment the count of requests made to DescribeTargetHealth.
func (c *ELBV2) DescribeTargetHealth(input *elbv2.DescribeTargetHealthInput) (*elbv2.DescribeTargetHealthOutput, error) {
	c.inc("DescribeTargetHealth")
	return c.svc.DescribeTargetHealth(input)
}

// DescribeTargetHealthWithContext is a passthrough to the underlying DescribeTargetHealthWithContext method.
// It will increment the count of requests made to DescribeTargetHealth.
func (c *ELBV2) DescribeTargetHealthWithContext(ctx aws.Context, input *elbv2.DescribeTargetHealthInput, opts ...request.Option) (*elbv2.DescribeTargetHealthOutput, error) {
	c.inc("DescribeTargetHealth")
	return c.svc.DescribeTargetHealthWithContext(ctx, input, opts...)
}

// ModifyListenerRequest is a passthrough to the underlying ModifyListenerRequest.
// It will increment the count of requests made to ModifyListener.
func (c *ELBV2) ModifyListenerRequest(input *elbv2.ModifyListenerInput) (req *request.Request, output *elbv2.ModifyListenerOutput) {
	c.inc("ModifyListener")
	return c.svc.ModifyListenerRequest(input)
}

// ModifyListener is a passthrough to the underlying ModifyListener method.
// It will increment the count of requests made to ModifyListener.
func (c *ELBV2) ModifyListener(input *elbv2.ModifyListenerInput) (*elbv2.ModifyListenerOutput, error) {
	c.inc("ModifyListener")
	return c.svc.ModifyListener(input)
}

// ModifyListenerWithContext is a passthrough to the underlying ModifyListenerWithContext method.
// It will increment the count of requests made to ModifyListener.
func (c *ELBV2) ModifyListenerWithContext(ctx aws.Context, input *elbv2.ModifyListenerInput, opts ...request.Option) (*elbv2.ModifyListenerOutput, error) {
	c.inc("ModifyListener")
	return c.svc.ModifyListenerWithContext(ctx, input, opts...)
}

// ModifyLoadBalancerAttributesRequest is a passthrough to the underlying ModifyLoadBalancerAttributesRequest.
// It will increment the count of requests made to ModifyLoadBalancerAttributes.
func (c *ELBV2) ModifyLoadBalancerAttributesRequest(input *elbv2.ModifyLoadBalancerAttributesInput) (req *request.Request, output *elbv2.ModifyLoadBalancerAttributesOutput) {
	c.inc("ModifyLoadBalancerAttributes")
	return c.svc.ModifyLoadBalancerAttributesRequest(input)
}

// ModifyLoadBalancerAttributes is a passthrough to the underlying ModifyLoadBalancerAttributes method.
// It will increment the count of requests made to ModifyLoadBalancerAttributes.
func (c *ELBV2) ModifyLoadBalancerAttributes(input *elbv2.ModifyLoadBalancerAttributesInput) (*elbv2.ModifyLoadBalancerAttributesOutput, error) {
	c.inc("ModifyLoadBalancerAttributes")
	return c.svc.ModifyLoadBalancerAttributes(input)
}

// ModifyLoadBalancerAttributesWithContext is a passthrough to the underlying ModifyLoadBalancerAttributesWithContext method.
// It will increment the count of requests made to ModifyLoadBalancerAttributes.
func (c *ELBV2) ModifyLoadBalancerAttributesWithContext(ctx aws.Context, input *elbv2.ModifyLoadBalancerAttributesInput, opts ...request.Option) (*elbv2.ModifyLoadBalancerAttributesOutput, error) {
	c.inc("ModifyLoadBalancerAttributes")
	return c.svc.ModifyLoadBalancerAttributesWithContext(ctx, input, opts...)
}

// ModifyRuleRequest is a passthrough to the underlying ModifyRuleRequest.
// It will increment the count of requests made to ModifyRule.
func (c *ELBV2) ModifyRuleRequest(input *elbv2.ModifyRuleInput) (req *request.Request, output *elbv2.ModifyRuleOutput) {
	c.inc("ModifyRule")
	return c.svc.ModifyRuleRequest(input)
}

// ModifyRule is a passthrough to the underlying ModifyRule method.
// It will increment the count of requests made to ModifyRule.
func (c *ELBV2) ModifyRule(input *elbv2.ModifyRuleInput) (*elbv2.ModifyRuleOutput, error) {
	c.inc("ModifyRule")
	return c.svc.ModifyRule(input)
}

// ModifyRuleWithContext is a passthrough to the underlying ModifyRuleWithContext method.
// It will increment the count of requests made to ModifyRule.
func (c *ELBV2) ModifyRuleWithContext(ctx aws.Context, input *elbv2.ModifyRuleInput, opts ...request.Option) (*elbv2.ModifyRuleOutput, error) {
	c.inc("ModifyRule")
	return c.svc.ModifyRuleWithContext(ctx, input, opts...)
}

// ModifyTargetGroupRequest is a passthrough to the underlying ModifyTargetGroupRequest.
// It will increment the count of requests made to ModifyTargetGroup.
func (c *ELBV2) ModifyTargetGroupRequest(input *elbv2.ModifyTargetGroupInput) (req *request.Request, output *elbv2.ModifyTargetGroupOutput) {
	c.inc("ModifyTargetGroup")
	return c.svc.ModifyTargetGroupRequest(input)
}

// ModifyTargetGroup is a passthrough to the underlying ModifyTargetGroup method.
// It will increment the count of requests made to ModifyTargetGroup.
func (c *ELBV2) ModifyTargetGroup(input *elbv2.ModifyTargetGroupInput) (*elbv2.ModifyTargetGroupOutput, error) {
	c.inc("ModifyTargetGroup")
	return c.svc.ModifyTargetGroup(input)
}

// ModifyTargetGroupWithContext is a passthrough to the underlying ModifyTargetGroupWithContext method.
// It will increment the count of requests made to ModifyTargetGroup.
func (c *ELBV2) ModifyTargetGroupWithContext(ctx aws.Context, input *elbv2.ModifyTargetGroupInput, opts ...request.Option) (*elbv2.ModifyTargetGroupOutput, error) {
	c.inc("ModifyTargetGroup")
	return c.svc.ModifyTargetGroupWithContext(ctx, input, opts...)
}

// ModifyTargetGroupAttributesRequest is a passthrough to the underlying ModifyTargetGroupAttributesRequest.
// It will increment the count of requests made to ModifyTargetGroupAttributes.
func (c *ELBV2) ModifyTargetGroupAttributesRequest(input *elbv2.ModifyTargetGroupAttributesInput) (req *request.Request, output *elbv2.ModifyTargetGroupAttributesOutput) {
	c.inc("ModifyTargetGroupAttributes")
	return c.svc.ModifyTargetGroupAttributesRequest(input)
}

// ModifyTargetGroupAttributes is a passthrough to the underlying ModifyTargetGroupAttributes method.
// It will increment the count of requests made to ModifyTargetGroupAttributes.
func (c *ELBV2) ModifyTargetGroupAttributes(input *elbv2.ModifyTargetGroupAttributesInput) (*elbv2.ModifyTargetGroupAttributesOutput, error) {
	c.inc("ModifyTargetGroupAttributes")
	return c.svc.ModifyTargetGroupAttributes(input)
}

// ModifyTargetGroupAttributesWithContext is a passthrough to the underlying ModifyTargetGroupAttributesWithContext method.
// It will increment the count of requests made to ModifyTargetGroupAttributes.
func (c *ELBV2) ModifyTargetGroupAttributesWithContext(ctx aws.Context, input *elbv2.ModifyTargetGroupAttributesInput, opts ...request.Option) (*elbv2.ModifyTargetGroupAttributesOutput, error) {
	c.inc("ModifyTargetGroupAttributes")
	return c.svc.ModifyTargetGroupAttributesWithContext(ctx, input, opts...)
}

// RegisterTargetsRequest is a passthrough to the underlying RegisterTargetsRequest.
// It will increment the count of requests made to RegisterTargets.
func (c *ELBV2) RegisterTargetsRequest(input *elbv2.RegisterTargetsInput) (req *request.Request, output *elbv2.RegisterTargetsOutput) {
	c.inc("RegisterTargets")
	return c.svc.RegisterTargetsRequest(input)
}

// RegisterTargets is a passthrough to the underlying RegisterTargets method.
// It will increment the count of requests made to RegisterTargets.
func (c *ELBV2) RegisterTargets(input *elbv2.RegisterTargetsInput) (*elbv2.RegisterTargetsOutput, error) {
	c.inc("RegisterTargets")
	return c.svc.RegisterTargets(input)
}

// RegisterTargetsWithContext is a passthrough to the underlying RegisterTargetsWithContext method.
// It will increment the count of requests made to RegisterTargets.
func (c *ELBV2) RegisterTargetsWithContext(ctx aws.Context, input *elbv2.RegisterTargetsInput, opts ...request.Option) (*elbv2.RegisterTargetsOutput, error) {
	c.inc("RegisterTargets")
	return c.svc.RegisterTargetsWithContext(ctx, input, opts...)
}

// RemoveListenerCertificatesRequest is a passthrough to the underlying RemoveListenerCertificatesRequest.
// It will increment the count of requests made to RemoveListenerCertificates.
func (c *ELBV2) RemoveListenerCertificatesRequest(input *elbv2.RemoveListenerCertificatesInput) (req *request.Request, output *elbv2.RemoveListenerCertificatesOutput) {
	c.inc("RemoveListenerCertificates")
	return c.svc.RemoveListenerCertificatesRequest(input)
}

// RemoveListenerCertificates is a passthrough to the underlying RemoveListenerCertificates method.
// It will increment the count of requests made to RemoveListenerCertificates.
func (c *ELBV2) RemoveListenerCertificates(input *elbv2.RemoveListenerCertificatesInput) (*elbv2.RemoveListenerCertificatesOutput, error) {
	c.inc("RemoveListenerCertificates")
	return c.svc.RemoveListenerCertificates(input)
}

// RemoveListenerCertificatesWithContext is a passthrough to the underlying RemoveListenerCertificatesWithContext method.
// It will increment the count of requests made to RemoveListenerCertificates.
func (c *ELBV2) RemoveListenerCertificatesWithContext(ctx aws.Context, input *elbv2.RemoveListenerCertificatesInput, opts ...request.Option) (*elbv2.RemoveListenerCertificatesOutput, error) {
	c.inc("RemoveListenerCertificates")
	return c.svc.RemoveListenerCertificatesWithContext(ctx, input, opts...)
}

// RemoveTagsRequest is a passthrough to the underlying RemoveTagsRequest.
// It will increment the count of requests made to RemoveTags.
func (c *ELBV2) RemoveTagsRequest(input *elbv2.RemoveTagsInput) (req *request.Request, output *elbv2.RemoveTagsOutput) {
	c.inc("RemoveTags")
	return c.svc.RemoveTagsRequest(input)
}

// RemoveTags is a passthrough to the underlying RemoveTags method.
// It will increment the count of requests made to RemoveTags.
func (c *ELBV2) RemoveTags(input *elbv2.RemoveTagsInput) (*elbv2.RemoveTagsOutput, error) {
	c.inc("RemoveTags")
	return c.svc.RemoveTags(input)
}

// RemoveTagsWithContext is a passthrough to the underlying RemoveTagsWithContext method.
// It will increment the count of requests made to RemoveTags.
func (c *ELBV2) RemoveTagsWithContext(ctx aws.Context, input *elbv2.RemoveTagsInput, opts ...request.Option) (*elbv2.RemoveTagsOutput, error) {
	c.inc("RemoveTags")
	return c.svc.RemoveTagsWithContext(ctx, input, opts...)
}

// SetIpAddressTypeRequest is a passthrough to the underlying SetIpAddressTypeRequest.
// It will increment the count of requests made to SetIpAddressType.
func (c *ELBV2) SetIpAddressTypeRequest(input *elbv2.SetIpAddressTypeInput) (req *request.Request, output *elbv2.SetIpAddressTypeOutput) {
	c.inc("SetIpAddressType")
	return c.svc.SetIpAddressTypeRequest(input)
}

// SetIpAddressType is a passthrough to the underlying SetIpAddressType method.
// It will increment the count of requests made to SetIpAddressType.
func (c *ELBV2) SetIpAddressType(input *elbv2.SetIpAddressTypeInput) (*elbv2.SetIpAddressTypeOutput, error) {
	c.inc("SetIpAddressType")
	return c.svc.SetIpAddressType(input)
}

// SetIpAddressTypeWithContext is a passthrough to the underlying SetIpAddressTypeWithContext method.
// It will increment the count of requests made to SetIpAddressType.
func (c *ELBV2) SetIpAddressTypeWithContext(ctx aws.Context, input *elbv2.SetIpAddressTypeInput, opts ...request.Option) (*elbv2.SetIpAddressTypeOutput, error) {
	c.inc("SetIpAddressType")
	return c.svc.SetIpAddressTypeWithContext(ctx, input, opts...)
}

// SetRulePrioritiesRequest is a passthrough to the underlying SetRulePrioritiesRequest.
// It will increment the count of requests made to SetRulePriorities.
func (c *ELBV2) SetRulePrioritiesRequest(input *elbv2.SetRulePrioritiesInput) (req *request.Request, output *elbv2.SetRulePrioritiesOutput) {
	c.inc("SetRulePriorities")
	return c.svc.SetRulePrioritiesRequest(input)
}

// SetRulePriorities is a passthrough to the underlying SetRulePriorities method.
// It will increment the count of requests made to SetRulePriorities.
func (c *ELBV2) SetRulePriorities(input *elbv2.SetRulePrioritiesInput) (*elbv2.SetRulePrioritiesOutput, error) {
	c.inc("SetRulePriorities")
	return c.svc.SetRulePriorities(input)
}

// SetRulePrioritiesWithContext is a passthrough to the underlying SetRulePrioritiesWithContext method.
// It will increment the count of requests made to SetRulePriorities.
func (c *ELBV2) SetRulePrioritiesWithContext(ctx aws.Context, input *elbv2.SetRulePrioritiesInput, opts ...request.Option) (*elbv2.SetRulePrioritiesOutput, error) {
	c.inc("SetRulePriorities")
	return c.svc.SetRulePrioritiesWithContext(ctx, input, opts...)
}

// SetSecurityGroupsRequest is a passthrough to the underlying SetSecurityGroupsRequest.
// It will increment the count of requests made to SetSecurityGroups.
func (c *ELBV2) SetSecurityGroupsRequest(input *elbv2.SetSecurityGroupsInput) (req *request.Request, output *elbv2.SetSecurityGroupsOutput) {
	c.inc("SetSecurityGroups")
	return c.svc.SetSecurityGroupsRequest(input)
}

// SetSecurityGroups is a passthrough to the underlying SetSecurityGroups method.
// It will increment the count of requests made to SetSecurityGroups.
func (c *ELBV2) SetSecurityGroups(input *elbv2.SetSecurityGroupsInput) (*elbv2.SetSecurityGroupsOutput, error) {
	c.inc("SetSecurityGroups")
	return c.svc.SetSecurityGroups(input)
}

// SetSecurityGroupsWithContext is a passthrough to the underlying SetSecurityGroupsWithContext method.
// It will increment the count of requests made to SetSecurityGroups.
func (c *ELBV2) SetSecurityGroupsWithContext(ctx aws.Context, input *elbv2.SetSecurityGroupsInput, opts ...request.Option) (*elbv2.SetSecurityGroupsOutput, error) {
	c.inc("SetSecurityGroups")
	return c.svc.SetSecurityGroupsWithContext(ctx, input, opts...)
}

// SetSubnetsRequest is a passthrough to the underlying SetSubnetsRequest.
// It will increment the count of requests made to SetSubnets.
func (c *ELBV2) SetSubnetsRequest(input *elbv2.SetSubnetsInput) (req *request.Request, output *elbv2.SetSubnetsOutput) {
	c.inc("SetSubnets")
	return c.svc.SetSubnetsRequest(input)
}

// SetSubnets is a passthrough to the underlying SetSubnets method.
// It will increment the count of requests made to SetSubnets.
func (c *ELBV2) SetSubnets(input *elbv2.SetSubnetsInput) (*elbv2.SetSubnetsOutput, error) {
	c.inc("SetSubnets")
	return c.svc.SetSubnets(input)
}

// SetSubnetsWithContext is a passthrough to the underlying SetSubnetsWithContext method.
// It will increment the count of requests made to SetSubnets.
func (c *ELBV2) SetSubnetsWithContext(ctx aws.Context, input *elbv2.SetSubnetsInput, opts ...request.Option) (*elbv2.SetSubnetsOutput, error) {
	c.inc("SetSubnets")
	return c.svc.SetSubnetsWithContext(ctx, input, opts...)
}
