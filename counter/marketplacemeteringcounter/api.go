// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package marketplacemeteringcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/marketplacemetering"
)

// BatchMeterUsageRequest is a passthrough to the underlying BatchMeterUsageRequest.
// It will increment the count of requests made to BatchMeterUsage.
func (c *MarketplaceMetering) BatchMeterUsageRequest(input *marketplacemetering.BatchMeterUsageInput) (req *request.Request, output *marketplacemetering.BatchMeterUsageOutput) {
	c.inc("BatchMeterUsage")
	return c.svc.BatchMeterUsageRequest(input)
}

// BatchMeterUsage is a passthrough to the underlying BatchMeterUsage method.
// It will increment the count of requests made to BatchMeterUsage.
func (c *MarketplaceMetering) BatchMeterUsage(input *marketplacemetering.BatchMeterUsageInput) (*marketplacemetering.BatchMeterUsageOutput, error) {
	c.inc("BatchMeterUsage")
	return c.svc.BatchMeterUsage(input)
}

// BatchMeterUsageWithContext is a passthrough to the underlying BatchMeterUsageWithContext method.
// It will increment the count of requests made to BatchMeterUsage.
func (c *MarketplaceMetering) BatchMeterUsageWithContext(ctx aws.Context, input *marketplacemetering.BatchMeterUsageInput, opts ...request.Option) (*marketplacemetering.BatchMeterUsageOutput, error) {
	c.inc("BatchMeterUsage")
	return c.svc.BatchMeterUsageWithContext(ctx, input, opts...)
}

// MeterUsageRequest is a passthrough to the underlying MeterUsageRequest.
// It will increment the count of requests made to MeterUsage.
func (c *MarketplaceMetering) MeterUsageRequest(input *marketplacemetering.MeterUsageInput) (req *request.Request, output *marketplacemetering.MeterUsageOutput) {
	c.inc("MeterUsage")
	return c.svc.MeterUsageRequest(input)
}

// MeterUsage is a passthrough to the underlying MeterUsage method.
// It will increment the count of requests made to MeterUsage.
func (c *MarketplaceMetering) MeterUsage(input *marketplacemetering.MeterUsageInput) (*marketplacemetering.MeterUsageOutput, error) {
	c.inc("MeterUsage")
	return c.svc.MeterUsage(input)
}

// MeterUsageWithContext is a passthrough to the underlying MeterUsageWithContext method.
// It will increment the count of requests made to MeterUsage.
func (c *MarketplaceMetering) MeterUsageWithContext(ctx aws.Context, input *marketplacemetering.MeterUsageInput, opts ...request.Option) (*marketplacemetering.MeterUsageOutput, error) {
	c.inc("MeterUsage")
	return c.svc.MeterUsageWithContext(ctx, input, opts...)
}

// ResolveCustomerRequest is a passthrough to the underlying ResolveCustomerRequest.
// It will increment the count of requests made to ResolveCustomer.
func (c *MarketplaceMetering) ResolveCustomerRequest(input *marketplacemetering.ResolveCustomerInput) (req *request.Request, output *marketplacemetering.ResolveCustomerOutput) {
	c.inc("ResolveCustomer")
	return c.svc.ResolveCustomerRequest(input)
}

// ResolveCustomer is a passthrough to the underlying ResolveCustomer method.
// It will increment the count of requests made to ResolveCustomer.
func (c *MarketplaceMetering) ResolveCustomer(input *marketplacemetering.ResolveCustomerInput) (*marketplacemetering.ResolveCustomerOutput, error) {
	c.inc("ResolveCustomer")
	return c.svc.ResolveCustomer(input)
}

// ResolveCustomerWithContext is a passthrough to the underlying ResolveCustomerWithContext method.
// It will increment the count of requests made to ResolveCustomer.
func (c *MarketplaceMetering) ResolveCustomerWithContext(ctx aws.Context, input *marketplacemetering.ResolveCustomerInput, opts ...request.Option) (*marketplacemetering.ResolveCustomerOutput, error) {
	c.inc("ResolveCustomer")
	return c.svc.ResolveCustomerWithContext(ctx, input, opts...)
}
