// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package datapipelinecounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/datapipeline"
)

// ActivatePipelineRequest is a passthrough to the underlying ActivatePipelineRequest.
// It will increment the count of requests made to ActivatePipeline.
func (c *DataPipeline) ActivatePipelineRequest(input *datapipeline.ActivatePipelineInput) (req *request.Request, output *datapipeline.ActivatePipelineOutput) {
	c.inc("ActivatePipeline")
	return c.svc.ActivatePipelineRequest(input)
}

// ActivatePipeline is a passthrough to the underlying ActivatePipeline method.
// It will increment the count of requests made to ActivatePipeline.
func (c *DataPipeline) ActivatePipeline(input *datapipeline.ActivatePipelineInput) (*datapipeline.ActivatePipelineOutput, error) {
	c.inc("ActivatePipeline")
	return c.svc.ActivatePipeline(input)
}

// ActivatePipelineWithContext is a passthrough to the underlying ActivatePipelineWithContext method.
// It will increment the count of requests made to ActivatePipeline.
func (c *DataPipeline) ActivatePipelineWithContext(ctx aws.Context, input *datapipeline.ActivatePipelineInput, opts ...request.Option) (*datapipeline.ActivatePipelineOutput, error) {
	c.inc("ActivatePipeline")
	return c.svc.ActivatePipelineWithContext(ctx, input, opts...)
}

// AddTagsRequest is a passthrough to the underlying AddTagsRequest.
// It will increment the count of requests made to AddTags.
func (c *DataPipeline) AddTagsRequest(input *datapipeline.AddTagsInput) (req *request.Request, output *datapipeline.AddTagsOutput) {
	c.inc("AddTags")
	return c.svc.AddTagsRequest(input)
}

// AddTags is a passthrough to the underlying AddTags method.
// It will increment the count of requests made to AddTags.
func (c *DataPipeline) AddTags(input *datapipeline.AddTagsInput) (*datapipeline.AddTagsOutput, error) {
	c.inc("AddTags")
	return c.svc.AddTags(input)
}

// AddTagsWithContext is a passthrough to the underlying AddTagsWithContext method.
// It will increment the count of requests made to AddTags.
func (c *DataPipeline) AddTagsWithContext(ctx aws.Context, input *datapipeline.AddTagsInput, opts ...request.Option) (*datapipeline.AddTagsOutput, error) {
	c.inc("AddTags")
	return c.svc.AddTagsWithContext(ctx, input, opts...)
}

// CreatePipelineRequest is a passthrough to the underlying CreatePipelineRequest.
// It will increment the count of requests made to CreatePipeline.
func (c *DataPipeline) CreatePipelineRequest(input *datapipeline.CreatePipelineInput) (req *request.Request, output *datapipeline.CreatePipelineOutput) {
	c.inc("CreatePipeline")
	return c.svc.CreatePipelineRequest(input)
}

// CreatePipeline is a passthrough to the underlying CreatePipeline method.
// It will increment the count of requests made to CreatePipeline.
func (c *DataPipeline) CreatePipeline(input *datapipeline.CreatePipelineInput) (*datapipeline.CreatePipelineOutput, error) {
	c.inc("CreatePipeline")
	return c.svc.CreatePipeline(input)
}

// CreatePipelineWithContext is a passthrough to the underlying CreatePipelineWithContext method.
// It will increment the count of requests made to CreatePipeline.
func (c *DataPipeline) CreatePipelineWithContext(ctx aws.Context, input *datapipeline.CreatePipelineInput, opts ...request.Option) (*datapipeline.CreatePipelineOutput, error) {
	c.inc("CreatePipeline")
	return c.svc.CreatePipelineWithContext(ctx, input, opts...)
}

// DeactivatePipelineRequest is a passthrough to the underlying DeactivatePipelineRequest.
// It will increment the count of requests made to DeactivatePipeline.
func (c *DataPipeline) DeactivatePipelineRequest(input *datapipeline.DeactivatePipelineInput) (req *request.Request, output *datapipeline.DeactivatePipelineOutput) {
	c.inc("DeactivatePipeline")
	return c.svc.DeactivatePipelineRequest(input)
}

// DeactivatePipeline is a passthrough to the underlying DeactivatePipeline method.
// It will increment the count of requests made to DeactivatePipeline.
func (c *DataPipeline) DeactivatePipeline(input *datapipeline.DeactivatePipelineInput) (*datapipeline.DeactivatePipelineOutput, error) {
	c.inc("DeactivatePipeline")
	return c.svc.DeactivatePipeline(input)
}

// DeactivatePipelineWithContext is a passthrough to the underlying DeactivatePipelineWithContext method.
// It will increment the count of requests made to DeactivatePipeline.
func (c *DataPipeline) DeactivatePipelineWithContext(ctx aws.Context, input *datapipeline.DeactivatePipelineInput, opts ...request.Option) (*datapipeline.DeactivatePipelineOutput, error) {
	c.inc("DeactivatePipeline")
	return c.svc.DeactivatePipelineWithContext(ctx, input, opts...)
}

// DeletePipelineRequest is a passthrough to the underlying DeletePipelineRequest.
// It will increment the count of requests made to DeletePipeline.
func (c *DataPipeline) DeletePipelineRequest(input *datapipeline.DeletePipelineInput) (req *request.Request, output *datapipeline.DeletePipelineOutput) {
	c.inc("DeletePipeline")
	return c.svc.DeletePipelineRequest(input)
}

// DeletePipeline is a passthrough to the underlying DeletePipeline method.
// It will increment the count of requests made to DeletePipeline.
func (c *DataPipeline) DeletePipeline(input *datapipeline.DeletePipelineInput) (*datapipeline.DeletePipelineOutput, error) {
	c.inc("DeletePipeline")
	return c.svc.DeletePipeline(input)
}

// DeletePipelineWithContext is a passthrough to the underlying DeletePipelineWithContext method.
// It will increment the count of requests made to DeletePipeline.
func (c *DataPipeline) DeletePipelineWithContext(ctx aws.Context, input *datapipeline.DeletePipelineInput, opts ...request.Option) (*datapipeline.DeletePipelineOutput, error) {
	c.inc("DeletePipeline")
	return c.svc.DeletePipelineWithContext(ctx, input, opts...)
}

// DescribeObjectsRequest is a passthrough to the underlying DescribeObjectsRequest.
// It will increment the count of requests made to DescribeObjects.
func (c *DataPipeline) DescribeObjectsRequest(input *datapipeline.DescribeObjectsInput) (req *request.Request, output *datapipeline.DescribeObjectsOutput) {
	c.inc("DescribeObjects")
	return c.svc.DescribeObjectsRequest(input)
}

// DescribeObjects is a passthrough to the underlying DescribeObjects method.
// It will increment the count of requests made to DescribeObjects.
func (c *DataPipeline) DescribeObjects(input *datapipeline.DescribeObjectsInput) (*datapipeline.DescribeObjectsOutput, error) {
	c.inc("DescribeObjects")
	return c.svc.DescribeObjects(input)
}

// DescribeObjectsWithContext is a passthrough to the underlying DescribeObjectsWithContext method.
// It will increment the count of requests made to DescribeObjects.
func (c *DataPipeline) DescribeObjectsWithContext(ctx aws.Context, input *datapipeline.DescribeObjectsInput, opts ...request.Option) (*datapipeline.DescribeObjectsOutput, error) {
	c.inc("DescribeObjects")
	return c.svc.DescribeObjectsWithContext(ctx, input, opts...)
}

// DescribeObjectsPages is a passthrough to the underlying DescribeObjectsPages method.
// It will increment the count of requests made to DescribeObjects on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeObjectsPagesWithContext to avoid this.
func (c *DataPipeline) DescribeObjectsPages(input *datapipeline.DescribeObjectsInput, fn func(*datapipeline.DescribeObjectsOutput, bool) bool) error {
	wrappedFn := func(page *datapipeline.DescribeObjectsOutput, lastPage bool) bool {
		c.inc("DescribeObjects")
		return fn(page, lastPage)
	}
	return c.DescribeObjectsPages(input, wrappedFn)
}

// DescribeObjectsPagesWithContext is a passthrough to the underlying DescribeObjectsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeObjects when applied to the request.
func (c *DataPipeline) DescribeObjectsPagesWithContext(ctx aws.Context, input *datapipeline.DescribeObjectsInput, fn func(*datapipeline.DescribeObjectsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeObjects"))
	return c.DescribeObjectsPagesWithContext(ctx, input, fn, opts...)
}

// DescribePipelinesRequest is a passthrough to the underlying DescribePipelinesRequest.
// It will increment the count of requests made to DescribePipelines.
func (c *DataPipeline) DescribePipelinesRequest(input *datapipeline.DescribePipelinesInput) (req *request.Request, output *datapipeline.DescribePipelinesOutput) {
	c.inc("DescribePipelines")
	return c.svc.DescribePipelinesRequest(input)
}

// DescribePipelines is a passthrough to the underlying DescribePipelines method.
// It will increment the count of requests made to DescribePipelines.
func (c *DataPipeline) DescribePipelines(input *datapipeline.DescribePipelinesInput) (*datapipeline.DescribePipelinesOutput, error) {
	c.inc("DescribePipelines")
	return c.svc.DescribePipelines(input)
}

// DescribePipelinesWithContext is a passthrough to the underlying DescribePipelinesWithContext method.
// It will increment the count of requests made to DescribePipelines.
func (c *DataPipeline) DescribePipelinesWithContext(ctx aws.Context, input *datapipeline.DescribePipelinesInput, opts ...request.Option) (*datapipeline.DescribePipelinesOutput, error) {
	c.inc("DescribePipelines")
	return c.svc.DescribePipelinesWithContext(ctx, input, opts...)
}

// EvaluateExpressionRequest is a passthrough to the underlying EvaluateExpressionRequest.
// It will increment the count of requests made to EvaluateExpression.
func (c *DataPipeline) EvaluateExpressionRequest(input *datapipeline.EvaluateExpressionInput) (req *request.Request, output *datapipeline.EvaluateExpressionOutput) {
	c.inc("EvaluateExpression")
	return c.svc.EvaluateExpressionRequest(input)
}

// EvaluateExpression is a passthrough to the underlying EvaluateExpression method.
// It will increment the count of requests made to EvaluateExpression.
func (c *DataPipeline) EvaluateExpression(input *datapipeline.EvaluateExpressionInput) (*datapipeline.EvaluateExpressionOutput, error) {
	c.inc("EvaluateExpression")
	return c.svc.EvaluateExpression(input)
}

// EvaluateExpressionWithContext is a passthrough to the underlying EvaluateExpressionWithContext method.
// It will increment the count of requests made to EvaluateExpression.
func (c *DataPipeline) EvaluateExpressionWithContext(ctx aws.Context, input *datapipeline.EvaluateExpressionInput, opts ...request.Option) (*datapipeline.EvaluateExpressionOutput, error) {
	c.inc("EvaluateExpression")
	return c.svc.EvaluateExpressionWithContext(ctx, input, opts...)
}

// GetPipelineDefinitionRequest is a passthrough to the underlying GetPipelineDefinitionRequest.
// It will increment the count of requests made to GetPipelineDefinition.
func (c *DataPipeline) GetPipelineDefinitionRequest(input *datapipeline.GetPipelineDefinitionInput) (req *request.Request, output *datapipeline.GetPipelineDefinitionOutput) {
	c.inc("GetPipelineDefinition")
	return c.svc.GetPipelineDefinitionRequest(input)
}

// GetPipelineDefinition is a passthrough to the underlying GetPipelineDefinition method.
// It will increment the count of requests made to GetPipelineDefinition.
func (c *DataPipeline) GetPipelineDefinition(input *datapipeline.GetPipelineDefinitionInput) (*datapipeline.GetPipelineDefinitionOutput, error) {
	c.inc("GetPipelineDefinition")
	return c.svc.GetPipelineDefinition(input)
}

// GetPipelineDefinitionWithContext is a passthrough to the underlying GetPipelineDefinitionWithContext method.
// It will increment the count of requests made to GetPipelineDefinition.
func (c *DataPipeline) GetPipelineDefinitionWithContext(ctx aws.Context, input *datapipeline.GetPipelineDefinitionInput, opts ...request.Option) (*datapipeline.GetPipelineDefinitionOutput, error) {
	c.inc("GetPipelineDefinition")
	return c.svc.GetPipelineDefinitionWithContext(ctx, input, opts...)
}

// ListPipelinesRequest is a passthrough to the underlying ListPipelinesRequest.
// It will increment the count of requests made to ListPipelines.
func (c *DataPipeline) ListPipelinesRequest(input *datapipeline.ListPipelinesInput) (req *request.Request, output *datapipeline.ListPipelinesOutput) {
	c.inc("ListPipelines")
	return c.svc.ListPipelinesRequest(input)
}

// ListPipelines is a passthrough to the underlying ListPipelines method.
// It will increment the count of requests made to ListPipelines.
func (c *DataPipeline) ListPipelines(input *datapipeline.ListPipelinesInput) (*datapipeline.ListPipelinesOutput, error) {
	c.inc("ListPipelines")
	return c.svc.ListPipelines(input)
}

// ListPipelinesWithContext is a passthrough to the underlying ListPipelinesWithContext method.
// It will increment the count of requests made to ListPipelines.
func (c *DataPipeline) ListPipelinesWithContext(ctx aws.Context, input *datapipeline.ListPipelinesInput, opts ...request.Option) (*datapipeline.ListPipelinesOutput, error) {
	c.inc("ListPipelines")
	return c.svc.ListPipelinesWithContext(ctx, input, opts...)
}

// ListPipelinesPages is a passthrough to the underlying ListPipelinesPages method.
// It will increment the count of requests made to ListPipelines on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListPipelinesPagesWithContext to avoid this.
func (c *DataPipeline) ListPipelinesPages(input *datapipeline.ListPipelinesInput, fn func(*datapipeline.ListPipelinesOutput, bool) bool) error {
	wrappedFn := func(page *datapipeline.ListPipelinesOutput, lastPage bool) bool {
		c.inc("ListPipelines")
		return fn(page, lastPage)
	}
	return c.ListPipelinesPages(input, wrappedFn)
}

// ListPipelinesPagesWithContext is a passthrough to the underlying ListPipelinesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListPipelines when applied to the request.
func (c *DataPipeline) ListPipelinesPagesWithContext(ctx aws.Context, input *datapipeline.ListPipelinesInput, fn func(*datapipeline.ListPipelinesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListPipelines"))
	return c.ListPipelinesPagesWithContext(ctx, input, fn, opts...)
}

// PollForTaskRequest is a passthrough to the underlying PollForTaskRequest.
// It will increment the count of requests made to PollForTask.
func (c *DataPipeline) PollForTaskRequest(input *datapipeline.PollForTaskInput) (req *request.Request, output *datapipeline.PollForTaskOutput) {
	c.inc("PollForTask")
	return c.svc.PollForTaskRequest(input)
}

// PollForTask is a passthrough to the underlying PollForTask method.
// It will increment the count of requests made to PollForTask.
func (c *DataPipeline) PollForTask(input *datapipeline.PollForTaskInput) (*datapipeline.PollForTaskOutput, error) {
	c.inc("PollForTask")
	return c.svc.PollForTask(input)
}

// PollForTaskWithContext is a passthrough to the underlying PollForTaskWithContext method.
// It will increment the count of requests made to PollForTask.
func (c *DataPipeline) PollForTaskWithContext(ctx aws.Context, input *datapipeline.PollForTaskInput, opts ...request.Option) (*datapipeline.PollForTaskOutput, error) {
	c.inc("PollForTask")
	return c.svc.PollForTaskWithContext(ctx, input, opts...)
}

// PutPipelineDefinitionRequest is a passthrough to the underlying PutPipelineDefinitionRequest.
// It will increment the count of requests made to PutPipelineDefinition.
func (c *DataPipeline) PutPipelineDefinitionRequest(input *datapipeline.PutPipelineDefinitionInput) (req *request.Request, output *datapipeline.PutPipelineDefinitionOutput) {
	c.inc("PutPipelineDefinition")
	return c.svc.PutPipelineDefinitionRequest(input)
}

// PutPipelineDefinition is a passthrough to the underlying PutPipelineDefinition method.
// It will increment the count of requests made to PutPipelineDefinition.
func (c *DataPipeline) PutPipelineDefinition(input *datapipeline.PutPipelineDefinitionInput) (*datapipeline.PutPipelineDefinitionOutput, error) {
	c.inc("PutPipelineDefinition")
	return c.svc.PutPipelineDefinition(input)
}

// PutPipelineDefinitionWithContext is a passthrough to the underlying PutPipelineDefinitionWithContext method.
// It will increment the count of requests made to PutPipelineDefinition.
func (c *DataPipeline) PutPipelineDefinitionWithContext(ctx aws.Context, input *datapipeline.PutPipelineDefinitionInput, opts ...request.Option) (*datapipeline.PutPipelineDefinitionOutput, error) {
	c.inc("PutPipelineDefinition")
	return c.svc.PutPipelineDefinitionWithContext(ctx, input, opts...)
}

// QueryObjectsRequest is a passthrough to the underlying QueryObjectsRequest.
// It will increment the count of requests made to QueryObjects.
func (c *DataPipeline) QueryObjectsRequest(input *datapipeline.QueryObjectsInput) (req *request.Request, output *datapipeline.QueryObjectsOutput) {
	c.inc("QueryObjects")
	return c.svc.QueryObjectsRequest(input)
}

// QueryObjects is a passthrough to the underlying QueryObjects method.
// It will increment the count of requests made to QueryObjects.
func (c *DataPipeline) QueryObjects(input *datapipeline.QueryObjectsInput) (*datapipeline.QueryObjectsOutput, error) {
	c.inc("QueryObjects")
	return c.svc.QueryObjects(input)
}

// QueryObjectsWithContext is a passthrough to the underlying QueryObjectsWithContext method.
// It will increment the count of requests made to QueryObjects.
func (c *DataPipeline) QueryObjectsWithContext(ctx aws.Context, input *datapipeline.QueryObjectsInput, opts ...request.Option) (*datapipeline.QueryObjectsOutput, error) {
	c.inc("QueryObjects")
	return c.svc.QueryObjectsWithContext(ctx, input, opts...)
}

// QueryObjectsPages is a passthrough to the underlying QueryObjectsPages method.
// It will increment the count of requests made to QueryObjects on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use QueryObjectsPagesWithContext to avoid this.
func (c *DataPipeline) QueryObjectsPages(input *datapipeline.QueryObjectsInput, fn func(*datapipeline.QueryObjectsOutput, bool) bool) error {
	wrappedFn := func(page *datapipeline.QueryObjectsOutput, lastPage bool) bool {
		c.inc("QueryObjects")
		return fn(page, lastPage)
	}
	return c.QueryObjectsPages(input, wrappedFn)
}

// QueryObjectsPagesWithContext is a passthrough to the underlying QueryObjectsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to QueryObjects when applied to the request.
func (c *DataPipeline) QueryObjectsPagesWithContext(ctx aws.Context, input *datapipeline.QueryObjectsInput, fn func(*datapipeline.QueryObjectsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("QueryObjects"))
	return c.QueryObjectsPagesWithContext(ctx, input, fn, opts...)
}

// RemoveTagsRequest is a passthrough to the underlying RemoveTagsRequest.
// It will increment the count of requests made to RemoveTags.
func (c *DataPipeline) RemoveTagsRequest(input *datapipeline.RemoveTagsInput) (req *request.Request, output *datapipeline.RemoveTagsOutput) {
	c.inc("RemoveTags")
	return c.svc.RemoveTagsRequest(input)
}

// RemoveTags is a passthrough to the underlying RemoveTags method.
// It will increment the count of requests made to RemoveTags.
func (c *DataPipeline) RemoveTags(input *datapipeline.RemoveTagsInput) (*datapipeline.RemoveTagsOutput, error) {
	c.inc("RemoveTags")
	return c.svc.RemoveTags(input)
}

// RemoveTagsWithContext is a passthrough to the underlying RemoveTagsWithContext method.
// It will increment the count of requests made to RemoveTags.
func (c *DataPipeline) RemoveTagsWithContext(ctx aws.Context, input *datapipeline.RemoveTagsInput, opts ...request.Option) (*datapipeline.RemoveTagsOutput, error) {
	c.inc("RemoveTags")
	return c.svc.RemoveTagsWithContext(ctx, input, opts...)
}

// ReportTaskProgressRequest is a passthrough to the underlying ReportTaskProgressRequest.
// It will increment the count of requests made to ReportTaskProgress.
func (c *DataPipeline) ReportTaskProgressRequest(input *datapipeline.ReportTaskProgressInput) (req *request.Request, output *datapipeline.ReportTaskProgressOutput) {
	c.inc("ReportTaskProgress")
	return c.svc.ReportTaskProgressRequest(input)
}

// ReportTaskProgress is a passthrough to the underlying ReportTaskProgress method.
// It will increment the count of requests made to ReportTaskProgress.
func (c *DataPipeline) ReportTaskProgress(input *datapipeline.ReportTaskProgressInput) (*datapipeline.ReportTaskProgressOutput, error) {
	c.inc("ReportTaskProgress")
	return c.svc.ReportTaskProgress(input)
}

// ReportTaskProgressWithContext is a passthrough to the underlying ReportTaskProgressWithContext method.
// It will increment the count of requests made to ReportTaskProgress.
func (c *DataPipeline) ReportTaskProgressWithContext(ctx aws.Context, input *datapipeline.ReportTaskProgressInput, opts ...request.Option) (*datapipeline.ReportTaskProgressOutput, error) {
	c.inc("ReportTaskProgress")
	return c.svc.ReportTaskProgressWithContext(ctx, input, opts...)
}

// ReportTaskRunnerHeartbeatRequest is a passthrough to the underlying ReportTaskRunnerHeartbeatRequest.
// It will increment the count of requests made to ReportTaskRunnerHeartbeat.
func (c *DataPipeline) ReportTaskRunnerHeartbeatRequest(input *datapipeline.ReportTaskRunnerHeartbeatInput) (req *request.Request, output *datapipeline.ReportTaskRunnerHeartbeatOutput) {
	c.inc("ReportTaskRunnerHeartbeat")
	return c.svc.ReportTaskRunnerHeartbeatRequest(input)
}

// ReportTaskRunnerHeartbeat is a passthrough to the underlying ReportTaskRunnerHeartbeat method.
// It will increment the count of requests made to ReportTaskRunnerHeartbeat.
func (c *DataPipeline) ReportTaskRunnerHeartbeat(input *datapipeline.ReportTaskRunnerHeartbeatInput) (*datapipeline.ReportTaskRunnerHeartbeatOutput, error) {
	c.inc("ReportTaskRunnerHeartbeat")
	return c.svc.ReportTaskRunnerHeartbeat(input)
}

// ReportTaskRunnerHeartbeatWithContext is a passthrough to the underlying ReportTaskRunnerHeartbeatWithContext method.
// It will increment the count of requests made to ReportTaskRunnerHeartbeat.
func (c *DataPipeline) ReportTaskRunnerHeartbeatWithContext(ctx aws.Context, input *datapipeline.ReportTaskRunnerHeartbeatInput, opts ...request.Option) (*datapipeline.ReportTaskRunnerHeartbeatOutput, error) {
	c.inc("ReportTaskRunnerHeartbeat")
	return c.svc.ReportTaskRunnerHeartbeatWithContext(ctx, input, opts...)
}

// SetStatusRequest is a passthrough to the underlying SetStatusRequest.
// It will increment the count of requests made to SetStatus.
func (c *DataPipeline) SetStatusRequest(input *datapipeline.SetStatusInput) (req *request.Request, output *datapipeline.SetStatusOutput) {
	c.inc("SetStatus")
	return c.svc.SetStatusRequest(input)
}

// SetStatus is a passthrough to the underlying SetStatus method.
// It will increment the count of requests made to SetStatus.
func (c *DataPipeline) SetStatus(input *datapipeline.SetStatusInput) (*datapipeline.SetStatusOutput, error) {
	c.inc("SetStatus")
	return c.svc.SetStatus(input)
}

// SetStatusWithContext is a passthrough to the underlying SetStatusWithContext method.
// It will increment the count of requests made to SetStatus.
func (c *DataPipeline) SetStatusWithContext(ctx aws.Context, input *datapipeline.SetStatusInput, opts ...request.Option) (*datapipeline.SetStatusOutput, error) {
	c.inc("SetStatus")
	return c.svc.SetStatusWithContext(ctx, input, opts...)
}

// SetTaskStatusRequest is a passthrough to the underlying SetTaskStatusRequest.
// It will increment the count of requests made to SetTaskStatus.
func (c *DataPipeline) SetTaskStatusRequest(input *datapipeline.SetTaskStatusInput) (req *request.Request, output *datapipeline.SetTaskStatusOutput) {
	c.inc("SetTaskStatus")
	return c.svc.SetTaskStatusRequest(input)
}

// SetTaskStatus is a passthrough to the underlying SetTaskStatus method.
// It will increment the count of requests made to SetTaskStatus.
func (c *DataPipeline) SetTaskStatus(input *datapipeline.SetTaskStatusInput) (*datapipeline.SetTaskStatusOutput, error) {
	c.inc("SetTaskStatus")
	return c.svc.SetTaskStatus(input)
}

// SetTaskStatusWithContext is a passthrough to the underlying SetTaskStatusWithContext method.
// It will increment the count of requests made to SetTaskStatus.
func (c *DataPipeline) SetTaskStatusWithContext(ctx aws.Context, input *datapipeline.SetTaskStatusInput, opts ...request.Option) (*datapipeline.SetTaskStatusOutput, error) {
	c.inc("SetTaskStatus")
	return c.svc.SetTaskStatusWithContext(ctx, input, opts...)
}

// ValidatePipelineDefinitionRequest is a passthrough to the underlying ValidatePipelineDefinitionRequest.
// It will increment the count of requests made to ValidatePipelineDefinition.
func (c *DataPipeline) ValidatePipelineDefinitionRequest(input *datapipeline.ValidatePipelineDefinitionInput) (req *request.Request, output *datapipeline.ValidatePipelineDefinitionOutput) {
	c.inc("ValidatePipelineDefinition")
	return c.svc.ValidatePipelineDefinitionRequest(input)
}

// ValidatePipelineDefinition is a passthrough to the underlying ValidatePipelineDefinition method.
// It will increment the count of requests made to ValidatePipelineDefinition.
func (c *DataPipeline) ValidatePipelineDefinition(input *datapipeline.ValidatePipelineDefinitionInput) (*datapipeline.ValidatePipelineDefinitionOutput, error) {
	c.inc("ValidatePipelineDefinition")
	return c.svc.ValidatePipelineDefinition(input)
}

// ValidatePipelineDefinitionWithContext is a passthrough to the underlying ValidatePipelineDefinitionWithContext method.
// It will increment the count of requests made to ValidatePipelineDefinition.
func (c *DataPipeline) ValidatePipelineDefinitionWithContext(ctx aws.Context, input *datapipeline.ValidatePipelineDefinitionInput, opts ...request.Option) (*datapipeline.ValidatePipelineDefinitionOutput, error) {
	c.inc("ValidatePipelineDefinition")
	return c.svc.ValidatePipelineDefinitionWithContext(ctx, input, opts...)
}
