// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package pricingcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/pricing"
)

// DescribeServicesRequest is a passthrough to the underlying DescribeServicesRequest.
// It will increment the count of requests made to DescribeServices.
func (c *Pricing) DescribeServicesRequest(input *pricing.DescribeServicesInput) (req *request.Request, output *pricing.DescribeServicesOutput) {
	c.inc("DescribeServices")
	return c.svc.DescribeServicesRequest(input)
}

// DescribeServices is a passthrough to the underlying DescribeServices method.
// It will increment the count of requests made to DescribeServices.
func (c *Pricing) DescribeServices(input *pricing.DescribeServicesInput) (*pricing.DescribeServicesOutput, error) {
	c.inc("DescribeServices")
	return c.svc.DescribeServices(input)
}

// DescribeServicesWithContext is a passthrough to the underlying DescribeServicesWithContext method.
// It will increment the count of requests made to DescribeServices.
func (c *Pricing) DescribeServicesWithContext(ctx aws.Context, input *pricing.DescribeServicesInput, opts ...request.Option) (*pricing.DescribeServicesOutput, error) {
	c.inc("DescribeServices")
	return c.svc.DescribeServicesWithContext(ctx, input, opts...)
}

// DescribeServicesPages is a passthrough to the underlying DescribeServicesPages method.
// It will increment the count of requests made to DescribeServices on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeServicesPagesWithContext to avoid this.
func (c *Pricing) DescribeServicesPages(input *pricing.DescribeServicesInput, fn func(*pricing.DescribeServicesOutput, bool) bool) error {
	wrappedFn := func(page *pricing.DescribeServicesOutput, lastPage bool) bool {
		c.inc("DescribeServices")
		return fn(page, lastPage)
	}
	return c.svc.DescribeServicesPages(input, wrappedFn)
}

// DescribeServicesPagesWithContext is a passthrough to the underlying DescribeServicesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeServices when applied to the request.
func (c *Pricing) DescribeServicesPagesWithContext(ctx aws.Context, input *pricing.DescribeServicesInput, fn func(*pricing.DescribeServicesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeServices"))
	return c.svc.DescribeServicesPagesWithContext(ctx, input, fn, opts...)
}

// GetAttributeValuesRequest is a passthrough to the underlying GetAttributeValuesRequest.
// It will increment the count of requests made to GetAttributeValues.
func (c *Pricing) GetAttributeValuesRequest(input *pricing.GetAttributeValuesInput) (req *request.Request, output *pricing.GetAttributeValuesOutput) {
	c.inc("GetAttributeValues")
	return c.svc.GetAttributeValuesRequest(input)
}

// GetAttributeValues is a passthrough to the underlying GetAttributeValues method.
// It will increment the count of requests made to GetAttributeValues.
func (c *Pricing) GetAttributeValues(input *pricing.GetAttributeValuesInput) (*pricing.GetAttributeValuesOutput, error) {
	c.inc("GetAttributeValues")
	return c.svc.GetAttributeValues(input)
}

// GetAttributeValuesWithContext is a passthrough to the underlying GetAttributeValuesWithContext method.
// It will increment the count of requests made to GetAttributeValues.
func (c *Pricing) GetAttributeValuesWithContext(ctx aws.Context, input *pricing.GetAttributeValuesInput, opts ...request.Option) (*pricing.GetAttributeValuesOutput, error) {
	c.inc("GetAttributeValues")
	return c.svc.GetAttributeValuesWithContext(ctx, input, opts...)
}

// GetAttributeValuesPages is a passthrough to the underlying GetAttributeValuesPages method.
// It will increment the count of requests made to GetAttributeValues on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetAttributeValuesPagesWithContext to avoid this.
func (c *Pricing) GetAttributeValuesPages(input *pricing.GetAttributeValuesInput, fn func(*pricing.GetAttributeValuesOutput, bool) bool) error {
	wrappedFn := func(page *pricing.GetAttributeValuesOutput, lastPage bool) bool {
		c.inc("GetAttributeValues")
		return fn(page, lastPage)
	}
	return c.svc.GetAttributeValuesPages(input, wrappedFn)
}

// GetAttributeValuesPagesWithContext is a passthrough to the underlying GetAttributeValuesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetAttributeValues when applied to the request.
func (c *Pricing) GetAttributeValuesPagesWithContext(ctx aws.Context, input *pricing.GetAttributeValuesInput, fn func(*pricing.GetAttributeValuesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetAttributeValues"))
	return c.svc.GetAttributeValuesPagesWithContext(ctx, input, fn, opts...)
}

// GetProductsRequest is a passthrough to the underlying GetProductsRequest.
// It will increment the count of requests made to GetProducts.
func (c *Pricing) GetProductsRequest(input *pricing.GetProductsInput) (req *request.Request, output *pricing.GetProductsOutput) {
	c.inc("GetProducts")
	return c.svc.GetProductsRequest(input)
}

// GetProducts is a passthrough to the underlying GetProducts method.
// It will increment the count of requests made to GetProducts.
func (c *Pricing) GetProducts(input *pricing.GetProductsInput) (*pricing.GetProductsOutput, error) {
	c.inc("GetProducts")
	return c.svc.GetProducts(input)
}

// GetProductsWithContext is a passthrough to the underlying GetProductsWithContext method.
// It will increment the count of requests made to GetProducts.
func (c *Pricing) GetProductsWithContext(ctx aws.Context, input *pricing.GetProductsInput, opts ...request.Option) (*pricing.GetProductsOutput, error) {
	c.inc("GetProducts")
	return c.svc.GetProductsWithContext(ctx, input, opts...)
}

// GetProductsPages is a passthrough to the underlying GetProductsPages method.
// It will increment the count of requests made to GetProducts on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetProductsPagesWithContext to avoid this.
func (c *Pricing) GetProductsPages(input *pricing.GetProductsInput, fn func(*pricing.GetProductsOutput, bool) bool) error {
	wrappedFn := func(page *pricing.GetProductsOutput, lastPage bool) bool {
		c.inc("GetProducts")
		return fn(page, lastPage)
	}
	return c.svc.GetProductsPages(input, wrappedFn)
}

// GetProductsPagesWithContext is a passthrough to the underlying GetProductsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetProducts when applied to the request.
func (c *Pricing) GetProductsPagesWithContext(ctx aws.Context, input *pricing.GetProductsInput, fn func(*pricing.GetProductsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetProducts"))
	return c.svc.GetProductsPagesWithContext(ctx, input, fn, opts...)
}
