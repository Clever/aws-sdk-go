// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package machinelearningcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/machinelearning"
)

// AddTagsRequest is a passthrough to the underlying AddTagsRequest.
// It will increment the count of requests made to AddTags.
func (c *MachineLearning) AddTagsRequest(input *machinelearning.AddTagsInput) (req *request.Request, output *machinelearning.AddTagsOutput) {
	c.inc("AddTags")
	return c.svc.AddTagsRequest(input)
}

// AddTags is a passthrough to the underlying AddTags method.
// It will increment the count of requests made to AddTags.
func (c *MachineLearning) AddTags(input *machinelearning.AddTagsInput) (*machinelearning.AddTagsOutput, error) {
	c.inc("AddTags")
	return c.svc.AddTags(input)
}

// AddTagsWithContext is a passthrough to the underlying AddTagsWithContext method.
// It will increment the count of requests made to AddTags.
func (c *MachineLearning) AddTagsWithContext(ctx aws.Context, input *machinelearning.AddTagsInput, opts ...request.Option) (*machinelearning.AddTagsOutput, error) {
	c.inc("AddTags")
	return c.svc.AddTagsWithContext(ctx, input, opts...)
}

// CreateBatchPredictionRequest is a passthrough to the underlying CreateBatchPredictionRequest.
// It will increment the count of requests made to CreateBatchPrediction.
func (c *MachineLearning) CreateBatchPredictionRequest(input *machinelearning.CreateBatchPredictionInput) (req *request.Request, output *machinelearning.CreateBatchPredictionOutput) {
	c.inc("CreateBatchPrediction")
	return c.svc.CreateBatchPredictionRequest(input)
}

// CreateBatchPrediction is a passthrough to the underlying CreateBatchPrediction method.
// It will increment the count of requests made to CreateBatchPrediction.
func (c *MachineLearning) CreateBatchPrediction(input *machinelearning.CreateBatchPredictionInput) (*machinelearning.CreateBatchPredictionOutput, error) {
	c.inc("CreateBatchPrediction")
	return c.svc.CreateBatchPrediction(input)
}

// CreateBatchPredictionWithContext is a passthrough to the underlying CreateBatchPredictionWithContext method.
// It will increment the count of requests made to CreateBatchPrediction.
func (c *MachineLearning) CreateBatchPredictionWithContext(ctx aws.Context, input *machinelearning.CreateBatchPredictionInput, opts ...request.Option) (*machinelearning.CreateBatchPredictionOutput, error) {
	c.inc("CreateBatchPrediction")
	return c.svc.CreateBatchPredictionWithContext(ctx, input, opts...)
}

// CreateDataSourceFromRDSRequest is a passthrough to the underlying CreateDataSourceFromRDSRequest.
// It will increment the count of requests made to CreateDataSourceFromRDS.
func (c *MachineLearning) CreateDataSourceFromRDSRequest(input *machinelearning.CreateDataSourceFromRDSInput) (req *request.Request, output *machinelearning.CreateDataSourceFromRDSOutput) {
	c.inc("CreateDataSourceFromRDS")
	return c.svc.CreateDataSourceFromRDSRequest(input)
}

// CreateDataSourceFromRDS is a passthrough to the underlying CreateDataSourceFromRDS method.
// It will increment the count of requests made to CreateDataSourceFromRDS.
func (c *MachineLearning) CreateDataSourceFromRDS(input *machinelearning.CreateDataSourceFromRDSInput) (*machinelearning.CreateDataSourceFromRDSOutput, error) {
	c.inc("CreateDataSourceFromRDS")
	return c.svc.CreateDataSourceFromRDS(input)
}

// CreateDataSourceFromRDSWithContext is a passthrough to the underlying CreateDataSourceFromRDSWithContext method.
// It will increment the count of requests made to CreateDataSourceFromRDS.
func (c *MachineLearning) CreateDataSourceFromRDSWithContext(ctx aws.Context, input *machinelearning.CreateDataSourceFromRDSInput, opts ...request.Option) (*machinelearning.CreateDataSourceFromRDSOutput, error) {
	c.inc("CreateDataSourceFromRDS")
	return c.svc.CreateDataSourceFromRDSWithContext(ctx, input, opts...)
}

// CreateDataSourceFromRedshiftRequest is a passthrough to the underlying CreateDataSourceFromRedshiftRequest.
// It will increment the count of requests made to CreateDataSourceFromRedshift.
func (c *MachineLearning) CreateDataSourceFromRedshiftRequest(input *machinelearning.CreateDataSourceFromRedshiftInput) (req *request.Request, output *machinelearning.CreateDataSourceFromRedshiftOutput) {
	c.inc("CreateDataSourceFromRedshift")
	return c.svc.CreateDataSourceFromRedshiftRequest(input)
}

// CreateDataSourceFromRedshift is a passthrough to the underlying CreateDataSourceFromRedshift method.
// It will increment the count of requests made to CreateDataSourceFromRedshift.
func (c *MachineLearning) CreateDataSourceFromRedshift(input *machinelearning.CreateDataSourceFromRedshiftInput) (*machinelearning.CreateDataSourceFromRedshiftOutput, error) {
	c.inc("CreateDataSourceFromRedshift")
	return c.svc.CreateDataSourceFromRedshift(input)
}

// CreateDataSourceFromRedshiftWithContext is a passthrough to the underlying CreateDataSourceFromRedshiftWithContext method.
// It will increment the count of requests made to CreateDataSourceFromRedshift.
func (c *MachineLearning) CreateDataSourceFromRedshiftWithContext(ctx aws.Context, input *machinelearning.CreateDataSourceFromRedshiftInput, opts ...request.Option) (*machinelearning.CreateDataSourceFromRedshiftOutput, error) {
	c.inc("CreateDataSourceFromRedshift")
	return c.svc.CreateDataSourceFromRedshiftWithContext(ctx, input, opts...)
}

// CreateDataSourceFromS3Request is a passthrough to the underlying CreateDataSourceFromS3Request.
// It will increment the count of requests made to CreateDataSourceFromS3.
func (c *MachineLearning) CreateDataSourceFromS3Request(input *machinelearning.CreateDataSourceFromS3Input) (req *request.Request, output *machinelearning.CreateDataSourceFromS3Output) {
	c.inc("CreateDataSourceFromS3")
	return c.svc.CreateDataSourceFromS3Request(input)
}

// CreateDataSourceFromS3 is a passthrough to the underlying CreateDataSourceFromS3 method.
// It will increment the count of requests made to CreateDataSourceFromS3.
func (c *MachineLearning) CreateDataSourceFromS3(input *machinelearning.CreateDataSourceFromS3Input) (*machinelearning.CreateDataSourceFromS3Output, error) {
	c.inc("CreateDataSourceFromS3")
	return c.svc.CreateDataSourceFromS3(input)
}

// CreateDataSourceFromS3WithContext is a passthrough to the underlying CreateDataSourceFromS3WithContext method.
// It will increment the count of requests made to CreateDataSourceFromS3.
func (c *MachineLearning) CreateDataSourceFromS3WithContext(ctx aws.Context, input *machinelearning.CreateDataSourceFromS3Input, opts ...request.Option) (*machinelearning.CreateDataSourceFromS3Output, error) {
	c.inc("CreateDataSourceFromS3")
	return c.svc.CreateDataSourceFromS3WithContext(ctx, input, opts...)
}

// CreateEvaluationRequest is a passthrough to the underlying CreateEvaluationRequest.
// It will increment the count of requests made to CreateEvaluation.
func (c *MachineLearning) CreateEvaluationRequest(input *machinelearning.CreateEvaluationInput) (req *request.Request, output *machinelearning.CreateEvaluationOutput) {
	c.inc("CreateEvaluation")
	return c.svc.CreateEvaluationRequest(input)
}

// CreateEvaluation is a passthrough to the underlying CreateEvaluation method.
// It will increment the count of requests made to CreateEvaluation.
func (c *MachineLearning) CreateEvaluation(input *machinelearning.CreateEvaluationInput) (*machinelearning.CreateEvaluationOutput, error) {
	c.inc("CreateEvaluation")
	return c.svc.CreateEvaluation(input)
}

// CreateEvaluationWithContext is a passthrough to the underlying CreateEvaluationWithContext method.
// It will increment the count of requests made to CreateEvaluation.
func (c *MachineLearning) CreateEvaluationWithContext(ctx aws.Context, input *machinelearning.CreateEvaluationInput, opts ...request.Option) (*machinelearning.CreateEvaluationOutput, error) {
	c.inc("CreateEvaluation")
	return c.svc.CreateEvaluationWithContext(ctx, input, opts...)
}

// CreateMLModelRequest is a passthrough to the underlying CreateMLModelRequest.
// It will increment the count of requests made to CreateMLModel.
func (c *MachineLearning) CreateMLModelRequest(input *machinelearning.CreateMLModelInput) (req *request.Request, output *machinelearning.CreateMLModelOutput) {
	c.inc("CreateMLModel")
	return c.svc.CreateMLModelRequest(input)
}

// CreateMLModel is a passthrough to the underlying CreateMLModel method.
// It will increment the count of requests made to CreateMLModel.
func (c *MachineLearning) CreateMLModel(input *machinelearning.CreateMLModelInput) (*machinelearning.CreateMLModelOutput, error) {
	c.inc("CreateMLModel")
	return c.svc.CreateMLModel(input)
}

// CreateMLModelWithContext is a passthrough to the underlying CreateMLModelWithContext method.
// It will increment the count of requests made to CreateMLModel.
func (c *MachineLearning) CreateMLModelWithContext(ctx aws.Context, input *machinelearning.CreateMLModelInput, opts ...request.Option) (*machinelearning.CreateMLModelOutput, error) {
	c.inc("CreateMLModel")
	return c.svc.CreateMLModelWithContext(ctx, input, opts...)
}

// CreateRealtimeEndpointRequest is a passthrough to the underlying CreateRealtimeEndpointRequest.
// It will increment the count of requests made to CreateRealtimeEndpoint.
func (c *MachineLearning) CreateRealtimeEndpointRequest(input *machinelearning.CreateRealtimeEndpointInput) (req *request.Request, output *machinelearning.CreateRealtimeEndpointOutput) {
	c.inc("CreateRealtimeEndpoint")
	return c.svc.CreateRealtimeEndpointRequest(input)
}

// CreateRealtimeEndpoint is a passthrough to the underlying CreateRealtimeEndpoint method.
// It will increment the count of requests made to CreateRealtimeEndpoint.
func (c *MachineLearning) CreateRealtimeEndpoint(input *machinelearning.CreateRealtimeEndpointInput) (*machinelearning.CreateRealtimeEndpointOutput, error) {
	c.inc("CreateRealtimeEndpoint")
	return c.svc.CreateRealtimeEndpoint(input)
}

// CreateRealtimeEndpointWithContext is a passthrough to the underlying CreateRealtimeEndpointWithContext method.
// It will increment the count of requests made to CreateRealtimeEndpoint.
func (c *MachineLearning) CreateRealtimeEndpointWithContext(ctx aws.Context, input *machinelearning.CreateRealtimeEndpointInput, opts ...request.Option) (*machinelearning.CreateRealtimeEndpointOutput, error) {
	c.inc("CreateRealtimeEndpoint")
	return c.svc.CreateRealtimeEndpointWithContext(ctx, input, opts...)
}

// DeleteBatchPredictionRequest is a passthrough to the underlying DeleteBatchPredictionRequest.
// It will increment the count of requests made to DeleteBatchPrediction.
func (c *MachineLearning) DeleteBatchPredictionRequest(input *machinelearning.DeleteBatchPredictionInput) (req *request.Request, output *machinelearning.DeleteBatchPredictionOutput) {
	c.inc("DeleteBatchPrediction")
	return c.svc.DeleteBatchPredictionRequest(input)
}

// DeleteBatchPrediction is a passthrough to the underlying DeleteBatchPrediction method.
// It will increment the count of requests made to DeleteBatchPrediction.
func (c *MachineLearning) DeleteBatchPrediction(input *machinelearning.DeleteBatchPredictionInput) (*machinelearning.DeleteBatchPredictionOutput, error) {
	c.inc("DeleteBatchPrediction")
	return c.svc.DeleteBatchPrediction(input)
}

// DeleteBatchPredictionWithContext is a passthrough to the underlying DeleteBatchPredictionWithContext method.
// It will increment the count of requests made to DeleteBatchPrediction.
func (c *MachineLearning) DeleteBatchPredictionWithContext(ctx aws.Context, input *machinelearning.DeleteBatchPredictionInput, opts ...request.Option) (*machinelearning.DeleteBatchPredictionOutput, error) {
	c.inc("DeleteBatchPrediction")
	return c.svc.DeleteBatchPredictionWithContext(ctx, input, opts...)
}

// DeleteDataSourceRequest is a passthrough to the underlying DeleteDataSourceRequest.
// It will increment the count of requests made to DeleteDataSource.
func (c *MachineLearning) DeleteDataSourceRequest(input *machinelearning.DeleteDataSourceInput) (req *request.Request, output *machinelearning.DeleteDataSourceOutput) {
	c.inc("DeleteDataSource")
	return c.svc.DeleteDataSourceRequest(input)
}

// DeleteDataSource is a passthrough to the underlying DeleteDataSource method.
// It will increment the count of requests made to DeleteDataSource.
func (c *MachineLearning) DeleteDataSource(input *machinelearning.DeleteDataSourceInput) (*machinelearning.DeleteDataSourceOutput, error) {
	c.inc("DeleteDataSource")
	return c.svc.DeleteDataSource(input)
}

// DeleteDataSourceWithContext is a passthrough to the underlying DeleteDataSourceWithContext method.
// It will increment the count of requests made to DeleteDataSource.
func (c *MachineLearning) DeleteDataSourceWithContext(ctx aws.Context, input *machinelearning.DeleteDataSourceInput, opts ...request.Option) (*machinelearning.DeleteDataSourceOutput, error) {
	c.inc("DeleteDataSource")
	return c.svc.DeleteDataSourceWithContext(ctx, input, opts...)
}

// DeleteEvaluationRequest is a passthrough to the underlying DeleteEvaluationRequest.
// It will increment the count of requests made to DeleteEvaluation.
func (c *MachineLearning) DeleteEvaluationRequest(input *machinelearning.DeleteEvaluationInput) (req *request.Request, output *machinelearning.DeleteEvaluationOutput) {
	c.inc("DeleteEvaluation")
	return c.svc.DeleteEvaluationRequest(input)
}

// DeleteEvaluation is a passthrough to the underlying DeleteEvaluation method.
// It will increment the count of requests made to DeleteEvaluation.
func (c *MachineLearning) DeleteEvaluation(input *machinelearning.DeleteEvaluationInput) (*machinelearning.DeleteEvaluationOutput, error) {
	c.inc("DeleteEvaluation")
	return c.svc.DeleteEvaluation(input)
}

// DeleteEvaluationWithContext is a passthrough to the underlying DeleteEvaluationWithContext method.
// It will increment the count of requests made to DeleteEvaluation.
func (c *MachineLearning) DeleteEvaluationWithContext(ctx aws.Context, input *machinelearning.DeleteEvaluationInput, opts ...request.Option) (*machinelearning.DeleteEvaluationOutput, error) {
	c.inc("DeleteEvaluation")
	return c.svc.DeleteEvaluationWithContext(ctx, input, opts...)
}

// DeleteMLModelRequest is a passthrough to the underlying DeleteMLModelRequest.
// It will increment the count of requests made to DeleteMLModel.
func (c *MachineLearning) DeleteMLModelRequest(input *machinelearning.DeleteMLModelInput) (req *request.Request, output *machinelearning.DeleteMLModelOutput) {
	c.inc("DeleteMLModel")
	return c.svc.DeleteMLModelRequest(input)
}

// DeleteMLModel is a passthrough to the underlying DeleteMLModel method.
// It will increment the count of requests made to DeleteMLModel.
func (c *MachineLearning) DeleteMLModel(input *machinelearning.DeleteMLModelInput) (*machinelearning.DeleteMLModelOutput, error) {
	c.inc("DeleteMLModel")
	return c.svc.DeleteMLModel(input)
}

// DeleteMLModelWithContext is a passthrough to the underlying DeleteMLModelWithContext method.
// It will increment the count of requests made to DeleteMLModel.
func (c *MachineLearning) DeleteMLModelWithContext(ctx aws.Context, input *machinelearning.DeleteMLModelInput, opts ...request.Option) (*machinelearning.DeleteMLModelOutput, error) {
	c.inc("DeleteMLModel")
	return c.svc.DeleteMLModelWithContext(ctx, input, opts...)
}

// DeleteRealtimeEndpointRequest is a passthrough to the underlying DeleteRealtimeEndpointRequest.
// It will increment the count of requests made to DeleteRealtimeEndpoint.
func (c *MachineLearning) DeleteRealtimeEndpointRequest(input *machinelearning.DeleteRealtimeEndpointInput) (req *request.Request, output *machinelearning.DeleteRealtimeEndpointOutput) {
	c.inc("DeleteRealtimeEndpoint")
	return c.svc.DeleteRealtimeEndpointRequest(input)
}

// DeleteRealtimeEndpoint is a passthrough to the underlying DeleteRealtimeEndpoint method.
// It will increment the count of requests made to DeleteRealtimeEndpoint.
func (c *MachineLearning) DeleteRealtimeEndpoint(input *machinelearning.DeleteRealtimeEndpointInput) (*machinelearning.DeleteRealtimeEndpointOutput, error) {
	c.inc("DeleteRealtimeEndpoint")
	return c.svc.DeleteRealtimeEndpoint(input)
}

// DeleteRealtimeEndpointWithContext is a passthrough to the underlying DeleteRealtimeEndpointWithContext method.
// It will increment the count of requests made to DeleteRealtimeEndpoint.
func (c *MachineLearning) DeleteRealtimeEndpointWithContext(ctx aws.Context, input *machinelearning.DeleteRealtimeEndpointInput, opts ...request.Option) (*machinelearning.DeleteRealtimeEndpointOutput, error) {
	c.inc("DeleteRealtimeEndpoint")
	return c.svc.DeleteRealtimeEndpointWithContext(ctx, input, opts...)
}

// DeleteTagsRequest is a passthrough to the underlying DeleteTagsRequest.
// It will increment the count of requests made to DeleteTags.
func (c *MachineLearning) DeleteTagsRequest(input *machinelearning.DeleteTagsInput) (req *request.Request, output *machinelearning.DeleteTagsOutput) {
	c.inc("DeleteTags")
	return c.svc.DeleteTagsRequest(input)
}

// DeleteTags is a passthrough to the underlying DeleteTags method.
// It will increment the count of requests made to DeleteTags.
func (c *MachineLearning) DeleteTags(input *machinelearning.DeleteTagsInput) (*machinelearning.DeleteTagsOutput, error) {
	c.inc("DeleteTags")
	return c.svc.DeleteTags(input)
}

// DeleteTagsWithContext is a passthrough to the underlying DeleteTagsWithContext method.
// It will increment the count of requests made to DeleteTags.
func (c *MachineLearning) DeleteTagsWithContext(ctx aws.Context, input *machinelearning.DeleteTagsInput, opts ...request.Option) (*machinelearning.DeleteTagsOutput, error) {
	c.inc("DeleteTags")
	return c.svc.DeleteTagsWithContext(ctx, input, opts...)
}

// DescribeBatchPredictionsRequest is a passthrough to the underlying DescribeBatchPredictionsRequest.
// It will increment the count of requests made to DescribeBatchPredictions.
func (c *MachineLearning) DescribeBatchPredictionsRequest(input *machinelearning.DescribeBatchPredictionsInput) (req *request.Request, output *machinelearning.DescribeBatchPredictionsOutput) {
	c.inc("DescribeBatchPredictions")
	return c.svc.DescribeBatchPredictionsRequest(input)
}

// DescribeBatchPredictions is a passthrough to the underlying DescribeBatchPredictions method.
// It will increment the count of requests made to DescribeBatchPredictions.
func (c *MachineLearning) DescribeBatchPredictions(input *machinelearning.DescribeBatchPredictionsInput) (*machinelearning.DescribeBatchPredictionsOutput, error) {
	c.inc("DescribeBatchPredictions")
	return c.svc.DescribeBatchPredictions(input)
}

// DescribeBatchPredictionsWithContext is a passthrough to the underlying DescribeBatchPredictionsWithContext method.
// It will increment the count of requests made to DescribeBatchPredictions.
func (c *MachineLearning) DescribeBatchPredictionsWithContext(ctx aws.Context, input *machinelearning.DescribeBatchPredictionsInput, opts ...request.Option) (*machinelearning.DescribeBatchPredictionsOutput, error) {
	c.inc("DescribeBatchPredictions")
	return c.svc.DescribeBatchPredictionsWithContext(ctx, input, opts...)
}

// DescribeBatchPredictionsPages is a passthrough to the underlying DescribeBatchPredictionsPages method.
// It will increment the count of requests made to DescribeBatchPredictions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeBatchPredictionsPagesWithContext to avoid this.
func (c *MachineLearning) DescribeBatchPredictionsPages(input *machinelearning.DescribeBatchPredictionsInput, fn func(*machinelearning.DescribeBatchPredictionsOutput, bool) bool) error {
	wrappedFn := func(page *machinelearning.DescribeBatchPredictionsOutput, lastPage bool) bool {
		c.inc("DescribeBatchPredictions")
		return fn(page, lastPage)
	}
	return c.svc.DescribeBatchPredictionsPages(input, wrappedFn)
}

// DescribeBatchPredictionsPagesWithContext is a passthrough to the underlying DescribeBatchPredictionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeBatchPredictions when applied to the request.
func (c *MachineLearning) DescribeBatchPredictionsPagesWithContext(ctx aws.Context, input *machinelearning.DescribeBatchPredictionsInput, fn func(*machinelearning.DescribeBatchPredictionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeBatchPredictions"))
	return c.svc.DescribeBatchPredictionsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeDataSourcesRequest is a passthrough to the underlying DescribeDataSourcesRequest.
// It will increment the count of requests made to DescribeDataSources.
func (c *MachineLearning) DescribeDataSourcesRequest(input *machinelearning.DescribeDataSourcesInput) (req *request.Request, output *machinelearning.DescribeDataSourcesOutput) {
	c.inc("DescribeDataSources")
	return c.svc.DescribeDataSourcesRequest(input)
}

// DescribeDataSources is a passthrough to the underlying DescribeDataSources method.
// It will increment the count of requests made to DescribeDataSources.
func (c *MachineLearning) DescribeDataSources(input *machinelearning.DescribeDataSourcesInput) (*machinelearning.DescribeDataSourcesOutput, error) {
	c.inc("DescribeDataSources")
	return c.svc.DescribeDataSources(input)
}

// DescribeDataSourcesWithContext is a passthrough to the underlying DescribeDataSourcesWithContext method.
// It will increment the count of requests made to DescribeDataSources.
func (c *MachineLearning) DescribeDataSourcesWithContext(ctx aws.Context, input *machinelearning.DescribeDataSourcesInput, opts ...request.Option) (*machinelearning.DescribeDataSourcesOutput, error) {
	c.inc("DescribeDataSources")
	return c.svc.DescribeDataSourcesWithContext(ctx, input, opts...)
}

// DescribeDataSourcesPages is a passthrough to the underlying DescribeDataSourcesPages method.
// It will increment the count of requests made to DescribeDataSources on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeDataSourcesPagesWithContext to avoid this.
func (c *MachineLearning) DescribeDataSourcesPages(input *machinelearning.DescribeDataSourcesInput, fn func(*machinelearning.DescribeDataSourcesOutput, bool) bool) error {
	wrappedFn := func(page *machinelearning.DescribeDataSourcesOutput, lastPage bool) bool {
		c.inc("DescribeDataSources")
		return fn(page, lastPage)
	}
	return c.svc.DescribeDataSourcesPages(input, wrappedFn)
}

// DescribeDataSourcesPagesWithContext is a passthrough to the underlying DescribeDataSourcesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeDataSources when applied to the request.
func (c *MachineLearning) DescribeDataSourcesPagesWithContext(ctx aws.Context, input *machinelearning.DescribeDataSourcesInput, fn func(*machinelearning.DescribeDataSourcesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeDataSources"))
	return c.svc.DescribeDataSourcesPagesWithContext(ctx, input, fn, opts...)
}

// DescribeEvaluationsRequest is a passthrough to the underlying DescribeEvaluationsRequest.
// It will increment the count of requests made to DescribeEvaluations.
func (c *MachineLearning) DescribeEvaluationsRequest(input *machinelearning.DescribeEvaluationsInput) (req *request.Request, output *machinelearning.DescribeEvaluationsOutput) {
	c.inc("DescribeEvaluations")
	return c.svc.DescribeEvaluationsRequest(input)
}

// DescribeEvaluations is a passthrough to the underlying DescribeEvaluations method.
// It will increment the count of requests made to DescribeEvaluations.
func (c *MachineLearning) DescribeEvaluations(input *machinelearning.DescribeEvaluationsInput) (*machinelearning.DescribeEvaluationsOutput, error) {
	c.inc("DescribeEvaluations")
	return c.svc.DescribeEvaluations(input)
}

// DescribeEvaluationsWithContext is a passthrough to the underlying DescribeEvaluationsWithContext method.
// It will increment the count of requests made to DescribeEvaluations.
func (c *MachineLearning) DescribeEvaluationsWithContext(ctx aws.Context, input *machinelearning.DescribeEvaluationsInput, opts ...request.Option) (*machinelearning.DescribeEvaluationsOutput, error) {
	c.inc("DescribeEvaluations")
	return c.svc.DescribeEvaluationsWithContext(ctx, input, opts...)
}

// DescribeEvaluationsPages is a passthrough to the underlying DescribeEvaluationsPages method.
// It will increment the count of requests made to DescribeEvaluations on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeEvaluationsPagesWithContext to avoid this.
func (c *MachineLearning) DescribeEvaluationsPages(input *machinelearning.DescribeEvaluationsInput, fn func(*machinelearning.DescribeEvaluationsOutput, bool) bool) error {
	wrappedFn := func(page *machinelearning.DescribeEvaluationsOutput, lastPage bool) bool {
		c.inc("DescribeEvaluations")
		return fn(page, lastPage)
	}
	return c.svc.DescribeEvaluationsPages(input, wrappedFn)
}

// DescribeEvaluationsPagesWithContext is a passthrough to the underlying DescribeEvaluationsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeEvaluations when applied to the request.
func (c *MachineLearning) DescribeEvaluationsPagesWithContext(ctx aws.Context, input *machinelearning.DescribeEvaluationsInput, fn func(*machinelearning.DescribeEvaluationsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeEvaluations"))
	return c.svc.DescribeEvaluationsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeMLModelsRequest is a passthrough to the underlying DescribeMLModelsRequest.
// It will increment the count of requests made to DescribeMLModels.
func (c *MachineLearning) DescribeMLModelsRequest(input *machinelearning.DescribeMLModelsInput) (req *request.Request, output *machinelearning.DescribeMLModelsOutput) {
	c.inc("DescribeMLModels")
	return c.svc.DescribeMLModelsRequest(input)
}

// DescribeMLModels is a passthrough to the underlying DescribeMLModels method.
// It will increment the count of requests made to DescribeMLModels.
func (c *MachineLearning) DescribeMLModels(input *machinelearning.DescribeMLModelsInput) (*machinelearning.DescribeMLModelsOutput, error) {
	c.inc("DescribeMLModels")
	return c.svc.DescribeMLModels(input)
}

// DescribeMLModelsWithContext is a passthrough to the underlying DescribeMLModelsWithContext method.
// It will increment the count of requests made to DescribeMLModels.
func (c *MachineLearning) DescribeMLModelsWithContext(ctx aws.Context, input *machinelearning.DescribeMLModelsInput, opts ...request.Option) (*machinelearning.DescribeMLModelsOutput, error) {
	c.inc("DescribeMLModels")
	return c.svc.DescribeMLModelsWithContext(ctx, input, opts...)
}

// DescribeMLModelsPages is a passthrough to the underlying DescribeMLModelsPages method.
// It will increment the count of requests made to DescribeMLModels on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeMLModelsPagesWithContext to avoid this.
func (c *MachineLearning) DescribeMLModelsPages(input *machinelearning.DescribeMLModelsInput, fn func(*machinelearning.DescribeMLModelsOutput, bool) bool) error {
	wrappedFn := func(page *machinelearning.DescribeMLModelsOutput, lastPage bool) bool {
		c.inc("DescribeMLModels")
		return fn(page, lastPage)
	}
	return c.svc.DescribeMLModelsPages(input, wrappedFn)
}

// DescribeMLModelsPagesWithContext is a passthrough to the underlying DescribeMLModelsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeMLModels when applied to the request.
func (c *MachineLearning) DescribeMLModelsPagesWithContext(ctx aws.Context, input *machinelearning.DescribeMLModelsInput, fn func(*machinelearning.DescribeMLModelsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeMLModels"))
	return c.svc.DescribeMLModelsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeTagsRequest is a passthrough to the underlying DescribeTagsRequest.
// It will increment the count of requests made to DescribeTags.
func (c *MachineLearning) DescribeTagsRequest(input *machinelearning.DescribeTagsInput) (req *request.Request, output *machinelearning.DescribeTagsOutput) {
	c.inc("DescribeTags")
	return c.svc.DescribeTagsRequest(input)
}

// DescribeTags is a passthrough to the underlying DescribeTags method.
// It will increment the count of requests made to DescribeTags.
func (c *MachineLearning) DescribeTags(input *machinelearning.DescribeTagsInput) (*machinelearning.DescribeTagsOutput, error) {
	c.inc("DescribeTags")
	return c.svc.DescribeTags(input)
}

// DescribeTagsWithContext is a passthrough to the underlying DescribeTagsWithContext method.
// It will increment the count of requests made to DescribeTags.
func (c *MachineLearning) DescribeTagsWithContext(ctx aws.Context, input *machinelearning.DescribeTagsInput, opts ...request.Option) (*machinelearning.DescribeTagsOutput, error) {
	c.inc("DescribeTags")
	return c.svc.DescribeTagsWithContext(ctx, input, opts...)
}

// GetBatchPredictionRequest is a passthrough to the underlying GetBatchPredictionRequest.
// It will increment the count of requests made to GetBatchPrediction.
func (c *MachineLearning) GetBatchPredictionRequest(input *machinelearning.GetBatchPredictionInput) (req *request.Request, output *machinelearning.GetBatchPredictionOutput) {
	c.inc("GetBatchPrediction")
	return c.svc.GetBatchPredictionRequest(input)
}

// GetBatchPrediction is a passthrough to the underlying GetBatchPrediction method.
// It will increment the count of requests made to GetBatchPrediction.
func (c *MachineLearning) GetBatchPrediction(input *machinelearning.GetBatchPredictionInput) (*machinelearning.GetBatchPredictionOutput, error) {
	c.inc("GetBatchPrediction")
	return c.svc.GetBatchPrediction(input)
}

// GetBatchPredictionWithContext is a passthrough to the underlying GetBatchPredictionWithContext method.
// It will increment the count of requests made to GetBatchPrediction.
func (c *MachineLearning) GetBatchPredictionWithContext(ctx aws.Context, input *machinelearning.GetBatchPredictionInput, opts ...request.Option) (*machinelearning.GetBatchPredictionOutput, error) {
	c.inc("GetBatchPrediction")
	return c.svc.GetBatchPredictionWithContext(ctx, input, opts...)
}

// GetDataSourceRequest is a passthrough to the underlying GetDataSourceRequest.
// It will increment the count of requests made to GetDataSource.
func (c *MachineLearning) GetDataSourceRequest(input *machinelearning.GetDataSourceInput) (req *request.Request, output *machinelearning.GetDataSourceOutput) {
	c.inc("GetDataSource")
	return c.svc.GetDataSourceRequest(input)
}

// GetDataSource is a passthrough to the underlying GetDataSource method.
// It will increment the count of requests made to GetDataSource.
func (c *MachineLearning) GetDataSource(input *machinelearning.GetDataSourceInput) (*machinelearning.GetDataSourceOutput, error) {
	c.inc("GetDataSource")
	return c.svc.GetDataSource(input)
}

// GetDataSourceWithContext is a passthrough to the underlying GetDataSourceWithContext method.
// It will increment the count of requests made to GetDataSource.
func (c *MachineLearning) GetDataSourceWithContext(ctx aws.Context, input *machinelearning.GetDataSourceInput, opts ...request.Option) (*machinelearning.GetDataSourceOutput, error) {
	c.inc("GetDataSource")
	return c.svc.GetDataSourceWithContext(ctx, input, opts...)
}

// GetEvaluationRequest is a passthrough to the underlying GetEvaluationRequest.
// It will increment the count of requests made to GetEvaluation.
func (c *MachineLearning) GetEvaluationRequest(input *machinelearning.GetEvaluationInput) (req *request.Request, output *machinelearning.GetEvaluationOutput) {
	c.inc("GetEvaluation")
	return c.svc.GetEvaluationRequest(input)
}

// GetEvaluation is a passthrough to the underlying GetEvaluation method.
// It will increment the count of requests made to GetEvaluation.
func (c *MachineLearning) GetEvaluation(input *machinelearning.GetEvaluationInput) (*machinelearning.GetEvaluationOutput, error) {
	c.inc("GetEvaluation")
	return c.svc.GetEvaluation(input)
}

// GetEvaluationWithContext is a passthrough to the underlying GetEvaluationWithContext method.
// It will increment the count of requests made to GetEvaluation.
func (c *MachineLearning) GetEvaluationWithContext(ctx aws.Context, input *machinelearning.GetEvaluationInput, opts ...request.Option) (*machinelearning.GetEvaluationOutput, error) {
	c.inc("GetEvaluation")
	return c.svc.GetEvaluationWithContext(ctx, input, opts...)
}

// GetMLModelRequest is a passthrough to the underlying GetMLModelRequest.
// It will increment the count of requests made to GetMLModel.
func (c *MachineLearning) GetMLModelRequest(input *machinelearning.GetMLModelInput) (req *request.Request, output *machinelearning.GetMLModelOutput) {
	c.inc("GetMLModel")
	return c.svc.GetMLModelRequest(input)
}

// GetMLModel is a passthrough to the underlying GetMLModel method.
// It will increment the count of requests made to GetMLModel.
func (c *MachineLearning) GetMLModel(input *machinelearning.GetMLModelInput) (*machinelearning.GetMLModelOutput, error) {
	c.inc("GetMLModel")
	return c.svc.GetMLModel(input)
}

// GetMLModelWithContext is a passthrough to the underlying GetMLModelWithContext method.
// It will increment the count of requests made to GetMLModel.
func (c *MachineLearning) GetMLModelWithContext(ctx aws.Context, input *machinelearning.GetMLModelInput, opts ...request.Option) (*machinelearning.GetMLModelOutput, error) {
	c.inc("GetMLModel")
	return c.svc.GetMLModelWithContext(ctx, input, opts...)
}

// PredictRequest is a passthrough to the underlying PredictRequest.
// It will increment the count of requests made to Predict.
func (c *MachineLearning) PredictRequest(input *machinelearning.PredictInput) (req *request.Request, output *machinelearning.PredictOutput) {
	c.inc("Predict")
	return c.svc.PredictRequest(input)
}

// Predict is a passthrough to the underlying Predict method.
// It will increment the count of requests made to Predict.
func (c *MachineLearning) Predict(input *machinelearning.PredictInput) (*machinelearning.PredictOutput, error) {
	c.inc("Predict")
	return c.svc.Predict(input)
}

// PredictWithContext is a passthrough to the underlying PredictWithContext method.
// It will increment the count of requests made to Predict.
func (c *MachineLearning) PredictWithContext(ctx aws.Context, input *machinelearning.PredictInput, opts ...request.Option) (*machinelearning.PredictOutput, error) {
	c.inc("Predict")
	return c.svc.PredictWithContext(ctx, input, opts...)
}

// UpdateBatchPredictionRequest is a passthrough to the underlying UpdateBatchPredictionRequest.
// It will increment the count of requests made to UpdateBatchPrediction.
func (c *MachineLearning) UpdateBatchPredictionRequest(input *machinelearning.UpdateBatchPredictionInput) (req *request.Request, output *machinelearning.UpdateBatchPredictionOutput) {
	c.inc("UpdateBatchPrediction")
	return c.svc.UpdateBatchPredictionRequest(input)
}

// UpdateBatchPrediction is a passthrough to the underlying UpdateBatchPrediction method.
// It will increment the count of requests made to UpdateBatchPrediction.
func (c *MachineLearning) UpdateBatchPrediction(input *machinelearning.UpdateBatchPredictionInput) (*machinelearning.UpdateBatchPredictionOutput, error) {
	c.inc("UpdateBatchPrediction")
	return c.svc.UpdateBatchPrediction(input)
}

// UpdateBatchPredictionWithContext is a passthrough to the underlying UpdateBatchPredictionWithContext method.
// It will increment the count of requests made to UpdateBatchPrediction.
func (c *MachineLearning) UpdateBatchPredictionWithContext(ctx aws.Context, input *machinelearning.UpdateBatchPredictionInput, opts ...request.Option) (*machinelearning.UpdateBatchPredictionOutput, error) {
	c.inc("UpdateBatchPrediction")
	return c.svc.UpdateBatchPredictionWithContext(ctx, input, opts...)
}

// UpdateDataSourceRequest is a passthrough to the underlying UpdateDataSourceRequest.
// It will increment the count of requests made to UpdateDataSource.
func (c *MachineLearning) UpdateDataSourceRequest(input *machinelearning.UpdateDataSourceInput) (req *request.Request, output *machinelearning.UpdateDataSourceOutput) {
	c.inc("UpdateDataSource")
	return c.svc.UpdateDataSourceRequest(input)
}

// UpdateDataSource is a passthrough to the underlying UpdateDataSource method.
// It will increment the count of requests made to UpdateDataSource.
func (c *MachineLearning) UpdateDataSource(input *machinelearning.UpdateDataSourceInput) (*machinelearning.UpdateDataSourceOutput, error) {
	c.inc("UpdateDataSource")
	return c.svc.UpdateDataSource(input)
}

// UpdateDataSourceWithContext is a passthrough to the underlying UpdateDataSourceWithContext method.
// It will increment the count of requests made to UpdateDataSource.
func (c *MachineLearning) UpdateDataSourceWithContext(ctx aws.Context, input *machinelearning.UpdateDataSourceInput, opts ...request.Option) (*machinelearning.UpdateDataSourceOutput, error) {
	c.inc("UpdateDataSource")
	return c.svc.UpdateDataSourceWithContext(ctx, input, opts...)
}

// UpdateEvaluationRequest is a passthrough to the underlying UpdateEvaluationRequest.
// It will increment the count of requests made to UpdateEvaluation.
func (c *MachineLearning) UpdateEvaluationRequest(input *machinelearning.UpdateEvaluationInput) (req *request.Request, output *machinelearning.UpdateEvaluationOutput) {
	c.inc("UpdateEvaluation")
	return c.svc.UpdateEvaluationRequest(input)
}

// UpdateEvaluation is a passthrough to the underlying UpdateEvaluation method.
// It will increment the count of requests made to UpdateEvaluation.
func (c *MachineLearning) UpdateEvaluation(input *machinelearning.UpdateEvaluationInput) (*machinelearning.UpdateEvaluationOutput, error) {
	c.inc("UpdateEvaluation")
	return c.svc.UpdateEvaluation(input)
}

// UpdateEvaluationWithContext is a passthrough to the underlying UpdateEvaluationWithContext method.
// It will increment the count of requests made to UpdateEvaluation.
func (c *MachineLearning) UpdateEvaluationWithContext(ctx aws.Context, input *machinelearning.UpdateEvaluationInput, opts ...request.Option) (*machinelearning.UpdateEvaluationOutput, error) {
	c.inc("UpdateEvaluation")
	return c.svc.UpdateEvaluationWithContext(ctx, input, opts...)
}

// UpdateMLModelRequest is a passthrough to the underlying UpdateMLModelRequest.
// It will increment the count of requests made to UpdateMLModel.
func (c *MachineLearning) UpdateMLModelRequest(input *machinelearning.UpdateMLModelInput) (req *request.Request, output *machinelearning.UpdateMLModelOutput) {
	c.inc("UpdateMLModel")
	return c.svc.UpdateMLModelRequest(input)
}

// UpdateMLModel is a passthrough to the underlying UpdateMLModel method.
// It will increment the count of requests made to UpdateMLModel.
func (c *MachineLearning) UpdateMLModel(input *machinelearning.UpdateMLModelInput) (*machinelearning.UpdateMLModelOutput, error) {
	c.inc("UpdateMLModel")
	return c.svc.UpdateMLModel(input)
}

// UpdateMLModelWithContext is a passthrough to the underlying UpdateMLModelWithContext method.
// It will increment the count of requests made to UpdateMLModel.
func (c *MachineLearning) UpdateMLModelWithContext(ctx aws.Context, input *machinelearning.UpdateMLModelInput, opts ...request.Option) (*machinelearning.UpdateMLModelOutput, error) {
	c.inc("UpdateMLModel")
	return c.svc.UpdateMLModelWithContext(ctx, input, opts...)
}
