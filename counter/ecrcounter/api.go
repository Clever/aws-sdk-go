// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecrcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ecr"
)

// BatchCheckLayerAvailabilityRequest is a passthrough to the underlying BatchCheckLayerAvailabilityRequest.
// It will increment the count of requests made to BatchCheckLayerAvailability.
func (c *ECR) BatchCheckLayerAvailabilityRequest(input *ecr.BatchCheckLayerAvailabilityInput) (req *request.Request, output *ecr.BatchCheckLayerAvailabilityOutput) {
	c.inc("BatchCheckLayerAvailability")
	return c.svc.BatchCheckLayerAvailabilityRequest(input)
}

// BatchCheckLayerAvailability is a passthrough to the underlying BatchCheckLayerAvailability method.
// It will increment the count of requests made to BatchCheckLayerAvailability.
func (c *ECR) BatchCheckLayerAvailability(input *ecr.BatchCheckLayerAvailabilityInput) (*ecr.BatchCheckLayerAvailabilityOutput, error) {
	c.inc("BatchCheckLayerAvailability")
	return c.svc.BatchCheckLayerAvailability(input)
}

// BatchCheckLayerAvailabilityWithContext is a passthrough to the underlying BatchCheckLayerAvailabilityWithContext method.
// It will increment the count of requests made to BatchCheckLayerAvailability.
func (c *ECR) BatchCheckLayerAvailabilityWithContext(ctx aws.Context, input *ecr.BatchCheckLayerAvailabilityInput, opts ...request.Option) (*ecr.BatchCheckLayerAvailabilityOutput, error) {
	c.inc("BatchCheckLayerAvailability")
	return c.svc.BatchCheckLayerAvailabilityWithContext(ctx, input, opts...)
}

// BatchDeleteImageRequest is a passthrough to the underlying BatchDeleteImageRequest.
// It will increment the count of requests made to BatchDeleteImage.
func (c *ECR) BatchDeleteImageRequest(input *ecr.BatchDeleteImageInput) (req *request.Request, output *ecr.BatchDeleteImageOutput) {
	c.inc("BatchDeleteImage")
	return c.svc.BatchDeleteImageRequest(input)
}

// BatchDeleteImage is a passthrough to the underlying BatchDeleteImage method.
// It will increment the count of requests made to BatchDeleteImage.
func (c *ECR) BatchDeleteImage(input *ecr.BatchDeleteImageInput) (*ecr.BatchDeleteImageOutput, error) {
	c.inc("BatchDeleteImage")
	return c.svc.BatchDeleteImage(input)
}

// BatchDeleteImageWithContext is a passthrough to the underlying BatchDeleteImageWithContext method.
// It will increment the count of requests made to BatchDeleteImage.
func (c *ECR) BatchDeleteImageWithContext(ctx aws.Context, input *ecr.BatchDeleteImageInput, opts ...request.Option) (*ecr.BatchDeleteImageOutput, error) {
	c.inc("BatchDeleteImage")
	return c.svc.BatchDeleteImageWithContext(ctx, input, opts...)
}

// BatchGetImageRequest is a passthrough to the underlying BatchGetImageRequest.
// It will increment the count of requests made to BatchGetImage.
func (c *ECR) BatchGetImageRequest(input *ecr.BatchGetImageInput) (req *request.Request, output *ecr.BatchGetImageOutput) {
	c.inc("BatchGetImage")
	return c.svc.BatchGetImageRequest(input)
}

// BatchGetImage is a passthrough to the underlying BatchGetImage method.
// It will increment the count of requests made to BatchGetImage.
func (c *ECR) BatchGetImage(input *ecr.BatchGetImageInput) (*ecr.BatchGetImageOutput, error) {
	c.inc("BatchGetImage")
	return c.svc.BatchGetImage(input)
}

// BatchGetImageWithContext is a passthrough to the underlying BatchGetImageWithContext method.
// It will increment the count of requests made to BatchGetImage.
func (c *ECR) BatchGetImageWithContext(ctx aws.Context, input *ecr.BatchGetImageInput, opts ...request.Option) (*ecr.BatchGetImageOutput, error) {
	c.inc("BatchGetImage")
	return c.svc.BatchGetImageWithContext(ctx, input, opts...)
}

// CompleteLayerUploadRequest is a passthrough to the underlying CompleteLayerUploadRequest.
// It will increment the count of requests made to CompleteLayerUpload.
func (c *ECR) CompleteLayerUploadRequest(input *ecr.CompleteLayerUploadInput) (req *request.Request, output *ecr.CompleteLayerUploadOutput) {
	c.inc("CompleteLayerUpload")
	return c.svc.CompleteLayerUploadRequest(input)
}

// CompleteLayerUpload is a passthrough to the underlying CompleteLayerUpload method.
// It will increment the count of requests made to CompleteLayerUpload.
func (c *ECR) CompleteLayerUpload(input *ecr.CompleteLayerUploadInput) (*ecr.CompleteLayerUploadOutput, error) {
	c.inc("CompleteLayerUpload")
	return c.svc.CompleteLayerUpload(input)
}

// CompleteLayerUploadWithContext is a passthrough to the underlying CompleteLayerUploadWithContext method.
// It will increment the count of requests made to CompleteLayerUpload.
func (c *ECR) CompleteLayerUploadWithContext(ctx aws.Context, input *ecr.CompleteLayerUploadInput, opts ...request.Option) (*ecr.CompleteLayerUploadOutput, error) {
	c.inc("CompleteLayerUpload")
	return c.svc.CompleteLayerUploadWithContext(ctx, input, opts...)
}

// CreateRepositoryRequest is a passthrough to the underlying CreateRepositoryRequest.
// It will increment the count of requests made to CreateRepository.
func (c *ECR) CreateRepositoryRequest(input *ecr.CreateRepositoryInput) (req *request.Request, output *ecr.CreateRepositoryOutput) {
	c.inc("CreateRepository")
	return c.svc.CreateRepositoryRequest(input)
}

// CreateRepository is a passthrough to the underlying CreateRepository method.
// It will increment the count of requests made to CreateRepository.
func (c *ECR) CreateRepository(input *ecr.CreateRepositoryInput) (*ecr.CreateRepositoryOutput, error) {
	c.inc("CreateRepository")
	return c.svc.CreateRepository(input)
}

// CreateRepositoryWithContext is a passthrough to the underlying CreateRepositoryWithContext method.
// It will increment the count of requests made to CreateRepository.
func (c *ECR) CreateRepositoryWithContext(ctx aws.Context, input *ecr.CreateRepositoryInput, opts ...request.Option) (*ecr.CreateRepositoryOutput, error) {
	c.inc("CreateRepository")
	return c.svc.CreateRepositoryWithContext(ctx, input, opts...)
}

// DeleteLifecyclePolicyRequest is a passthrough to the underlying DeleteLifecyclePolicyRequest.
// It will increment the count of requests made to DeleteLifecyclePolicy.
func (c *ECR) DeleteLifecyclePolicyRequest(input *ecr.DeleteLifecyclePolicyInput) (req *request.Request, output *ecr.DeleteLifecyclePolicyOutput) {
	c.inc("DeleteLifecyclePolicy")
	return c.svc.DeleteLifecyclePolicyRequest(input)
}

// DeleteLifecyclePolicy is a passthrough to the underlying DeleteLifecyclePolicy method.
// It will increment the count of requests made to DeleteLifecyclePolicy.
func (c *ECR) DeleteLifecyclePolicy(input *ecr.DeleteLifecyclePolicyInput) (*ecr.DeleteLifecyclePolicyOutput, error) {
	c.inc("DeleteLifecyclePolicy")
	return c.svc.DeleteLifecyclePolicy(input)
}

// DeleteLifecyclePolicyWithContext is a passthrough to the underlying DeleteLifecyclePolicyWithContext method.
// It will increment the count of requests made to DeleteLifecyclePolicy.
func (c *ECR) DeleteLifecyclePolicyWithContext(ctx aws.Context, input *ecr.DeleteLifecyclePolicyInput, opts ...request.Option) (*ecr.DeleteLifecyclePolicyOutput, error) {
	c.inc("DeleteLifecyclePolicy")
	return c.svc.DeleteLifecyclePolicyWithContext(ctx, input, opts...)
}

// DeleteRepositoryRequest is a passthrough to the underlying DeleteRepositoryRequest.
// It will increment the count of requests made to DeleteRepository.
func (c *ECR) DeleteRepositoryRequest(input *ecr.DeleteRepositoryInput) (req *request.Request, output *ecr.DeleteRepositoryOutput) {
	c.inc("DeleteRepository")
	return c.svc.DeleteRepositoryRequest(input)
}

// DeleteRepository is a passthrough to the underlying DeleteRepository method.
// It will increment the count of requests made to DeleteRepository.
func (c *ECR) DeleteRepository(input *ecr.DeleteRepositoryInput) (*ecr.DeleteRepositoryOutput, error) {
	c.inc("DeleteRepository")
	return c.svc.DeleteRepository(input)
}

// DeleteRepositoryWithContext is a passthrough to the underlying DeleteRepositoryWithContext method.
// It will increment the count of requests made to DeleteRepository.
func (c *ECR) DeleteRepositoryWithContext(ctx aws.Context, input *ecr.DeleteRepositoryInput, opts ...request.Option) (*ecr.DeleteRepositoryOutput, error) {
	c.inc("DeleteRepository")
	return c.svc.DeleteRepositoryWithContext(ctx, input, opts...)
}

// DeleteRepositoryPolicyRequest is a passthrough to the underlying DeleteRepositoryPolicyRequest.
// It will increment the count of requests made to DeleteRepositoryPolicy.
func (c *ECR) DeleteRepositoryPolicyRequest(input *ecr.DeleteRepositoryPolicyInput) (req *request.Request, output *ecr.DeleteRepositoryPolicyOutput) {
	c.inc("DeleteRepositoryPolicy")
	return c.svc.DeleteRepositoryPolicyRequest(input)
}

// DeleteRepositoryPolicy is a passthrough to the underlying DeleteRepositoryPolicy method.
// It will increment the count of requests made to DeleteRepositoryPolicy.
func (c *ECR) DeleteRepositoryPolicy(input *ecr.DeleteRepositoryPolicyInput) (*ecr.DeleteRepositoryPolicyOutput, error) {
	c.inc("DeleteRepositoryPolicy")
	return c.svc.DeleteRepositoryPolicy(input)
}

// DeleteRepositoryPolicyWithContext is a passthrough to the underlying DeleteRepositoryPolicyWithContext method.
// It will increment the count of requests made to DeleteRepositoryPolicy.
func (c *ECR) DeleteRepositoryPolicyWithContext(ctx aws.Context, input *ecr.DeleteRepositoryPolicyInput, opts ...request.Option) (*ecr.DeleteRepositoryPolicyOutput, error) {
	c.inc("DeleteRepositoryPolicy")
	return c.svc.DeleteRepositoryPolicyWithContext(ctx, input, opts...)
}

// DescribeImagesRequest is a passthrough to the underlying DescribeImagesRequest.
// It will increment the count of requests made to DescribeImages.
func (c *ECR) DescribeImagesRequest(input *ecr.DescribeImagesInput) (req *request.Request, output *ecr.DescribeImagesOutput) {
	c.inc("DescribeImages")
	return c.svc.DescribeImagesRequest(input)
}

// DescribeImages is a passthrough to the underlying DescribeImages method.
// It will increment the count of requests made to DescribeImages.
func (c *ECR) DescribeImages(input *ecr.DescribeImagesInput) (*ecr.DescribeImagesOutput, error) {
	c.inc("DescribeImages")
	return c.svc.DescribeImages(input)
}

// DescribeImagesWithContext is a passthrough to the underlying DescribeImagesWithContext method.
// It will increment the count of requests made to DescribeImages.
func (c *ECR) DescribeImagesWithContext(ctx aws.Context, input *ecr.DescribeImagesInput, opts ...request.Option) (*ecr.DescribeImagesOutput, error) {
	c.inc("DescribeImages")
	return c.svc.DescribeImagesWithContext(ctx, input, opts...)
}

// DescribeImagesPages is a passthrough to the underlying DescribeImagesPages method.
// It will increment the count of requests made to DescribeImages on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeImagesPagesWithContext to avoid this.
func (c *ECR) DescribeImagesPages(input *ecr.DescribeImagesInput, fn func(*ecr.DescribeImagesOutput, bool) bool) error {
	wrappedFn := func(page *ecr.DescribeImagesOutput, lastPage bool) bool {
		c.inc("DescribeImages")
		return fn(page, lastPage)
	}
	return c.DescribeImagesPages(input, wrappedFn)
}

// DescribeImagesPagesWithContext is a passthrough to the underlying DescribeImagesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeImages when applied to the request.
func (c *ECR) DescribeImagesPagesWithContext(ctx aws.Context, input *ecr.DescribeImagesInput, fn func(*ecr.DescribeImagesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeImages"))
	return c.DescribeImagesPagesWithContext(ctx, input, fn, opts...)
}

// DescribeRepositoriesRequest is a passthrough to the underlying DescribeRepositoriesRequest.
// It will increment the count of requests made to DescribeRepositories.
func (c *ECR) DescribeRepositoriesRequest(input *ecr.DescribeRepositoriesInput) (req *request.Request, output *ecr.DescribeRepositoriesOutput) {
	c.inc("DescribeRepositories")
	return c.svc.DescribeRepositoriesRequest(input)
}

// DescribeRepositories is a passthrough to the underlying DescribeRepositories method.
// It will increment the count of requests made to DescribeRepositories.
func (c *ECR) DescribeRepositories(input *ecr.DescribeRepositoriesInput) (*ecr.DescribeRepositoriesOutput, error) {
	c.inc("DescribeRepositories")
	return c.svc.DescribeRepositories(input)
}

// DescribeRepositoriesWithContext is a passthrough to the underlying DescribeRepositoriesWithContext method.
// It will increment the count of requests made to DescribeRepositories.
func (c *ECR) DescribeRepositoriesWithContext(ctx aws.Context, input *ecr.DescribeRepositoriesInput, opts ...request.Option) (*ecr.DescribeRepositoriesOutput, error) {
	c.inc("DescribeRepositories")
	return c.svc.DescribeRepositoriesWithContext(ctx, input, opts...)
}

// DescribeRepositoriesPages is a passthrough to the underlying DescribeRepositoriesPages method.
// It will increment the count of requests made to DescribeRepositories on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeRepositoriesPagesWithContext to avoid this.
func (c *ECR) DescribeRepositoriesPages(input *ecr.DescribeRepositoriesInput, fn func(*ecr.DescribeRepositoriesOutput, bool) bool) error {
	wrappedFn := func(page *ecr.DescribeRepositoriesOutput, lastPage bool) bool {
		c.inc("DescribeRepositories")
		return fn(page, lastPage)
	}
	return c.DescribeRepositoriesPages(input, wrappedFn)
}

// DescribeRepositoriesPagesWithContext is a passthrough to the underlying DescribeRepositoriesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeRepositories when applied to the request.
func (c *ECR) DescribeRepositoriesPagesWithContext(ctx aws.Context, input *ecr.DescribeRepositoriesInput, fn func(*ecr.DescribeRepositoriesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeRepositories"))
	return c.DescribeRepositoriesPagesWithContext(ctx, input, fn, opts...)
}

// GetAuthorizationTokenRequest is a passthrough to the underlying GetAuthorizationTokenRequest.
// It will increment the count of requests made to GetAuthorizationToken.
func (c *ECR) GetAuthorizationTokenRequest(input *ecr.GetAuthorizationTokenInput) (req *request.Request, output *ecr.GetAuthorizationTokenOutput) {
	c.inc("GetAuthorizationToken")
	return c.svc.GetAuthorizationTokenRequest(input)
}

// GetAuthorizationToken is a passthrough to the underlying GetAuthorizationToken method.
// It will increment the count of requests made to GetAuthorizationToken.
func (c *ECR) GetAuthorizationToken(input *ecr.GetAuthorizationTokenInput) (*ecr.GetAuthorizationTokenOutput, error) {
	c.inc("GetAuthorizationToken")
	return c.svc.GetAuthorizationToken(input)
}

// GetAuthorizationTokenWithContext is a passthrough to the underlying GetAuthorizationTokenWithContext method.
// It will increment the count of requests made to GetAuthorizationToken.
func (c *ECR) GetAuthorizationTokenWithContext(ctx aws.Context, input *ecr.GetAuthorizationTokenInput, opts ...request.Option) (*ecr.GetAuthorizationTokenOutput, error) {
	c.inc("GetAuthorizationToken")
	return c.svc.GetAuthorizationTokenWithContext(ctx, input, opts...)
}

// GetDownloadUrlForLayerRequest is a passthrough to the underlying GetDownloadUrlForLayerRequest.
// It will increment the count of requests made to GetDownloadUrlForLayer.
func (c *ECR) GetDownloadUrlForLayerRequest(input *ecr.GetDownloadUrlForLayerInput) (req *request.Request, output *ecr.GetDownloadUrlForLayerOutput) {
	c.inc("GetDownloadUrlForLayer")
	return c.svc.GetDownloadUrlForLayerRequest(input)
}

// GetDownloadUrlForLayer is a passthrough to the underlying GetDownloadUrlForLayer method.
// It will increment the count of requests made to GetDownloadUrlForLayer.
func (c *ECR) GetDownloadUrlForLayer(input *ecr.GetDownloadUrlForLayerInput) (*ecr.GetDownloadUrlForLayerOutput, error) {
	c.inc("GetDownloadUrlForLayer")
	return c.svc.GetDownloadUrlForLayer(input)
}

// GetDownloadUrlForLayerWithContext is a passthrough to the underlying GetDownloadUrlForLayerWithContext method.
// It will increment the count of requests made to GetDownloadUrlForLayer.
func (c *ECR) GetDownloadUrlForLayerWithContext(ctx aws.Context, input *ecr.GetDownloadUrlForLayerInput, opts ...request.Option) (*ecr.GetDownloadUrlForLayerOutput, error) {
	c.inc("GetDownloadUrlForLayer")
	return c.svc.GetDownloadUrlForLayerWithContext(ctx, input, opts...)
}

// GetLifecyclePolicyRequest is a passthrough to the underlying GetLifecyclePolicyRequest.
// It will increment the count of requests made to GetLifecyclePolicy.
func (c *ECR) GetLifecyclePolicyRequest(input *ecr.GetLifecyclePolicyInput) (req *request.Request, output *ecr.GetLifecyclePolicyOutput) {
	c.inc("GetLifecyclePolicy")
	return c.svc.GetLifecyclePolicyRequest(input)
}

// GetLifecyclePolicy is a passthrough to the underlying GetLifecyclePolicy method.
// It will increment the count of requests made to GetLifecyclePolicy.
func (c *ECR) GetLifecyclePolicy(input *ecr.GetLifecyclePolicyInput) (*ecr.GetLifecyclePolicyOutput, error) {
	c.inc("GetLifecyclePolicy")
	return c.svc.GetLifecyclePolicy(input)
}

// GetLifecyclePolicyWithContext is a passthrough to the underlying GetLifecyclePolicyWithContext method.
// It will increment the count of requests made to GetLifecyclePolicy.
func (c *ECR) GetLifecyclePolicyWithContext(ctx aws.Context, input *ecr.GetLifecyclePolicyInput, opts ...request.Option) (*ecr.GetLifecyclePolicyOutput, error) {
	c.inc("GetLifecyclePolicy")
	return c.svc.GetLifecyclePolicyWithContext(ctx, input, opts...)
}

// GetLifecyclePolicyPreviewRequest is a passthrough to the underlying GetLifecyclePolicyPreviewRequest.
// It will increment the count of requests made to GetLifecyclePolicyPreview.
func (c *ECR) GetLifecyclePolicyPreviewRequest(input *ecr.GetLifecyclePolicyPreviewInput) (req *request.Request, output *ecr.GetLifecyclePolicyPreviewOutput) {
	c.inc("GetLifecyclePolicyPreview")
	return c.svc.GetLifecyclePolicyPreviewRequest(input)
}

// GetLifecyclePolicyPreview is a passthrough to the underlying GetLifecyclePolicyPreview method.
// It will increment the count of requests made to GetLifecyclePolicyPreview.
func (c *ECR) GetLifecyclePolicyPreview(input *ecr.GetLifecyclePolicyPreviewInput) (*ecr.GetLifecyclePolicyPreviewOutput, error) {
	c.inc("GetLifecyclePolicyPreview")
	return c.svc.GetLifecyclePolicyPreview(input)
}

// GetLifecyclePolicyPreviewWithContext is a passthrough to the underlying GetLifecyclePolicyPreviewWithContext method.
// It will increment the count of requests made to GetLifecyclePolicyPreview.
func (c *ECR) GetLifecyclePolicyPreviewWithContext(ctx aws.Context, input *ecr.GetLifecyclePolicyPreviewInput, opts ...request.Option) (*ecr.GetLifecyclePolicyPreviewOutput, error) {
	c.inc("GetLifecyclePolicyPreview")
	return c.svc.GetLifecyclePolicyPreviewWithContext(ctx, input, opts...)
}

// GetRepositoryPolicyRequest is a passthrough to the underlying GetRepositoryPolicyRequest.
// It will increment the count of requests made to GetRepositoryPolicy.
func (c *ECR) GetRepositoryPolicyRequest(input *ecr.GetRepositoryPolicyInput) (req *request.Request, output *ecr.GetRepositoryPolicyOutput) {
	c.inc("GetRepositoryPolicy")
	return c.svc.GetRepositoryPolicyRequest(input)
}

// GetRepositoryPolicy is a passthrough to the underlying GetRepositoryPolicy method.
// It will increment the count of requests made to GetRepositoryPolicy.
func (c *ECR) GetRepositoryPolicy(input *ecr.GetRepositoryPolicyInput) (*ecr.GetRepositoryPolicyOutput, error) {
	c.inc("GetRepositoryPolicy")
	return c.svc.GetRepositoryPolicy(input)
}

// GetRepositoryPolicyWithContext is a passthrough to the underlying GetRepositoryPolicyWithContext method.
// It will increment the count of requests made to GetRepositoryPolicy.
func (c *ECR) GetRepositoryPolicyWithContext(ctx aws.Context, input *ecr.GetRepositoryPolicyInput, opts ...request.Option) (*ecr.GetRepositoryPolicyOutput, error) {
	c.inc("GetRepositoryPolicy")
	return c.svc.GetRepositoryPolicyWithContext(ctx, input, opts...)
}

// InitiateLayerUploadRequest is a passthrough to the underlying InitiateLayerUploadRequest.
// It will increment the count of requests made to InitiateLayerUpload.
func (c *ECR) InitiateLayerUploadRequest(input *ecr.InitiateLayerUploadInput) (req *request.Request, output *ecr.InitiateLayerUploadOutput) {
	c.inc("InitiateLayerUpload")
	return c.svc.InitiateLayerUploadRequest(input)
}

// InitiateLayerUpload is a passthrough to the underlying InitiateLayerUpload method.
// It will increment the count of requests made to InitiateLayerUpload.
func (c *ECR) InitiateLayerUpload(input *ecr.InitiateLayerUploadInput) (*ecr.InitiateLayerUploadOutput, error) {
	c.inc("InitiateLayerUpload")
	return c.svc.InitiateLayerUpload(input)
}

// InitiateLayerUploadWithContext is a passthrough to the underlying InitiateLayerUploadWithContext method.
// It will increment the count of requests made to InitiateLayerUpload.
func (c *ECR) InitiateLayerUploadWithContext(ctx aws.Context, input *ecr.InitiateLayerUploadInput, opts ...request.Option) (*ecr.InitiateLayerUploadOutput, error) {
	c.inc("InitiateLayerUpload")
	return c.svc.InitiateLayerUploadWithContext(ctx, input, opts...)
}

// ListImagesRequest is a passthrough to the underlying ListImagesRequest.
// It will increment the count of requests made to ListImages.
func (c *ECR) ListImagesRequest(input *ecr.ListImagesInput) (req *request.Request, output *ecr.ListImagesOutput) {
	c.inc("ListImages")
	return c.svc.ListImagesRequest(input)
}

// ListImages is a passthrough to the underlying ListImages method.
// It will increment the count of requests made to ListImages.
func (c *ECR) ListImages(input *ecr.ListImagesInput) (*ecr.ListImagesOutput, error) {
	c.inc("ListImages")
	return c.svc.ListImages(input)
}

// ListImagesWithContext is a passthrough to the underlying ListImagesWithContext method.
// It will increment the count of requests made to ListImages.
func (c *ECR) ListImagesWithContext(ctx aws.Context, input *ecr.ListImagesInput, opts ...request.Option) (*ecr.ListImagesOutput, error) {
	c.inc("ListImages")
	return c.svc.ListImagesWithContext(ctx, input, opts...)
}

// ListImagesPages is a passthrough to the underlying ListImagesPages method.
// It will increment the count of requests made to ListImages on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListImagesPagesWithContext to avoid this.
func (c *ECR) ListImagesPages(input *ecr.ListImagesInput, fn func(*ecr.ListImagesOutput, bool) bool) error {
	wrappedFn := func(page *ecr.ListImagesOutput, lastPage bool) bool {
		c.inc("ListImages")
		return fn(page, lastPage)
	}
	return c.ListImagesPages(input, wrappedFn)
}

// ListImagesPagesWithContext is a passthrough to the underlying ListImagesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListImages when applied to the request.
func (c *ECR) ListImagesPagesWithContext(ctx aws.Context, input *ecr.ListImagesInput, fn func(*ecr.ListImagesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListImages"))
	return c.ListImagesPagesWithContext(ctx, input, fn, opts...)
}

// PutImageRequest is a passthrough to the underlying PutImageRequest.
// It will increment the count of requests made to PutImage.
func (c *ECR) PutImageRequest(input *ecr.PutImageInput) (req *request.Request, output *ecr.PutImageOutput) {
	c.inc("PutImage")
	return c.svc.PutImageRequest(input)
}

// PutImage is a passthrough to the underlying PutImage method.
// It will increment the count of requests made to PutImage.
func (c *ECR) PutImage(input *ecr.PutImageInput) (*ecr.PutImageOutput, error) {
	c.inc("PutImage")
	return c.svc.PutImage(input)
}

// PutImageWithContext is a passthrough to the underlying PutImageWithContext method.
// It will increment the count of requests made to PutImage.
func (c *ECR) PutImageWithContext(ctx aws.Context, input *ecr.PutImageInput, opts ...request.Option) (*ecr.PutImageOutput, error) {
	c.inc("PutImage")
	return c.svc.PutImageWithContext(ctx, input, opts...)
}

// PutLifecyclePolicyRequest is a passthrough to the underlying PutLifecyclePolicyRequest.
// It will increment the count of requests made to PutLifecyclePolicy.
func (c *ECR) PutLifecyclePolicyRequest(input *ecr.PutLifecyclePolicyInput) (req *request.Request, output *ecr.PutLifecyclePolicyOutput) {
	c.inc("PutLifecyclePolicy")
	return c.svc.PutLifecyclePolicyRequest(input)
}

// PutLifecyclePolicy is a passthrough to the underlying PutLifecyclePolicy method.
// It will increment the count of requests made to PutLifecyclePolicy.
func (c *ECR) PutLifecyclePolicy(input *ecr.PutLifecyclePolicyInput) (*ecr.PutLifecyclePolicyOutput, error) {
	c.inc("PutLifecyclePolicy")
	return c.svc.PutLifecyclePolicy(input)
}

// PutLifecyclePolicyWithContext is a passthrough to the underlying PutLifecyclePolicyWithContext method.
// It will increment the count of requests made to PutLifecyclePolicy.
func (c *ECR) PutLifecyclePolicyWithContext(ctx aws.Context, input *ecr.PutLifecyclePolicyInput, opts ...request.Option) (*ecr.PutLifecyclePolicyOutput, error) {
	c.inc("PutLifecyclePolicy")
	return c.svc.PutLifecyclePolicyWithContext(ctx, input, opts...)
}

// SetRepositoryPolicyRequest is a passthrough to the underlying SetRepositoryPolicyRequest.
// It will increment the count of requests made to SetRepositoryPolicy.
func (c *ECR) SetRepositoryPolicyRequest(input *ecr.SetRepositoryPolicyInput) (req *request.Request, output *ecr.SetRepositoryPolicyOutput) {
	c.inc("SetRepositoryPolicy")
	return c.svc.SetRepositoryPolicyRequest(input)
}

// SetRepositoryPolicy is a passthrough to the underlying SetRepositoryPolicy method.
// It will increment the count of requests made to SetRepositoryPolicy.
func (c *ECR) SetRepositoryPolicy(input *ecr.SetRepositoryPolicyInput) (*ecr.SetRepositoryPolicyOutput, error) {
	c.inc("SetRepositoryPolicy")
	return c.svc.SetRepositoryPolicy(input)
}

// SetRepositoryPolicyWithContext is a passthrough to the underlying SetRepositoryPolicyWithContext method.
// It will increment the count of requests made to SetRepositoryPolicy.
func (c *ECR) SetRepositoryPolicyWithContext(ctx aws.Context, input *ecr.SetRepositoryPolicyInput, opts ...request.Option) (*ecr.SetRepositoryPolicyOutput, error) {
	c.inc("SetRepositoryPolicy")
	return c.svc.SetRepositoryPolicyWithContext(ctx, input, opts...)
}

// StartLifecyclePolicyPreviewRequest is a passthrough to the underlying StartLifecyclePolicyPreviewRequest.
// It will increment the count of requests made to StartLifecyclePolicyPreview.
func (c *ECR) StartLifecyclePolicyPreviewRequest(input *ecr.StartLifecyclePolicyPreviewInput) (req *request.Request, output *ecr.StartLifecyclePolicyPreviewOutput) {
	c.inc("StartLifecyclePolicyPreview")
	return c.svc.StartLifecyclePolicyPreviewRequest(input)
}

// StartLifecyclePolicyPreview is a passthrough to the underlying StartLifecyclePolicyPreview method.
// It will increment the count of requests made to StartLifecyclePolicyPreview.
func (c *ECR) StartLifecyclePolicyPreview(input *ecr.StartLifecyclePolicyPreviewInput) (*ecr.StartLifecyclePolicyPreviewOutput, error) {
	c.inc("StartLifecyclePolicyPreview")
	return c.svc.StartLifecyclePolicyPreview(input)
}

// StartLifecyclePolicyPreviewWithContext is a passthrough to the underlying StartLifecyclePolicyPreviewWithContext method.
// It will increment the count of requests made to StartLifecyclePolicyPreview.
func (c *ECR) StartLifecyclePolicyPreviewWithContext(ctx aws.Context, input *ecr.StartLifecyclePolicyPreviewInput, opts ...request.Option) (*ecr.StartLifecyclePolicyPreviewOutput, error) {
	c.inc("StartLifecyclePolicyPreview")
	return c.svc.StartLifecyclePolicyPreviewWithContext(ctx, input, opts...)
}

// UploadLayerPartRequest is a passthrough to the underlying UploadLayerPartRequest.
// It will increment the count of requests made to UploadLayerPart.
func (c *ECR) UploadLayerPartRequest(input *ecr.UploadLayerPartInput) (req *request.Request, output *ecr.UploadLayerPartOutput) {
	c.inc("UploadLayerPart")
	return c.svc.UploadLayerPartRequest(input)
}

// UploadLayerPart is a passthrough to the underlying UploadLayerPart method.
// It will increment the count of requests made to UploadLayerPart.
func (c *ECR) UploadLayerPart(input *ecr.UploadLayerPartInput) (*ecr.UploadLayerPartOutput, error) {
	c.inc("UploadLayerPart")
	return c.svc.UploadLayerPart(input)
}

// UploadLayerPartWithContext is a passthrough to the underlying UploadLayerPartWithContext method.
// It will increment the count of requests made to UploadLayerPart.
func (c *ECR) UploadLayerPartWithContext(ctx aws.Context, input *ecr.UploadLayerPartInput, opts ...request.Option) (*ecr.UploadLayerPartOutput, error) {
	c.inc("UploadLayerPart")
	return c.svc.UploadLayerPartWithContext(ctx, input, opts...)
}
