// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package gluecounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/glue"
)

// BatchCreatePartitionRequest is a passthrough to the underlying BatchCreatePartitionRequest.
// It will increment the count of requests made to BatchCreatePartition.
func (c *Glue) BatchCreatePartitionRequest(input *glue.BatchCreatePartitionInput) (req *request.Request, output *glue.BatchCreatePartitionOutput) {
	c.inc("BatchCreatePartition")
	return c.svc.BatchCreatePartitionRequest(input)
}

// BatchCreatePartition is a passthrough to the underlying BatchCreatePartition method.
// It will increment the count of requests made to BatchCreatePartition.
func (c *Glue) BatchCreatePartition(input *glue.BatchCreatePartitionInput) (*glue.BatchCreatePartitionOutput, error) {
	c.inc("BatchCreatePartition")
	return c.svc.BatchCreatePartition(input)
}

// BatchCreatePartitionWithContext is a passthrough to the underlying BatchCreatePartitionWithContext method.
// It will increment the count of requests made to BatchCreatePartition.
func (c *Glue) BatchCreatePartitionWithContext(ctx aws.Context, input *glue.BatchCreatePartitionInput, opts ...request.Option) (*glue.BatchCreatePartitionOutput, error) {
	c.inc("BatchCreatePartition")
	return c.svc.BatchCreatePartitionWithContext(ctx, input, opts...)
}

// BatchDeleteConnectionRequest is a passthrough to the underlying BatchDeleteConnectionRequest.
// It will increment the count of requests made to BatchDeleteConnection.
func (c *Glue) BatchDeleteConnectionRequest(input *glue.BatchDeleteConnectionInput) (req *request.Request, output *glue.BatchDeleteConnectionOutput) {
	c.inc("BatchDeleteConnection")
	return c.svc.BatchDeleteConnectionRequest(input)
}

// BatchDeleteConnection is a passthrough to the underlying BatchDeleteConnection method.
// It will increment the count of requests made to BatchDeleteConnection.
func (c *Glue) BatchDeleteConnection(input *glue.BatchDeleteConnectionInput) (*glue.BatchDeleteConnectionOutput, error) {
	c.inc("BatchDeleteConnection")
	return c.svc.BatchDeleteConnection(input)
}

// BatchDeleteConnectionWithContext is a passthrough to the underlying BatchDeleteConnectionWithContext method.
// It will increment the count of requests made to BatchDeleteConnection.
func (c *Glue) BatchDeleteConnectionWithContext(ctx aws.Context, input *glue.BatchDeleteConnectionInput, opts ...request.Option) (*glue.BatchDeleteConnectionOutput, error) {
	c.inc("BatchDeleteConnection")
	return c.svc.BatchDeleteConnectionWithContext(ctx, input, opts...)
}

// BatchDeletePartitionRequest is a passthrough to the underlying BatchDeletePartitionRequest.
// It will increment the count of requests made to BatchDeletePartition.
func (c *Glue) BatchDeletePartitionRequest(input *glue.BatchDeletePartitionInput) (req *request.Request, output *glue.BatchDeletePartitionOutput) {
	c.inc("BatchDeletePartition")
	return c.svc.BatchDeletePartitionRequest(input)
}

// BatchDeletePartition is a passthrough to the underlying BatchDeletePartition method.
// It will increment the count of requests made to BatchDeletePartition.
func (c *Glue) BatchDeletePartition(input *glue.BatchDeletePartitionInput) (*glue.BatchDeletePartitionOutput, error) {
	c.inc("BatchDeletePartition")
	return c.svc.BatchDeletePartition(input)
}

// BatchDeletePartitionWithContext is a passthrough to the underlying BatchDeletePartitionWithContext method.
// It will increment the count of requests made to BatchDeletePartition.
func (c *Glue) BatchDeletePartitionWithContext(ctx aws.Context, input *glue.BatchDeletePartitionInput, opts ...request.Option) (*glue.BatchDeletePartitionOutput, error) {
	c.inc("BatchDeletePartition")
	return c.svc.BatchDeletePartitionWithContext(ctx, input, opts...)
}

// BatchDeleteTableRequest is a passthrough to the underlying BatchDeleteTableRequest.
// It will increment the count of requests made to BatchDeleteTable.
func (c *Glue) BatchDeleteTableRequest(input *glue.BatchDeleteTableInput) (req *request.Request, output *glue.BatchDeleteTableOutput) {
	c.inc("BatchDeleteTable")
	return c.svc.BatchDeleteTableRequest(input)
}

// BatchDeleteTable is a passthrough to the underlying BatchDeleteTable method.
// It will increment the count of requests made to BatchDeleteTable.
func (c *Glue) BatchDeleteTable(input *glue.BatchDeleteTableInput) (*glue.BatchDeleteTableOutput, error) {
	c.inc("BatchDeleteTable")
	return c.svc.BatchDeleteTable(input)
}

// BatchDeleteTableWithContext is a passthrough to the underlying BatchDeleteTableWithContext method.
// It will increment the count of requests made to BatchDeleteTable.
func (c *Glue) BatchDeleteTableWithContext(ctx aws.Context, input *glue.BatchDeleteTableInput, opts ...request.Option) (*glue.BatchDeleteTableOutput, error) {
	c.inc("BatchDeleteTable")
	return c.svc.BatchDeleteTableWithContext(ctx, input, opts...)
}

// BatchDeleteTableVersionRequest is a passthrough to the underlying BatchDeleteTableVersionRequest.
// It will increment the count of requests made to BatchDeleteTableVersion.
func (c *Glue) BatchDeleteTableVersionRequest(input *glue.BatchDeleteTableVersionInput) (req *request.Request, output *glue.BatchDeleteTableVersionOutput) {
	c.inc("BatchDeleteTableVersion")
	return c.svc.BatchDeleteTableVersionRequest(input)
}

// BatchDeleteTableVersion is a passthrough to the underlying BatchDeleteTableVersion method.
// It will increment the count of requests made to BatchDeleteTableVersion.
func (c *Glue) BatchDeleteTableVersion(input *glue.BatchDeleteTableVersionInput) (*glue.BatchDeleteTableVersionOutput, error) {
	c.inc("BatchDeleteTableVersion")
	return c.svc.BatchDeleteTableVersion(input)
}

// BatchDeleteTableVersionWithContext is a passthrough to the underlying BatchDeleteTableVersionWithContext method.
// It will increment the count of requests made to BatchDeleteTableVersion.
func (c *Glue) BatchDeleteTableVersionWithContext(ctx aws.Context, input *glue.BatchDeleteTableVersionInput, opts ...request.Option) (*glue.BatchDeleteTableVersionOutput, error) {
	c.inc("BatchDeleteTableVersion")
	return c.svc.BatchDeleteTableVersionWithContext(ctx, input, opts...)
}

// BatchGetPartitionRequest is a passthrough to the underlying BatchGetPartitionRequest.
// It will increment the count of requests made to BatchGetPartition.
func (c *Glue) BatchGetPartitionRequest(input *glue.BatchGetPartitionInput) (req *request.Request, output *glue.BatchGetPartitionOutput) {
	c.inc("BatchGetPartition")
	return c.svc.BatchGetPartitionRequest(input)
}

// BatchGetPartition is a passthrough to the underlying BatchGetPartition method.
// It will increment the count of requests made to BatchGetPartition.
func (c *Glue) BatchGetPartition(input *glue.BatchGetPartitionInput) (*glue.BatchGetPartitionOutput, error) {
	c.inc("BatchGetPartition")
	return c.svc.BatchGetPartition(input)
}

// BatchGetPartitionWithContext is a passthrough to the underlying BatchGetPartitionWithContext method.
// It will increment the count of requests made to BatchGetPartition.
func (c *Glue) BatchGetPartitionWithContext(ctx aws.Context, input *glue.BatchGetPartitionInput, opts ...request.Option) (*glue.BatchGetPartitionOutput, error) {
	c.inc("BatchGetPartition")
	return c.svc.BatchGetPartitionWithContext(ctx, input, opts...)
}

// BatchStopJobRunRequest is a passthrough to the underlying BatchStopJobRunRequest.
// It will increment the count of requests made to BatchStopJobRun.
func (c *Glue) BatchStopJobRunRequest(input *glue.BatchStopJobRunInput) (req *request.Request, output *glue.BatchStopJobRunOutput) {
	c.inc("BatchStopJobRun")
	return c.svc.BatchStopJobRunRequest(input)
}

// BatchStopJobRun is a passthrough to the underlying BatchStopJobRun method.
// It will increment the count of requests made to BatchStopJobRun.
func (c *Glue) BatchStopJobRun(input *glue.BatchStopJobRunInput) (*glue.BatchStopJobRunOutput, error) {
	c.inc("BatchStopJobRun")
	return c.svc.BatchStopJobRun(input)
}

// BatchStopJobRunWithContext is a passthrough to the underlying BatchStopJobRunWithContext method.
// It will increment the count of requests made to BatchStopJobRun.
func (c *Glue) BatchStopJobRunWithContext(ctx aws.Context, input *glue.BatchStopJobRunInput, opts ...request.Option) (*glue.BatchStopJobRunOutput, error) {
	c.inc("BatchStopJobRun")
	return c.svc.BatchStopJobRunWithContext(ctx, input, opts...)
}

// CreateClassifierRequest is a passthrough to the underlying CreateClassifierRequest.
// It will increment the count of requests made to CreateClassifier.
func (c *Glue) CreateClassifierRequest(input *glue.CreateClassifierInput) (req *request.Request, output *glue.CreateClassifierOutput) {
	c.inc("CreateClassifier")
	return c.svc.CreateClassifierRequest(input)
}

// CreateClassifier is a passthrough to the underlying CreateClassifier method.
// It will increment the count of requests made to CreateClassifier.
func (c *Glue) CreateClassifier(input *glue.CreateClassifierInput) (*glue.CreateClassifierOutput, error) {
	c.inc("CreateClassifier")
	return c.svc.CreateClassifier(input)
}

// CreateClassifierWithContext is a passthrough to the underlying CreateClassifierWithContext method.
// It will increment the count of requests made to CreateClassifier.
func (c *Glue) CreateClassifierWithContext(ctx aws.Context, input *glue.CreateClassifierInput, opts ...request.Option) (*glue.CreateClassifierOutput, error) {
	c.inc("CreateClassifier")
	return c.svc.CreateClassifierWithContext(ctx, input, opts...)
}

// CreateConnectionRequest is a passthrough to the underlying CreateConnectionRequest.
// It will increment the count of requests made to CreateConnection.
func (c *Glue) CreateConnectionRequest(input *glue.CreateConnectionInput) (req *request.Request, output *glue.CreateConnectionOutput) {
	c.inc("CreateConnection")
	return c.svc.CreateConnectionRequest(input)
}

// CreateConnection is a passthrough to the underlying CreateConnection method.
// It will increment the count of requests made to CreateConnection.
func (c *Glue) CreateConnection(input *glue.CreateConnectionInput) (*glue.CreateConnectionOutput, error) {
	c.inc("CreateConnection")
	return c.svc.CreateConnection(input)
}

// CreateConnectionWithContext is a passthrough to the underlying CreateConnectionWithContext method.
// It will increment the count of requests made to CreateConnection.
func (c *Glue) CreateConnectionWithContext(ctx aws.Context, input *glue.CreateConnectionInput, opts ...request.Option) (*glue.CreateConnectionOutput, error) {
	c.inc("CreateConnection")
	return c.svc.CreateConnectionWithContext(ctx, input, opts...)
}

// CreateCrawlerRequest is a passthrough to the underlying CreateCrawlerRequest.
// It will increment the count of requests made to CreateCrawler.
func (c *Glue) CreateCrawlerRequest(input *glue.CreateCrawlerInput) (req *request.Request, output *glue.CreateCrawlerOutput) {
	c.inc("CreateCrawler")
	return c.svc.CreateCrawlerRequest(input)
}

// CreateCrawler is a passthrough to the underlying CreateCrawler method.
// It will increment the count of requests made to CreateCrawler.
func (c *Glue) CreateCrawler(input *glue.CreateCrawlerInput) (*glue.CreateCrawlerOutput, error) {
	c.inc("CreateCrawler")
	return c.svc.CreateCrawler(input)
}

// CreateCrawlerWithContext is a passthrough to the underlying CreateCrawlerWithContext method.
// It will increment the count of requests made to CreateCrawler.
func (c *Glue) CreateCrawlerWithContext(ctx aws.Context, input *glue.CreateCrawlerInput, opts ...request.Option) (*glue.CreateCrawlerOutput, error) {
	c.inc("CreateCrawler")
	return c.svc.CreateCrawlerWithContext(ctx, input, opts...)
}

// CreateDatabaseRequest is a passthrough to the underlying CreateDatabaseRequest.
// It will increment the count of requests made to CreateDatabase.
func (c *Glue) CreateDatabaseRequest(input *glue.CreateDatabaseInput) (req *request.Request, output *glue.CreateDatabaseOutput) {
	c.inc("CreateDatabase")
	return c.svc.CreateDatabaseRequest(input)
}

// CreateDatabase is a passthrough to the underlying CreateDatabase method.
// It will increment the count of requests made to CreateDatabase.
func (c *Glue) CreateDatabase(input *glue.CreateDatabaseInput) (*glue.CreateDatabaseOutput, error) {
	c.inc("CreateDatabase")
	return c.svc.CreateDatabase(input)
}

// CreateDatabaseWithContext is a passthrough to the underlying CreateDatabaseWithContext method.
// It will increment the count of requests made to CreateDatabase.
func (c *Glue) CreateDatabaseWithContext(ctx aws.Context, input *glue.CreateDatabaseInput, opts ...request.Option) (*glue.CreateDatabaseOutput, error) {
	c.inc("CreateDatabase")
	return c.svc.CreateDatabaseWithContext(ctx, input, opts...)
}

// CreateDevEndpointRequest is a passthrough to the underlying CreateDevEndpointRequest.
// It will increment the count of requests made to CreateDevEndpoint.
func (c *Glue) CreateDevEndpointRequest(input *glue.CreateDevEndpointInput) (req *request.Request, output *glue.CreateDevEndpointOutput) {
	c.inc("CreateDevEndpoint")
	return c.svc.CreateDevEndpointRequest(input)
}

// CreateDevEndpoint is a passthrough to the underlying CreateDevEndpoint method.
// It will increment the count of requests made to CreateDevEndpoint.
func (c *Glue) CreateDevEndpoint(input *glue.CreateDevEndpointInput) (*glue.CreateDevEndpointOutput, error) {
	c.inc("CreateDevEndpoint")
	return c.svc.CreateDevEndpoint(input)
}

// CreateDevEndpointWithContext is a passthrough to the underlying CreateDevEndpointWithContext method.
// It will increment the count of requests made to CreateDevEndpoint.
func (c *Glue) CreateDevEndpointWithContext(ctx aws.Context, input *glue.CreateDevEndpointInput, opts ...request.Option) (*glue.CreateDevEndpointOutput, error) {
	c.inc("CreateDevEndpoint")
	return c.svc.CreateDevEndpointWithContext(ctx, input, opts...)
}

// CreateJobRequest is a passthrough to the underlying CreateJobRequest.
// It will increment the count of requests made to CreateJob.
func (c *Glue) CreateJobRequest(input *glue.CreateJobInput) (req *request.Request, output *glue.CreateJobOutput) {
	c.inc("CreateJob")
	return c.svc.CreateJobRequest(input)
}

// CreateJob is a passthrough to the underlying CreateJob method.
// It will increment the count of requests made to CreateJob.
func (c *Glue) CreateJob(input *glue.CreateJobInput) (*glue.CreateJobOutput, error) {
	c.inc("CreateJob")
	return c.svc.CreateJob(input)
}

// CreateJobWithContext is a passthrough to the underlying CreateJobWithContext method.
// It will increment the count of requests made to CreateJob.
func (c *Glue) CreateJobWithContext(ctx aws.Context, input *glue.CreateJobInput, opts ...request.Option) (*glue.CreateJobOutput, error) {
	c.inc("CreateJob")
	return c.svc.CreateJobWithContext(ctx, input, opts...)
}

// CreatePartitionRequest is a passthrough to the underlying CreatePartitionRequest.
// It will increment the count of requests made to CreatePartition.
func (c *Glue) CreatePartitionRequest(input *glue.CreatePartitionInput) (req *request.Request, output *glue.CreatePartitionOutput) {
	c.inc("CreatePartition")
	return c.svc.CreatePartitionRequest(input)
}

// CreatePartition is a passthrough to the underlying CreatePartition method.
// It will increment the count of requests made to CreatePartition.
func (c *Glue) CreatePartition(input *glue.CreatePartitionInput) (*glue.CreatePartitionOutput, error) {
	c.inc("CreatePartition")
	return c.svc.CreatePartition(input)
}

// CreatePartitionWithContext is a passthrough to the underlying CreatePartitionWithContext method.
// It will increment the count of requests made to CreatePartition.
func (c *Glue) CreatePartitionWithContext(ctx aws.Context, input *glue.CreatePartitionInput, opts ...request.Option) (*glue.CreatePartitionOutput, error) {
	c.inc("CreatePartition")
	return c.svc.CreatePartitionWithContext(ctx, input, opts...)
}

// CreateScriptRequest is a passthrough to the underlying CreateScriptRequest.
// It will increment the count of requests made to CreateScript.
func (c *Glue) CreateScriptRequest(input *glue.CreateScriptInput) (req *request.Request, output *glue.CreateScriptOutput) {
	c.inc("CreateScript")
	return c.svc.CreateScriptRequest(input)
}

// CreateScript is a passthrough to the underlying CreateScript method.
// It will increment the count of requests made to CreateScript.
func (c *Glue) CreateScript(input *glue.CreateScriptInput) (*glue.CreateScriptOutput, error) {
	c.inc("CreateScript")
	return c.svc.CreateScript(input)
}

// CreateScriptWithContext is a passthrough to the underlying CreateScriptWithContext method.
// It will increment the count of requests made to CreateScript.
func (c *Glue) CreateScriptWithContext(ctx aws.Context, input *glue.CreateScriptInput, opts ...request.Option) (*glue.CreateScriptOutput, error) {
	c.inc("CreateScript")
	return c.svc.CreateScriptWithContext(ctx, input, opts...)
}

// CreateTableRequest is a passthrough to the underlying CreateTableRequest.
// It will increment the count of requests made to CreateTable.
func (c *Glue) CreateTableRequest(input *glue.CreateTableInput) (req *request.Request, output *glue.CreateTableOutput) {
	c.inc("CreateTable")
	return c.svc.CreateTableRequest(input)
}

// CreateTable is a passthrough to the underlying CreateTable method.
// It will increment the count of requests made to CreateTable.
func (c *Glue) CreateTable(input *glue.CreateTableInput) (*glue.CreateTableOutput, error) {
	c.inc("CreateTable")
	return c.svc.CreateTable(input)
}

// CreateTableWithContext is a passthrough to the underlying CreateTableWithContext method.
// It will increment the count of requests made to CreateTable.
func (c *Glue) CreateTableWithContext(ctx aws.Context, input *glue.CreateTableInput, opts ...request.Option) (*glue.CreateTableOutput, error) {
	c.inc("CreateTable")
	return c.svc.CreateTableWithContext(ctx, input, opts...)
}

// CreateTriggerRequest is a passthrough to the underlying CreateTriggerRequest.
// It will increment the count of requests made to CreateTrigger.
func (c *Glue) CreateTriggerRequest(input *glue.CreateTriggerInput) (req *request.Request, output *glue.CreateTriggerOutput) {
	c.inc("CreateTrigger")
	return c.svc.CreateTriggerRequest(input)
}

// CreateTrigger is a passthrough to the underlying CreateTrigger method.
// It will increment the count of requests made to CreateTrigger.
func (c *Glue) CreateTrigger(input *glue.CreateTriggerInput) (*glue.CreateTriggerOutput, error) {
	c.inc("CreateTrigger")
	return c.svc.CreateTrigger(input)
}

// CreateTriggerWithContext is a passthrough to the underlying CreateTriggerWithContext method.
// It will increment the count of requests made to CreateTrigger.
func (c *Glue) CreateTriggerWithContext(ctx aws.Context, input *glue.CreateTriggerInput, opts ...request.Option) (*glue.CreateTriggerOutput, error) {
	c.inc("CreateTrigger")
	return c.svc.CreateTriggerWithContext(ctx, input, opts...)
}

// CreateUserDefinedFunctionRequest is a passthrough to the underlying CreateUserDefinedFunctionRequest.
// It will increment the count of requests made to CreateUserDefinedFunction.
func (c *Glue) CreateUserDefinedFunctionRequest(input *glue.CreateUserDefinedFunctionInput) (req *request.Request, output *glue.CreateUserDefinedFunctionOutput) {
	c.inc("CreateUserDefinedFunction")
	return c.svc.CreateUserDefinedFunctionRequest(input)
}

// CreateUserDefinedFunction is a passthrough to the underlying CreateUserDefinedFunction method.
// It will increment the count of requests made to CreateUserDefinedFunction.
func (c *Glue) CreateUserDefinedFunction(input *glue.CreateUserDefinedFunctionInput) (*glue.CreateUserDefinedFunctionOutput, error) {
	c.inc("CreateUserDefinedFunction")
	return c.svc.CreateUserDefinedFunction(input)
}

// CreateUserDefinedFunctionWithContext is a passthrough to the underlying CreateUserDefinedFunctionWithContext method.
// It will increment the count of requests made to CreateUserDefinedFunction.
func (c *Glue) CreateUserDefinedFunctionWithContext(ctx aws.Context, input *glue.CreateUserDefinedFunctionInput, opts ...request.Option) (*glue.CreateUserDefinedFunctionOutput, error) {
	c.inc("CreateUserDefinedFunction")
	return c.svc.CreateUserDefinedFunctionWithContext(ctx, input, opts...)
}

// DeleteClassifierRequest is a passthrough to the underlying DeleteClassifierRequest.
// It will increment the count of requests made to DeleteClassifier.
func (c *Glue) DeleteClassifierRequest(input *glue.DeleteClassifierInput) (req *request.Request, output *glue.DeleteClassifierOutput) {
	c.inc("DeleteClassifier")
	return c.svc.DeleteClassifierRequest(input)
}

// DeleteClassifier is a passthrough to the underlying DeleteClassifier method.
// It will increment the count of requests made to DeleteClassifier.
func (c *Glue) DeleteClassifier(input *glue.DeleteClassifierInput) (*glue.DeleteClassifierOutput, error) {
	c.inc("DeleteClassifier")
	return c.svc.DeleteClassifier(input)
}

// DeleteClassifierWithContext is a passthrough to the underlying DeleteClassifierWithContext method.
// It will increment the count of requests made to DeleteClassifier.
func (c *Glue) DeleteClassifierWithContext(ctx aws.Context, input *glue.DeleteClassifierInput, opts ...request.Option) (*glue.DeleteClassifierOutput, error) {
	c.inc("DeleteClassifier")
	return c.svc.DeleteClassifierWithContext(ctx, input, opts...)
}

// DeleteConnectionRequest is a passthrough to the underlying DeleteConnectionRequest.
// It will increment the count of requests made to DeleteConnection.
func (c *Glue) DeleteConnectionRequest(input *glue.DeleteConnectionInput) (req *request.Request, output *glue.DeleteConnectionOutput) {
	c.inc("DeleteConnection")
	return c.svc.DeleteConnectionRequest(input)
}

// DeleteConnection is a passthrough to the underlying DeleteConnection method.
// It will increment the count of requests made to DeleteConnection.
func (c *Glue) DeleteConnection(input *glue.DeleteConnectionInput) (*glue.DeleteConnectionOutput, error) {
	c.inc("DeleteConnection")
	return c.svc.DeleteConnection(input)
}

// DeleteConnectionWithContext is a passthrough to the underlying DeleteConnectionWithContext method.
// It will increment the count of requests made to DeleteConnection.
func (c *Glue) DeleteConnectionWithContext(ctx aws.Context, input *glue.DeleteConnectionInput, opts ...request.Option) (*glue.DeleteConnectionOutput, error) {
	c.inc("DeleteConnection")
	return c.svc.DeleteConnectionWithContext(ctx, input, opts...)
}

// DeleteCrawlerRequest is a passthrough to the underlying DeleteCrawlerRequest.
// It will increment the count of requests made to DeleteCrawler.
func (c *Glue) DeleteCrawlerRequest(input *glue.DeleteCrawlerInput) (req *request.Request, output *glue.DeleteCrawlerOutput) {
	c.inc("DeleteCrawler")
	return c.svc.DeleteCrawlerRequest(input)
}

// DeleteCrawler is a passthrough to the underlying DeleteCrawler method.
// It will increment the count of requests made to DeleteCrawler.
func (c *Glue) DeleteCrawler(input *glue.DeleteCrawlerInput) (*glue.DeleteCrawlerOutput, error) {
	c.inc("DeleteCrawler")
	return c.svc.DeleteCrawler(input)
}

// DeleteCrawlerWithContext is a passthrough to the underlying DeleteCrawlerWithContext method.
// It will increment the count of requests made to DeleteCrawler.
func (c *Glue) DeleteCrawlerWithContext(ctx aws.Context, input *glue.DeleteCrawlerInput, opts ...request.Option) (*glue.DeleteCrawlerOutput, error) {
	c.inc("DeleteCrawler")
	return c.svc.DeleteCrawlerWithContext(ctx, input, opts...)
}

// DeleteDatabaseRequest is a passthrough to the underlying DeleteDatabaseRequest.
// It will increment the count of requests made to DeleteDatabase.
func (c *Glue) DeleteDatabaseRequest(input *glue.DeleteDatabaseInput) (req *request.Request, output *glue.DeleteDatabaseOutput) {
	c.inc("DeleteDatabase")
	return c.svc.DeleteDatabaseRequest(input)
}

// DeleteDatabase is a passthrough to the underlying DeleteDatabase method.
// It will increment the count of requests made to DeleteDatabase.
func (c *Glue) DeleteDatabase(input *glue.DeleteDatabaseInput) (*glue.DeleteDatabaseOutput, error) {
	c.inc("DeleteDatabase")
	return c.svc.DeleteDatabase(input)
}

// DeleteDatabaseWithContext is a passthrough to the underlying DeleteDatabaseWithContext method.
// It will increment the count of requests made to DeleteDatabase.
func (c *Glue) DeleteDatabaseWithContext(ctx aws.Context, input *glue.DeleteDatabaseInput, opts ...request.Option) (*glue.DeleteDatabaseOutput, error) {
	c.inc("DeleteDatabase")
	return c.svc.DeleteDatabaseWithContext(ctx, input, opts...)
}

// DeleteDevEndpointRequest is a passthrough to the underlying DeleteDevEndpointRequest.
// It will increment the count of requests made to DeleteDevEndpoint.
func (c *Glue) DeleteDevEndpointRequest(input *glue.DeleteDevEndpointInput) (req *request.Request, output *glue.DeleteDevEndpointOutput) {
	c.inc("DeleteDevEndpoint")
	return c.svc.DeleteDevEndpointRequest(input)
}

// DeleteDevEndpoint is a passthrough to the underlying DeleteDevEndpoint method.
// It will increment the count of requests made to DeleteDevEndpoint.
func (c *Glue) DeleteDevEndpoint(input *glue.DeleteDevEndpointInput) (*glue.DeleteDevEndpointOutput, error) {
	c.inc("DeleteDevEndpoint")
	return c.svc.DeleteDevEndpoint(input)
}

// DeleteDevEndpointWithContext is a passthrough to the underlying DeleteDevEndpointWithContext method.
// It will increment the count of requests made to DeleteDevEndpoint.
func (c *Glue) DeleteDevEndpointWithContext(ctx aws.Context, input *glue.DeleteDevEndpointInput, opts ...request.Option) (*glue.DeleteDevEndpointOutput, error) {
	c.inc("DeleteDevEndpoint")
	return c.svc.DeleteDevEndpointWithContext(ctx, input, opts...)
}

// DeleteJobRequest is a passthrough to the underlying DeleteJobRequest.
// It will increment the count of requests made to DeleteJob.
func (c *Glue) DeleteJobRequest(input *glue.DeleteJobInput) (req *request.Request, output *glue.DeleteJobOutput) {
	c.inc("DeleteJob")
	return c.svc.DeleteJobRequest(input)
}

// DeleteJob is a passthrough to the underlying DeleteJob method.
// It will increment the count of requests made to DeleteJob.
func (c *Glue) DeleteJob(input *glue.DeleteJobInput) (*glue.DeleteJobOutput, error) {
	c.inc("DeleteJob")
	return c.svc.DeleteJob(input)
}

// DeleteJobWithContext is a passthrough to the underlying DeleteJobWithContext method.
// It will increment the count of requests made to DeleteJob.
func (c *Glue) DeleteJobWithContext(ctx aws.Context, input *glue.DeleteJobInput, opts ...request.Option) (*glue.DeleteJobOutput, error) {
	c.inc("DeleteJob")
	return c.svc.DeleteJobWithContext(ctx, input, opts...)
}

// DeletePartitionRequest is a passthrough to the underlying DeletePartitionRequest.
// It will increment the count of requests made to DeletePartition.
func (c *Glue) DeletePartitionRequest(input *glue.DeletePartitionInput) (req *request.Request, output *glue.DeletePartitionOutput) {
	c.inc("DeletePartition")
	return c.svc.DeletePartitionRequest(input)
}

// DeletePartition is a passthrough to the underlying DeletePartition method.
// It will increment the count of requests made to DeletePartition.
func (c *Glue) DeletePartition(input *glue.DeletePartitionInput) (*glue.DeletePartitionOutput, error) {
	c.inc("DeletePartition")
	return c.svc.DeletePartition(input)
}

// DeletePartitionWithContext is a passthrough to the underlying DeletePartitionWithContext method.
// It will increment the count of requests made to DeletePartition.
func (c *Glue) DeletePartitionWithContext(ctx aws.Context, input *glue.DeletePartitionInput, opts ...request.Option) (*glue.DeletePartitionOutput, error) {
	c.inc("DeletePartition")
	return c.svc.DeletePartitionWithContext(ctx, input, opts...)
}

// DeleteTableRequest is a passthrough to the underlying DeleteTableRequest.
// It will increment the count of requests made to DeleteTable.
func (c *Glue) DeleteTableRequest(input *glue.DeleteTableInput) (req *request.Request, output *glue.DeleteTableOutput) {
	c.inc("DeleteTable")
	return c.svc.DeleteTableRequest(input)
}

// DeleteTable is a passthrough to the underlying DeleteTable method.
// It will increment the count of requests made to DeleteTable.
func (c *Glue) DeleteTable(input *glue.DeleteTableInput) (*glue.DeleteTableOutput, error) {
	c.inc("DeleteTable")
	return c.svc.DeleteTable(input)
}

// DeleteTableWithContext is a passthrough to the underlying DeleteTableWithContext method.
// It will increment the count of requests made to DeleteTable.
func (c *Glue) DeleteTableWithContext(ctx aws.Context, input *glue.DeleteTableInput, opts ...request.Option) (*glue.DeleteTableOutput, error) {
	c.inc("DeleteTable")
	return c.svc.DeleteTableWithContext(ctx, input, opts...)
}

// DeleteTableVersionRequest is a passthrough to the underlying DeleteTableVersionRequest.
// It will increment the count of requests made to DeleteTableVersion.
func (c *Glue) DeleteTableVersionRequest(input *glue.DeleteTableVersionInput) (req *request.Request, output *glue.DeleteTableVersionOutput) {
	c.inc("DeleteTableVersion")
	return c.svc.DeleteTableVersionRequest(input)
}

// DeleteTableVersion is a passthrough to the underlying DeleteTableVersion method.
// It will increment the count of requests made to DeleteTableVersion.
func (c *Glue) DeleteTableVersion(input *glue.DeleteTableVersionInput) (*glue.DeleteTableVersionOutput, error) {
	c.inc("DeleteTableVersion")
	return c.svc.DeleteTableVersion(input)
}

// DeleteTableVersionWithContext is a passthrough to the underlying DeleteTableVersionWithContext method.
// It will increment the count of requests made to DeleteTableVersion.
func (c *Glue) DeleteTableVersionWithContext(ctx aws.Context, input *glue.DeleteTableVersionInput, opts ...request.Option) (*glue.DeleteTableVersionOutput, error) {
	c.inc("DeleteTableVersion")
	return c.svc.DeleteTableVersionWithContext(ctx, input, opts...)
}

// DeleteTriggerRequest is a passthrough to the underlying DeleteTriggerRequest.
// It will increment the count of requests made to DeleteTrigger.
func (c *Glue) DeleteTriggerRequest(input *glue.DeleteTriggerInput) (req *request.Request, output *glue.DeleteTriggerOutput) {
	c.inc("DeleteTrigger")
	return c.svc.DeleteTriggerRequest(input)
}

// DeleteTrigger is a passthrough to the underlying DeleteTrigger method.
// It will increment the count of requests made to DeleteTrigger.
func (c *Glue) DeleteTrigger(input *glue.DeleteTriggerInput) (*glue.DeleteTriggerOutput, error) {
	c.inc("DeleteTrigger")
	return c.svc.DeleteTrigger(input)
}

// DeleteTriggerWithContext is a passthrough to the underlying DeleteTriggerWithContext method.
// It will increment the count of requests made to DeleteTrigger.
func (c *Glue) DeleteTriggerWithContext(ctx aws.Context, input *glue.DeleteTriggerInput, opts ...request.Option) (*glue.DeleteTriggerOutput, error) {
	c.inc("DeleteTrigger")
	return c.svc.DeleteTriggerWithContext(ctx, input, opts...)
}

// DeleteUserDefinedFunctionRequest is a passthrough to the underlying DeleteUserDefinedFunctionRequest.
// It will increment the count of requests made to DeleteUserDefinedFunction.
func (c *Glue) DeleteUserDefinedFunctionRequest(input *glue.DeleteUserDefinedFunctionInput) (req *request.Request, output *glue.DeleteUserDefinedFunctionOutput) {
	c.inc("DeleteUserDefinedFunction")
	return c.svc.DeleteUserDefinedFunctionRequest(input)
}

// DeleteUserDefinedFunction is a passthrough to the underlying DeleteUserDefinedFunction method.
// It will increment the count of requests made to DeleteUserDefinedFunction.
func (c *Glue) DeleteUserDefinedFunction(input *glue.DeleteUserDefinedFunctionInput) (*glue.DeleteUserDefinedFunctionOutput, error) {
	c.inc("DeleteUserDefinedFunction")
	return c.svc.DeleteUserDefinedFunction(input)
}

// DeleteUserDefinedFunctionWithContext is a passthrough to the underlying DeleteUserDefinedFunctionWithContext method.
// It will increment the count of requests made to DeleteUserDefinedFunction.
func (c *Glue) DeleteUserDefinedFunctionWithContext(ctx aws.Context, input *glue.DeleteUserDefinedFunctionInput, opts ...request.Option) (*glue.DeleteUserDefinedFunctionOutput, error) {
	c.inc("DeleteUserDefinedFunction")
	return c.svc.DeleteUserDefinedFunctionWithContext(ctx, input, opts...)
}

// GetCatalogImportStatusRequest is a passthrough to the underlying GetCatalogImportStatusRequest.
// It will increment the count of requests made to GetCatalogImportStatus.
func (c *Glue) GetCatalogImportStatusRequest(input *glue.GetCatalogImportStatusInput) (req *request.Request, output *glue.GetCatalogImportStatusOutput) {
	c.inc("GetCatalogImportStatus")
	return c.svc.GetCatalogImportStatusRequest(input)
}

// GetCatalogImportStatus is a passthrough to the underlying GetCatalogImportStatus method.
// It will increment the count of requests made to GetCatalogImportStatus.
func (c *Glue) GetCatalogImportStatus(input *glue.GetCatalogImportStatusInput) (*glue.GetCatalogImportStatusOutput, error) {
	c.inc("GetCatalogImportStatus")
	return c.svc.GetCatalogImportStatus(input)
}

// GetCatalogImportStatusWithContext is a passthrough to the underlying GetCatalogImportStatusWithContext method.
// It will increment the count of requests made to GetCatalogImportStatus.
func (c *Glue) GetCatalogImportStatusWithContext(ctx aws.Context, input *glue.GetCatalogImportStatusInput, opts ...request.Option) (*glue.GetCatalogImportStatusOutput, error) {
	c.inc("GetCatalogImportStatus")
	return c.svc.GetCatalogImportStatusWithContext(ctx, input, opts...)
}

// GetClassifierRequest is a passthrough to the underlying GetClassifierRequest.
// It will increment the count of requests made to GetClassifier.
func (c *Glue) GetClassifierRequest(input *glue.GetClassifierInput) (req *request.Request, output *glue.GetClassifierOutput) {
	c.inc("GetClassifier")
	return c.svc.GetClassifierRequest(input)
}

// GetClassifier is a passthrough to the underlying GetClassifier method.
// It will increment the count of requests made to GetClassifier.
func (c *Glue) GetClassifier(input *glue.GetClassifierInput) (*glue.GetClassifierOutput, error) {
	c.inc("GetClassifier")
	return c.svc.GetClassifier(input)
}

// GetClassifierWithContext is a passthrough to the underlying GetClassifierWithContext method.
// It will increment the count of requests made to GetClassifier.
func (c *Glue) GetClassifierWithContext(ctx aws.Context, input *glue.GetClassifierInput, opts ...request.Option) (*glue.GetClassifierOutput, error) {
	c.inc("GetClassifier")
	return c.svc.GetClassifierWithContext(ctx, input, opts...)
}

// GetClassifiersRequest is a passthrough to the underlying GetClassifiersRequest.
// It will increment the count of requests made to GetClassifiers.
func (c *Glue) GetClassifiersRequest(input *glue.GetClassifiersInput) (req *request.Request, output *glue.GetClassifiersOutput) {
	c.inc("GetClassifiers")
	return c.svc.GetClassifiersRequest(input)
}

// GetClassifiers is a passthrough to the underlying GetClassifiers method.
// It will increment the count of requests made to GetClassifiers.
func (c *Glue) GetClassifiers(input *glue.GetClassifiersInput) (*glue.GetClassifiersOutput, error) {
	c.inc("GetClassifiers")
	return c.svc.GetClassifiers(input)
}

// GetClassifiersWithContext is a passthrough to the underlying GetClassifiersWithContext method.
// It will increment the count of requests made to GetClassifiers.
func (c *Glue) GetClassifiersWithContext(ctx aws.Context, input *glue.GetClassifiersInput, opts ...request.Option) (*glue.GetClassifiersOutput, error) {
	c.inc("GetClassifiers")
	return c.svc.GetClassifiersWithContext(ctx, input, opts...)
}

// GetClassifiersPages is a passthrough to the underlying GetClassifiersPages method.
// It will increment the count of requests made to GetClassifiers on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetClassifiersPagesWithContext to avoid this.
func (c *Glue) GetClassifiersPages(input *glue.GetClassifiersInput, fn func(*glue.GetClassifiersOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetClassifiersOutput, lastPage bool) bool {
		c.inc("GetClassifiers")
		return fn(page, lastPage)
	}
	return c.svc.GetClassifiersPages(input, wrappedFn)
}

// GetClassifiersPagesWithContext is a passthrough to the underlying GetClassifiersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetClassifiers when applied to the request.
func (c *Glue) GetClassifiersPagesWithContext(ctx aws.Context, input *glue.GetClassifiersInput, fn func(*glue.GetClassifiersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetClassifiers"))
	return c.svc.GetClassifiersPagesWithContext(ctx, input, fn, opts...)
}

// GetConnectionRequest is a passthrough to the underlying GetConnectionRequest.
// It will increment the count of requests made to GetConnection.
func (c *Glue) GetConnectionRequest(input *glue.GetConnectionInput) (req *request.Request, output *glue.GetConnectionOutput) {
	c.inc("GetConnection")
	return c.svc.GetConnectionRequest(input)
}

// GetConnection is a passthrough to the underlying GetConnection method.
// It will increment the count of requests made to GetConnection.
func (c *Glue) GetConnection(input *glue.GetConnectionInput) (*glue.GetConnectionOutput, error) {
	c.inc("GetConnection")
	return c.svc.GetConnection(input)
}

// GetConnectionWithContext is a passthrough to the underlying GetConnectionWithContext method.
// It will increment the count of requests made to GetConnection.
func (c *Glue) GetConnectionWithContext(ctx aws.Context, input *glue.GetConnectionInput, opts ...request.Option) (*glue.GetConnectionOutput, error) {
	c.inc("GetConnection")
	return c.svc.GetConnectionWithContext(ctx, input, opts...)
}

// GetConnectionsRequest is a passthrough to the underlying GetConnectionsRequest.
// It will increment the count of requests made to GetConnections.
func (c *Glue) GetConnectionsRequest(input *glue.GetConnectionsInput) (req *request.Request, output *glue.GetConnectionsOutput) {
	c.inc("GetConnections")
	return c.svc.GetConnectionsRequest(input)
}

// GetConnections is a passthrough to the underlying GetConnections method.
// It will increment the count of requests made to GetConnections.
func (c *Glue) GetConnections(input *glue.GetConnectionsInput) (*glue.GetConnectionsOutput, error) {
	c.inc("GetConnections")
	return c.svc.GetConnections(input)
}

// GetConnectionsWithContext is a passthrough to the underlying GetConnectionsWithContext method.
// It will increment the count of requests made to GetConnections.
func (c *Glue) GetConnectionsWithContext(ctx aws.Context, input *glue.GetConnectionsInput, opts ...request.Option) (*glue.GetConnectionsOutput, error) {
	c.inc("GetConnections")
	return c.svc.GetConnectionsWithContext(ctx, input, opts...)
}

// GetConnectionsPages is a passthrough to the underlying GetConnectionsPages method.
// It will increment the count of requests made to GetConnections on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetConnectionsPagesWithContext to avoid this.
func (c *Glue) GetConnectionsPages(input *glue.GetConnectionsInput, fn func(*glue.GetConnectionsOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetConnectionsOutput, lastPage bool) bool {
		c.inc("GetConnections")
		return fn(page, lastPage)
	}
	return c.svc.GetConnectionsPages(input, wrappedFn)
}

// GetConnectionsPagesWithContext is a passthrough to the underlying GetConnectionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetConnections when applied to the request.
func (c *Glue) GetConnectionsPagesWithContext(ctx aws.Context, input *glue.GetConnectionsInput, fn func(*glue.GetConnectionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetConnections"))
	return c.svc.GetConnectionsPagesWithContext(ctx, input, fn, opts...)
}

// GetCrawlerRequest is a passthrough to the underlying GetCrawlerRequest.
// It will increment the count of requests made to GetCrawler.
func (c *Glue) GetCrawlerRequest(input *glue.GetCrawlerInput) (req *request.Request, output *glue.GetCrawlerOutput) {
	c.inc("GetCrawler")
	return c.svc.GetCrawlerRequest(input)
}

// GetCrawler is a passthrough to the underlying GetCrawler method.
// It will increment the count of requests made to GetCrawler.
func (c *Glue) GetCrawler(input *glue.GetCrawlerInput) (*glue.GetCrawlerOutput, error) {
	c.inc("GetCrawler")
	return c.svc.GetCrawler(input)
}

// GetCrawlerWithContext is a passthrough to the underlying GetCrawlerWithContext method.
// It will increment the count of requests made to GetCrawler.
func (c *Glue) GetCrawlerWithContext(ctx aws.Context, input *glue.GetCrawlerInput, opts ...request.Option) (*glue.GetCrawlerOutput, error) {
	c.inc("GetCrawler")
	return c.svc.GetCrawlerWithContext(ctx, input, opts...)
}

// GetCrawlerMetricsRequest is a passthrough to the underlying GetCrawlerMetricsRequest.
// It will increment the count of requests made to GetCrawlerMetrics.
func (c *Glue) GetCrawlerMetricsRequest(input *glue.GetCrawlerMetricsInput) (req *request.Request, output *glue.GetCrawlerMetricsOutput) {
	c.inc("GetCrawlerMetrics")
	return c.svc.GetCrawlerMetricsRequest(input)
}

// GetCrawlerMetrics is a passthrough to the underlying GetCrawlerMetrics method.
// It will increment the count of requests made to GetCrawlerMetrics.
func (c *Glue) GetCrawlerMetrics(input *glue.GetCrawlerMetricsInput) (*glue.GetCrawlerMetricsOutput, error) {
	c.inc("GetCrawlerMetrics")
	return c.svc.GetCrawlerMetrics(input)
}

// GetCrawlerMetricsWithContext is a passthrough to the underlying GetCrawlerMetricsWithContext method.
// It will increment the count of requests made to GetCrawlerMetrics.
func (c *Glue) GetCrawlerMetricsWithContext(ctx aws.Context, input *glue.GetCrawlerMetricsInput, opts ...request.Option) (*glue.GetCrawlerMetricsOutput, error) {
	c.inc("GetCrawlerMetrics")
	return c.svc.GetCrawlerMetricsWithContext(ctx, input, opts...)
}

// GetCrawlerMetricsPages is a passthrough to the underlying GetCrawlerMetricsPages method.
// It will increment the count of requests made to GetCrawlerMetrics on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetCrawlerMetricsPagesWithContext to avoid this.
func (c *Glue) GetCrawlerMetricsPages(input *glue.GetCrawlerMetricsInput, fn func(*glue.GetCrawlerMetricsOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetCrawlerMetricsOutput, lastPage bool) bool {
		c.inc("GetCrawlerMetrics")
		return fn(page, lastPage)
	}
	return c.svc.GetCrawlerMetricsPages(input, wrappedFn)
}

// GetCrawlerMetricsPagesWithContext is a passthrough to the underlying GetCrawlerMetricsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetCrawlerMetrics when applied to the request.
func (c *Glue) GetCrawlerMetricsPagesWithContext(ctx aws.Context, input *glue.GetCrawlerMetricsInput, fn func(*glue.GetCrawlerMetricsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetCrawlerMetrics"))
	return c.svc.GetCrawlerMetricsPagesWithContext(ctx, input, fn, opts...)
}

// GetCrawlersRequest is a passthrough to the underlying GetCrawlersRequest.
// It will increment the count of requests made to GetCrawlers.
func (c *Glue) GetCrawlersRequest(input *glue.GetCrawlersInput) (req *request.Request, output *glue.GetCrawlersOutput) {
	c.inc("GetCrawlers")
	return c.svc.GetCrawlersRequest(input)
}

// GetCrawlers is a passthrough to the underlying GetCrawlers method.
// It will increment the count of requests made to GetCrawlers.
func (c *Glue) GetCrawlers(input *glue.GetCrawlersInput) (*glue.GetCrawlersOutput, error) {
	c.inc("GetCrawlers")
	return c.svc.GetCrawlers(input)
}

// GetCrawlersWithContext is a passthrough to the underlying GetCrawlersWithContext method.
// It will increment the count of requests made to GetCrawlers.
func (c *Glue) GetCrawlersWithContext(ctx aws.Context, input *glue.GetCrawlersInput, opts ...request.Option) (*glue.GetCrawlersOutput, error) {
	c.inc("GetCrawlers")
	return c.svc.GetCrawlersWithContext(ctx, input, opts...)
}

// GetCrawlersPages is a passthrough to the underlying GetCrawlersPages method.
// It will increment the count of requests made to GetCrawlers on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetCrawlersPagesWithContext to avoid this.
func (c *Glue) GetCrawlersPages(input *glue.GetCrawlersInput, fn func(*glue.GetCrawlersOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetCrawlersOutput, lastPage bool) bool {
		c.inc("GetCrawlers")
		return fn(page, lastPage)
	}
	return c.svc.GetCrawlersPages(input, wrappedFn)
}

// GetCrawlersPagesWithContext is a passthrough to the underlying GetCrawlersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetCrawlers when applied to the request.
func (c *Glue) GetCrawlersPagesWithContext(ctx aws.Context, input *glue.GetCrawlersInput, fn func(*glue.GetCrawlersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetCrawlers"))
	return c.svc.GetCrawlersPagesWithContext(ctx, input, fn, opts...)
}

// GetDatabaseRequest is a passthrough to the underlying GetDatabaseRequest.
// It will increment the count of requests made to GetDatabase.
func (c *Glue) GetDatabaseRequest(input *glue.GetDatabaseInput) (req *request.Request, output *glue.GetDatabaseOutput) {
	c.inc("GetDatabase")
	return c.svc.GetDatabaseRequest(input)
}

// GetDatabase is a passthrough to the underlying GetDatabase method.
// It will increment the count of requests made to GetDatabase.
func (c *Glue) GetDatabase(input *glue.GetDatabaseInput) (*glue.GetDatabaseOutput, error) {
	c.inc("GetDatabase")
	return c.svc.GetDatabase(input)
}

// GetDatabaseWithContext is a passthrough to the underlying GetDatabaseWithContext method.
// It will increment the count of requests made to GetDatabase.
func (c *Glue) GetDatabaseWithContext(ctx aws.Context, input *glue.GetDatabaseInput, opts ...request.Option) (*glue.GetDatabaseOutput, error) {
	c.inc("GetDatabase")
	return c.svc.GetDatabaseWithContext(ctx, input, opts...)
}

// GetDatabasesRequest is a passthrough to the underlying GetDatabasesRequest.
// It will increment the count of requests made to GetDatabases.
func (c *Glue) GetDatabasesRequest(input *glue.GetDatabasesInput) (req *request.Request, output *glue.GetDatabasesOutput) {
	c.inc("GetDatabases")
	return c.svc.GetDatabasesRequest(input)
}

// GetDatabases is a passthrough to the underlying GetDatabases method.
// It will increment the count of requests made to GetDatabases.
func (c *Glue) GetDatabases(input *glue.GetDatabasesInput) (*glue.GetDatabasesOutput, error) {
	c.inc("GetDatabases")
	return c.svc.GetDatabases(input)
}

// GetDatabasesWithContext is a passthrough to the underlying GetDatabasesWithContext method.
// It will increment the count of requests made to GetDatabases.
func (c *Glue) GetDatabasesWithContext(ctx aws.Context, input *glue.GetDatabasesInput, opts ...request.Option) (*glue.GetDatabasesOutput, error) {
	c.inc("GetDatabases")
	return c.svc.GetDatabasesWithContext(ctx, input, opts...)
}

// GetDatabasesPages is a passthrough to the underlying GetDatabasesPages method.
// It will increment the count of requests made to GetDatabases on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetDatabasesPagesWithContext to avoid this.
func (c *Glue) GetDatabasesPages(input *glue.GetDatabasesInput, fn func(*glue.GetDatabasesOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetDatabasesOutput, lastPage bool) bool {
		c.inc("GetDatabases")
		return fn(page, lastPage)
	}
	return c.svc.GetDatabasesPages(input, wrappedFn)
}

// GetDatabasesPagesWithContext is a passthrough to the underlying GetDatabasesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetDatabases when applied to the request.
func (c *Glue) GetDatabasesPagesWithContext(ctx aws.Context, input *glue.GetDatabasesInput, fn func(*glue.GetDatabasesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetDatabases"))
	return c.svc.GetDatabasesPagesWithContext(ctx, input, fn, opts...)
}

// GetDataflowGraphRequest is a passthrough to the underlying GetDataflowGraphRequest.
// It will increment the count of requests made to GetDataflowGraph.
func (c *Glue) GetDataflowGraphRequest(input *glue.GetDataflowGraphInput) (req *request.Request, output *glue.GetDataflowGraphOutput) {
	c.inc("GetDataflowGraph")
	return c.svc.GetDataflowGraphRequest(input)
}

// GetDataflowGraph is a passthrough to the underlying GetDataflowGraph method.
// It will increment the count of requests made to GetDataflowGraph.
func (c *Glue) GetDataflowGraph(input *glue.GetDataflowGraphInput) (*glue.GetDataflowGraphOutput, error) {
	c.inc("GetDataflowGraph")
	return c.svc.GetDataflowGraph(input)
}

// GetDataflowGraphWithContext is a passthrough to the underlying GetDataflowGraphWithContext method.
// It will increment the count of requests made to GetDataflowGraph.
func (c *Glue) GetDataflowGraphWithContext(ctx aws.Context, input *glue.GetDataflowGraphInput, opts ...request.Option) (*glue.GetDataflowGraphOutput, error) {
	c.inc("GetDataflowGraph")
	return c.svc.GetDataflowGraphWithContext(ctx, input, opts...)
}

// GetDevEndpointRequest is a passthrough to the underlying GetDevEndpointRequest.
// It will increment the count of requests made to GetDevEndpoint.
func (c *Glue) GetDevEndpointRequest(input *glue.GetDevEndpointInput) (req *request.Request, output *glue.GetDevEndpointOutput) {
	c.inc("GetDevEndpoint")
	return c.svc.GetDevEndpointRequest(input)
}

// GetDevEndpoint is a passthrough to the underlying GetDevEndpoint method.
// It will increment the count of requests made to GetDevEndpoint.
func (c *Glue) GetDevEndpoint(input *glue.GetDevEndpointInput) (*glue.GetDevEndpointOutput, error) {
	c.inc("GetDevEndpoint")
	return c.svc.GetDevEndpoint(input)
}

// GetDevEndpointWithContext is a passthrough to the underlying GetDevEndpointWithContext method.
// It will increment the count of requests made to GetDevEndpoint.
func (c *Glue) GetDevEndpointWithContext(ctx aws.Context, input *glue.GetDevEndpointInput, opts ...request.Option) (*glue.GetDevEndpointOutput, error) {
	c.inc("GetDevEndpoint")
	return c.svc.GetDevEndpointWithContext(ctx, input, opts...)
}

// GetDevEndpointsRequest is a passthrough to the underlying GetDevEndpointsRequest.
// It will increment the count of requests made to GetDevEndpoints.
func (c *Glue) GetDevEndpointsRequest(input *glue.GetDevEndpointsInput) (req *request.Request, output *glue.GetDevEndpointsOutput) {
	c.inc("GetDevEndpoints")
	return c.svc.GetDevEndpointsRequest(input)
}

// GetDevEndpoints is a passthrough to the underlying GetDevEndpoints method.
// It will increment the count of requests made to GetDevEndpoints.
func (c *Glue) GetDevEndpoints(input *glue.GetDevEndpointsInput) (*glue.GetDevEndpointsOutput, error) {
	c.inc("GetDevEndpoints")
	return c.svc.GetDevEndpoints(input)
}

// GetDevEndpointsWithContext is a passthrough to the underlying GetDevEndpointsWithContext method.
// It will increment the count of requests made to GetDevEndpoints.
func (c *Glue) GetDevEndpointsWithContext(ctx aws.Context, input *glue.GetDevEndpointsInput, opts ...request.Option) (*glue.GetDevEndpointsOutput, error) {
	c.inc("GetDevEndpoints")
	return c.svc.GetDevEndpointsWithContext(ctx, input, opts...)
}

// GetDevEndpointsPages is a passthrough to the underlying GetDevEndpointsPages method.
// It will increment the count of requests made to GetDevEndpoints on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetDevEndpointsPagesWithContext to avoid this.
func (c *Glue) GetDevEndpointsPages(input *glue.GetDevEndpointsInput, fn func(*glue.GetDevEndpointsOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetDevEndpointsOutput, lastPage bool) bool {
		c.inc("GetDevEndpoints")
		return fn(page, lastPage)
	}
	return c.svc.GetDevEndpointsPages(input, wrappedFn)
}

// GetDevEndpointsPagesWithContext is a passthrough to the underlying GetDevEndpointsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetDevEndpoints when applied to the request.
func (c *Glue) GetDevEndpointsPagesWithContext(ctx aws.Context, input *glue.GetDevEndpointsInput, fn func(*glue.GetDevEndpointsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetDevEndpoints"))
	return c.svc.GetDevEndpointsPagesWithContext(ctx, input, fn, opts...)
}

// GetJobRequest is a passthrough to the underlying GetJobRequest.
// It will increment the count of requests made to GetJob.
func (c *Glue) GetJobRequest(input *glue.GetJobInput) (req *request.Request, output *glue.GetJobOutput) {
	c.inc("GetJob")
	return c.svc.GetJobRequest(input)
}

// GetJob is a passthrough to the underlying GetJob method.
// It will increment the count of requests made to GetJob.
func (c *Glue) GetJob(input *glue.GetJobInput) (*glue.GetJobOutput, error) {
	c.inc("GetJob")
	return c.svc.GetJob(input)
}

// GetJobWithContext is a passthrough to the underlying GetJobWithContext method.
// It will increment the count of requests made to GetJob.
func (c *Glue) GetJobWithContext(ctx aws.Context, input *glue.GetJobInput, opts ...request.Option) (*glue.GetJobOutput, error) {
	c.inc("GetJob")
	return c.svc.GetJobWithContext(ctx, input, opts...)
}

// GetJobRunRequest is a passthrough to the underlying GetJobRunRequest.
// It will increment the count of requests made to GetJobRun.
func (c *Glue) GetJobRunRequest(input *glue.GetJobRunInput) (req *request.Request, output *glue.GetJobRunOutput) {
	c.inc("GetJobRun")
	return c.svc.GetJobRunRequest(input)
}

// GetJobRun is a passthrough to the underlying GetJobRun method.
// It will increment the count of requests made to GetJobRun.
func (c *Glue) GetJobRun(input *glue.GetJobRunInput) (*glue.GetJobRunOutput, error) {
	c.inc("GetJobRun")
	return c.svc.GetJobRun(input)
}

// GetJobRunWithContext is a passthrough to the underlying GetJobRunWithContext method.
// It will increment the count of requests made to GetJobRun.
func (c *Glue) GetJobRunWithContext(ctx aws.Context, input *glue.GetJobRunInput, opts ...request.Option) (*glue.GetJobRunOutput, error) {
	c.inc("GetJobRun")
	return c.svc.GetJobRunWithContext(ctx, input, opts...)
}

// GetJobRunsRequest is a passthrough to the underlying GetJobRunsRequest.
// It will increment the count of requests made to GetJobRuns.
func (c *Glue) GetJobRunsRequest(input *glue.GetJobRunsInput) (req *request.Request, output *glue.GetJobRunsOutput) {
	c.inc("GetJobRuns")
	return c.svc.GetJobRunsRequest(input)
}

// GetJobRuns is a passthrough to the underlying GetJobRuns method.
// It will increment the count of requests made to GetJobRuns.
func (c *Glue) GetJobRuns(input *glue.GetJobRunsInput) (*glue.GetJobRunsOutput, error) {
	c.inc("GetJobRuns")
	return c.svc.GetJobRuns(input)
}

// GetJobRunsWithContext is a passthrough to the underlying GetJobRunsWithContext method.
// It will increment the count of requests made to GetJobRuns.
func (c *Glue) GetJobRunsWithContext(ctx aws.Context, input *glue.GetJobRunsInput, opts ...request.Option) (*glue.GetJobRunsOutput, error) {
	c.inc("GetJobRuns")
	return c.svc.GetJobRunsWithContext(ctx, input, opts...)
}

// GetJobRunsPages is a passthrough to the underlying GetJobRunsPages method.
// It will increment the count of requests made to GetJobRuns on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetJobRunsPagesWithContext to avoid this.
func (c *Glue) GetJobRunsPages(input *glue.GetJobRunsInput, fn func(*glue.GetJobRunsOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetJobRunsOutput, lastPage bool) bool {
		c.inc("GetJobRuns")
		return fn(page, lastPage)
	}
	return c.svc.GetJobRunsPages(input, wrappedFn)
}

// GetJobRunsPagesWithContext is a passthrough to the underlying GetJobRunsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetJobRuns when applied to the request.
func (c *Glue) GetJobRunsPagesWithContext(ctx aws.Context, input *glue.GetJobRunsInput, fn func(*glue.GetJobRunsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetJobRuns"))
	return c.svc.GetJobRunsPagesWithContext(ctx, input, fn, opts...)
}

// GetJobsRequest is a passthrough to the underlying GetJobsRequest.
// It will increment the count of requests made to GetJobs.
func (c *Glue) GetJobsRequest(input *glue.GetJobsInput) (req *request.Request, output *glue.GetJobsOutput) {
	c.inc("GetJobs")
	return c.svc.GetJobsRequest(input)
}

// GetJobs is a passthrough to the underlying GetJobs method.
// It will increment the count of requests made to GetJobs.
func (c *Glue) GetJobs(input *glue.GetJobsInput) (*glue.GetJobsOutput, error) {
	c.inc("GetJobs")
	return c.svc.GetJobs(input)
}

// GetJobsWithContext is a passthrough to the underlying GetJobsWithContext method.
// It will increment the count of requests made to GetJobs.
func (c *Glue) GetJobsWithContext(ctx aws.Context, input *glue.GetJobsInput, opts ...request.Option) (*glue.GetJobsOutput, error) {
	c.inc("GetJobs")
	return c.svc.GetJobsWithContext(ctx, input, opts...)
}

// GetJobsPages is a passthrough to the underlying GetJobsPages method.
// It will increment the count of requests made to GetJobs on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetJobsPagesWithContext to avoid this.
func (c *Glue) GetJobsPages(input *glue.GetJobsInput, fn func(*glue.GetJobsOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetJobsOutput, lastPage bool) bool {
		c.inc("GetJobs")
		return fn(page, lastPage)
	}
	return c.svc.GetJobsPages(input, wrappedFn)
}

// GetJobsPagesWithContext is a passthrough to the underlying GetJobsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetJobs when applied to the request.
func (c *Glue) GetJobsPagesWithContext(ctx aws.Context, input *glue.GetJobsInput, fn func(*glue.GetJobsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetJobs"))
	return c.svc.GetJobsPagesWithContext(ctx, input, fn, opts...)
}

// GetMappingRequest is a passthrough to the underlying GetMappingRequest.
// It will increment the count of requests made to GetMapping.
func (c *Glue) GetMappingRequest(input *glue.GetMappingInput) (req *request.Request, output *glue.GetMappingOutput) {
	c.inc("GetMapping")
	return c.svc.GetMappingRequest(input)
}

// GetMapping is a passthrough to the underlying GetMapping method.
// It will increment the count of requests made to GetMapping.
func (c *Glue) GetMapping(input *glue.GetMappingInput) (*glue.GetMappingOutput, error) {
	c.inc("GetMapping")
	return c.svc.GetMapping(input)
}

// GetMappingWithContext is a passthrough to the underlying GetMappingWithContext method.
// It will increment the count of requests made to GetMapping.
func (c *Glue) GetMappingWithContext(ctx aws.Context, input *glue.GetMappingInput, opts ...request.Option) (*glue.GetMappingOutput, error) {
	c.inc("GetMapping")
	return c.svc.GetMappingWithContext(ctx, input, opts...)
}

// GetPartitionRequest is a passthrough to the underlying GetPartitionRequest.
// It will increment the count of requests made to GetPartition.
func (c *Glue) GetPartitionRequest(input *glue.GetPartitionInput) (req *request.Request, output *glue.GetPartitionOutput) {
	c.inc("GetPartition")
	return c.svc.GetPartitionRequest(input)
}

// GetPartition is a passthrough to the underlying GetPartition method.
// It will increment the count of requests made to GetPartition.
func (c *Glue) GetPartition(input *glue.GetPartitionInput) (*glue.GetPartitionOutput, error) {
	c.inc("GetPartition")
	return c.svc.GetPartition(input)
}

// GetPartitionWithContext is a passthrough to the underlying GetPartitionWithContext method.
// It will increment the count of requests made to GetPartition.
func (c *Glue) GetPartitionWithContext(ctx aws.Context, input *glue.GetPartitionInput, opts ...request.Option) (*glue.GetPartitionOutput, error) {
	c.inc("GetPartition")
	return c.svc.GetPartitionWithContext(ctx, input, opts...)
}

// GetPartitionsRequest is a passthrough to the underlying GetPartitionsRequest.
// It will increment the count of requests made to GetPartitions.
func (c *Glue) GetPartitionsRequest(input *glue.GetPartitionsInput) (req *request.Request, output *glue.GetPartitionsOutput) {
	c.inc("GetPartitions")
	return c.svc.GetPartitionsRequest(input)
}

// GetPartitions is a passthrough to the underlying GetPartitions method.
// It will increment the count of requests made to GetPartitions.
func (c *Glue) GetPartitions(input *glue.GetPartitionsInput) (*glue.GetPartitionsOutput, error) {
	c.inc("GetPartitions")
	return c.svc.GetPartitions(input)
}

// GetPartitionsWithContext is a passthrough to the underlying GetPartitionsWithContext method.
// It will increment the count of requests made to GetPartitions.
func (c *Glue) GetPartitionsWithContext(ctx aws.Context, input *glue.GetPartitionsInput, opts ...request.Option) (*glue.GetPartitionsOutput, error) {
	c.inc("GetPartitions")
	return c.svc.GetPartitionsWithContext(ctx, input, opts...)
}

// GetPartitionsPages is a passthrough to the underlying GetPartitionsPages method.
// It will increment the count of requests made to GetPartitions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetPartitionsPagesWithContext to avoid this.
func (c *Glue) GetPartitionsPages(input *glue.GetPartitionsInput, fn func(*glue.GetPartitionsOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetPartitionsOutput, lastPage bool) bool {
		c.inc("GetPartitions")
		return fn(page, lastPage)
	}
	return c.svc.GetPartitionsPages(input, wrappedFn)
}

// GetPartitionsPagesWithContext is a passthrough to the underlying GetPartitionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetPartitions when applied to the request.
func (c *Glue) GetPartitionsPagesWithContext(ctx aws.Context, input *glue.GetPartitionsInput, fn func(*glue.GetPartitionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetPartitions"))
	return c.svc.GetPartitionsPagesWithContext(ctx, input, fn, opts...)
}

// GetPlanRequest is a passthrough to the underlying GetPlanRequest.
// It will increment the count of requests made to GetPlan.
func (c *Glue) GetPlanRequest(input *glue.GetPlanInput) (req *request.Request, output *glue.GetPlanOutput) {
	c.inc("GetPlan")
	return c.svc.GetPlanRequest(input)
}

// GetPlan is a passthrough to the underlying GetPlan method.
// It will increment the count of requests made to GetPlan.
func (c *Glue) GetPlan(input *glue.GetPlanInput) (*glue.GetPlanOutput, error) {
	c.inc("GetPlan")
	return c.svc.GetPlan(input)
}

// GetPlanWithContext is a passthrough to the underlying GetPlanWithContext method.
// It will increment the count of requests made to GetPlan.
func (c *Glue) GetPlanWithContext(ctx aws.Context, input *glue.GetPlanInput, opts ...request.Option) (*glue.GetPlanOutput, error) {
	c.inc("GetPlan")
	return c.svc.GetPlanWithContext(ctx, input, opts...)
}

// GetTableRequest is a passthrough to the underlying GetTableRequest.
// It will increment the count of requests made to GetTable.
func (c *Glue) GetTableRequest(input *glue.GetTableInput) (req *request.Request, output *glue.GetTableOutput) {
	c.inc("GetTable")
	return c.svc.GetTableRequest(input)
}

// GetTable is a passthrough to the underlying GetTable method.
// It will increment the count of requests made to GetTable.
func (c *Glue) GetTable(input *glue.GetTableInput) (*glue.GetTableOutput, error) {
	c.inc("GetTable")
	return c.svc.GetTable(input)
}

// GetTableWithContext is a passthrough to the underlying GetTableWithContext method.
// It will increment the count of requests made to GetTable.
func (c *Glue) GetTableWithContext(ctx aws.Context, input *glue.GetTableInput, opts ...request.Option) (*glue.GetTableOutput, error) {
	c.inc("GetTable")
	return c.svc.GetTableWithContext(ctx, input, opts...)
}

// GetTableVersionRequest is a passthrough to the underlying GetTableVersionRequest.
// It will increment the count of requests made to GetTableVersion.
func (c *Glue) GetTableVersionRequest(input *glue.GetTableVersionInput) (req *request.Request, output *glue.GetTableVersionOutput) {
	c.inc("GetTableVersion")
	return c.svc.GetTableVersionRequest(input)
}

// GetTableVersion is a passthrough to the underlying GetTableVersion method.
// It will increment the count of requests made to GetTableVersion.
func (c *Glue) GetTableVersion(input *glue.GetTableVersionInput) (*glue.GetTableVersionOutput, error) {
	c.inc("GetTableVersion")
	return c.svc.GetTableVersion(input)
}

// GetTableVersionWithContext is a passthrough to the underlying GetTableVersionWithContext method.
// It will increment the count of requests made to GetTableVersion.
func (c *Glue) GetTableVersionWithContext(ctx aws.Context, input *glue.GetTableVersionInput, opts ...request.Option) (*glue.GetTableVersionOutput, error) {
	c.inc("GetTableVersion")
	return c.svc.GetTableVersionWithContext(ctx, input, opts...)
}

// GetTableVersionsRequest is a passthrough to the underlying GetTableVersionsRequest.
// It will increment the count of requests made to GetTableVersions.
func (c *Glue) GetTableVersionsRequest(input *glue.GetTableVersionsInput) (req *request.Request, output *glue.GetTableVersionsOutput) {
	c.inc("GetTableVersions")
	return c.svc.GetTableVersionsRequest(input)
}

// GetTableVersions is a passthrough to the underlying GetTableVersions method.
// It will increment the count of requests made to GetTableVersions.
func (c *Glue) GetTableVersions(input *glue.GetTableVersionsInput) (*glue.GetTableVersionsOutput, error) {
	c.inc("GetTableVersions")
	return c.svc.GetTableVersions(input)
}

// GetTableVersionsWithContext is a passthrough to the underlying GetTableVersionsWithContext method.
// It will increment the count of requests made to GetTableVersions.
func (c *Glue) GetTableVersionsWithContext(ctx aws.Context, input *glue.GetTableVersionsInput, opts ...request.Option) (*glue.GetTableVersionsOutput, error) {
	c.inc("GetTableVersions")
	return c.svc.GetTableVersionsWithContext(ctx, input, opts...)
}

// GetTableVersionsPages is a passthrough to the underlying GetTableVersionsPages method.
// It will increment the count of requests made to GetTableVersions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetTableVersionsPagesWithContext to avoid this.
func (c *Glue) GetTableVersionsPages(input *glue.GetTableVersionsInput, fn func(*glue.GetTableVersionsOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetTableVersionsOutput, lastPage bool) bool {
		c.inc("GetTableVersions")
		return fn(page, lastPage)
	}
	return c.svc.GetTableVersionsPages(input, wrappedFn)
}

// GetTableVersionsPagesWithContext is a passthrough to the underlying GetTableVersionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetTableVersions when applied to the request.
func (c *Glue) GetTableVersionsPagesWithContext(ctx aws.Context, input *glue.GetTableVersionsInput, fn func(*glue.GetTableVersionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetTableVersions"))
	return c.svc.GetTableVersionsPagesWithContext(ctx, input, fn, opts...)
}

// GetTablesRequest is a passthrough to the underlying GetTablesRequest.
// It will increment the count of requests made to GetTables.
func (c *Glue) GetTablesRequest(input *glue.GetTablesInput) (req *request.Request, output *glue.GetTablesOutput) {
	c.inc("GetTables")
	return c.svc.GetTablesRequest(input)
}

// GetTables is a passthrough to the underlying GetTables method.
// It will increment the count of requests made to GetTables.
func (c *Glue) GetTables(input *glue.GetTablesInput) (*glue.GetTablesOutput, error) {
	c.inc("GetTables")
	return c.svc.GetTables(input)
}

// GetTablesWithContext is a passthrough to the underlying GetTablesWithContext method.
// It will increment the count of requests made to GetTables.
func (c *Glue) GetTablesWithContext(ctx aws.Context, input *glue.GetTablesInput, opts ...request.Option) (*glue.GetTablesOutput, error) {
	c.inc("GetTables")
	return c.svc.GetTablesWithContext(ctx, input, opts...)
}

// GetTablesPages is a passthrough to the underlying GetTablesPages method.
// It will increment the count of requests made to GetTables on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetTablesPagesWithContext to avoid this.
func (c *Glue) GetTablesPages(input *glue.GetTablesInput, fn func(*glue.GetTablesOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetTablesOutput, lastPage bool) bool {
		c.inc("GetTables")
		return fn(page, lastPage)
	}
	return c.svc.GetTablesPages(input, wrappedFn)
}

// GetTablesPagesWithContext is a passthrough to the underlying GetTablesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetTables when applied to the request.
func (c *Glue) GetTablesPagesWithContext(ctx aws.Context, input *glue.GetTablesInput, fn func(*glue.GetTablesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetTables"))
	return c.svc.GetTablesPagesWithContext(ctx, input, fn, opts...)
}

// GetTriggerRequest is a passthrough to the underlying GetTriggerRequest.
// It will increment the count of requests made to GetTrigger.
func (c *Glue) GetTriggerRequest(input *glue.GetTriggerInput) (req *request.Request, output *glue.GetTriggerOutput) {
	c.inc("GetTrigger")
	return c.svc.GetTriggerRequest(input)
}

// GetTrigger is a passthrough to the underlying GetTrigger method.
// It will increment the count of requests made to GetTrigger.
func (c *Glue) GetTrigger(input *glue.GetTriggerInput) (*glue.GetTriggerOutput, error) {
	c.inc("GetTrigger")
	return c.svc.GetTrigger(input)
}

// GetTriggerWithContext is a passthrough to the underlying GetTriggerWithContext method.
// It will increment the count of requests made to GetTrigger.
func (c *Glue) GetTriggerWithContext(ctx aws.Context, input *glue.GetTriggerInput, opts ...request.Option) (*glue.GetTriggerOutput, error) {
	c.inc("GetTrigger")
	return c.svc.GetTriggerWithContext(ctx, input, opts...)
}

// GetTriggersRequest is a passthrough to the underlying GetTriggersRequest.
// It will increment the count of requests made to GetTriggers.
func (c *Glue) GetTriggersRequest(input *glue.GetTriggersInput) (req *request.Request, output *glue.GetTriggersOutput) {
	c.inc("GetTriggers")
	return c.svc.GetTriggersRequest(input)
}

// GetTriggers is a passthrough to the underlying GetTriggers method.
// It will increment the count of requests made to GetTriggers.
func (c *Glue) GetTriggers(input *glue.GetTriggersInput) (*glue.GetTriggersOutput, error) {
	c.inc("GetTriggers")
	return c.svc.GetTriggers(input)
}

// GetTriggersWithContext is a passthrough to the underlying GetTriggersWithContext method.
// It will increment the count of requests made to GetTriggers.
func (c *Glue) GetTriggersWithContext(ctx aws.Context, input *glue.GetTriggersInput, opts ...request.Option) (*glue.GetTriggersOutput, error) {
	c.inc("GetTriggers")
	return c.svc.GetTriggersWithContext(ctx, input, opts...)
}

// GetTriggersPages is a passthrough to the underlying GetTriggersPages method.
// It will increment the count of requests made to GetTriggers on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetTriggersPagesWithContext to avoid this.
func (c *Glue) GetTriggersPages(input *glue.GetTriggersInput, fn func(*glue.GetTriggersOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetTriggersOutput, lastPage bool) bool {
		c.inc("GetTriggers")
		return fn(page, lastPage)
	}
	return c.svc.GetTriggersPages(input, wrappedFn)
}

// GetTriggersPagesWithContext is a passthrough to the underlying GetTriggersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetTriggers when applied to the request.
func (c *Glue) GetTriggersPagesWithContext(ctx aws.Context, input *glue.GetTriggersInput, fn func(*glue.GetTriggersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetTriggers"))
	return c.svc.GetTriggersPagesWithContext(ctx, input, fn, opts...)
}

// GetUserDefinedFunctionRequest is a passthrough to the underlying GetUserDefinedFunctionRequest.
// It will increment the count of requests made to GetUserDefinedFunction.
func (c *Glue) GetUserDefinedFunctionRequest(input *glue.GetUserDefinedFunctionInput) (req *request.Request, output *glue.GetUserDefinedFunctionOutput) {
	c.inc("GetUserDefinedFunction")
	return c.svc.GetUserDefinedFunctionRequest(input)
}

// GetUserDefinedFunction is a passthrough to the underlying GetUserDefinedFunction method.
// It will increment the count of requests made to GetUserDefinedFunction.
func (c *Glue) GetUserDefinedFunction(input *glue.GetUserDefinedFunctionInput) (*glue.GetUserDefinedFunctionOutput, error) {
	c.inc("GetUserDefinedFunction")
	return c.svc.GetUserDefinedFunction(input)
}

// GetUserDefinedFunctionWithContext is a passthrough to the underlying GetUserDefinedFunctionWithContext method.
// It will increment the count of requests made to GetUserDefinedFunction.
func (c *Glue) GetUserDefinedFunctionWithContext(ctx aws.Context, input *glue.GetUserDefinedFunctionInput, opts ...request.Option) (*glue.GetUserDefinedFunctionOutput, error) {
	c.inc("GetUserDefinedFunction")
	return c.svc.GetUserDefinedFunctionWithContext(ctx, input, opts...)
}

// GetUserDefinedFunctionsRequest is a passthrough to the underlying GetUserDefinedFunctionsRequest.
// It will increment the count of requests made to GetUserDefinedFunctions.
func (c *Glue) GetUserDefinedFunctionsRequest(input *glue.GetUserDefinedFunctionsInput) (req *request.Request, output *glue.GetUserDefinedFunctionsOutput) {
	c.inc("GetUserDefinedFunctions")
	return c.svc.GetUserDefinedFunctionsRequest(input)
}

// GetUserDefinedFunctions is a passthrough to the underlying GetUserDefinedFunctions method.
// It will increment the count of requests made to GetUserDefinedFunctions.
func (c *Glue) GetUserDefinedFunctions(input *glue.GetUserDefinedFunctionsInput) (*glue.GetUserDefinedFunctionsOutput, error) {
	c.inc("GetUserDefinedFunctions")
	return c.svc.GetUserDefinedFunctions(input)
}

// GetUserDefinedFunctionsWithContext is a passthrough to the underlying GetUserDefinedFunctionsWithContext method.
// It will increment the count of requests made to GetUserDefinedFunctions.
func (c *Glue) GetUserDefinedFunctionsWithContext(ctx aws.Context, input *glue.GetUserDefinedFunctionsInput, opts ...request.Option) (*glue.GetUserDefinedFunctionsOutput, error) {
	c.inc("GetUserDefinedFunctions")
	return c.svc.GetUserDefinedFunctionsWithContext(ctx, input, opts...)
}

// GetUserDefinedFunctionsPages is a passthrough to the underlying GetUserDefinedFunctionsPages method.
// It will increment the count of requests made to GetUserDefinedFunctions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetUserDefinedFunctionsPagesWithContext to avoid this.
func (c *Glue) GetUserDefinedFunctionsPages(input *glue.GetUserDefinedFunctionsInput, fn func(*glue.GetUserDefinedFunctionsOutput, bool) bool) error {
	wrappedFn := func(page *glue.GetUserDefinedFunctionsOutput, lastPage bool) bool {
		c.inc("GetUserDefinedFunctions")
		return fn(page, lastPage)
	}
	return c.svc.GetUserDefinedFunctionsPages(input, wrappedFn)
}

// GetUserDefinedFunctionsPagesWithContext is a passthrough to the underlying GetUserDefinedFunctionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetUserDefinedFunctions when applied to the request.
func (c *Glue) GetUserDefinedFunctionsPagesWithContext(ctx aws.Context, input *glue.GetUserDefinedFunctionsInput, fn func(*glue.GetUserDefinedFunctionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetUserDefinedFunctions"))
	return c.svc.GetUserDefinedFunctionsPagesWithContext(ctx, input, fn, opts...)
}

// ImportCatalogToGlueRequest is a passthrough to the underlying ImportCatalogToGlueRequest.
// It will increment the count of requests made to ImportCatalogToGlue.
func (c *Glue) ImportCatalogToGlueRequest(input *glue.ImportCatalogToGlueInput) (req *request.Request, output *glue.ImportCatalogToGlueOutput) {
	c.inc("ImportCatalogToGlue")
	return c.svc.ImportCatalogToGlueRequest(input)
}

// ImportCatalogToGlue is a passthrough to the underlying ImportCatalogToGlue method.
// It will increment the count of requests made to ImportCatalogToGlue.
func (c *Glue) ImportCatalogToGlue(input *glue.ImportCatalogToGlueInput) (*glue.ImportCatalogToGlueOutput, error) {
	c.inc("ImportCatalogToGlue")
	return c.svc.ImportCatalogToGlue(input)
}

// ImportCatalogToGlueWithContext is a passthrough to the underlying ImportCatalogToGlueWithContext method.
// It will increment the count of requests made to ImportCatalogToGlue.
func (c *Glue) ImportCatalogToGlueWithContext(ctx aws.Context, input *glue.ImportCatalogToGlueInput, opts ...request.Option) (*glue.ImportCatalogToGlueOutput, error) {
	c.inc("ImportCatalogToGlue")
	return c.svc.ImportCatalogToGlueWithContext(ctx, input, opts...)
}

// ResetJobBookmarkRequest is a passthrough to the underlying ResetJobBookmarkRequest.
// It will increment the count of requests made to ResetJobBookmark.
func (c *Glue) ResetJobBookmarkRequest(input *glue.ResetJobBookmarkInput) (req *request.Request, output *glue.ResetJobBookmarkOutput) {
	c.inc("ResetJobBookmark")
	return c.svc.ResetJobBookmarkRequest(input)
}

// ResetJobBookmark is a passthrough to the underlying ResetJobBookmark method.
// It will increment the count of requests made to ResetJobBookmark.
func (c *Glue) ResetJobBookmark(input *glue.ResetJobBookmarkInput) (*glue.ResetJobBookmarkOutput, error) {
	c.inc("ResetJobBookmark")
	return c.svc.ResetJobBookmark(input)
}

// ResetJobBookmarkWithContext is a passthrough to the underlying ResetJobBookmarkWithContext method.
// It will increment the count of requests made to ResetJobBookmark.
func (c *Glue) ResetJobBookmarkWithContext(ctx aws.Context, input *glue.ResetJobBookmarkInput, opts ...request.Option) (*glue.ResetJobBookmarkOutput, error) {
	c.inc("ResetJobBookmark")
	return c.svc.ResetJobBookmarkWithContext(ctx, input, opts...)
}

// StartCrawlerRequest is a passthrough to the underlying StartCrawlerRequest.
// It will increment the count of requests made to StartCrawler.
func (c *Glue) StartCrawlerRequest(input *glue.StartCrawlerInput) (req *request.Request, output *glue.StartCrawlerOutput) {
	c.inc("StartCrawler")
	return c.svc.StartCrawlerRequest(input)
}

// StartCrawler is a passthrough to the underlying StartCrawler method.
// It will increment the count of requests made to StartCrawler.
func (c *Glue) StartCrawler(input *glue.StartCrawlerInput) (*glue.StartCrawlerOutput, error) {
	c.inc("StartCrawler")
	return c.svc.StartCrawler(input)
}

// StartCrawlerWithContext is a passthrough to the underlying StartCrawlerWithContext method.
// It will increment the count of requests made to StartCrawler.
func (c *Glue) StartCrawlerWithContext(ctx aws.Context, input *glue.StartCrawlerInput, opts ...request.Option) (*glue.StartCrawlerOutput, error) {
	c.inc("StartCrawler")
	return c.svc.StartCrawlerWithContext(ctx, input, opts...)
}

// StartCrawlerScheduleRequest is a passthrough to the underlying StartCrawlerScheduleRequest.
// It will increment the count of requests made to StartCrawlerSchedule.
func (c *Glue) StartCrawlerScheduleRequest(input *glue.StartCrawlerScheduleInput) (req *request.Request, output *glue.StartCrawlerScheduleOutput) {
	c.inc("StartCrawlerSchedule")
	return c.svc.StartCrawlerScheduleRequest(input)
}

// StartCrawlerSchedule is a passthrough to the underlying StartCrawlerSchedule method.
// It will increment the count of requests made to StartCrawlerSchedule.
func (c *Glue) StartCrawlerSchedule(input *glue.StartCrawlerScheduleInput) (*glue.StartCrawlerScheduleOutput, error) {
	c.inc("StartCrawlerSchedule")
	return c.svc.StartCrawlerSchedule(input)
}

// StartCrawlerScheduleWithContext is a passthrough to the underlying StartCrawlerScheduleWithContext method.
// It will increment the count of requests made to StartCrawlerSchedule.
func (c *Glue) StartCrawlerScheduleWithContext(ctx aws.Context, input *glue.StartCrawlerScheduleInput, opts ...request.Option) (*glue.StartCrawlerScheduleOutput, error) {
	c.inc("StartCrawlerSchedule")
	return c.svc.StartCrawlerScheduleWithContext(ctx, input, opts...)
}

// StartJobRunRequest is a passthrough to the underlying StartJobRunRequest.
// It will increment the count of requests made to StartJobRun.
func (c *Glue) StartJobRunRequest(input *glue.StartJobRunInput) (req *request.Request, output *glue.StartJobRunOutput) {
	c.inc("StartJobRun")
	return c.svc.StartJobRunRequest(input)
}

// StartJobRun is a passthrough to the underlying StartJobRun method.
// It will increment the count of requests made to StartJobRun.
func (c *Glue) StartJobRun(input *glue.StartJobRunInput) (*glue.StartJobRunOutput, error) {
	c.inc("StartJobRun")
	return c.svc.StartJobRun(input)
}

// StartJobRunWithContext is a passthrough to the underlying StartJobRunWithContext method.
// It will increment the count of requests made to StartJobRun.
func (c *Glue) StartJobRunWithContext(ctx aws.Context, input *glue.StartJobRunInput, opts ...request.Option) (*glue.StartJobRunOutput, error) {
	c.inc("StartJobRun")
	return c.svc.StartJobRunWithContext(ctx, input, opts...)
}

// StartTriggerRequest is a passthrough to the underlying StartTriggerRequest.
// It will increment the count of requests made to StartTrigger.
func (c *Glue) StartTriggerRequest(input *glue.StartTriggerInput) (req *request.Request, output *glue.StartTriggerOutput) {
	c.inc("StartTrigger")
	return c.svc.StartTriggerRequest(input)
}

// StartTrigger is a passthrough to the underlying StartTrigger method.
// It will increment the count of requests made to StartTrigger.
func (c *Glue) StartTrigger(input *glue.StartTriggerInput) (*glue.StartTriggerOutput, error) {
	c.inc("StartTrigger")
	return c.svc.StartTrigger(input)
}

// StartTriggerWithContext is a passthrough to the underlying StartTriggerWithContext method.
// It will increment the count of requests made to StartTrigger.
func (c *Glue) StartTriggerWithContext(ctx aws.Context, input *glue.StartTriggerInput, opts ...request.Option) (*glue.StartTriggerOutput, error) {
	c.inc("StartTrigger")
	return c.svc.StartTriggerWithContext(ctx, input, opts...)
}

// StopCrawlerRequest is a passthrough to the underlying StopCrawlerRequest.
// It will increment the count of requests made to StopCrawler.
func (c *Glue) StopCrawlerRequest(input *glue.StopCrawlerInput) (req *request.Request, output *glue.StopCrawlerOutput) {
	c.inc("StopCrawler")
	return c.svc.StopCrawlerRequest(input)
}

// StopCrawler is a passthrough to the underlying StopCrawler method.
// It will increment the count of requests made to StopCrawler.
func (c *Glue) StopCrawler(input *glue.StopCrawlerInput) (*glue.StopCrawlerOutput, error) {
	c.inc("StopCrawler")
	return c.svc.StopCrawler(input)
}

// StopCrawlerWithContext is a passthrough to the underlying StopCrawlerWithContext method.
// It will increment the count of requests made to StopCrawler.
func (c *Glue) StopCrawlerWithContext(ctx aws.Context, input *glue.StopCrawlerInput, opts ...request.Option) (*glue.StopCrawlerOutput, error) {
	c.inc("StopCrawler")
	return c.svc.StopCrawlerWithContext(ctx, input, opts...)
}

// StopCrawlerScheduleRequest is a passthrough to the underlying StopCrawlerScheduleRequest.
// It will increment the count of requests made to StopCrawlerSchedule.
func (c *Glue) StopCrawlerScheduleRequest(input *glue.StopCrawlerScheduleInput) (req *request.Request, output *glue.StopCrawlerScheduleOutput) {
	c.inc("StopCrawlerSchedule")
	return c.svc.StopCrawlerScheduleRequest(input)
}

// StopCrawlerSchedule is a passthrough to the underlying StopCrawlerSchedule method.
// It will increment the count of requests made to StopCrawlerSchedule.
func (c *Glue) StopCrawlerSchedule(input *glue.StopCrawlerScheduleInput) (*glue.StopCrawlerScheduleOutput, error) {
	c.inc("StopCrawlerSchedule")
	return c.svc.StopCrawlerSchedule(input)
}

// StopCrawlerScheduleWithContext is a passthrough to the underlying StopCrawlerScheduleWithContext method.
// It will increment the count of requests made to StopCrawlerSchedule.
func (c *Glue) StopCrawlerScheduleWithContext(ctx aws.Context, input *glue.StopCrawlerScheduleInput, opts ...request.Option) (*glue.StopCrawlerScheduleOutput, error) {
	c.inc("StopCrawlerSchedule")
	return c.svc.StopCrawlerScheduleWithContext(ctx, input, opts...)
}

// StopTriggerRequest is a passthrough to the underlying StopTriggerRequest.
// It will increment the count of requests made to StopTrigger.
func (c *Glue) StopTriggerRequest(input *glue.StopTriggerInput) (req *request.Request, output *glue.StopTriggerOutput) {
	c.inc("StopTrigger")
	return c.svc.StopTriggerRequest(input)
}

// StopTrigger is a passthrough to the underlying StopTrigger method.
// It will increment the count of requests made to StopTrigger.
func (c *Glue) StopTrigger(input *glue.StopTriggerInput) (*glue.StopTriggerOutput, error) {
	c.inc("StopTrigger")
	return c.svc.StopTrigger(input)
}

// StopTriggerWithContext is a passthrough to the underlying StopTriggerWithContext method.
// It will increment the count of requests made to StopTrigger.
func (c *Glue) StopTriggerWithContext(ctx aws.Context, input *glue.StopTriggerInput, opts ...request.Option) (*glue.StopTriggerOutput, error) {
	c.inc("StopTrigger")
	return c.svc.StopTriggerWithContext(ctx, input, opts...)
}

// UpdateClassifierRequest is a passthrough to the underlying UpdateClassifierRequest.
// It will increment the count of requests made to UpdateClassifier.
func (c *Glue) UpdateClassifierRequest(input *glue.UpdateClassifierInput) (req *request.Request, output *glue.UpdateClassifierOutput) {
	c.inc("UpdateClassifier")
	return c.svc.UpdateClassifierRequest(input)
}

// UpdateClassifier is a passthrough to the underlying UpdateClassifier method.
// It will increment the count of requests made to UpdateClassifier.
func (c *Glue) UpdateClassifier(input *glue.UpdateClassifierInput) (*glue.UpdateClassifierOutput, error) {
	c.inc("UpdateClassifier")
	return c.svc.UpdateClassifier(input)
}

// UpdateClassifierWithContext is a passthrough to the underlying UpdateClassifierWithContext method.
// It will increment the count of requests made to UpdateClassifier.
func (c *Glue) UpdateClassifierWithContext(ctx aws.Context, input *glue.UpdateClassifierInput, opts ...request.Option) (*glue.UpdateClassifierOutput, error) {
	c.inc("UpdateClassifier")
	return c.svc.UpdateClassifierWithContext(ctx, input, opts...)
}

// UpdateConnectionRequest is a passthrough to the underlying UpdateConnectionRequest.
// It will increment the count of requests made to UpdateConnection.
func (c *Glue) UpdateConnectionRequest(input *glue.UpdateConnectionInput) (req *request.Request, output *glue.UpdateConnectionOutput) {
	c.inc("UpdateConnection")
	return c.svc.UpdateConnectionRequest(input)
}

// UpdateConnection is a passthrough to the underlying UpdateConnection method.
// It will increment the count of requests made to UpdateConnection.
func (c *Glue) UpdateConnection(input *glue.UpdateConnectionInput) (*glue.UpdateConnectionOutput, error) {
	c.inc("UpdateConnection")
	return c.svc.UpdateConnection(input)
}

// UpdateConnectionWithContext is a passthrough to the underlying UpdateConnectionWithContext method.
// It will increment the count of requests made to UpdateConnection.
func (c *Glue) UpdateConnectionWithContext(ctx aws.Context, input *glue.UpdateConnectionInput, opts ...request.Option) (*glue.UpdateConnectionOutput, error) {
	c.inc("UpdateConnection")
	return c.svc.UpdateConnectionWithContext(ctx, input, opts...)
}

// UpdateCrawlerRequest is a passthrough to the underlying UpdateCrawlerRequest.
// It will increment the count of requests made to UpdateCrawler.
func (c *Glue) UpdateCrawlerRequest(input *glue.UpdateCrawlerInput) (req *request.Request, output *glue.UpdateCrawlerOutput) {
	c.inc("UpdateCrawler")
	return c.svc.UpdateCrawlerRequest(input)
}

// UpdateCrawler is a passthrough to the underlying UpdateCrawler method.
// It will increment the count of requests made to UpdateCrawler.
func (c *Glue) UpdateCrawler(input *glue.UpdateCrawlerInput) (*glue.UpdateCrawlerOutput, error) {
	c.inc("UpdateCrawler")
	return c.svc.UpdateCrawler(input)
}

// UpdateCrawlerWithContext is a passthrough to the underlying UpdateCrawlerWithContext method.
// It will increment the count of requests made to UpdateCrawler.
func (c *Glue) UpdateCrawlerWithContext(ctx aws.Context, input *glue.UpdateCrawlerInput, opts ...request.Option) (*glue.UpdateCrawlerOutput, error) {
	c.inc("UpdateCrawler")
	return c.svc.UpdateCrawlerWithContext(ctx, input, opts...)
}

// UpdateCrawlerScheduleRequest is a passthrough to the underlying UpdateCrawlerScheduleRequest.
// It will increment the count of requests made to UpdateCrawlerSchedule.
func (c *Glue) UpdateCrawlerScheduleRequest(input *glue.UpdateCrawlerScheduleInput) (req *request.Request, output *glue.UpdateCrawlerScheduleOutput) {
	c.inc("UpdateCrawlerSchedule")
	return c.svc.UpdateCrawlerScheduleRequest(input)
}

// UpdateCrawlerSchedule is a passthrough to the underlying UpdateCrawlerSchedule method.
// It will increment the count of requests made to UpdateCrawlerSchedule.
func (c *Glue) UpdateCrawlerSchedule(input *glue.UpdateCrawlerScheduleInput) (*glue.UpdateCrawlerScheduleOutput, error) {
	c.inc("UpdateCrawlerSchedule")
	return c.svc.UpdateCrawlerSchedule(input)
}

// UpdateCrawlerScheduleWithContext is a passthrough to the underlying UpdateCrawlerScheduleWithContext method.
// It will increment the count of requests made to UpdateCrawlerSchedule.
func (c *Glue) UpdateCrawlerScheduleWithContext(ctx aws.Context, input *glue.UpdateCrawlerScheduleInput, opts ...request.Option) (*glue.UpdateCrawlerScheduleOutput, error) {
	c.inc("UpdateCrawlerSchedule")
	return c.svc.UpdateCrawlerScheduleWithContext(ctx, input, opts...)
}

// UpdateDatabaseRequest is a passthrough to the underlying UpdateDatabaseRequest.
// It will increment the count of requests made to UpdateDatabase.
func (c *Glue) UpdateDatabaseRequest(input *glue.UpdateDatabaseInput) (req *request.Request, output *glue.UpdateDatabaseOutput) {
	c.inc("UpdateDatabase")
	return c.svc.UpdateDatabaseRequest(input)
}

// UpdateDatabase is a passthrough to the underlying UpdateDatabase method.
// It will increment the count of requests made to UpdateDatabase.
func (c *Glue) UpdateDatabase(input *glue.UpdateDatabaseInput) (*glue.UpdateDatabaseOutput, error) {
	c.inc("UpdateDatabase")
	return c.svc.UpdateDatabase(input)
}

// UpdateDatabaseWithContext is a passthrough to the underlying UpdateDatabaseWithContext method.
// It will increment the count of requests made to UpdateDatabase.
func (c *Glue) UpdateDatabaseWithContext(ctx aws.Context, input *glue.UpdateDatabaseInput, opts ...request.Option) (*glue.UpdateDatabaseOutput, error) {
	c.inc("UpdateDatabase")
	return c.svc.UpdateDatabaseWithContext(ctx, input, opts...)
}

// UpdateDevEndpointRequest is a passthrough to the underlying UpdateDevEndpointRequest.
// It will increment the count of requests made to UpdateDevEndpoint.
func (c *Glue) UpdateDevEndpointRequest(input *glue.UpdateDevEndpointInput) (req *request.Request, output *glue.UpdateDevEndpointOutput) {
	c.inc("UpdateDevEndpoint")
	return c.svc.UpdateDevEndpointRequest(input)
}

// UpdateDevEndpoint is a passthrough to the underlying UpdateDevEndpoint method.
// It will increment the count of requests made to UpdateDevEndpoint.
func (c *Glue) UpdateDevEndpoint(input *glue.UpdateDevEndpointInput) (*glue.UpdateDevEndpointOutput, error) {
	c.inc("UpdateDevEndpoint")
	return c.svc.UpdateDevEndpoint(input)
}

// UpdateDevEndpointWithContext is a passthrough to the underlying UpdateDevEndpointWithContext method.
// It will increment the count of requests made to UpdateDevEndpoint.
func (c *Glue) UpdateDevEndpointWithContext(ctx aws.Context, input *glue.UpdateDevEndpointInput, opts ...request.Option) (*glue.UpdateDevEndpointOutput, error) {
	c.inc("UpdateDevEndpoint")
	return c.svc.UpdateDevEndpointWithContext(ctx, input, opts...)
}

// UpdateJobRequest is a passthrough to the underlying UpdateJobRequest.
// It will increment the count of requests made to UpdateJob.
func (c *Glue) UpdateJobRequest(input *glue.UpdateJobInput) (req *request.Request, output *glue.UpdateJobOutput) {
	c.inc("UpdateJob")
	return c.svc.UpdateJobRequest(input)
}

// UpdateJob is a passthrough to the underlying UpdateJob method.
// It will increment the count of requests made to UpdateJob.
func (c *Glue) UpdateJob(input *glue.UpdateJobInput) (*glue.UpdateJobOutput, error) {
	c.inc("UpdateJob")
	return c.svc.UpdateJob(input)
}

// UpdateJobWithContext is a passthrough to the underlying UpdateJobWithContext method.
// It will increment the count of requests made to UpdateJob.
func (c *Glue) UpdateJobWithContext(ctx aws.Context, input *glue.UpdateJobInput, opts ...request.Option) (*glue.UpdateJobOutput, error) {
	c.inc("UpdateJob")
	return c.svc.UpdateJobWithContext(ctx, input, opts...)
}

// UpdatePartitionRequest is a passthrough to the underlying UpdatePartitionRequest.
// It will increment the count of requests made to UpdatePartition.
func (c *Glue) UpdatePartitionRequest(input *glue.UpdatePartitionInput) (req *request.Request, output *glue.UpdatePartitionOutput) {
	c.inc("UpdatePartition")
	return c.svc.UpdatePartitionRequest(input)
}

// UpdatePartition is a passthrough to the underlying UpdatePartition method.
// It will increment the count of requests made to UpdatePartition.
func (c *Glue) UpdatePartition(input *glue.UpdatePartitionInput) (*glue.UpdatePartitionOutput, error) {
	c.inc("UpdatePartition")
	return c.svc.UpdatePartition(input)
}

// UpdatePartitionWithContext is a passthrough to the underlying UpdatePartitionWithContext method.
// It will increment the count of requests made to UpdatePartition.
func (c *Glue) UpdatePartitionWithContext(ctx aws.Context, input *glue.UpdatePartitionInput, opts ...request.Option) (*glue.UpdatePartitionOutput, error) {
	c.inc("UpdatePartition")
	return c.svc.UpdatePartitionWithContext(ctx, input, opts...)
}

// UpdateTableRequest is a passthrough to the underlying UpdateTableRequest.
// It will increment the count of requests made to UpdateTable.
func (c *Glue) UpdateTableRequest(input *glue.UpdateTableInput) (req *request.Request, output *glue.UpdateTableOutput) {
	c.inc("UpdateTable")
	return c.svc.UpdateTableRequest(input)
}

// UpdateTable is a passthrough to the underlying UpdateTable method.
// It will increment the count of requests made to UpdateTable.
func (c *Glue) UpdateTable(input *glue.UpdateTableInput) (*glue.UpdateTableOutput, error) {
	c.inc("UpdateTable")
	return c.svc.UpdateTable(input)
}

// UpdateTableWithContext is a passthrough to the underlying UpdateTableWithContext method.
// It will increment the count of requests made to UpdateTable.
func (c *Glue) UpdateTableWithContext(ctx aws.Context, input *glue.UpdateTableInput, opts ...request.Option) (*glue.UpdateTableOutput, error) {
	c.inc("UpdateTable")
	return c.svc.UpdateTableWithContext(ctx, input, opts...)
}

// UpdateTriggerRequest is a passthrough to the underlying UpdateTriggerRequest.
// It will increment the count of requests made to UpdateTrigger.
func (c *Glue) UpdateTriggerRequest(input *glue.UpdateTriggerInput) (req *request.Request, output *glue.UpdateTriggerOutput) {
	c.inc("UpdateTrigger")
	return c.svc.UpdateTriggerRequest(input)
}

// UpdateTrigger is a passthrough to the underlying UpdateTrigger method.
// It will increment the count of requests made to UpdateTrigger.
func (c *Glue) UpdateTrigger(input *glue.UpdateTriggerInput) (*glue.UpdateTriggerOutput, error) {
	c.inc("UpdateTrigger")
	return c.svc.UpdateTrigger(input)
}

// UpdateTriggerWithContext is a passthrough to the underlying UpdateTriggerWithContext method.
// It will increment the count of requests made to UpdateTrigger.
func (c *Glue) UpdateTriggerWithContext(ctx aws.Context, input *glue.UpdateTriggerInput, opts ...request.Option) (*glue.UpdateTriggerOutput, error) {
	c.inc("UpdateTrigger")
	return c.svc.UpdateTriggerWithContext(ctx, input, opts...)
}

// UpdateUserDefinedFunctionRequest is a passthrough to the underlying UpdateUserDefinedFunctionRequest.
// It will increment the count of requests made to UpdateUserDefinedFunction.
func (c *Glue) UpdateUserDefinedFunctionRequest(input *glue.UpdateUserDefinedFunctionInput) (req *request.Request, output *glue.UpdateUserDefinedFunctionOutput) {
	c.inc("UpdateUserDefinedFunction")
	return c.svc.UpdateUserDefinedFunctionRequest(input)
}

// UpdateUserDefinedFunction is a passthrough to the underlying UpdateUserDefinedFunction method.
// It will increment the count of requests made to UpdateUserDefinedFunction.
func (c *Glue) UpdateUserDefinedFunction(input *glue.UpdateUserDefinedFunctionInput) (*glue.UpdateUserDefinedFunctionOutput, error) {
	c.inc("UpdateUserDefinedFunction")
	return c.svc.UpdateUserDefinedFunction(input)
}

// UpdateUserDefinedFunctionWithContext is a passthrough to the underlying UpdateUserDefinedFunctionWithContext method.
// It will increment the count of requests made to UpdateUserDefinedFunction.
func (c *Glue) UpdateUserDefinedFunctionWithContext(ctx aws.Context, input *glue.UpdateUserDefinedFunctionInput, opts ...request.Option) (*glue.UpdateUserDefinedFunctionOutput, error) {
	c.inc("UpdateUserDefinedFunction")
	return c.svc.UpdateUserDefinedFunctionWithContext(ctx, input, opts...)
}
