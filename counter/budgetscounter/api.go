// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package budgetscounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/budgets"
)

// CreateBudgetRequest is a passthrough to the underlying CreateBudgetRequest.
// It will increment the count of requests made to CreateBudget.
func (c *Budgets) CreateBudgetRequest(input *budgets.CreateBudgetInput) (req *request.Request, output *budgets.CreateBudgetOutput) {
	c.inc("CreateBudget")
	return c.svc.CreateBudgetRequest(input)
}

// CreateBudget is a passthrough to the underlying CreateBudget method.
// It will increment the count of requests made to CreateBudget.
func (c *Budgets) CreateBudget(input *budgets.CreateBudgetInput) (*budgets.CreateBudgetOutput, error) {
	c.inc("CreateBudget")
	return c.svc.CreateBudget(input)
}

// CreateBudgetWithContext is a passthrough to the underlying CreateBudgetWithContext method.
// It will increment the count of requests made to CreateBudget.
func (c *Budgets) CreateBudgetWithContext(ctx aws.Context, input *budgets.CreateBudgetInput, opts ...request.Option) (*budgets.CreateBudgetOutput, error) {
	c.inc("CreateBudget")
	return c.svc.CreateBudgetWithContext(ctx, input, opts...)
}

// CreateNotificationRequest is a passthrough to the underlying CreateNotificationRequest.
// It will increment the count of requests made to CreateNotification.
func (c *Budgets) CreateNotificationRequest(input *budgets.CreateNotificationInput) (req *request.Request, output *budgets.CreateNotificationOutput) {
	c.inc("CreateNotification")
	return c.svc.CreateNotificationRequest(input)
}

// CreateNotification is a passthrough to the underlying CreateNotification method.
// It will increment the count of requests made to CreateNotification.
func (c *Budgets) CreateNotification(input *budgets.CreateNotificationInput) (*budgets.CreateNotificationOutput, error) {
	c.inc("CreateNotification")
	return c.svc.CreateNotification(input)
}

// CreateNotificationWithContext is a passthrough to the underlying CreateNotificationWithContext method.
// It will increment the count of requests made to CreateNotification.
func (c *Budgets) CreateNotificationWithContext(ctx aws.Context, input *budgets.CreateNotificationInput, opts ...request.Option) (*budgets.CreateNotificationOutput, error) {
	c.inc("CreateNotification")
	return c.svc.CreateNotificationWithContext(ctx, input, opts...)
}

// CreateSubscriberRequest is a passthrough to the underlying CreateSubscriberRequest.
// It will increment the count of requests made to CreateSubscriber.
func (c *Budgets) CreateSubscriberRequest(input *budgets.CreateSubscriberInput) (req *request.Request, output *budgets.CreateSubscriberOutput) {
	c.inc("CreateSubscriber")
	return c.svc.CreateSubscriberRequest(input)
}

// CreateSubscriber is a passthrough to the underlying CreateSubscriber method.
// It will increment the count of requests made to CreateSubscriber.
func (c *Budgets) CreateSubscriber(input *budgets.CreateSubscriberInput) (*budgets.CreateSubscriberOutput, error) {
	c.inc("CreateSubscriber")
	return c.svc.CreateSubscriber(input)
}

// CreateSubscriberWithContext is a passthrough to the underlying CreateSubscriberWithContext method.
// It will increment the count of requests made to CreateSubscriber.
func (c *Budgets) CreateSubscriberWithContext(ctx aws.Context, input *budgets.CreateSubscriberInput, opts ...request.Option) (*budgets.CreateSubscriberOutput, error) {
	c.inc("CreateSubscriber")
	return c.svc.CreateSubscriberWithContext(ctx, input, opts...)
}

// DeleteBudgetRequest is a passthrough to the underlying DeleteBudgetRequest.
// It will increment the count of requests made to DeleteBudget.
func (c *Budgets) DeleteBudgetRequest(input *budgets.DeleteBudgetInput) (req *request.Request, output *budgets.DeleteBudgetOutput) {
	c.inc("DeleteBudget")
	return c.svc.DeleteBudgetRequest(input)
}

// DeleteBudget is a passthrough to the underlying DeleteBudget method.
// It will increment the count of requests made to DeleteBudget.
func (c *Budgets) DeleteBudget(input *budgets.DeleteBudgetInput) (*budgets.DeleteBudgetOutput, error) {
	c.inc("DeleteBudget")
	return c.svc.DeleteBudget(input)
}

// DeleteBudgetWithContext is a passthrough to the underlying DeleteBudgetWithContext method.
// It will increment the count of requests made to DeleteBudget.
func (c *Budgets) DeleteBudgetWithContext(ctx aws.Context, input *budgets.DeleteBudgetInput, opts ...request.Option) (*budgets.DeleteBudgetOutput, error) {
	c.inc("DeleteBudget")
	return c.svc.DeleteBudgetWithContext(ctx, input, opts...)
}

// DeleteNotificationRequest is a passthrough to the underlying DeleteNotificationRequest.
// It will increment the count of requests made to DeleteNotification.
func (c *Budgets) DeleteNotificationRequest(input *budgets.DeleteNotificationInput) (req *request.Request, output *budgets.DeleteNotificationOutput) {
	c.inc("DeleteNotification")
	return c.svc.DeleteNotificationRequest(input)
}

// DeleteNotification is a passthrough to the underlying DeleteNotification method.
// It will increment the count of requests made to DeleteNotification.
func (c *Budgets) DeleteNotification(input *budgets.DeleteNotificationInput) (*budgets.DeleteNotificationOutput, error) {
	c.inc("DeleteNotification")
	return c.svc.DeleteNotification(input)
}

// DeleteNotificationWithContext is a passthrough to the underlying DeleteNotificationWithContext method.
// It will increment the count of requests made to DeleteNotification.
func (c *Budgets) DeleteNotificationWithContext(ctx aws.Context, input *budgets.DeleteNotificationInput, opts ...request.Option) (*budgets.DeleteNotificationOutput, error) {
	c.inc("DeleteNotification")
	return c.svc.DeleteNotificationWithContext(ctx, input, opts...)
}

// DeleteSubscriberRequest is a passthrough to the underlying DeleteSubscriberRequest.
// It will increment the count of requests made to DeleteSubscriber.
func (c *Budgets) DeleteSubscriberRequest(input *budgets.DeleteSubscriberInput) (req *request.Request, output *budgets.DeleteSubscriberOutput) {
	c.inc("DeleteSubscriber")
	return c.svc.DeleteSubscriberRequest(input)
}

// DeleteSubscriber is a passthrough to the underlying DeleteSubscriber method.
// It will increment the count of requests made to DeleteSubscriber.
func (c *Budgets) DeleteSubscriber(input *budgets.DeleteSubscriberInput) (*budgets.DeleteSubscriberOutput, error) {
	c.inc("DeleteSubscriber")
	return c.svc.DeleteSubscriber(input)
}

// DeleteSubscriberWithContext is a passthrough to the underlying DeleteSubscriberWithContext method.
// It will increment the count of requests made to DeleteSubscriber.
func (c *Budgets) DeleteSubscriberWithContext(ctx aws.Context, input *budgets.DeleteSubscriberInput, opts ...request.Option) (*budgets.DeleteSubscriberOutput, error) {
	c.inc("DeleteSubscriber")
	return c.svc.DeleteSubscriberWithContext(ctx, input, opts...)
}

// DescribeBudgetRequest is a passthrough to the underlying DescribeBudgetRequest.
// It will increment the count of requests made to DescribeBudget.
func (c *Budgets) DescribeBudgetRequest(input *budgets.DescribeBudgetInput) (req *request.Request, output *budgets.DescribeBudgetOutput) {
	c.inc("DescribeBudget")
	return c.svc.DescribeBudgetRequest(input)
}

// DescribeBudget is a passthrough to the underlying DescribeBudget method.
// It will increment the count of requests made to DescribeBudget.
func (c *Budgets) DescribeBudget(input *budgets.DescribeBudgetInput) (*budgets.DescribeBudgetOutput, error) {
	c.inc("DescribeBudget")
	return c.svc.DescribeBudget(input)
}

// DescribeBudgetWithContext is a passthrough to the underlying DescribeBudgetWithContext method.
// It will increment the count of requests made to DescribeBudget.
func (c *Budgets) DescribeBudgetWithContext(ctx aws.Context, input *budgets.DescribeBudgetInput, opts ...request.Option) (*budgets.DescribeBudgetOutput, error) {
	c.inc("DescribeBudget")
	return c.svc.DescribeBudgetWithContext(ctx, input, opts...)
}

// DescribeBudgetsRequest is a passthrough to the underlying DescribeBudgetsRequest.
// It will increment the count of requests made to DescribeBudgets.
func (c *Budgets) DescribeBudgetsRequest(input *budgets.DescribeBudgetsInput) (req *request.Request, output *budgets.DescribeBudgetsOutput) {
	c.inc("DescribeBudgets")
	return c.svc.DescribeBudgetsRequest(input)
}

// DescribeBudgets is a passthrough to the underlying DescribeBudgets method.
// It will increment the count of requests made to DescribeBudgets.
func (c *Budgets) DescribeBudgets(input *budgets.DescribeBudgetsInput) (*budgets.DescribeBudgetsOutput, error) {
	c.inc("DescribeBudgets")
	return c.svc.DescribeBudgets(input)
}

// DescribeBudgetsWithContext is a passthrough to the underlying DescribeBudgetsWithContext method.
// It will increment the count of requests made to DescribeBudgets.
func (c *Budgets) DescribeBudgetsWithContext(ctx aws.Context, input *budgets.DescribeBudgetsInput, opts ...request.Option) (*budgets.DescribeBudgetsOutput, error) {
	c.inc("DescribeBudgets")
	return c.svc.DescribeBudgetsWithContext(ctx, input, opts...)
}

// DescribeNotificationsForBudgetRequest is a passthrough to the underlying DescribeNotificationsForBudgetRequest.
// It will increment the count of requests made to DescribeNotificationsForBudget.
func (c *Budgets) DescribeNotificationsForBudgetRequest(input *budgets.DescribeNotificationsForBudgetInput) (req *request.Request, output *budgets.DescribeNotificationsForBudgetOutput) {
	c.inc("DescribeNotificationsForBudget")
	return c.svc.DescribeNotificationsForBudgetRequest(input)
}

// DescribeNotificationsForBudget is a passthrough to the underlying DescribeNotificationsForBudget method.
// It will increment the count of requests made to DescribeNotificationsForBudget.
func (c *Budgets) DescribeNotificationsForBudget(input *budgets.DescribeNotificationsForBudgetInput) (*budgets.DescribeNotificationsForBudgetOutput, error) {
	c.inc("DescribeNotificationsForBudget")
	return c.svc.DescribeNotificationsForBudget(input)
}

// DescribeNotificationsForBudgetWithContext is a passthrough to the underlying DescribeNotificationsForBudgetWithContext method.
// It will increment the count of requests made to DescribeNotificationsForBudget.
func (c *Budgets) DescribeNotificationsForBudgetWithContext(ctx aws.Context, input *budgets.DescribeNotificationsForBudgetInput, opts ...request.Option) (*budgets.DescribeNotificationsForBudgetOutput, error) {
	c.inc("DescribeNotificationsForBudget")
	return c.svc.DescribeNotificationsForBudgetWithContext(ctx, input, opts...)
}

// DescribeSubscribersForNotificationRequest is a passthrough to the underlying DescribeSubscribersForNotificationRequest.
// It will increment the count of requests made to DescribeSubscribersForNotification.
func (c *Budgets) DescribeSubscribersForNotificationRequest(input *budgets.DescribeSubscribersForNotificationInput) (req *request.Request, output *budgets.DescribeSubscribersForNotificationOutput) {
	c.inc("DescribeSubscribersForNotification")
	return c.svc.DescribeSubscribersForNotificationRequest(input)
}

// DescribeSubscribersForNotification is a passthrough to the underlying DescribeSubscribersForNotification method.
// It will increment the count of requests made to DescribeSubscribersForNotification.
func (c *Budgets) DescribeSubscribersForNotification(input *budgets.DescribeSubscribersForNotificationInput) (*budgets.DescribeSubscribersForNotificationOutput, error) {
	c.inc("DescribeSubscribersForNotification")
	return c.svc.DescribeSubscribersForNotification(input)
}

// DescribeSubscribersForNotificationWithContext is a passthrough to the underlying DescribeSubscribersForNotificationWithContext method.
// It will increment the count of requests made to DescribeSubscribersForNotification.
func (c *Budgets) DescribeSubscribersForNotificationWithContext(ctx aws.Context, input *budgets.DescribeSubscribersForNotificationInput, opts ...request.Option) (*budgets.DescribeSubscribersForNotificationOutput, error) {
	c.inc("DescribeSubscribersForNotification")
	return c.svc.DescribeSubscribersForNotificationWithContext(ctx, input, opts...)
}

// UpdateBudgetRequest is a passthrough to the underlying UpdateBudgetRequest.
// It will increment the count of requests made to UpdateBudget.
func (c *Budgets) UpdateBudgetRequest(input *budgets.UpdateBudgetInput) (req *request.Request, output *budgets.UpdateBudgetOutput) {
	c.inc("UpdateBudget")
	return c.svc.UpdateBudgetRequest(input)
}

// UpdateBudget is a passthrough to the underlying UpdateBudget method.
// It will increment the count of requests made to UpdateBudget.
func (c *Budgets) UpdateBudget(input *budgets.UpdateBudgetInput) (*budgets.UpdateBudgetOutput, error) {
	c.inc("UpdateBudget")
	return c.svc.UpdateBudget(input)
}

// UpdateBudgetWithContext is a passthrough to the underlying UpdateBudgetWithContext method.
// It will increment the count of requests made to UpdateBudget.
func (c *Budgets) UpdateBudgetWithContext(ctx aws.Context, input *budgets.UpdateBudgetInput, opts ...request.Option) (*budgets.UpdateBudgetOutput, error) {
	c.inc("UpdateBudget")
	return c.svc.UpdateBudgetWithContext(ctx, input, opts...)
}

// UpdateNotificationRequest is a passthrough to the underlying UpdateNotificationRequest.
// It will increment the count of requests made to UpdateNotification.
func (c *Budgets) UpdateNotificationRequest(input *budgets.UpdateNotificationInput) (req *request.Request, output *budgets.UpdateNotificationOutput) {
	c.inc("UpdateNotification")
	return c.svc.UpdateNotificationRequest(input)
}

// UpdateNotification is a passthrough to the underlying UpdateNotification method.
// It will increment the count of requests made to UpdateNotification.
func (c *Budgets) UpdateNotification(input *budgets.UpdateNotificationInput) (*budgets.UpdateNotificationOutput, error) {
	c.inc("UpdateNotification")
	return c.svc.UpdateNotification(input)
}

// UpdateNotificationWithContext is a passthrough to the underlying UpdateNotificationWithContext method.
// It will increment the count of requests made to UpdateNotification.
func (c *Budgets) UpdateNotificationWithContext(ctx aws.Context, input *budgets.UpdateNotificationInput, opts ...request.Option) (*budgets.UpdateNotificationOutput, error) {
	c.inc("UpdateNotification")
	return c.svc.UpdateNotificationWithContext(ctx, input, opts...)
}

// UpdateSubscriberRequest is a passthrough to the underlying UpdateSubscriberRequest.
// It will increment the count of requests made to UpdateSubscriber.
func (c *Budgets) UpdateSubscriberRequest(input *budgets.UpdateSubscriberInput) (req *request.Request, output *budgets.UpdateSubscriberOutput) {
	c.inc("UpdateSubscriber")
	return c.svc.UpdateSubscriberRequest(input)
}

// UpdateSubscriber is a passthrough to the underlying UpdateSubscriber method.
// It will increment the count of requests made to UpdateSubscriber.
func (c *Budgets) UpdateSubscriber(input *budgets.UpdateSubscriberInput) (*budgets.UpdateSubscriberOutput, error) {
	c.inc("UpdateSubscriber")
	return c.svc.UpdateSubscriber(input)
}

// UpdateSubscriberWithContext is a passthrough to the underlying UpdateSubscriberWithContext method.
// It will increment the count of requests made to UpdateSubscriber.
func (c *Budgets) UpdateSubscriberWithContext(ctx aws.Context, input *budgets.UpdateSubscriberInput, opts ...request.Option) (*budgets.UpdateSubscriberOutput, error) {
	c.inc("UpdateSubscriber")
	return c.svc.UpdateSubscriberWithContext(ctx, input, opts...)
}
