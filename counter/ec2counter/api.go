// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2counter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ec2"
)

// AcceptReservedInstancesExchangeQuoteRequest is a passthrough to the underlying AcceptReservedInstancesExchangeQuoteRequest.
// It will increment the count of requests made to AcceptReservedInstancesExchangeQuote.
func (c *EC2) AcceptReservedInstancesExchangeQuoteRequest(input *ec2.AcceptReservedInstancesExchangeQuoteInput) (req *request.Request, output *ec2.AcceptReservedInstancesExchangeQuoteOutput) {
	c.inc("AcceptReservedInstancesExchangeQuote")
	return c.svc.AcceptReservedInstancesExchangeQuoteRequest(input)
}

// AcceptReservedInstancesExchangeQuote is a passthrough to the underlying AcceptReservedInstancesExchangeQuote method.
// It will increment the count of requests made to AcceptReservedInstancesExchangeQuote.
func (c *EC2) AcceptReservedInstancesExchangeQuote(input *ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	c.inc("AcceptReservedInstancesExchangeQuote")
	return c.svc.AcceptReservedInstancesExchangeQuote(input)
}

// AcceptReservedInstancesExchangeQuoteWithContext is a passthrough to the underlying AcceptReservedInstancesExchangeQuoteWithContext method.
// It will increment the count of requests made to AcceptReservedInstancesExchangeQuote.
func (c *EC2) AcceptReservedInstancesExchangeQuoteWithContext(ctx aws.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput, opts ...request.Option) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	c.inc("AcceptReservedInstancesExchangeQuote")
	return c.svc.AcceptReservedInstancesExchangeQuoteWithContext(ctx, input, opts...)
}

// AcceptVpcPeeringConnectionRequest is a passthrough to the underlying AcceptVpcPeeringConnectionRequest.
// It will increment the count of requests made to AcceptVpcPeeringConnection.
func (c *EC2) AcceptVpcPeeringConnectionRequest(input *ec2.AcceptVpcPeeringConnectionInput) (req *request.Request, output *ec2.AcceptVpcPeeringConnectionOutput) {
	c.inc("AcceptVpcPeeringConnection")
	return c.svc.AcceptVpcPeeringConnectionRequest(input)
}

// AcceptVpcPeeringConnection is a passthrough to the underlying AcceptVpcPeeringConnection method.
// It will increment the count of requests made to AcceptVpcPeeringConnection.
func (c *EC2) AcceptVpcPeeringConnection(input *ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	c.inc("AcceptVpcPeeringConnection")
	return c.svc.AcceptVpcPeeringConnection(input)
}

// AcceptVpcPeeringConnectionWithContext is a passthrough to the underlying AcceptVpcPeeringConnectionWithContext method.
// It will increment the count of requests made to AcceptVpcPeeringConnection.
func (c *EC2) AcceptVpcPeeringConnectionWithContext(ctx aws.Context, input *ec2.AcceptVpcPeeringConnectionInput, opts ...request.Option) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	c.inc("AcceptVpcPeeringConnection")
	return c.svc.AcceptVpcPeeringConnectionWithContext(ctx, input, opts...)
}

// AllocateAddressRequest is a passthrough to the underlying AllocateAddressRequest.
// It will increment the count of requests made to AllocateAddress.
func (c *EC2) AllocateAddressRequest(input *ec2.AllocateAddressInput) (req *request.Request, output *ec2.AllocateAddressOutput) {
	c.inc("AllocateAddress")
	return c.svc.AllocateAddressRequest(input)
}

// AllocateAddress is a passthrough to the underlying AllocateAddress method.
// It will increment the count of requests made to AllocateAddress.
func (c *EC2) AllocateAddress(input *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error) {
	c.inc("AllocateAddress")
	return c.svc.AllocateAddress(input)
}

// AllocateAddressWithContext is a passthrough to the underlying AllocateAddressWithContext method.
// It will increment the count of requests made to AllocateAddress.
func (c *EC2) AllocateAddressWithContext(ctx aws.Context, input *ec2.AllocateAddressInput, opts ...request.Option) (*ec2.AllocateAddressOutput, error) {
	c.inc("AllocateAddress")
	return c.svc.AllocateAddressWithContext(ctx, input, opts...)
}

// AllocateHostsRequest is a passthrough to the underlying AllocateHostsRequest.
// It will increment the count of requests made to AllocateHosts.
func (c *EC2) AllocateHostsRequest(input *ec2.AllocateHostsInput) (req *request.Request, output *ec2.AllocateHostsOutput) {
	c.inc("AllocateHosts")
	return c.svc.AllocateHostsRequest(input)
}

// AllocateHosts is a passthrough to the underlying AllocateHosts method.
// It will increment the count of requests made to AllocateHosts.
func (c *EC2) AllocateHosts(input *ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error) {
	c.inc("AllocateHosts")
	return c.svc.AllocateHosts(input)
}

// AllocateHostsWithContext is a passthrough to the underlying AllocateHostsWithContext method.
// It will increment the count of requests made to AllocateHosts.
func (c *EC2) AllocateHostsWithContext(ctx aws.Context, input *ec2.AllocateHostsInput, opts ...request.Option) (*ec2.AllocateHostsOutput, error) {
	c.inc("AllocateHosts")
	return c.svc.AllocateHostsWithContext(ctx, input, opts...)
}

// AssignIpv6AddressesRequest is a passthrough to the underlying AssignIpv6AddressesRequest.
// It will increment the count of requests made to AssignIpv6Addresses.
func (c *EC2) AssignIpv6AddressesRequest(input *ec2.AssignIpv6AddressesInput) (req *request.Request, output *ec2.AssignIpv6AddressesOutput) {
	c.inc("AssignIpv6Addresses")
	return c.svc.AssignIpv6AddressesRequest(input)
}

// AssignIpv6Addresses is a passthrough to the underlying AssignIpv6Addresses method.
// It will increment the count of requests made to AssignIpv6Addresses.
func (c *EC2) AssignIpv6Addresses(input *ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error) {
	c.inc("AssignIpv6Addresses")
	return c.svc.AssignIpv6Addresses(input)
}

// AssignIpv6AddressesWithContext is a passthrough to the underlying AssignIpv6AddressesWithContext method.
// It will increment the count of requests made to AssignIpv6Addresses.
func (c *EC2) AssignIpv6AddressesWithContext(ctx aws.Context, input *ec2.AssignIpv6AddressesInput, opts ...request.Option) (*ec2.AssignIpv6AddressesOutput, error) {
	c.inc("AssignIpv6Addresses")
	return c.svc.AssignIpv6AddressesWithContext(ctx, input, opts...)
}

// AssignPrivateIpAddressesRequest is a passthrough to the underlying AssignPrivateIpAddressesRequest.
// It will increment the count of requests made to AssignPrivateIpAddresses.
func (c *EC2) AssignPrivateIpAddressesRequest(input *ec2.AssignPrivateIpAddressesInput) (req *request.Request, output *ec2.AssignPrivateIpAddressesOutput) {
	c.inc("AssignPrivateIpAddresses")
	return c.svc.AssignPrivateIpAddressesRequest(input)
}

// AssignPrivateIpAddresses is a passthrough to the underlying AssignPrivateIpAddresses method.
// It will increment the count of requests made to AssignPrivateIpAddresses.
func (c *EC2) AssignPrivateIpAddresses(input *ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error) {
	c.inc("AssignPrivateIpAddresses")
	return c.svc.AssignPrivateIpAddresses(input)
}

// AssignPrivateIpAddressesWithContext is a passthrough to the underlying AssignPrivateIpAddressesWithContext method.
// It will increment the count of requests made to AssignPrivateIpAddresses.
func (c *EC2) AssignPrivateIpAddressesWithContext(ctx aws.Context, input *ec2.AssignPrivateIpAddressesInput, opts ...request.Option) (*ec2.AssignPrivateIpAddressesOutput, error) {
	c.inc("AssignPrivateIpAddresses")
	return c.svc.AssignPrivateIpAddressesWithContext(ctx, input, opts...)
}

// AssociateAddressRequest is a passthrough to the underlying AssociateAddressRequest.
// It will increment the count of requests made to AssociateAddress.
func (c *EC2) AssociateAddressRequest(input *ec2.AssociateAddressInput) (req *request.Request, output *ec2.AssociateAddressOutput) {
	c.inc("AssociateAddress")
	return c.svc.AssociateAddressRequest(input)
}

// AssociateAddress is a passthrough to the underlying AssociateAddress method.
// It will increment the count of requests made to AssociateAddress.
func (c *EC2) AssociateAddress(input *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error) {
	c.inc("AssociateAddress")
	return c.svc.AssociateAddress(input)
}

// AssociateAddressWithContext is a passthrough to the underlying AssociateAddressWithContext method.
// It will increment the count of requests made to AssociateAddress.
func (c *EC2) AssociateAddressWithContext(ctx aws.Context, input *ec2.AssociateAddressInput, opts ...request.Option) (*ec2.AssociateAddressOutput, error) {
	c.inc("AssociateAddress")
	return c.svc.AssociateAddressWithContext(ctx, input, opts...)
}

// AssociateDhcpOptionsRequest is a passthrough to the underlying AssociateDhcpOptionsRequest.
// It will increment the count of requests made to AssociateDhcpOptions.
func (c *EC2) AssociateDhcpOptionsRequest(input *ec2.AssociateDhcpOptionsInput) (req *request.Request, output *ec2.AssociateDhcpOptionsOutput) {
	c.inc("AssociateDhcpOptions")
	return c.svc.AssociateDhcpOptionsRequest(input)
}

// AssociateDhcpOptions is a passthrough to the underlying AssociateDhcpOptions method.
// It will increment the count of requests made to AssociateDhcpOptions.
func (c *EC2) AssociateDhcpOptions(input *ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error) {
	c.inc("AssociateDhcpOptions")
	return c.svc.AssociateDhcpOptions(input)
}

// AssociateDhcpOptionsWithContext is a passthrough to the underlying AssociateDhcpOptionsWithContext method.
// It will increment the count of requests made to AssociateDhcpOptions.
func (c *EC2) AssociateDhcpOptionsWithContext(ctx aws.Context, input *ec2.AssociateDhcpOptionsInput, opts ...request.Option) (*ec2.AssociateDhcpOptionsOutput, error) {
	c.inc("AssociateDhcpOptions")
	return c.svc.AssociateDhcpOptionsWithContext(ctx, input, opts...)
}

// AssociateIamInstanceProfileRequest is a passthrough to the underlying AssociateIamInstanceProfileRequest.
// It will increment the count of requests made to AssociateIamInstanceProfile.
func (c *EC2) AssociateIamInstanceProfileRequest(input *ec2.AssociateIamInstanceProfileInput) (req *request.Request, output *ec2.AssociateIamInstanceProfileOutput) {
	c.inc("AssociateIamInstanceProfile")
	return c.svc.AssociateIamInstanceProfileRequest(input)
}

// AssociateIamInstanceProfile is a passthrough to the underlying AssociateIamInstanceProfile method.
// It will increment the count of requests made to AssociateIamInstanceProfile.
func (c *EC2) AssociateIamInstanceProfile(input *ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error) {
	c.inc("AssociateIamInstanceProfile")
	return c.svc.AssociateIamInstanceProfile(input)
}

// AssociateIamInstanceProfileWithContext is a passthrough to the underlying AssociateIamInstanceProfileWithContext method.
// It will increment the count of requests made to AssociateIamInstanceProfile.
func (c *EC2) AssociateIamInstanceProfileWithContext(ctx aws.Context, input *ec2.AssociateIamInstanceProfileInput, opts ...request.Option) (*ec2.AssociateIamInstanceProfileOutput, error) {
	c.inc("AssociateIamInstanceProfile")
	return c.svc.AssociateIamInstanceProfileWithContext(ctx, input, opts...)
}

// AssociateRouteTableRequest is a passthrough to the underlying AssociateRouteTableRequest.
// It will increment the count of requests made to AssociateRouteTable.
func (c *EC2) AssociateRouteTableRequest(input *ec2.AssociateRouteTableInput) (req *request.Request, output *ec2.AssociateRouteTableOutput) {
	c.inc("AssociateRouteTable")
	return c.svc.AssociateRouteTableRequest(input)
}

// AssociateRouteTable is a passthrough to the underlying AssociateRouteTable method.
// It will increment the count of requests made to AssociateRouteTable.
func (c *EC2) AssociateRouteTable(input *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error) {
	c.inc("AssociateRouteTable")
	return c.svc.AssociateRouteTable(input)
}

// AssociateRouteTableWithContext is a passthrough to the underlying AssociateRouteTableWithContext method.
// It will increment the count of requests made to AssociateRouteTable.
func (c *EC2) AssociateRouteTableWithContext(ctx aws.Context, input *ec2.AssociateRouteTableInput, opts ...request.Option) (*ec2.AssociateRouteTableOutput, error) {
	c.inc("AssociateRouteTable")
	return c.svc.AssociateRouteTableWithContext(ctx, input, opts...)
}

// AssociateSubnetCidrBlockRequest is a passthrough to the underlying AssociateSubnetCidrBlockRequest.
// It will increment the count of requests made to AssociateSubnetCidrBlock.
func (c *EC2) AssociateSubnetCidrBlockRequest(input *ec2.AssociateSubnetCidrBlockInput) (req *request.Request, output *ec2.AssociateSubnetCidrBlockOutput) {
	c.inc("AssociateSubnetCidrBlock")
	return c.svc.AssociateSubnetCidrBlockRequest(input)
}

// AssociateSubnetCidrBlock is a passthrough to the underlying AssociateSubnetCidrBlock method.
// It will increment the count of requests made to AssociateSubnetCidrBlock.
func (c *EC2) AssociateSubnetCidrBlock(input *ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	c.inc("AssociateSubnetCidrBlock")
	return c.svc.AssociateSubnetCidrBlock(input)
}

// AssociateSubnetCidrBlockWithContext is a passthrough to the underlying AssociateSubnetCidrBlockWithContext method.
// It will increment the count of requests made to AssociateSubnetCidrBlock.
func (c *EC2) AssociateSubnetCidrBlockWithContext(ctx aws.Context, input *ec2.AssociateSubnetCidrBlockInput, opts ...request.Option) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	c.inc("AssociateSubnetCidrBlock")
	return c.svc.AssociateSubnetCidrBlockWithContext(ctx, input, opts...)
}

// AssociateVpcCidrBlockRequest is a passthrough to the underlying AssociateVpcCidrBlockRequest.
// It will increment the count of requests made to AssociateVpcCidrBlock.
func (c *EC2) AssociateVpcCidrBlockRequest(input *ec2.AssociateVpcCidrBlockInput) (req *request.Request, output *ec2.AssociateVpcCidrBlockOutput) {
	c.inc("AssociateVpcCidrBlock")
	return c.svc.AssociateVpcCidrBlockRequest(input)
}

// AssociateVpcCidrBlock is a passthrough to the underlying AssociateVpcCidrBlock method.
// It will increment the count of requests made to AssociateVpcCidrBlock.
func (c *EC2) AssociateVpcCidrBlock(input *ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error) {
	c.inc("AssociateVpcCidrBlock")
	return c.svc.AssociateVpcCidrBlock(input)
}

// AssociateVpcCidrBlockWithContext is a passthrough to the underlying AssociateVpcCidrBlockWithContext method.
// It will increment the count of requests made to AssociateVpcCidrBlock.
func (c *EC2) AssociateVpcCidrBlockWithContext(ctx aws.Context, input *ec2.AssociateVpcCidrBlockInput, opts ...request.Option) (*ec2.AssociateVpcCidrBlockOutput, error) {
	c.inc("AssociateVpcCidrBlock")
	return c.svc.AssociateVpcCidrBlockWithContext(ctx, input, opts...)
}

// AttachClassicLinkVpcRequest is a passthrough to the underlying AttachClassicLinkVpcRequest.
// It will increment the count of requests made to AttachClassicLinkVpc.
func (c *EC2) AttachClassicLinkVpcRequest(input *ec2.AttachClassicLinkVpcInput) (req *request.Request, output *ec2.AttachClassicLinkVpcOutput) {
	c.inc("AttachClassicLinkVpc")
	return c.svc.AttachClassicLinkVpcRequest(input)
}

// AttachClassicLinkVpc is a passthrough to the underlying AttachClassicLinkVpc method.
// It will increment the count of requests made to AttachClassicLinkVpc.
func (c *EC2) AttachClassicLinkVpc(input *ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error) {
	c.inc("AttachClassicLinkVpc")
	return c.svc.AttachClassicLinkVpc(input)
}

// AttachClassicLinkVpcWithContext is a passthrough to the underlying AttachClassicLinkVpcWithContext method.
// It will increment the count of requests made to AttachClassicLinkVpc.
func (c *EC2) AttachClassicLinkVpcWithContext(ctx aws.Context, input *ec2.AttachClassicLinkVpcInput, opts ...request.Option) (*ec2.AttachClassicLinkVpcOutput, error) {
	c.inc("AttachClassicLinkVpc")
	return c.svc.AttachClassicLinkVpcWithContext(ctx, input, opts...)
}

// AttachInternetGatewayRequest is a passthrough to the underlying AttachInternetGatewayRequest.
// It will increment the count of requests made to AttachInternetGateway.
func (c *EC2) AttachInternetGatewayRequest(input *ec2.AttachInternetGatewayInput) (req *request.Request, output *ec2.AttachInternetGatewayOutput) {
	c.inc("AttachInternetGateway")
	return c.svc.AttachInternetGatewayRequest(input)
}

// AttachInternetGateway is a passthrough to the underlying AttachInternetGateway method.
// It will increment the count of requests made to AttachInternetGateway.
func (c *EC2) AttachInternetGateway(input *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error) {
	c.inc("AttachInternetGateway")
	return c.svc.AttachInternetGateway(input)
}

// AttachInternetGatewayWithContext is a passthrough to the underlying AttachInternetGatewayWithContext method.
// It will increment the count of requests made to AttachInternetGateway.
func (c *EC2) AttachInternetGatewayWithContext(ctx aws.Context, input *ec2.AttachInternetGatewayInput, opts ...request.Option) (*ec2.AttachInternetGatewayOutput, error) {
	c.inc("AttachInternetGateway")
	return c.svc.AttachInternetGatewayWithContext(ctx, input, opts...)
}

// AttachNetworkInterfaceRequest is a passthrough to the underlying AttachNetworkInterfaceRequest.
// It will increment the count of requests made to AttachNetworkInterface.
func (c *EC2) AttachNetworkInterfaceRequest(input *ec2.AttachNetworkInterfaceInput) (req *request.Request, output *ec2.AttachNetworkInterfaceOutput) {
	c.inc("AttachNetworkInterface")
	return c.svc.AttachNetworkInterfaceRequest(input)
}

// AttachNetworkInterface is a passthrough to the underlying AttachNetworkInterface method.
// It will increment the count of requests made to AttachNetworkInterface.
func (c *EC2) AttachNetworkInterface(input *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error) {
	c.inc("AttachNetworkInterface")
	return c.svc.AttachNetworkInterface(input)
}

// AttachNetworkInterfaceWithContext is a passthrough to the underlying AttachNetworkInterfaceWithContext method.
// It will increment the count of requests made to AttachNetworkInterface.
func (c *EC2) AttachNetworkInterfaceWithContext(ctx aws.Context, input *ec2.AttachNetworkInterfaceInput, opts ...request.Option) (*ec2.AttachNetworkInterfaceOutput, error) {
	c.inc("AttachNetworkInterface")
	return c.svc.AttachNetworkInterfaceWithContext(ctx, input, opts...)
}

// AttachVolumeRequest is a passthrough to the underlying AttachVolumeRequest.
// It will increment the count of requests made to AttachVolume.
func (c *EC2) AttachVolumeRequest(input *ec2.AttachVolumeInput) (req *request.Request, output *ec2.VolumeAttachment) {
	c.inc("AttachVolume")
	return c.svc.AttachVolumeRequest(input)
}

// AttachVolume is a passthrough to the underlying AttachVolume method.
// It will increment the count of requests made to AttachVolume.
func (c *EC2) AttachVolume(input *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error) {
	c.inc("AttachVolume")
	return c.svc.AttachVolume(input)
}

// AttachVolumeWithContext is a passthrough to the underlying AttachVolumeWithContext method.
// It will increment the count of requests made to AttachVolume.
func (c *EC2) AttachVolumeWithContext(ctx aws.Context, input *ec2.AttachVolumeInput, opts ...request.Option) (*ec2.VolumeAttachment, error) {
	c.inc("AttachVolume")
	return c.svc.AttachVolumeWithContext(ctx, input, opts...)
}

// AttachVpnGatewayRequest is a passthrough to the underlying AttachVpnGatewayRequest.
// It will increment the count of requests made to AttachVpnGateway.
func (c *EC2) AttachVpnGatewayRequest(input *ec2.AttachVpnGatewayInput) (req *request.Request, output *ec2.AttachVpnGatewayOutput) {
	c.inc("AttachVpnGateway")
	return c.svc.AttachVpnGatewayRequest(input)
}

// AttachVpnGateway is a passthrough to the underlying AttachVpnGateway method.
// It will increment the count of requests made to AttachVpnGateway.
func (c *EC2) AttachVpnGateway(input *ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error) {
	c.inc("AttachVpnGateway")
	return c.svc.AttachVpnGateway(input)
}

// AttachVpnGatewayWithContext is a passthrough to the underlying AttachVpnGatewayWithContext method.
// It will increment the count of requests made to AttachVpnGateway.
func (c *EC2) AttachVpnGatewayWithContext(ctx aws.Context, input *ec2.AttachVpnGatewayInput, opts ...request.Option) (*ec2.AttachVpnGatewayOutput, error) {
	c.inc("AttachVpnGateway")
	return c.svc.AttachVpnGatewayWithContext(ctx, input, opts...)
}

// AuthorizeSecurityGroupEgressRequest is a passthrough to the underlying AuthorizeSecurityGroupEgressRequest.
// It will increment the count of requests made to AuthorizeSecurityGroupEgress.
func (c *EC2) AuthorizeSecurityGroupEgressRequest(input *ec2.AuthorizeSecurityGroupEgressInput) (req *request.Request, output *ec2.AuthorizeSecurityGroupEgressOutput) {
	c.inc("AuthorizeSecurityGroupEgress")
	return c.svc.AuthorizeSecurityGroupEgressRequest(input)
}

// AuthorizeSecurityGroupEgress is a passthrough to the underlying AuthorizeSecurityGroupEgress method.
// It will increment the count of requests made to AuthorizeSecurityGroupEgress.
func (c *EC2) AuthorizeSecurityGroupEgress(input *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	c.inc("AuthorizeSecurityGroupEgress")
	return c.svc.AuthorizeSecurityGroupEgress(input)
}

// AuthorizeSecurityGroupEgressWithContext is a passthrough to the underlying AuthorizeSecurityGroupEgressWithContext method.
// It will increment the count of requests made to AuthorizeSecurityGroupEgress.
func (c *EC2) AuthorizeSecurityGroupEgressWithContext(ctx aws.Context, input *ec2.AuthorizeSecurityGroupEgressInput, opts ...request.Option) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	c.inc("AuthorizeSecurityGroupEgress")
	return c.svc.AuthorizeSecurityGroupEgressWithContext(ctx, input, opts...)
}

// AuthorizeSecurityGroupIngressRequest is a passthrough to the underlying AuthorizeSecurityGroupIngressRequest.
// It will increment the count of requests made to AuthorizeSecurityGroupIngress.
func (c *EC2) AuthorizeSecurityGroupIngressRequest(input *ec2.AuthorizeSecurityGroupIngressInput) (req *request.Request, output *ec2.AuthorizeSecurityGroupIngressOutput) {
	c.inc("AuthorizeSecurityGroupIngress")
	return c.svc.AuthorizeSecurityGroupIngressRequest(input)
}

// AuthorizeSecurityGroupIngress is a passthrough to the underlying AuthorizeSecurityGroupIngress method.
// It will increment the count of requests made to AuthorizeSecurityGroupIngress.
func (c *EC2) AuthorizeSecurityGroupIngress(input *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	c.inc("AuthorizeSecurityGroupIngress")
	return c.svc.AuthorizeSecurityGroupIngress(input)
}

// AuthorizeSecurityGroupIngressWithContext is a passthrough to the underlying AuthorizeSecurityGroupIngressWithContext method.
// It will increment the count of requests made to AuthorizeSecurityGroupIngress.
func (c *EC2) AuthorizeSecurityGroupIngressWithContext(ctx aws.Context, input *ec2.AuthorizeSecurityGroupIngressInput, opts ...request.Option) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	c.inc("AuthorizeSecurityGroupIngress")
	return c.svc.AuthorizeSecurityGroupIngressWithContext(ctx, input, opts...)
}

// BundleInstanceRequest is a passthrough to the underlying BundleInstanceRequest.
// It will increment the count of requests made to BundleInstance.
func (c *EC2) BundleInstanceRequest(input *ec2.BundleInstanceInput) (req *request.Request, output *ec2.BundleInstanceOutput) {
	c.inc("BundleInstance")
	return c.svc.BundleInstanceRequest(input)
}

// BundleInstance is a passthrough to the underlying BundleInstance method.
// It will increment the count of requests made to BundleInstance.
func (c *EC2) BundleInstance(input *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error) {
	c.inc("BundleInstance")
	return c.svc.BundleInstance(input)
}

// BundleInstanceWithContext is a passthrough to the underlying BundleInstanceWithContext method.
// It will increment the count of requests made to BundleInstance.
func (c *EC2) BundleInstanceWithContext(ctx aws.Context, input *ec2.BundleInstanceInput, opts ...request.Option) (*ec2.BundleInstanceOutput, error) {
	c.inc("BundleInstance")
	return c.svc.BundleInstanceWithContext(ctx, input, opts...)
}

// CancelBundleTaskRequest is a passthrough to the underlying CancelBundleTaskRequest.
// It will increment the count of requests made to CancelBundleTask.
func (c *EC2) CancelBundleTaskRequest(input *ec2.CancelBundleTaskInput) (req *request.Request, output *ec2.CancelBundleTaskOutput) {
	c.inc("CancelBundleTask")
	return c.svc.CancelBundleTaskRequest(input)
}

// CancelBundleTask is a passthrough to the underlying CancelBundleTask method.
// It will increment the count of requests made to CancelBundleTask.
func (c *EC2) CancelBundleTask(input *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error) {
	c.inc("CancelBundleTask")
	return c.svc.CancelBundleTask(input)
}

// CancelBundleTaskWithContext is a passthrough to the underlying CancelBundleTaskWithContext method.
// It will increment the count of requests made to CancelBundleTask.
func (c *EC2) CancelBundleTaskWithContext(ctx aws.Context, input *ec2.CancelBundleTaskInput, opts ...request.Option) (*ec2.CancelBundleTaskOutput, error) {
	c.inc("CancelBundleTask")
	return c.svc.CancelBundleTaskWithContext(ctx, input, opts...)
}

// CancelConversionTaskRequest is a passthrough to the underlying CancelConversionTaskRequest.
// It will increment the count of requests made to CancelConversionTask.
func (c *EC2) CancelConversionTaskRequest(input *ec2.CancelConversionTaskInput) (req *request.Request, output *ec2.CancelConversionTaskOutput) {
	c.inc("CancelConversionTask")
	return c.svc.CancelConversionTaskRequest(input)
}

// CancelConversionTask is a passthrough to the underlying CancelConversionTask method.
// It will increment the count of requests made to CancelConversionTask.
func (c *EC2) CancelConversionTask(input *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error) {
	c.inc("CancelConversionTask")
	return c.svc.CancelConversionTask(input)
}

// CancelConversionTaskWithContext is a passthrough to the underlying CancelConversionTaskWithContext method.
// It will increment the count of requests made to CancelConversionTask.
func (c *EC2) CancelConversionTaskWithContext(ctx aws.Context, input *ec2.CancelConversionTaskInput, opts ...request.Option) (*ec2.CancelConversionTaskOutput, error) {
	c.inc("CancelConversionTask")
	return c.svc.CancelConversionTaskWithContext(ctx, input, opts...)
}

// CancelExportTaskRequest is a passthrough to the underlying CancelExportTaskRequest.
// It will increment the count of requests made to CancelExportTask.
func (c *EC2) CancelExportTaskRequest(input *ec2.CancelExportTaskInput) (req *request.Request, output *ec2.CancelExportTaskOutput) {
	c.inc("CancelExportTask")
	return c.svc.CancelExportTaskRequest(input)
}

// CancelExportTask is a passthrough to the underlying CancelExportTask method.
// It will increment the count of requests made to CancelExportTask.
func (c *EC2) CancelExportTask(input *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error) {
	c.inc("CancelExportTask")
	return c.svc.CancelExportTask(input)
}

// CancelExportTaskWithContext is a passthrough to the underlying CancelExportTaskWithContext method.
// It will increment the count of requests made to CancelExportTask.
func (c *EC2) CancelExportTaskWithContext(ctx aws.Context, input *ec2.CancelExportTaskInput, opts ...request.Option) (*ec2.CancelExportTaskOutput, error) {
	c.inc("CancelExportTask")
	return c.svc.CancelExportTaskWithContext(ctx, input, opts...)
}

// CancelImportTaskRequest is a passthrough to the underlying CancelImportTaskRequest.
// It will increment the count of requests made to CancelImportTask.
func (c *EC2) CancelImportTaskRequest(input *ec2.CancelImportTaskInput) (req *request.Request, output *ec2.CancelImportTaskOutput) {
	c.inc("CancelImportTask")
	return c.svc.CancelImportTaskRequest(input)
}

// CancelImportTask is a passthrough to the underlying CancelImportTask method.
// It will increment the count of requests made to CancelImportTask.
func (c *EC2) CancelImportTask(input *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error) {
	c.inc("CancelImportTask")
	return c.svc.CancelImportTask(input)
}

// CancelImportTaskWithContext is a passthrough to the underlying CancelImportTaskWithContext method.
// It will increment the count of requests made to CancelImportTask.
func (c *EC2) CancelImportTaskWithContext(ctx aws.Context, input *ec2.CancelImportTaskInput, opts ...request.Option) (*ec2.CancelImportTaskOutput, error) {
	c.inc("CancelImportTask")
	return c.svc.CancelImportTaskWithContext(ctx, input, opts...)
}

// CancelReservedInstancesListingRequest is a passthrough to the underlying CancelReservedInstancesListingRequest.
// It will increment the count of requests made to CancelReservedInstancesListing.
func (c *EC2) CancelReservedInstancesListingRequest(input *ec2.CancelReservedInstancesListingInput) (req *request.Request, output *ec2.CancelReservedInstancesListingOutput) {
	c.inc("CancelReservedInstancesListing")
	return c.svc.CancelReservedInstancesListingRequest(input)
}

// CancelReservedInstancesListing is a passthrough to the underlying CancelReservedInstancesListing method.
// It will increment the count of requests made to CancelReservedInstancesListing.
func (c *EC2) CancelReservedInstancesListing(input *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error) {
	c.inc("CancelReservedInstancesListing")
	return c.svc.CancelReservedInstancesListing(input)
}

// CancelReservedInstancesListingWithContext is a passthrough to the underlying CancelReservedInstancesListingWithContext method.
// It will increment the count of requests made to CancelReservedInstancesListing.
func (c *EC2) CancelReservedInstancesListingWithContext(ctx aws.Context, input *ec2.CancelReservedInstancesListingInput, opts ...request.Option) (*ec2.CancelReservedInstancesListingOutput, error) {
	c.inc("CancelReservedInstancesListing")
	return c.svc.CancelReservedInstancesListingWithContext(ctx, input, opts...)
}

// CancelSpotFleetRequestsRequest is a passthrough to the underlying CancelSpotFleetRequestsRequest.
// It will increment the count of requests made to CancelSpotFleetRequests.
func (c *EC2) CancelSpotFleetRequestsRequest(input *ec2.CancelSpotFleetRequestsInput) (req *request.Request, output *ec2.CancelSpotFleetRequestsOutput) {
	c.inc("CancelSpotFleetRequests")
	return c.svc.CancelSpotFleetRequestsRequest(input)
}

// CancelSpotFleetRequests is a passthrough to the underlying CancelSpotFleetRequests method.
// It will increment the count of requests made to CancelSpotFleetRequests.
func (c *EC2) CancelSpotFleetRequests(input *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error) {
	c.inc("CancelSpotFleetRequests")
	return c.svc.CancelSpotFleetRequests(input)
}

// CancelSpotFleetRequestsWithContext is a passthrough to the underlying CancelSpotFleetRequestsWithContext method.
// It will increment the count of requests made to CancelSpotFleetRequests.
func (c *EC2) CancelSpotFleetRequestsWithContext(ctx aws.Context, input *ec2.CancelSpotFleetRequestsInput, opts ...request.Option) (*ec2.CancelSpotFleetRequestsOutput, error) {
	c.inc("CancelSpotFleetRequests")
	return c.svc.CancelSpotFleetRequestsWithContext(ctx, input, opts...)
}

// CancelSpotInstanceRequestsRequest is a passthrough to the underlying CancelSpotInstanceRequestsRequest.
// It will increment the count of requests made to CancelSpotInstanceRequests.
func (c *EC2) CancelSpotInstanceRequestsRequest(input *ec2.CancelSpotInstanceRequestsInput) (req *request.Request, output *ec2.CancelSpotInstanceRequestsOutput) {
	c.inc("CancelSpotInstanceRequests")
	return c.svc.CancelSpotInstanceRequestsRequest(input)
}

// CancelSpotInstanceRequests is a passthrough to the underlying CancelSpotInstanceRequests method.
// It will increment the count of requests made to CancelSpotInstanceRequests.
func (c *EC2) CancelSpotInstanceRequests(input *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	c.inc("CancelSpotInstanceRequests")
	return c.svc.CancelSpotInstanceRequests(input)
}

// CancelSpotInstanceRequestsWithContext is a passthrough to the underlying CancelSpotInstanceRequestsWithContext method.
// It will increment the count of requests made to CancelSpotInstanceRequests.
func (c *EC2) CancelSpotInstanceRequestsWithContext(ctx aws.Context, input *ec2.CancelSpotInstanceRequestsInput, opts ...request.Option) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	c.inc("CancelSpotInstanceRequests")
	return c.svc.CancelSpotInstanceRequestsWithContext(ctx, input, opts...)
}

// ConfirmProductInstanceRequest is a passthrough to the underlying ConfirmProductInstanceRequest.
// It will increment the count of requests made to ConfirmProductInstance.
func (c *EC2) ConfirmProductInstanceRequest(input *ec2.ConfirmProductInstanceInput) (req *request.Request, output *ec2.ConfirmProductInstanceOutput) {
	c.inc("ConfirmProductInstance")
	return c.svc.ConfirmProductInstanceRequest(input)
}

// ConfirmProductInstance is a passthrough to the underlying ConfirmProductInstance method.
// It will increment the count of requests made to ConfirmProductInstance.
func (c *EC2) ConfirmProductInstance(input *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error) {
	c.inc("ConfirmProductInstance")
	return c.svc.ConfirmProductInstance(input)
}

// ConfirmProductInstanceWithContext is a passthrough to the underlying ConfirmProductInstanceWithContext method.
// It will increment the count of requests made to ConfirmProductInstance.
func (c *EC2) ConfirmProductInstanceWithContext(ctx aws.Context, input *ec2.ConfirmProductInstanceInput, opts ...request.Option) (*ec2.ConfirmProductInstanceOutput, error) {
	c.inc("ConfirmProductInstance")
	return c.svc.ConfirmProductInstanceWithContext(ctx, input, opts...)
}

// CopyFpgaImageRequest is a passthrough to the underlying CopyFpgaImageRequest.
// It will increment the count of requests made to CopyFpgaImage.
func (c *EC2) CopyFpgaImageRequest(input *ec2.CopyFpgaImageInput) (req *request.Request, output *ec2.CopyFpgaImageOutput) {
	c.inc("CopyFpgaImage")
	return c.svc.CopyFpgaImageRequest(input)
}

// CopyFpgaImage is a passthrough to the underlying CopyFpgaImage method.
// It will increment the count of requests made to CopyFpgaImage.
func (c *EC2) CopyFpgaImage(input *ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error) {
	c.inc("CopyFpgaImage")
	return c.svc.CopyFpgaImage(input)
}

// CopyFpgaImageWithContext is a passthrough to the underlying CopyFpgaImageWithContext method.
// It will increment the count of requests made to CopyFpgaImage.
func (c *EC2) CopyFpgaImageWithContext(ctx aws.Context, input *ec2.CopyFpgaImageInput, opts ...request.Option) (*ec2.CopyFpgaImageOutput, error) {
	c.inc("CopyFpgaImage")
	return c.svc.CopyFpgaImageWithContext(ctx, input, opts...)
}

// CopyImageRequest is a passthrough to the underlying CopyImageRequest.
// It will increment the count of requests made to CopyImage.
func (c *EC2) CopyImageRequest(input *ec2.CopyImageInput) (req *request.Request, output *ec2.CopyImageOutput) {
	c.inc("CopyImage")
	return c.svc.CopyImageRequest(input)
}

// CopyImage is a passthrough to the underlying CopyImage method.
// It will increment the count of requests made to CopyImage.
func (c *EC2) CopyImage(input *ec2.CopyImageInput) (*ec2.CopyImageOutput, error) {
	c.inc("CopyImage")
	return c.svc.CopyImage(input)
}

// CopyImageWithContext is a passthrough to the underlying CopyImageWithContext method.
// It will increment the count of requests made to CopyImage.
func (c *EC2) CopyImageWithContext(ctx aws.Context, input *ec2.CopyImageInput, opts ...request.Option) (*ec2.CopyImageOutput, error) {
	c.inc("CopyImage")
	return c.svc.CopyImageWithContext(ctx, input, opts...)
}

// CopySnapshotRequest is a passthrough to the underlying CopySnapshotRequest.
// It will increment the count of requests made to CopySnapshot.
func (c *EC2) CopySnapshotRequest(input *ec2.CopySnapshotInput) (req *request.Request, output *ec2.CopySnapshotOutput) {
	c.inc("CopySnapshot")
	return c.svc.CopySnapshotRequest(input)
}

// CopySnapshot is a passthrough to the underlying CopySnapshot method.
// It will increment the count of requests made to CopySnapshot.
func (c *EC2) CopySnapshot(input *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error) {
	c.inc("CopySnapshot")
	return c.svc.CopySnapshot(input)
}

// CopySnapshotWithContext is a passthrough to the underlying CopySnapshotWithContext method.
// It will increment the count of requests made to CopySnapshot.
func (c *EC2) CopySnapshotWithContext(ctx aws.Context, input *ec2.CopySnapshotInput, opts ...request.Option) (*ec2.CopySnapshotOutput, error) {
	c.inc("CopySnapshot")
	return c.svc.CopySnapshotWithContext(ctx, input, opts...)
}

// CreateCustomerGatewayRequest is a passthrough to the underlying CreateCustomerGatewayRequest.
// It will increment the count of requests made to CreateCustomerGateway.
func (c *EC2) CreateCustomerGatewayRequest(input *ec2.CreateCustomerGatewayInput) (req *request.Request, output *ec2.CreateCustomerGatewayOutput) {
	c.inc("CreateCustomerGateway")
	return c.svc.CreateCustomerGatewayRequest(input)
}

// CreateCustomerGateway is a passthrough to the underlying CreateCustomerGateway method.
// It will increment the count of requests made to CreateCustomerGateway.
func (c *EC2) CreateCustomerGateway(input *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error) {
	c.inc("CreateCustomerGateway")
	return c.svc.CreateCustomerGateway(input)
}

// CreateCustomerGatewayWithContext is a passthrough to the underlying CreateCustomerGatewayWithContext method.
// It will increment the count of requests made to CreateCustomerGateway.
func (c *EC2) CreateCustomerGatewayWithContext(ctx aws.Context, input *ec2.CreateCustomerGatewayInput, opts ...request.Option) (*ec2.CreateCustomerGatewayOutput, error) {
	c.inc("CreateCustomerGateway")
	return c.svc.CreateCustomerGatewayWithContext(ctx, input, opts...)
}

// CreateDefaultVpcRequest is a passthrough to the underlying CreateDefaultVpcRequest.
// It will increment the count of requests made to CreateDefaultVpc.
func (c *EC2) CreateDefaultVpcRequest(input *ec2.CreateDefaultVpcInput) (req *request.Request, output *ec2.CreateDefaultVpcOutput) {
	c.inc("CreateDefaultVpc")
	return c.svc.CreateDefaultVpcRequest(input)
}

// CreateDefaultVpc is a passthrough to the underlying CreateDefaultVpc method.
// It will increment the count of requests made to CreateDefaultVpc.
func (c *EC2) CreateDefaultVpc(input *ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error) {
	c.inc("CreateDefaultVpc")
	return c.svc.CreateDefaultVpc(input)
}

// CreateDefaultVpcWithContext is a passthrough to the underlying CreateDefaultVpcWithContext method.
// It will increment the count of requests made to CreateDefaultVpc.
func (c *EC2) CreateDefaultVpcWithContext(ctx aws.Context, input *ec2.CreateDefaultVpcInput, opts ...request.Option) (*ec2.CreateDefaultVpcOutput, error) {
	c.inc("CreateDefaultVpc")
	return c.svc.CreateDefaultVpcWithContext(ctx, input, opts...)
}

// CreateDhcpOptionsRequest is a passthrough to the underlying CreateDhcpOptionsRequest.
// It will increment the count of requests made to CreateDhcpOptions.
func (c *EC2) CreateDhcpOptionsRequest(input *ec2.CreateDhcpOptionsInput) (req *request.Request, output *ec2.CreateDhcpOptionsOutput) {
	c.inc("CreateDhcpOptions")
	return c.svc.CreateDhcpOptionsRequest(input)
}

// CreateDhcpOptions is a passthrough to the underlying CreateDhcpOptions method.
// It will increment the count of requests made to CreateDhcpOptions.
func (c *EC2) CreateDhcpOptions(input *ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error) {
	c.inc("CreateDhcpOptions")
	return c.svc.CreateDhcpOptions(input)
}

// CreateDhcpOptionsWithContext is a passthrough to the underlying CreateDhcpOptionsWithContext method.
// It will increment the count of requests made to CreateDhcpOptions.
func (c *EC2) CreateDhcpOptionsWithContext(ctx aws.Context, input *ec2.CreateDhcpOptionsInput, opts ...request.Option) (*ec2.CreateDhcpOptionsOutput, error) {
	c.inc("CreateDhcpOptions")
	return c.svc.CreateDhcpOptionsWithContext(ctx, input, opts...)
}

// CreateEgressOnlyInternetGatewayRequest is a passthrough to the underlying CreateEgressOnlyInternetGatewayRequest.
// It will increment the count of requests made to CreateEgressOnlyInternetGateway.
func (c *EC2) CreateEgressOnlyInternetGatewayRequest(input *ec2.CreateEgressOnlyInternetGatewayInput) (req *request.Request, output *ec2.CreateEgressOnlyInternetGatewayOutput) {
	c.inc("CreateEgressOnlyInternetGateway")
	return c.svc.CreateEgressOnlyInternetGatewayRequest(input)
}

// CreateEgressOnlyInternetGateway is a passthrough to the underlying CreateEgressOnlyInternetGateway method.
// It will increment the count of requests made to CreateEgressOnlyInternetGateway.
func (c *EC2) CreateEgressOnlyInternetGateway(input *ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	c.inc("CreateEgressOnlyInternetGateway")
	return c.svc.CreateEgressOnlyInternetGateway(input)
}

// CreateEgressOnlyInternetGatewayWithContext is a passthrough to the underlying CreateEgressOnlyInternetGatewayWithContext method.
// It will increment the count of requests made to CreateEgressOnlyInternetGateway.
func (c *EC2) CreateEgressOnlyInternetGatewayWithContext(ctx aws.Context, input *ec2.CreateEgressOnlyInternetGatewayInput, opts ...request.Option) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	c.inc("CreateEgressOnlyInternetGateway")
	return c.svc.CreateEgressOnlyInternetGatewayWithContext(ctx, input, opts...)
}

// CreateFlowLogsRequest is a passthrough to the underlying CreateFlowLogsRequest.
// It will increment the count of requests made to CreateFlowLogs.
func (c *EC2) CreateFlowLogsRequest(input *ec2.CreateFlowLogsInput) (req *request.Request, output *ec2.CreateFlowLogsOutput) {
	c.inc("CreateFlowLogs")
	return c.svc.CreateFlowLogsRequest(input)
}

// CreateFlowLogs is a passthrough to the underlying CreateFlowLogs method.
// It will increment the count of requests made to CreateFlowLogs.
func (c *EC2) CreateFlowLogs(input *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error) {
	c.inc("CreateFlowLogs")
	return c.svc.CreateFlowLogs(input)
}

// CreateFlowLogsWithContext is a passthrough to the underlying CreateFlowLogsWithContext method.
// It will increment the count of requests made to CreateFlowLogs.
func (c *EC2) CreateFlowLogsWithContext(ctx aws.Context, input *ec2.CreateFlowLogsInput, opts ...request.Option) (*ec2.CreateFlowLogsOutput, error) {
	c.inc("CreateFlowLogs")
	return c.svc.CreateFlowLogsWithContext(ctx, input, opts...)
}

// CreateFpgaImageRequest is a passthrough to the underlying CreateFpgaImageRequest.
// It will increment the count of requests made to CreateFpgaImage.
func (c *EC2) CreateFpgaImageRequest(input *ec2.CreateFpgaImageInput) (req *request.Request, output *ec2.CreateFpgaImageOutput) {
	c.inc("CreateFpgaImage")
	return c.svc.CreateFpgaImageRequest(input)
}

// CreateFpgaImage is a passthrough to the underlying CreateFpgaImage method.
// It will increment the count of requests made to CreateFpgaImage.
func (c *EC2) CreateFpgaImage(input *ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error) {
	c.inc("CreateFpgaImage")
	return c.svc.CreateFpgaImage(input)
}

// CreateFpgaImageWithContext is a passthrough to the underlying CreateFpgaImageWithContext method.
// It will increment the count of requests made to CreateFpgaImage.
func (c *EC2) CreateFpgaImageWithContext(ctx aws.Context, input *ec2.CreateFpgaImageInput, opts ...request.Option) (*ec2.CreateFpgaImageOutput, error) {
	c.inc("CreateFpgaImage")
	return c.svc.CreateFpgaImageWithContext(ctx, input, opts...)
}

// CreateImageRequest is a passthrough to the underlying CreateImageRequest.
// It will increment the count of requests made to CreateImage.
func (c *EC2) CreateImageRequest(input *ec2.CreateImageInput) (req *request.Request, output *ec2.CreateImageOutput) {
	c.inc("CreateImage")
	return c.svc.CreateImageRequest(input)
}

// CreateImage is a passthrough to the underlying CreateImage method.
// It will increment the count of requests made to CreateImage.
func (c *EC2) CreateImage(input *ec2.CreateImageInput) (*ec2.CreateImageOutput, error) {
	c.inc("CreateImage")
	return c.svc.CreateImage(input)
}

// CreateImageWithContext is a passthrough to the underlying CreateImageWithContext method.
// It will increment the count of requests made to CreateImage.
func (c *EC2) CreateImageWithContext(ctx aws.Context, input *ec2.CreateImageInput, opts ...request.Option) (*ec2.CreateImageOutput, error) {
	c.inc("CreateImage")
	return c.svc.CreateImageWithContext(ctx, input, opts...)
}

// CreateInstanceExportTaskRequest is a passthrough to the underlying CreateInstanceExportTaskRequest.
// It will increment the count of requests made to CreateInstanceExportTask.
func (c *EC2) CreateInstanceExportTaskRequest(input *ec2.CreateInstanceExportTaskInput) (req *request.Request, output *ec2.CreateInstanceExportTaskOutput) {
	c.inc("CreateInstanceExportTask")
	return c.svc.CreateInstanceExportTaskRequest(input)
}

// CreateInstanceExportTask is a passthrough to the underlying CreateInstanceExportTask method.
// It will increment the count of requests made to CreateInstanceExportTask.
func (c *EC2) CreateInstanceExportTask(input *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error) {
	c.inc("CreateInstanceExportTask")
	return c.svc.CreateInstanceExportTask(input)
}

// CreateInstanceExportTaskWithContext is a passthrough to the underlying CreateInstanceExportTaskWithContext method.
// It will increment the count of requests made to CreateInstanceExportTask.
func (c *EC2) CreateInstanceExportTaskWithContext(ctx aws.Context, input *ec2.CreateInstanceExportTaskInput, opts ...request.Option) (*ec2.CreateInstanceExportTaskOutput, error) {
	c.inc("CreateInstanceExportTask")
	return c.svc.CreateInstanceExportTaskWithContext(ctx, input, opts...)
}

// CreateInternetGatewayRequest is a passthrough to the underlying CreateInternetGatewayRequest.
// It will increment the count of requests made to CreateInternetGateway.
func (c *EC2) CreateInternetGatewayRequest(input *ec2.CreateInternetGatewayInput) (req *request.Request, output *ec2.CreateInternetGatewayOutput) {
	c.inc("CreateInternetGateway")
	return c.svc.CreateInternetGatewayRequest(input)
}

// CreateInternetGateway is a passthrough to the underlying CreateInternetGateway method.
// It will increment the count of requests made to CreateInternetGateway.
func (c *EC2) CreateInternetGateway(input *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error) {
	c.inc("CreateInternetGateway")
	return c.svc.CreateInternetGateway(input)
}

// CreateInternetGatewayWithContext is a passthrough to the underlying CreateInternetGatewayWithContext method.
// It will increment the count of requests made to CreateInternetGateway.
func (c *EC2) CreateInternetGatewayWithContext(ctx aws.Context, input *ec2.CreateInternetGatewayInput, opts ...request.Option) (*ec2.CreateInternetGatewayOutput, error) {
	c.inc("CreateInternetGateway")
	return c.svc.CreateInternetGatewayWithContext(ctx, input, opts...)
}

// CreateKeyPairRequest is a passthrough to the underlying CreateKeyPairRequest.
// It will increment the count of requests made to CreateKeyPair.
func (c *EC2) CreateKeyPairRequest(input *ec2.CreateKeyPairInput) (req *request.Request, output *ec2.CreateKeyPairOutput) {
	c.inc("CreateKeyPair")
	return c.svc.CreateKeyPairRequest(input)
}

// CreateKeyPair is a passthrough to the underlying CreateKeyPair method.
// It will increment the count of requests made to CreateKeyPair.
func (c *EC2) CreateKeyPair(input *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error) {
	c.inc("CreateKeyPair")
	return c.svc.CreateKeyPair(input)
}

// CreateKeyPairWithContext is a passthrough to the underlying CreateKeyPairWithContext method.
// It will increment the count of requests made to CreateKeyPair.
func (c *EC2) CreateKeyPairWithContext(ctx aws.Context, input *ec2.CreateKeyPairInput, opts ...request.Option) (*ec2.CreateKeyPairOutput, error) {
	c.inc("CreateKeyPair")
	return c.svc.CreateKeyPairWithContext(ctx, input, opts...)
}

// CreateNatGatewayRequest is a passthrough to the underlying CreateNatGatewayRequest.
// It will increment the count of requests made to CreateNatGateway.
func (c *EC2) CreateNatGatewayRequest(input *ec2.CreateNatGatewayInput) (req *request.Request, output *ec2.CreateNatGatewayOutput) {
	c.inc("CreateNatGateway")
	return c.svc.CreateNatGatewayRequest(input)
}

// CreateNatGateway is a passthrough to the underlying CreateNatGateway method.
// It will increment the count of requests made to CreateNatGateway.
func (c *EC2) CreateNatGateway(input *ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error) {
	c.inc("CreateNatGateway")
	return c.svc.CreateNatGateway(input)
}

// CreateNatGatewayWithContext is a passthrough to the underlying CreateNatGatewayWithContext method.
// It will increment the count of requests made to CreateNatGateway.
func (c *EC2) CreateNatGatewayWithContext(ctx aws.Context, input *ec2.CreateNatGatewayInput, opts ...request.Option) (*ec2.CreateNatGatewayOutput, error) {
	c.inc("CreateNatGateway")
	return c.svc.CreateNatGatewayWithContext(ctx, input, opts...)
}

// CreateNetworkAclRequest is a passthrough to the underlying CreateNetworkAclRequest.
// It will increment the count of requests made to CreateNetworkAcl.
func (c *EC2) CreateNetworkAclRequest(input *ec2.CreateNetworkAclInput) (req *request.Request, output *ec2.CreateNetworkAclOutput) {
	c.inc("CreateNetworkAcl")
	return c.svc.CreateNetworkAclRequest(input)
}

// CreateNetworkAcl is a passthrough to the underlying CreateNetworkAcl method.
// It will increment the count of requests made to CreateNetworkAcl.
func (c *EC2) CreateNetworkAcl(input *ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error) {
	c.inc("CreateNetworkAcl")
	return c.svc.CreateNetworkAcl(input)
}

// CreateNetworkAclWithContext is a passthrough to the underlying CreateNetworkAclWithContext method.
// It will increment the count of requests made to CreateNetworkAcl.
func (c *EC2) CreateNetworkAclWithContext(ctx aws.Context, input *ec2.CreateNetworkAclInput, opts ...request.Option) (*ec2.CreateNetworkAclOutput, error) {
	c.inc("CreateNetworkAcl")
	return c.svc.CreateNetworkAclWithContext(ctx, input, opts...)
}

// CreateNetworkAclEntryRequest is a passthrough to the underlying CreateNetworkAclEntryRequest.
// It will increment the count of requests made to CreateNetworkAclEntry.
func (c *EC2) CreateNetworkAclEntryRequest(input *ec2.CreateNetworkAclEntryInput) (req *request.Request, output *ec2.CreateNetworkAclEntryOutput) {
	c.inc("CreateNetworkAclEntry")
	return c.svc.CreateNetworkAclEntryRequest(input)
}

// CreateNetworkAclEntry is a passthrough to the underlying CreateNetworkAclEntry method.
// It will increment the count of requests made to CreateNetworkAclEntry.
func (c *EC2) CreateNetworkAclEntry(input *ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error) {
	c.inc("CreateNetworkAclEntry")
	return c.svc.CreateNetworkAclEntry(input)
}

// CreateNetworkAclEntryWithContext is a passthrough to the underlying CreateNetworkAclEntryWithContext method.
// It will increment the count of requests made to CreateNetworkAclEntry.
func (c *EC2) CreateNetworkAclEntryWithContext(ctx aws.Context, input *ec2.CreateNetworkAclEntryInput, opts ...request.Option) (*ec2.CreateNetworkAclEntryOutput, error) {
	c.inc("CreateNetworkAclEntry")
	return c.svc.CreateNetworkAclEntryWithContext(ctx, input, opts...)
}

// CreateNetworkInterfaceRequest is a passthrough to the underlying CreateNetworkInterfaceRequest.
// It will increment the count of requests made to CreateNetworkInterface.
func (c *EC2) CreateNetworkInterfaceRequest(input *ec2.CreateNetworkInterfaceInput) (req *request.Request, output *ec2.CreateNetworkInterfaceOutput) {
	c.inc("CreateNetworkInterface")
	return c.svc.CreateNetworkInterfaceRequest(input)
}

// CreateNetworkInterface is a passthrough to the underlying CreateNetworkInterface method.
// It will increment the count of requests made to CreateNetworkInterface.
func (c *EC2) CreateNetworkInterface(input *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error) {
	c.inc("CreateNetworkInterface")
	return c.svc.CreateNetworkInterface(input)
}

// CreateNetworkInterfaceWithContext is a passthrough to the underlying CreateNetworkInterfaceWithContext method.
// It will increment the count of requests made to CreateNetworkInterface.
func (c *EC2) CreateNetworkInterfaceWithContext(ctx aws.Context, input *ec2.CreateNetworkInterfaceInput, opts ...request.Option) (*ec2.CreateNetworkInterfaceOutput, error) {
	c.inc("CreateNetworkInterface")
	return c.svc.CreateNetworkInterfaceWithContext(ctx, input, opts...)
}

// CreateNetworkInterfacePermissionRequest is a passthrough to the underlying CreateNetworkInterfacePermissionRequest.
// It will increment the count of requests made to CreateNetworkInterfacePermission.
func (c *EC2) CreateNetworkInterfacePermissionRequest(input *ec2.CreateNetworkInterfacePermissionInput) (req *request.Request, output *ec2.CreateNetworkInterfacePermissionOutput) {
	c.inc("CreateNetworkInterfacePermission")
	return c.svc.CreateNetworkInterfacePermissionRequest(input)
}

// CreateNetworkInterfacePermission is a passthrough to the underlying CreateNetworkInterfacePermission method.
// It will increment the count of requests made to CreateNetworkInterfacePermission.
func (c *EC2) CreateNetworkInterfacePermission(input *ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	c.inc("CreateNetworkInterfacePermission")
	return c.svc.CreateNetworkInterfacePermission(input)
}

// CreateNetworkInterfacePermissionWithContext is a passthrough to the underlying CreateNetworkInterfacePermissionWithContext method.
// It will increment the count of requests made to CreateNetworkInterfacePermission.
func (c *EC2) CreateNetworkInterfacePermissionWithContext(ctx aws.Context, input *ec2.CreateNetworkInterfacePermissionInput, opts ...request.Option) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	c.inc("CreateNetworkInterfacePermission")
	return c.svc.CreateNetworkInterfacePermissionWithContext(ctx, input, opts...)
}

// CreatePlacementGroupRequest is a passthrough to the underlying CreatePlacementGroupRequest.
// It will increment the count of requests made to CreatePlacementGroup.
func (c *EC2) CreatePlacementGroupRequest(input *ec2.CreatePlacementGroupInput) (req *request.Request, output *ec2.CreatePlacementGroupOutput) {
	c.inc("CreatePlacementGroup")
	return c.svc.CreatePlacementGroupRequest(input)
}

// CreatePlacementGroup is a passthrough to the underlying CreatePlacementGroup method.
// It will increment the count of requests made to CreatePlacementGroup.
func (c *EC2) CreatePlacementGroup(input *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error) {
	c.inc("CreatePlacementGroup")
	return c.svc.CreatePlacementGroup(input)
}

// CreatePlacementGroupWithContext is a passthrough to the underlying CreatePlacementGroupWithContext method.
// It will increment the count of requests made to CreatePlacementGroup.
func (c *EC2) CreatePlacementGroupWithContext(ctx aws.Context, input *ec2.CreatePlacementGroupInput, opts ...request.Option) (*ec2.CreatePlacementGroupOutput, error) {
	c.inc("CreatePlacementGroup")
	return c.svc.CreatePlacementGroupWithContext(ctx, input, opts...)
}

// CreateReservedInstancesListingRequest is a passthrough to the underlying CreateReservedInstancesListingRequest.
// It will increment the count of requests made to CreateReservedInstancesListing.
func (c *EC2) CreateReservedInstancesListingRequest(input *ec2.CreateReservedInstancesListingInput) (req *request.Request, output *ec2.CreateReservedInstancesListingOutput) {
	c.inc("CreateReservedInstancesListing")
	return c.svc.CreateReservedInstancesListingRequest(input)
}

// CreateReservedInstancesListing is a passthrough to the underlying CreateReservedInstancesListing method.
// It will increment the count of requests made to CreateReservedInstancesListing.
func (c *EC2) CreateReservedInstancesListing(input *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error) {
	c.inc("CreateReservedInstancesListing")
	return c.svc.CreateReservedInstancesListing(input)
}

// CreateReservedInstancesListingWithContext is a passthrough to the underlying CreateReservedInstancesListingWithContext method.
// It will increment the count of requests made to CreateReservedInstancesListing.
func (c *EC2) CreateReservedInstancesListingWithContext(ctx aws.Context, input *ec2.CreateReservedInstancesListingInput, opts ...request.Option) (*ec2.CreateReservedInstancesListingOutput, error) {
	c.inc("CreateReservedInstancesListing")
	return c.svc.CreateReservedInstancesListingWithContext(ctx, input, opts...)
}

// CreateRouteRequest is a passthrough to the underlying CreateRouteRequest.
// It will increment the count of requests made to CreateRoute.
func (c *EC2) CreateRouteRequest(input *ec2.CreateRouteInput) (req *request.Request, output *ec2.CreateRouteOutput) {
	c.inc("CreateRoute")
	return c.svc.CreateRouteRequest(input)
}

// CreateRoute is a passthrough to the underlying CreateRoute method.
// It will increment the count of requests made to CreateRoute.
func (c *EC2) CreateRoute(input *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error) {
	c.inc("CreateRoute")
	return c.svc.CreateRoute(input)
}

// CreateRouteWithContext is a passthrough to the underlying CreateRouteWithContext method.
// It will increment the count of requests made to CreateRoute.
func (c *EC2) CreateRouteWithContext(ctx aws.Context, input *ec2.CreateRouteInput, opts ...request.Option) (*ec2.CreateRouteOutput, error) {
	c.inc("CreateRoute")
	return c.svc.CreateRouteWithContext(ctx, input, opts...)
}

// CreateRouteTableRequest is a passthrough to the underlying CreateRouteTableRequest.
// It will increment the count of requests made to CreateRouteTable.
func (c *EC2) CreateRouteTableRequest(input *ec2.CreateRouteTableInput) (req *request.Request, output *ec2.CreateRouteTableOutput) {
	c.inc("CreateRouteTable")
	return c.svc.CreateRouteTableRequest(input)
}

// CreateRouteTable is a passthrough to the underlying CreateRouteTable method.
// It will increment the count of requests made to CreateRouteTable.
func (c *EC2) CreateRouteTable(input *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error) {
	c.inc("CreateRouteTable")
	return c.svc.CreateRouteTable(input)
}

// CreateRouteTableWithContext is a passthrough to the underlying CreateRouteTableWithContext method.
// It will increment the count of requests made to CreateRouteTable.
func (c *EC2) CreateRouteTableWithContext(ctx aws.Context, input *ec2.CreateRouteTableInput, opts ...request.Option) (*ec2.CreateRouteTableOutput, error) {
	c.inc("CreateRouteTable")
	return c.svc.CreateRouteTableWithContext(ctx, input, opts...)
}

// CreateSecurityGroupRequest is a passthrough to the underlying CreateSecurityGroupRequest.
// It will increment the count of requests made to CreateSecurityGroup.
func (c *EC2) CreateSecurityGroupRequest(input *ec2.CreateSecurityGroupInput) (req *request.Request, output *ec2.CreateSecurityGroupOutput) {
	c.inc("CreateSecurityGroup")
	return c.svc.CreateSecurityGroupRequest(input)
}

// CreateSecurityGroup is a passthrough to the underlying CreateSecurityGroup method.
// It will increment the count of requests made to CreateSecurityGroup.
func (c *EC2) CreateSecurityGroup(input *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error) {
	c.inc("CreateSecurityGroup")
	return c.svc.CreateSecurityGroup(input)
}

// CreateSecurityGroupWithContext is a passthrough to the underlying CreateSecurityGroupWithContext method.
// It will increment the count of requests made to CreateSecurityGroup.
func (c *EC2) CreateSecurityGroupWithContext(ctx aws.Context, input *ec2.CreateSecurityGroupInput, opts ...request.Option) (*ec2.CreateSecurityGroupOutput, error) {
	c.inc("CreateSecurityGroup")
	return c.svc.CreateSecurityGroupWithContext(ctx, input, opts...)
}

// CreateSnapshotRequest is a passthrough to the underlying CreateSnapshotRequest.
// It will increment the count of requests made to CreateSnapshot.
func (c *EC2) CreateSnapshotRequest(input *ec2.CreateSnapshotInput) (req *request.Request, output *ec2.Snapshot) {
	c.inc("CreateSnapshot")
	return c.svc.CreateSnapshotRequest(input)
}

// CreateSnapshot is a passthrough to the underlying CreateSnapshot method.
// It will increment the count of requests made to CreateSnapshot.
func (c *EC2) CreateSnapshot(input *ec2.CreateSnapshotInput) (*ec2.Snapshot, error) {
	c.inc("CreateSnapshot")
	return c.svc.CreateSnapshot(input)
}

// CreateSnapshotWithContext is a passthrough to the underlying CreateSnapshotWithContext method.
// It will increment the count of requests made to CreateSnapshot.
func (c *EC2) CreateSnapshotWithContext(ctx aws.Context, input *ec2.CreateSnapshotInput, opts ...request.Option) (*ec2.Snapshot, error) {
	c.inc("CreateSnapshot")
	return c.svc.CreateSnapshotWithContext(ctx, input, opts...)
}

// CreateSpotDatafeedSubscriptionRequest is a passthrough to the underlying CreateSpotDatafeedSubscriptionRequest.
// It will increment the count of requests made to CreateSpotDatafeedSubscription.
func (c *EC2) CreateSpotDatafeedSubscriptionRequest(input *ec2.CreateSpotDatafeedSubscriptionInput) (req *request.Request, output *ec2.CreateSpotDatafeedSubscriptionOutput) {
	c.inc("CreateSpotDatafeedSubscription")
	return c.svc.CreateSpotDatafeedSubscriptionRequest(input)
}

// CreateSpotDatafeedSubscription is a passthrough to the underlying CreateSpotDatafeedSubscription method.
// It will increment the count of requests made to CreateSpotDatafeedSubscription.
func (c *EC2) CreateSpotDatafeedSubscription(input *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	c.inc("CreateSpotDatafeedSubscription")
	return c.svc.CreateSpotDatafeedSubscription(input)
}

// CreateSpotDatafeedSubscriptionWithContext is a passthrough to the underlying CreateSpotDatafeedSubscriptionWithContext method.
// It will increment the count of requests made to CreateSpotDatafeedSubscription.
func (c *EC2) CreateSpotDatafeedSubscriptionWithContext(ctx aws.Context, input *ec2.CreateSpotDatafeedSubscriptionInput, opts ...request.Option) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	c.inc("CreateSpotDatafeedSubscription")
	return c.svc.CreateSpotDatafeedSubscriptionWithContext(ctx, input, opts...)
}

// CreateSubnetRequest is a passthrough to the underlying CreateSubnetRequest.
// It will increment the count of requests made to CreateSubnet.
func (c *EC2) CreateSubnetRequest(input *ec2.CreateSubnetInput) (req *request.Request, output *ec2.CreateSubnetOutput) {
	c.inc("CreateSubnet")
	return c.svc.CreateSubnetRequest(input)
}

// CreateSubnet is a passthrough to the underlying CreateSubnet method.
// It will increment the count of requests made to CreateSubnet.
func (c *EC2) CreateSubnet(input *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error) {
	c.inc("CreateSubnet")
	return c.svc.CreateSubnet(input)
}

// CreateSubnetWithContext is a passthrough to the underlying CreateSubnetWithContext method.
// It will increment the count of requests made to CreateSubnet.
func (c *EC2) CreateSubnetWithContext(ctx aws.Context, input *ec2.CreateSubnetInput, opts ...request.Option) (*ec2.CreateSubnetOutput, error) {
	c.inc("CreateSubnet")
	return c.svc.CreateSubnetWithContext(ctx, input, opts...)
}

// CreateTagsRequest is a passthrough to the underlying CreateTagsRequest.
// It will increment the count of requests made to CreateTags.
func (c *EC2) CreateTagsRequest(input *ec2.CreateTagsInput) (req *request.Request, output *ec2.CreateTagsOutput) {
	c.inc("CreateTags")
	return c.svc.CreateTagsRequest(input)
}

// CreateTags is a passthrough to the underlying CreateTags method.
// It will increment the count of requests made to CreateTags.
func (c *EC2) CreateTags(input *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {
	c.inc("CreateTags")
	return c.svc.CreateTags(input)
}

// CreateTagsWithContext is a passthrough to the underlying CreateTagsWithContext method.
// It will increment the count of requests made to CreateTags.
func (c *EC2) CreateTagsWithContext(ctx aws.Context, input *ec2.CreateTagsInput, opts ...request.Option) (*ec2.CreateTagsOutput, error) {
	c.inc("CreateTags")
	return c.svc.CreateTagsWithContext(ctx, input, opts...)
}

// CreateVolumeRequest is a passthrough to the underlying CreateVolumeRequest.
// It will increment the count of requests made to CreateVolume.
func (c *EC2) CreateVolumeRequest(input *ec2.CreateVolumeInput) (req *request.Request, output *ec2.Volume) {
	c.inc("CreateVolume")
	return c.svc.CreateVolumeRequest(input)
}

// CreateVolume is a passthrough to the underlying CreateVolume method.
// It will increment the count of requests made to CreateVolume.
func (c *EC2) CreateVolume(input *ec2.CreateVolumeInput) (*ec2.Volume, error) {
	c.inc("CreateVolume")
	return c.svc.CreateVolume(input)
}

// CreateVolumeWithContext is a passthrough to the underlying CreateVolumeWithContext method.
// It will increment the count of requests made to CreateVolume.
func (c *EC2) CreateVolumeWithContext(ctx aws.Context, input *ec2.CreateVolumeInput, opts ...request.Option) (*ec2.Volume, error) {
	c.inc("CreateVolume")
	return c.svc.CreateVolumeWithContext(ctx, input, opts...)
}

// CreateVpcRequest is a passthrough to the underlying CreateVpcRequest.
// It will increment the count of requests made to CreateVpc.
func (c *EC2) CreateVpcRequest(input *ec2.CreateVpcInput) (req *request.Request, output *ec2.CreateVpcOutput) {
	c.inc("CreateVpc")
	return c.svc.CreateVpcRequest(input)
}

// CreateVpc is a passthrough to the underlying CreateVpc method.
// It will increment the count of requests made to CreateVpc.
func (c *EC2) CreateVpc(input *ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error) {
	c.inc("CreateVpc")
	return c.svc.CreateVpc(input)
}

// CreateVpcWithContext is a passthrough to the underlying CreateVpcWithContext method.
// It will increment the count of requests made to CreateVpc.
func (c *EC2) CreateVpcWithContext(ctx aws.Context, input *ec2.CreateVpcInput, opts ...request.Option) (*ec2.CreateVpcOutput, error) {
	c.inc("CreateVpc")
	return c.svc.CreateVpcWithContext(ctx, input, opts...)
}

// CreateVpcEndpointRequest is a passthrough to the underlying CreateVpcEndpointRequest.
// It will increment the count of requests made to CreateVpcEndpoint.
func (c *EC2) CreateVpcEndpointRequest(input *ec2.CreateVpcEndpointInput) (req *request.Request, output *ec2.CreateVpcEndpointOutput) {
	c.inc("CreateVpcEndpoint")
	return c.svc.CreateVpcEndpointRequest(input)
}

// CreateVpcEndpoint is a passthrough to the underlying CreateVpcEndpoint method.
// It will increment the count of requests made to CreateVpcEndpoint.
func (c *EC2) CreateVpcEndpoint(input *ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error) {
	c.inc("CreateVpcEndpoint")
	return c.svc.CreateVpcEndpoint(input)
}

// CreateVpcEndpointWithContext is a passthrough to the underlying CreateVpcEndpointWithContext method.
// It will increment the count of requests made to CreateVpcEndpoint.
func (c *EC2) CreateVpcEndpointWithContext(ctx aws.Context, input *ec2.CreateVpcEndpointInput, opts ...request.Option) (*ec2.CreateVpcEndpointOutput, error) {
	c.inc("CreateVpcEndpoint")
	return c.svc.CreateVpcEndpointWithContext(ctx, input, opts...)
}

// CreateVpcPeeringConnectionRequest is a passthrough to the underlying CreateVpcPeeringConnectionRequest.
// It will increment the count of requests made to CreateVpcPeeringConnection.
func (c *EC2) CreateVpcPeeringConnectionRequest(input *ec2.CreateVpcPeeringConnectionInput) (req *request.Request, output *ec2.CreateVpcPeeringConnectionOutput) {
	c.inc("CreateVpcPeeringConnection")
	return c.svc.CreateVpcPeeringConnectionRequest(input)
}

// CreateVpcPeeringConnection is a passthrough to the underlying CreateVpcPeeringConnection method.
// It will increment the count of requests made to CreateVpcPeeringConnection.
func (c *EC2) CreateVpcPeeringConnection(input *ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	c.inc("CreateVpcPeeringConnection")
	return c.svc.CreateVpcPeeringConnection(input)
}

// CreateVpcPeeringConnectionWithContext is a passthrough to the underlying CreateVpcPeeringConnectionWithContext method.
// It will increment the count of requests made to CreateVpcPeeringConnection.
func (c *EC2) CreateVpcPeeringConnectionWithContext(ctx aws.Context, input *ec2.CreateVpcPeeringConnectionInput, opts ...request.Option) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	c.inc("CreateVpcPeeringConnection")
	return c.svc.CreateVpcPeeringConnectionWithContext(ctx, input, opts...)
}

// CreateVpnConnectionRequest is a passthrough to the underlying CreateVpnConnectionRequest.
// It will increment the count of requests made to CreateVpnConnection.
func (c *EC2) CreateVpnConnectionRequest(input *ec2.CreateVpnConnectionInput) (req *request.Request, output *ec2.CreateVpnConnectionOutput) {
	c.inc("CreateVpnConnection")
	return c.svc.CreateVpnConnectionRequest(input)
}

// CreateVpnConnection is a passthrough to the underlying CreateVpnConnection method.
// It will increment the count of requests made to CreateVpnConnection.
func (c *EC2) CreateVpnConnection(input *ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error) {
	c.inc("CreateVpnConnection")
	return c.svc.CreateVpnConnection(input)
}

// CreateVpnConnectionWithContext is a passthrough to the underlying CreateVpnConnectionWithContext method.
// It will increment the count of requests made to CreateVpnConnection.
func (c *EC2) CreateVpnConnectionWithContext(ctx aws.Context, input *ec2.CreateVpnConnectionInput, opts ...request.Option) (*ec2.CreateVpnConnectionOutput, error) {
	c.inc("CreateVpnConnection")
	return c.svc.CreateVpnConnectionWithContext(ctx, input, opts...)
}

// CreateVpnConnectionRouteRequest is a passthrough to the underlying CreateVpnConnectionRouteRequest.
// It will increment the count of requests made to CreateVpnConnectionRoute.
func (c *EC2) CreateVpnConnectionRouteRequest(input *ec2.CreateVpnConnectionRouteInput) (req *request.Request, output *ec2.CreateVpnConnectionRouteOutput) {
	c.inc("CreateVpnConnectionRoute")
	return c.svc.CreateVpnConnectionRouteRequest(input)
}

// CreateVpnConnectionRoute is a passthrough to the underlying CreateVpnConnectionRoute method.
// It will increment the count of requests made to CreateVpnConnectionRoute.
func (c *EC2) CreateVpnConnectionRoute(input *ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error) {
	c.inc("CreateVpnConnectionRoute")
	return c.svc.CreateVpnConnectionRoute(input)
}

// CreateVpnConnectionRouteWithContext is a passthrough to the underlying CreateVpnConnectionRouteWithContext method.
// It will increment the count of requests made to CreateVpnConnectionRoute.
func (c *EC2) CreateVpnConnectionRouteWithContext(ctx aws.Context, input *ec2.CreateVpnConnectionRouteInput, opts ...request.Option) (*ec2.CreateVpnConnectionRouteOutput, error) {
	c.inc("CreateVpnConnectionRoute")
	return c.svc.CreateVpnConnectionRouteWithContext(ctx, input, opts...)
}

// CreateVpnGatewayRequest is a passthrough to the underlying CreateVpnGatewayRequest.
// It will increment the count of requests made to CreateVpnGateway.
func (c *EC2) CreateVpnGatewayRequest(input *ec2.CreateVpnGatewayInput) (req *request.Request, output *ec2.CreateVpnGatewayOutput) {
	c.inc("CreateVpnGateway")
	return c.svc.CreateVpnGatewayRequest(input)
}

// CreateVpnGateway is a passthrough to the underlying CreateVpnGateway method.
// It will increment the count of requests made to CreateVpnGateway.
func (c *EC2) CreateVpnGateway(input *ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error) {
	c.inc("CreateVpnGateway")
	return c.svc.CreateVpnGateway(input)
}

// CreateVpnGatewayWithContext is a passthrough to the underlying CreateVpnGatewayWithContext method.
// It will increment the count of requests made to CreateVpnGateway.
func (c *EC2) CreateVpnGatewayWithContext(ctx aws.Context, input *ec2.CreateVpnGatewayInput, opts ...request.Option) (*ec2.CreateVpnGatewayOutput, error) {
	c.inc("CreateVpnGateway")
	return c.svc.CreateVpnGatewayWithContext(ctx, input, opts...)
}

// DeleteCustomerGatewayRequest is a passthrough to the underlying DeleteCustomerGatewayRequest.
// It will increment the count of requests made to DeleteCustomerGateway.
func (c *EC2) DeleteCustomerGatewayRequest(input *ec2.DeleteCustomerGatewayInput) (req *request.Request, output *ec2.DeleteCustomerGatewayOutput) {
	c.inc("DeleteCustomerGateway")
	return c.svc.DeleteCustomerGatewayRequest(input)
}

// DeleteCustomerGateway is a passthrough to the underlying DeleteCustomerGateway method.
// It will increment the count of requests made to DeleteCustomerGateway.
func (c *EC2) DeleteCustomerGateway(input *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error) {
	c.inc("DeleteCustomerGateway")
	return c.svc.DeleteCustomerGateway(input)
}

// DeleteCustomerGatewayWithContext is a passthrough to the underlying DeleteCustomerGatewayWithContext method.
// It will increment the count of requests made to DeleteCustomerGateway.
func (c *EC2) DeleteCustomerGatewayWithContext(ctx aws.Context, input *ec2.DeleteCustomerGatewayInput, opts ...request.Option) (*ec2.DeleteCustomerGatewayOutput, error) {
	c.inc("DeleteCustomerGateway")
	return c.svc.DeleteCustomerGatewayWithContext(ctx, input, opts...)
}

// DeleteDhcpOptionsRequest is a passthrough to the underlying DeleteDhcpOptionsRequest.
// It will increment the count of requests made to DeleteDhcpOptions.
func (c *EC2) DeleteDhcpOptionsRequest(input *ec2.DeleteDhcpOptionsInput) (req *request.Request, output *ec2.DeleteDhcpOptionsOutput) {
	c.inc("DeleteDhcpOptions")
	return c.svc.DeleteDhcpOptionsRequest(input)
}

// DeleteDhcpOptions is a passthrough to the underlying DeleteDhcpOptions method.
// It will increment the count of requests made to DeleteDhcpOptions.
func (c *EC2) DeleteDhcpOptions(input *ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error) {
	c.inc("DeleteDhcpOptions")
	return c.svc.DeleteDhcpOptions(input)
}

// DeleteDhcpOptionsWithContext is a passthrough to the underlying DeleteDhcpOptionsWithContext method.
// It will increment the count of requests made to DeleteDhcpOptions.
func (c *EC2) DeleteDhcpOptionsWithContext(ctx aws.Context, input *ec2.DeleteDhcpOptionsInput, opts ...request.Option) (*ec2.DeleteDhcpOptionsOutput, error) {
	c.inc("DeleteDhcpOptions")
	return c.svc.DeleteDhcpOptionsWithContext(ctx, input, opts...)
}

// DeleteEgressOnlyInternetGatewayRequest is a passthrough to the underlying DeleteEgressOnlyInternetGatewayRequest.
// It will increment the count of requests made to DeleteEgressOnlyInternetGateway.
func (c *EC2) DeleteEgressOnlyInternetGatewayRequest(input *ec2.DeleteEgressOnlyInternetGatewayInput) (req *request.Request, output *ec2.DeleteEgressOnlyInternetGatewayOutput) {
	c.inc("DeleteEgressOnlyInternetGateway")
	return c.svc.DeleteEgressOnlyInternetGatewayRequest(input)
}

// DeleteEgressOnlyInternetGateway is a passthrough to the underlying DeleteEgressOnlyInternetGateway method.
// It will increment the count of requests made to DeleteEgressOnlyInternetGateway.
func (c *EC2) DeleteEgressOnlyInternetGateway(input *ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	c.inc("DeleteEgressOnlyInternetGateway")
	return c.svc.DeleteEgressOnlyInternetGateway(input)
}

// DeleteEgressOnlyInternetGatewayWithContext is a passthrough to the underlying DeleteEgressOnlyInternetGatewayWithContext method.
// It will increment the count of requests made to DeleteEgressOnlyInternetGateway.
func (c *EC2) DeleteEgressOnlyInternetGatewayWithContext(ctx aws.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput, opts ...request.Option) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	c.inc("DeleteEgressOnlyInternetGateway")
	return c.svc.DeleteEgressOnlyInternetGatewayWithContext(ctx, input, opts...)
}

// DeleteFlowLogsRequest is a passthrough to the underlying DeleteFlowLogsRequest.
// It will increment the count of requests made to DeleteFlowLogs.
func (c *EC2) DeleteFlowLogsRequest(input *ec2.DeleteFlowLogsInput) (req *request.Request, output *ec2.DeleteFlowLogsOutput) {
	c.inc("DeleteFlowLogs")
	return c.svc.DeleteFlowLogsRequest(input)
}

// DeleteFlowLogs is a passthrough to the underlying DeleteFlowLogs method.
// It will increment the count of requests made to DeleteFlowLogs.
func (c *EC2) DeleteFlowLogs(input *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error) {
	c.inc("DeleteFlowLogs")
	return c.svc.DeleteFlowLogs(input)
}

// DeleteFlowLogsWithContext is a passthrough to the underlying DeleteFlowLogsWithContext method.
// It will increment the count of requests made to DeleteFlowLogs.
func (c *EC2) DeleteFlowLogsWithContext(ctx aws.Context, input *ec2.DeleteFlowLogsInput, opts ...request.Option) (*ec2.DeleteFlowLogsOutput, error) {
	c.inc("DeleteFlowLogs")
	return c.svc.DeleteFlowLogsWithContext(ctx, input, opts...)
}

// DeleteFpgaImageRequest is a passthrough to the underlying DeleteFpgaImageRequest.
// It will increment the count of requests made to DeleteFpgaImage.
func (c *EC2) DeleteFpgaImageRequest(input *ec2.DeleteFpgaImageInput) (req *request.Request, output *ec2.DeleteFpgaImageOutput) {
	c.inc("DeleteFpgaImage")
	return c.svc.DeleteFpgaImageRequest(input)
}

// DeleteFpgaImage is a passthrough to the underlying DeleteFpgaImage method.
// It will increment the count of requests made to DeleteFpgaImage.
func (c *EC2) DeleteFpgaImage(input *ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error) {
	c.inc("DeleteFpgaImage")
	return c.svc.DeleteFpgaImage(input)
}

// DeleteFpgaImageWithContext is a passthrough to the underlying DeleteFpgaImageWithContext method.
// It will increment the count of requests made to DeleteFpgaImage.
func (c *EC2) DeleteFpgaImageWithContext(ctx aws.Context, input *ec2.DeleteFpgaImageInput, opts ...request.Option) (*ec2.DeleteFpgaImageOutput, error) {
	c.inc("DeleteFpgaImage")
	return c.svc.DeleteFpgaImageWithContext(ctx, input, opts...)
}

// DeleteInternetGatewayRequest is a passthrough to the underlying DeleteInternetGatewayRequest.
// It will increment the count of requests made to DeleteInternetGateway.
func (c *EC2) DeleteInternetGatewayRequest(input *ec2.DeleteInternetGatewayInput) (req *request.Request, output *ec2.DeleteInternetGatewayOutput) {
	c.inc("DeleteInternetGateway")
	return c.svc.DeleteInternetGatewayRequest(input)
}

// DeleteInternetGateway is a passthrough to the underlying DeleteInternetGateway method.
// It will increment the count of requests made to DeleteInternetGateway.
func (c *EC2) DeleteInternetGateway(input *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error) {
	c.inc("DeleteInternetGateway")
	return c.svc.DeleteInternetGateway(input)
}

// DeleteInternetGatewayWithContext is a passthrough to the underlying DeleteInternetGatewayWithContext method.
// It will increment the count of requests made to DeleteInternetGateway.
func (c *EC2) DeleteInternetGatewayWithContext(ctx aws.Context, input *ec2.DeleteInternetGatewayInput, opts ...request.Option) (*ec2.DeleteInternetGatewayOutput, error) {
	c.inc("DeleteInternetGateway")
	return c.svc.DeleteInternetGatewayWithContext(ctx, input, opts...)
}

// DeleteKeyPairRequest is a passthrough to the underlying DeleteKeyPairRequest.
// It will increment the count of requests made to DeleteKeyPair.
func (c *EC2) DeleteKeyPairRequest(input *ec2.DeleteKeyPairInput) (req *request.Request, output *ec2.DeleteKeyPairOutput) {
	c.inc("DeleteKeyPair")
	return c.svc.DeleteKeyPairRequest(input)
}

// DeleteKeyPair is a passthrough to the underlying DeleteKeyPair method.
// It will increment the count of requests made to DeleteKeyPair.
func (c *EC2) DeleteKeyPair(input *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error) {
	c.inc("DeleteKeyPair")
	return c.svc.DeleteKeyPair(input)
}

// DeleteKeyPairWithContext is a passthrough to the underlying DeleteKeyPairWithContext method.
// It will increment the count of requests made to DeleteKeyPair.
func (c *EC2) DeleteKeyPairWithContext(ctx aws.Context, input *ec2.DeleteKeyPairInput, opts ...request.Option) (*ec2.DeleteKeyPairOutput, error) {
	c.inc("DeleteKeyPair")
	return c.svc.DeleteKeyPairWithContext(ctx, input, opts...)
}

// DeleteNatGatewayRequest is a passthrough to the underlying DeleteNatGatewayRequest.
// It will increment the count of requests made to DeleteNatGateway.
func (c *EC2) DeleteNatGatewayRequest(input *ec2.DeleteNatGatewayInput) (req *request.Request, output *ec2.DeleteNatGatewayOutput) {
	c.inc("DeleteNatGateway")
	return c.svc.DeleteNatGatewayRequest(input)
}

// DeleteNatGateway is a passthrough to the underlying DeleteNatGateway method.
// It will increment the count of requests made to DeleteNatGateway.
func (c *EC2) DeleteNatGateway(input *ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error) {
	c.inc("DeleteNatGateway")
	return c.svc.DeleteNatGateway(input)
}

// DeleteNatGatewayWithContext is a passthrough to the underlying DeleteNatGatewayWithContext method.
// It will increment the count of requests made to DeleteNatGateway.
func (c *EC2) DeleteNatGatewayWithContext(ctx aws.Context, input *ec2.DeleteNatGatewayInput, opts ...request.Option) (*ec2.DeleteNatGatewayOutput, error) {
	c.inc("DeleteNatGateway")
	return c.svc.DeleteNatGatewayWithContext(ctx, input, opts...)
}

// DeleteNetworkAclRequest is a passthrough to the underlying DeleteNetworkAclRequest.
// It will increment the count of requests made to DeleteNetworkAcl.
func (c *EC2) DeleteNetworkAclRequest(input *ec2.DeleteNetworkAclInput) (req *request.Request, output *ec2.DeleteNetworkAclOutput) {
	c.inc("DeleteNetworkAcl")
	return c.svc.DeleteNetworkAclRequest(input)
}

// DeleteNetworkAcl is a passthrough to the underlying DeleteNetworkAcl method.
// It will increment the count of requests made to DeleteNetworkAcl.
func (c *EC2) DeleteNetworkAcl(input *ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error) {
	c.inc("DeleteNetworkAcl")
	return c.svc.DeleteNetworkAcl(input)
}

// DeleteNetworkAclWithContext is a passthrough to the underlying DeleteNetworkAclWithContext method.
// It will increment the count of requests made to DeleteNetworkAcl.
func (c *EC2) DeleteNetworkAclWithContext(ctx aws.Context, input *ec2.DeleteNetworkAclInput, opts ...request.Option) (*ec2.DeleteNetworkAclOutput, error) {
	c.inc("DeleteNetworkAcl")
	return c.svc.DeleteNetworkAclWithContext(ctx, input, opts...)
}

// DeleteNetworkAclEntryRequest is a passthrough to the underlying DeleteNetworkAclEntryRequest.
// It will increment the count of requests made to DeleteNetworkAclEntry.
func (c *EC2) DeleteNetworkAclEntryRequest(input *ec2.DeleteNetworkAclEntryInput) (req *request.Request, output *ec2.DeleteNetworkAclEntryOutput) {
	c.inc("DeleteNetworkAclEntry")
	return c.svc.DeleteNetworkAclEntryRequest(input)
}

// DeleteNetworkAclEntry is a passthrough to the underlying DeleteNetworkAclEntry method.
// It will increment the count of requests made to DeleteNetworkAclEntry.
func (c *EC2) DeleteNetworkAclEntry(input *ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error) {
	c.inc("DeleteNetworkAclEntry")
	return c.svc.DeleteNetworkAclEntry(input)
}

// DeleteNetworkAclEntryWithContext is a passthrough to the underlying DeleteNetworkAclEntryWithContext method.
// It will increment the count of requests made to DeleteNetworkAclEntry.
func (c *EC2) DeleteNetworkAclEntryWithContext(ctx aws.Context, input *ec2.DeleteNetworkAclEntryInput, opts ...request.Option) (*ec2.DeleteNetworkAclEntryOutput, error) {
	c.inc("DeleteNetworkAclEntry")
	return c.svc.DeleteNetworkAclEntryWithContext(ctx, input, opts...)
}

// DeleteNetworkInterfaceRequest is a passthrough to the underlying DeleteNetworkInterfaceRequest.
// It will increment the count of requests made to DeleteNetworkInterface.
func (c *EC2) DeleteNetworkInterfaceRequest(input *ec2.DeleteNetworkInterfaceInput) (req *request.Request, output *ec2.DeleteNetworkInterfaceOutput) {
	c.inc("DeleteNetworkInterface")
	return c.svc.DeleteNetworkInterfaceRequest(input)
}

// DeleteNetworkInterface is a passthrough to the underlying DeleteNetworkInterface method.
// It will increment the count of requests made to DeleteNetworkInterface.
func (c *EC2) DeleteNetworkInterface(input *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error) {
	c.inc("DeleteNetworkInterface")
	return c.svc.DeleteNetworkInterface(input)
}

// DeleteNetworkInterfaceWithContext is a passthrough to the underlying DeleteNetworkInterfaceWithContext method.
// It will increment the count of requests made to DeleteNetworkInterface.
func (c *EC2) DeleteNetworkInterfaceWithContext(ctx aws.Context, input *ec2.DeleteNetworkInterfaceInput, opts ...request.Option) (*ec2.DeleteNetworkInterfaceOutput, error) {
	c.inc("DeleteNetworkInterface")
	return c.svc.DeleteNetworkInterfaceWithContext(ctx, input, opts...)
}

// DeleteNetworkInterfacePermissionRequest is a passthrough to the underlying DeleteNetworkInterfacePermissionRequest.
// It will increment the count of requests made to DeleteNetworkInterfacePermission.
func (c *EC2) DeleteNetworkInterfacePermissionRequest(input *ec2.DeleteNetworkInterfacePermissionInput) (req *request.Request, output *ec2.DeleteNetworkInterfacePermissionOutput) {
	c.inc("DeleteNetworkInterfacePermission")
	return c.svc.DeleteNetworkInterfacePermissionRequest(input)
}

// DeleteNetworkInterfacePermission is a passthrough to the underlying DeleteNetworkInterfacePermission method.
// It will increment the count of requests made to DeleteNetworkInterfacePermission.
func (c *EC2) DeleteNetworkInterfacePermission(input *ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	c.inc("DeleteNetworkInterfacePermission")
	return c.svc.DeleteNetworkInterfacePermission(input)
}

// DeleteNetworkInterfacePermissionWithContext is a passthrough to the underlying DeleteNetworkInterfacePermissionWithContext method.
// It will increment the count of requests made to DeleteNetworkInterfacePermission.
func (c *EC2) DeleteNetworkInterfacePermissionWithContext(ctx aws.Context, input *ec2.DeleteNetworkInterfacePermissionInput, opts ...request.Option) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	c.inc("DeleteNetworkInterfacePermission")
	return c.svc.DeleteNetworkInterfacePermissionWithContext(ctx, input, opts...)
}

// DeletePlacementGroupRequest is a passthrough to the underlying DeletePlacementGroupRequest.
// It will increment the count of requests made to DeletePlacementGroup.
func (c *EC2) DeletePlacementGroupRequest(input *ec2.DeletePlacementGroupInput) (req *request.Request, output *ec2.DeletePlacementGroupOutput) {
	c.inc("DeletePlacementGroup")
	return c.svc.DeletePlacementGroupRequest(input)
}

// DeletePlacementGroup is a passthrough to the underlying DeletePlacementGroup method.
// It will increment the count of requests made to DeletePlacementGroup.
func (c *EC2) DeletePlacementGroup(input *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error) {
	c.inc("DeletePlacementGroup")
	return c.svc.DeletePlacementGroup(input)
}

// DeletePlacementGroupWithContext is a passthrough to the underlying DeletePlacementGroupWithContext method.
// It will increment the count of requests made to DeletePlacementGroup.
func (c *EC2) DeletePlacementGroupWithContext(ctx aws.Context, input *ec2.DeletePlacementGroupInput, opts ...request.Option) (*ec2.DeletePlacementGroupOutput, error) {
	c.inc("DeletePlacementGroup")
	return c.svc.DeletePlacementGroupWithContext(ctx, input, opts...)
}

// DeleteRouteRequest is a passthrough to the underlying DeleteRouteRequest.
// It will increment the count of requests made to DeleteRoute.
func (c *EC2) DeleteRouteRequest(input *ec2.DeleteRouteInput) (req *request.Request, output *ec2.DeleteRouteOutput) {
	c.inc("DeleteRoute")
	return c.svc.DeleteRouteRequest(input)
}

// DeleteRoute is a passthrough to the underlying DeleteRoute method.
// It will increment the count of requests made to DeleteRoute.
func (c *EC2) DeleteRoute(input *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error) {
	c.inc("DeleteRoute")
	return c.svc.DeleteRoute(input)
}

// DeleteRouteWithContext is a passthrough to the underlying DeleteRouteWithContext method.
// It will increment the count of requests made to DeleteRoute.
func (c *EC2) DeleteRouteWithContext(ctx aws.Context, input *ec2.DeleteRouteInput, opts ...request.Option) (*ec2.DeleteRouteOutput, error) {
	c.inc("DeleteRoute")
	return c.svc.DeleteRouteWithContext(ctx, input, opts...)
}

// DeleteRouteTableRequest is a passthrough to the underlying DeleteRouteTableRequest.
// It will increment the count of requests made to DeleteRouteTable.
func (c *EC2) DeleteRouteTableRequest(input *ec2.DeleteRouteTableInput) (req *request.Request, output *ec2.DeleteRouteTableOutput) {
	c.inc("DeleteRouteTable")
	return c.svc.DeleteRouteTableRequest(input)
}

// DeleteRouteTable is a passthrough to the underlying DeleteRouteTable method.
// It will increment the count of requests made to DeleteRouteTable.
func (c *EC2) DeleteRouteTable(input *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error) {
	c.inc("DeleteRouteTable")
	return c.svc.DeleteRouteTable(input)
}

// DeleteRouteTableWithContext is a passthrough to the underlying DeleteRouteTableWithContext method.
// It will increment the count of requests made to DeleteRouteTable.
func (c *EC2) DeleteRouteTableWithContext(ctx aws.Context, input *ec2.DeleteRouteTableInput, opts ...request.Option) (*ec2.DeleteRouteTableOutput, error) {
	c.inc("DeleteRouteTable")
	return c.svc.DeleteRouteTableWithContext(ctx, input, opts...)
}

// DeleteSecurityGroupRequest is a passthrough to the underlying DeleteSecurityGroupRequest.
// It will increment the count of requests made to DeleteSecurityGroup.
func (c *EC2) DeleteSecurityGroupRequest(input *ec2.DeleteSecurityGroupInput) (req *request.Request, output *ec2.DeleteSecurityGroupOutput) {
	c.inc("DeleteSecurityGroup")
	return c.svc.DeleteSecurityGroupRequest(input)
}

// DeleteSecurityGroup is a passthrough to the underlying DeleteSecurityGroup method.
// It will increment the count of requests made to DeleteSecurityGroup.
func (c *EC2) DeleteSecurityGroup(input *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error) {
	c.inc("DeleteSecurityGroup")
	return c.svc.DeleteSecurityGroup(input)
}

// DeleteSecurityGroupWithContext is a passthrough to the underlying DeleteSecurityGroupWithContext method.
// It will increment the count of requests made to DeleteSecurityGroup.
func (c *EC2) DeleteSecurityGroupWithContext(ctx aws.Context, input *ec2.DeleteSecurityGroupInput, opts ...request.Option) (*ec2.DeleteSecurityGroupOutput, error) {
	c.inc("DeleteSecurityGroup")
	return c.svc.DeleteSecurityGroupWithContext(ctx, input, opts...)
}

// DeleteSnapshotRequest is a passthrough to the underlying DeleteSnapshotRequest.
// It will increment the count of requests made to DeleteSnapshot.
func (c *EC2) DeleteSnapshotRequest(input *ec2.DeleteSnapshotInput) (req *request.Request, output *ec2.DeleteSnapshotOutput) {
	c.inc("DeleteSnapshot")
	return c.svc.DeleteSnapshotRequest(input)
}

// DeleteSnapshot is a passthrough to the underlying DeleteSnapshot method.
// It will increment the count of requests made to DeleteSnapshot.
func (c *EC2) DeleteSnapshot(input *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error) {
	c.inc("DeleteSnapshot")
	return c.svc.DeleteSnapshot(input)
}

// DeleteSnapshotWithContext is a passthrough to the underlying DeleteSnapshotWithContext method.
// It will increment the count of requests made to DeleteSnapshot.
func (c *EC2) DeleteSnapshotWithContext(ctx aws.Context, input *ec2.DeleteSnapshotInput, opts ...request.Option) (*ec2.DeleteSnapshotOutput, error) {
	c.inc("DeleteSnapshot")
	return c.svc.DeleteSnapshotWithContext(ctx, input, opts...)
}

// DeleteSpotDatafeedSubscriptionRequest is a passthrough to the underlying DeleteSpotDatafeedSubscriptionRequest.
// It will increment the count of requests made to DeleteSpotDatafeedSubscription.
func (c *EC2) DeleteSpotDatafeedSubscriptionRequest(input *ec2.DeleteSpotDatafeedSubscriptionInput) (req *request.Request, output *ec2.DeleteSpotDatafeedSubscriptionOutput) {
	c.inc("DeleteSpotDatafeedSubscription")
	return c.svc.DeleteSpotDatafeedSubscriptionRequest(input)
}

// DeleteSpotDatafeedSubscription is a passthrough to the underlying DeleteSpotDatafeedSubscription method.
// It will increment the count of requests made to DeleteSpotDatafeedSubscription.
func (c *EC2) DeleteSpotDatafeedSubscription(input *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	c.inc("DeleteSpotDatafeedSubscription")
	return c.svc.DeleteSpotDatafeedSubscription(input)
}

// DeleteSpotDatafeedSubscriptionWithContext is a passthrough to the underlying DeleteSpotDatafeedSubscriptionWithContext method.
// It will increment the count of requests made to DeleteSpotDatafeedSubscription.
func (c *EC2) DeleteSpotDatafeedSubscriptionWithContext(ctx aws.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput, opts ...request.Option) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	c.inc("DeleteSpotDatafeedSubscription")
	return c.svc.DeleteSpotDatafeedSubscriptionWithContext(ctx, input, opts...)
}

// DeleteSubnetRequest is a passthrough to the underlying DeleteSubnetRequest.
// It will increment the count of requests made to DeleteSubnet.
func (c *EC2) DeleteSubnetRequest(input *ec2.DeleteSubnetInput) (req *request.Request, output *ec2.DeleteSubnetOutput) {
	c.inc("DeleteSubnet")
	return c.svc.DeleteSubnetRequest(input)
}

// DeleteSubnet is a passthrough to the underlying DeleteSubnet method.
// It will increment the count of requests made to DeleteSubnet.
func (c *EC2) DeleteSubnet(input *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error) {
	c.inc("DeleteSubnet")
	return c.svc.DeleteSubnet(input)
}

// DeleteSubnetWithContext is a passthrough to the underlying DeleteSubnetWithContext method.
// It will increment the count of requests made to DeleteSubnet.
func (c *EC2) DeleteSubnetWithContext(ctx aws.Context, input *ec2.DeleteSubnetInput, opts ...request.Option) (*ec2.DeleteSubnetOutput, error) {
	c.inc("DeleteSubnet")
	return c.svc.DeleteSubnetWithContext(ctx, input, opts...)
}

// DeleteTagsRequest is a passthrough to the underlying DeleteTagsRequest.
// It will increment the count of requests made to DeleteTags.
func (c *EC2) DeleteTagsRequest(input *ec2.DeleteTagsInput) (req *request.Request, output *ec2.DeleteTagsOutput) {
	c.inc("DeleteTags")
	return c.svc.DeleteTagsRequest(input)
}

// DeleteTags is a passthrough to the underlying DeleteTags method.
// It will increment the count of requests made to DeleteTags.
func (c *EC2) DeleteTags(input *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error) {
	c.inc("DeleteTags")
	return c.svc.DeleteTags(input)
}

// DeleteTagsWithContext is a passthrough to the underlying DeleteTagsWithContext method.
// It will increment the count of requests made to DeleteTags.
func (c *EC2) DeleteTagsWithContext(ctx aws.Context, input *ec2.DeleteTagsInput, opts ...request.Option) (*ec2.DeleteTagsOutput, error) {
	c.inc("DeleteTags")
	return c.svc.DeleteTagsWithContext(ctx, input, opts...)
}

// DeleteVolumeRequest is a passthrough to the underlying DeleteVolumeRequest.
// It will increment the count of requests made to DeleteVolume.
func (c *EC2) DeleteVolumeRequest(input *ec2.DeleteVolumeInput) (req *request.Request, output *ec2.DeleteVolumeOutput) {
	c.inc("DeleteVolume")
	return c.svc.DeleteVolumeRequest(input)
}

// DeleteVolume is a passthrough to the underlying DeleteVolume method.
// It will increment the count of requests made to DeleteVolume.
func (c *EC2) DeleteVolume(input *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error) {
	c.inc("DeleteVolume")
	return c.svc.DeleteVolume(input)
}

// DeleteVolumeWithContext is a passthrough to the underlying DeleteVolumeWithContext method.
// It will increment the count of requests made to DeleteVolume.
func (c *EC2) DeleteVolumeWithContext(ctx aws.Context, input *ec2.DeleteVolumeInput, opts ...request.Option) (*ec2.DeleteVolumeOutput, error) {
	c.inc("DeleteVolume")
	return c.svc.DeleteVolumeWithContext(ctx, input, opts...)
}

// DeleteVpcRequest is a passthrough to the underlying DeleteVpcRequest.
// It will increment the count of requests made to DeleteVpc.
func (c *EC2) DeleteVpcRequest(input *ec2.DeleteVpcInput) (req *request.Request, output *ec2.DeleteVpcOutput) {
	c.inc("DeleteVpc")
	return c.svc.DeleteVpcRequest(input)
}

// DeleteVpc is a passthrough to the underlying DeleteVpc method.
// It will increment the count of requests made to DeleteVpc.
func (c *EC2) DeleteVpc(input *ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error) {
	c.inc("DeleteVpc")
	return c.svc.DeleteVpc(input)
}

// DeleteVpcWithContext is a passthrough to the underlying DeleteVpcWithContext method.
// It will increment the count of requests made to DeleteVpc.
func (c *EC2) DeleteVpcWithContext(ctx aws.Context, input *ec2.DeleteVpcInput, opts ...request.Option) (*ec2.DeleteVpcOutput, error) {
	c.inc("DeleteVpc")
	return c.svc.DeleteVpcWithContext(ctx, input, opts...)
}

// DeleteVpcEndpointsRequest is a passthrough to the underlying DeleteVpcEndpointsRequest.
// It will increment the count of requests made to DeleteVpcEndpoints.
func (c *EC2) DeleteVpcEndpointsRequest(input *ec2.DeleteVpcEndpointsInput) (req *request.Request, output *ec2.DeleteVpcEndpointsOutput) {
	c.inc("DeleteVpcEndpoints")
	return c.svc.DeleteVpcEndpointsRequest(input)
}

// DeleteVpcEndpoints is a passthrough to the underlying DeleteVpcEndpoints method.
// It will increment the count of requests made to DeleteVpcEndpoints.
func (c *EC2) DeleteVpcEndpoints(input *ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error) {
	c.inc("DeleteVpcEndpoints")
	return c.svc.DeleteVpcEndpoints(input)
}

// DeleteVpcEndpointsWithContext is a passthrough to the underlying DeleteVpcEndpointsWithContext method.
// It will increment the count of requests made to DeleteVpcEndpoints.
func (c *EC2) DeleteVpcEndpointsWithContext(ctx aws.Context, input *ec2.DeleteVpcEndpointsInput, opts ...request.Option) (*ec2.DeleteVpcEndpointsOutput, error) {
	c.inc("DeleteVpcEndpoints")
	return c.svc.DeleteVpcEndpointsWithContext(ctx, input, opts...)
}

// DeleteVpcPeeringConnectionRequest is a passthrough to the underlying DeleteVpcPeeringConnectionRequest.
// It will increment the count of requests made to DeleteVpcPeeringConnection.
func (c *EC2) DeleteVpcPeeringConnectionRequest(input *ec2.DeleteVpcPeeringConnectionInput) (req *request.Request, output *ec2.DeleteVpcPeeringConnectionOutput) {
	c.inc("DeleteVpcPeeringConnection")
	return c.svc.DeleteVpcPeeringConnectionRequest(input)
}

// DeleteVpcPeeringConnection is a passthrough to the underlying DeleteVpcPeeringConnection method.
// It will increment the count of requests made to DeleteVpcPeeringConnection.
func (c *EC2) DeleteVpcPeeringConnection(input *ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	c.inc("DeleteVpcPeeringConnection")
	return c.svc.DeleteVpcPeeringConnection(input)
}

// DeleteVpcPeeringConnectionWithContext is a passthrough to the underlying DeleteVpcPeeringConnectionWithContext method.
// It will increment the count of requests made to DeleteVpcPeeringConnection.
func (c *EC2) DeleteVpcPeeringConnectionWithContext(ctx aws.Context, input *ec2.DeleteVpcPeeringConnectionInput, opts ...request.Option) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	c.inc("DeleteVpcPeeringConnection")
	return c.svc.DeleteVpcPeeringConnectionWithContext(ctx, input, opts...)
}

// DeleteVpnConnectionRequest is a passthrough to the underlying DeleteVpnConnectionRequest.
// It will increment the count of requests made to DeleteVpnConnection.
func (c *EC2) DeleteVpnConnectionRequest(input *ec2.DeleteVpnConnectionInput) (req *request.Request, output *ec2.DeleteVpnConnectionOutput) {
	c.inc("DeleteVpnConnection")
	return c.svc.DeleteVpnConnectionRequest(input)
}

// DeleteVpnConnection is a passthrough to the underlying DeleteVpnConnection method.
// It will increment the count of requests made to DeleteVpnConnection.
func (c *EC2) DeleteVpnConnection(input *ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error) {
	c.inc("DeleteVpnConnection")
	return c.svc.DeleteVpnConnection(input)
}

// DeleteVpnConnectionWithContext is a passthrough to the underlying DeleteVpnConnectionWithContext method.
// It will increment the count of requests made to DeleteVpnConnection.
func (c *EC2) DeleteVpnConnectionWithContext(ctx aws.Context, input *ec2.DeleteVpnConnectionInput, opts ...request.Option) (*ec2.DeleteVpnConnectionOutput, error) {
	c.inc("DeleteVpnConnection")
	return c.svc.DeleteVpnConnectionWithContext(ctx, input, opts...)
}

// DeleteVpnConnectionRouteRequest is a passthrough to the underlying DeleteVpnConnectionRouteRequest.
// It will increment the count of requests made to DeleteVpnConnectionRoute.
func (c *EC2) DeleteVpnConnectionRouteRequest(input *ec2.DeleteVpnConnectionRouteInput) (req *request.Request, output *ec2.DeleteVpnConnectionRouteOutput) {
	c.inc("DeleteVpnConnectionRoute")
	return c.svc.DeleteVpnConnectionRouteRequest(input)
}

// DeleteVpnConnectionRoute is a passthrough to the underlying DeleteVpnConnectionRoute method.
// It will increment the count of requests made to DeleteVpnConnectionRoute.
func (c *EC2) DeleteVpnConnectionRoute(input *ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	c.inc("DeleteVpnConnectionRoute")
	return c.svc.DeleteVpnConnectionRoute(input)
}

// DeleteVpnConnectionRouteWithContext is a passthrough to the underlying DeleteVpnConnectionRouteWithContext method.
// It will increment the count of requests made to DeleteVpnConnectionRoute.
func (c *EC2) DeleteVpnConnectionRouteWithContext(ctx aws.Context, input *ec2.DeleteVpnConnectionRouteInput, opts ...request.Option) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	c.inc("DeleteVpnConnectionRoute")
	return c.svc.DeleteVpnConnectionRouteWithContext(ctx, input, opts...)
}

// DeleteVpnGatewayRequest is a passthrough to the underlying DeleteVpnGatewayRequest.
// It will increment the count of requests made to DeleteVpnGateway.
func (c *EC2) DeleteVpnGatewayRequest(input *ec2.DeleteVpnGatewayInput) (req *request.Request, output *ec2.DeleteVpnGatewayOutput) {
	c.inc("DeleteVpnGateway")
	return c.svc.DeleteVpnGatewayRequest(input)
}

// DeleteVpnGateway is a passthrough to the underlying DeleteVpnGateway method.
// It will increment the count of requests made to DeleteVpnGateway.
func (c *EC2) DeleteVpnGateway(input *ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error) {
	c.inc("DeleteVpnGateway")
	return c.svc.DeleteVpnGateway(input)
}

// DeleteVpnGatewayWithContext is a passthrough to the underlying DeleteVpnGatewayWithContext method.
// It will increment the count of requests made to DeleteVpnGateway.
func (c *EC2) DeleteVpnGatewayWithContext(ctx aws.Context, input *ec2.DeleteVpnGatewayInput, opts ...request.Option) (*ec2.DeleteVpnGatewayOutput, error) {
	c.inc("DeleteVpnGateway")
	return c.svc.DeleteVpnGatewayWithContext(ctx, input, opts...)
}

// DeregisterImageRequest is a passthrough to the underlying DeregisterImageRequest.
// It will increment the count of requests made to DeregisterImage.
func (c *EC2) DeregisterImageRequest(input *ec2.DeregisterImageInput) (req *request.Request, output *ec2.DeregisterImageOutput) {
	c.inc("DeregisterImage")
	return c.svc.DeregisterImageRequest(input)
}

// DeregisterImage is a passthrough to the underlying DeregisterImage method.
// It will increment the count of requests made to DeregisterImage.
func (c *EC2) DeregisterImage(input *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error) {
	c.inc("DeregisterImage")
	return c.svc.DeregisterImage(input)
}

// DeregisterImageWithContext is a passthrough to the underlying DeregisterImageWithContext method.
// It will increment the count of requests made to DeregisterImage.
func (c *EC2) DeregisterImageWithContext(ctx aws.Context, input *ec2.DeregisterImageInput, opts ...request.Option) (*ec2.DeregisterImageOutput, error) {
	c.inc("DeregisterImage")
	return c.svc.DeregisterImageWithContext(ctx, input, opts...)
}

// DescribeAccountAttributesRequest is a passthrough to the underlying DescribeAccountAttributesRequest.
// It will increment the count of requests made to DescribeAccountAttributes.
func (c *EC2) DescribeAccountAttributesRequest(input *ec2.DescribeAccountAttributesInput) (req *request.Request, output *ec2.DescribeAccountAttributesOutput) {
	c.inc("DescribeAccountAttributes")
	return c.svc.DescribeAccountAttributesRequest(input)
}

// DescribeAccountAttributes is a passthrough to the underlying DescribeAccountAttributes method.
// It will increment the count of requests made to DescribeAccountAttributes.
func (c *EC2) DescribeAccountAttributes(input *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error) {
	c.inc("DescribeAccountAttributes")
	return c.svc.DescribeAccountAttributes(input)
}

// DescribeAccountAttributesWithContext is a passthrough to the underlying DescribeAccountAttributesWithContext method.
// It will increment the count of requests made to DescribeAccountAttributes.
func (c *EC2) DescribeAccountAttributesWithContext(ctx aws.Context, input *ec2.DescribeAccountAttributesInput, opts ...request.Option) (*ec2.DescribeAccountAttributesOutput, error) {
	c.inc("DescribeAccountAttributes")
	return c.svc.DescribeAccountAttributesWithContext(ctx, input, opts...)
}

// DescribeAddressesRequest is a passthrough to the underlying DescribeAddressesRequest.
// It will increment the count of requests made to DescribeAddresses.
func (c *EC2) DescribeAddressesRequest(input *ec2.DescribeAddressesInput) (req *request.Request, output *ec2.DescribeAddressesOutput) {
	c.inc("DescribeAddresses")
	return c.svc.DescribeAddressesRequest(input)
}

// DescribeAddresses is a passthrough to the underlying DescribeAddresses method.
// It will increment the count of requests made to DescribeAddresses.
func (c *EC2) DescribeAddresses(input *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error) {
	c.inc("DescribeAddresses")
	return c.svc.DescribeAddresses(input)
}

// DescribeAddressesWithContext is a passthrough to the underlying DescribeAddressesWithContext method.
// It will increment the count of requests made to DescribeAddresses.
func (c *EC2) DescribeAddressesWithContext(ctx aws.Context, input *ec2.DescribeAddressesInput, opts ...request.Option) (*ec2.DescribeAddressesOutput, error) {
	c.inc("DescribeAddresses")
	return c.svc.DescribeAddressesWithContext(ctx, input, opts...)
}

// DescribeAvailabilityZonesRequest is a passthrough to the underlying DescribeAvailabilityZonesRequest.
// It will increment the count of requests made to DescribeAvailabilityZones.
func (c *EC2) DescribeAvailabilityZonesRequest(input *ec2.DescribeAvailabilityZonesInput) (req *request.Request, output *ec2.DescribeAvailabilityZonesOutput) {
	c.inc("DescribeAvailabilityZones")
	return c.svc.DescribeAvailabilityZonesRequest(input)
}

// DescribeAvailabilityZones is a passthrough to the underlying DescribeAvailabilityZones method.
// It will increment the count of requests made to DescribeAvailabilityZones.
func (c *EC2) DescribeAvailabilityZones(input *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error) {
	c.inc("DescribeAvailabilityZones")
	return c.svc.DescribeAvailabilityZones(input)
}

// DescribeAvailabilityZonesWithContext is a passthrough to the underlying DescribeAvailabilityZonesWithContext method.
// It will increment the count of requests made to DescribeAvailabilityZones.
func (c *EC2) DescribeAvailabilityZonesWithContext(ctx aws.Context, input *ec2.DescribeAvailabilityZonesInput, opts ...request.Option) (*ec2.DescribeAvailabilityZonesOutput, error) {
	c.inc("DescribeAvailabilityZones")
	return c.svc.DescribeAvailabilityZonesWithContext(ctx, input, opts...)
}

// DescribeBundleTasksRequest is a passthrough to the underlying DescribeBundleTasksRequest.
// It will increment the count of requests made to DescribeBundleTasks.
func (c *EC2) DescribeBundleTasksRequest(input *ec2.DescribeBundleTasksInput) (req *request.Request, output *ec2.DescribeBundleTasksOutput) {
	c.inc("DescribeBundleTasks")
	return c.svc.DescribeBundleTasksRequest(input)
}

// DescribeBundleTasks is a passthrough to the underlying DescribeBundleTasks method.
// It will increment the count of requests made to DescribeBundleTasks.
func (c *EC2) DescribeBundleTasks(input *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error) {
	c.inc("DescribeBundleTasks")
	return c.svc.DescribeBundleTasks(input)
}

// DescribeBundleTasksWithContext is a passthrough to the underlying DescribeBundleTasksWithContext method.
// It will increment the count of requests made to DescribeBundleTasks.
func (c *EC2) DescribeBundleTasksWithContext(ctx aws.Context, input *ec2.DescribeBundleTasksInput, opts ...request.Option) (*ec2.DescribeBundleTasksOutput, error) {
	c.inc("DescribeBundleTasks")
	return c.svc.DescribeBundleTasksWithContext(ctx, input, opts...)
}

// DescribeClassicLinkInstancesRequest is a passthrough to the underlying DescribeClassicLinkInstancesRequest.
// It will increment the count of requests made to DescribeClassicLinkInstances.
func (c *EC2) DescribeClassicLinkInstancesRequest(input *ec2.DescribeClassicLinkInstancesInput) (req *request.Request, output *ec2.DescribeClassicLinkInstancesOutput) {
	c.inc("DescribeClassicLinkInstances")
	return c.svc.DescribeClassicLinkInstancesRequest(input)
}

// DescribeClassicLinkInstances is a passthrough to the underlying DescribeClassicLinkInstances method.
// It will increment the count of requests made to DescribeClassicLinkInstances.
func (c *EC2) DescribeClassicLinkInstances(input *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	c.inc("DescribeClassicLinkInstances")
	return c.svc.DescribeClassicLinkInstances(input)
}

// DescribeClassicLinkInstancesWithContext is a passthrough to the underlying DescribeClassicLinkInstancesWithContext method.
// It will increment the count of requests made to DescribeClassicLinkInstances.
func (c *EC2) DescribeClassicLinkInstancesWithContext(ctx aws.Context, input *ec2.DescribeClassicLinkInstancesInput, opts ...request.Option) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	c.inc("DescribeClassicLinkInstances")
	return c.svc.DescribeClassicLinkInstancesWithContext(ctx, input, opts...)
}

// DescribeConversionTasksRequest is a passthrough to the underlying DescribeConversionTasksRequest.
// It will increment the count of requests made to DescribeConversionTasks.
func (c *EC2) DescribeConversionTasksRequest(input *ec2.DescribeConversionTasksInput) (req *request.Request, output *ec2.DescribeConversionTasksOutput) {
	c.inc("DescribeConversionTasks")
	return c.svc.DescribeConversionTasksRequest(input)
}

// DescribeConversionTasks is a passthrough to the underlying DescribeConversionTasks method.
// It will increment the count of requests made to DescribeConversionTasks.
func (c *EC2) DescribeConversionTasks(input *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error) {
	c.inc("DescribeConversionTasks")
	return c.svc.DescribeConversionTasks(input)
}

// DescribeConversionTasksWithContext is a passthrough to the underlying DescribeConversionTasksWithContext method.
// It will increment the count of requests made to DescribeConversionTasks.
func (c *EC2) DescribeConversionTasksWithContext(ctx aws.Context, input *ec2.DescribeConversionTasksInput, opts ...request.Option) (*ec2.DescribeConversionTasksOutput, error) {
	c.inc("DescribeConversionTasks")
	return c.svc.DescribeConversionTasksWithContext(ctx, input, opts...)
}

// DescribeCustomerGatewaysRequest is a passthrough to the underlying DescribeCustomerGatewaysRequest.
// It will increment the count of requests made to DescribeCustomerGateways.
func (c *EC2) DescribeCustomerGatewaysRequest(input *ec2.DescribeCustomerGatewaysInput) (req *request.Request, output *ec2.DescribeCustomerGatewaysOutput) {
	c.inc("DescribeCustomerGateways")
	return c.svc.DescribeCustomerGatewaysRequest(input)
}

// DescribeCustomerGateways is a passthrough to the underlying DescribeCustomerGateways method.
// It will increment the count of requests made to DescribeCustomerGateways.
func (c *EC2) DescribeCustomerGateways(input *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error) {
	c.inc("DescribeCustomerGateways")
	return c.svc.DescribeCustomerGateways(input)
}

// DescribeCustomerGatewaysWithContext is a passthrough to the underlying DescribeCustomerGatewaysWithContext method.
// It will increment the count of requests made to DescribeCustomerGateways.
func (c *EC2) DescribeCustomerGatewaysWithContext(ctx aws.Context, input *ec2.DescribeCustomerGatewaysInput, opts ...request.Option) (*ec2.DescribeCustomerGatewaysOutput, error) {
	c.inc("DescribeCustomerGateways")
	return c.svc.DescribeCustomerGatewaysWithContext(ctx, input, opts...)
}

// DescribeDhcpOptionsRequest is a passthrough to the underlying DescribeDhcpOptionsRequest.
// It will increment the count of requests made to DescribeDhcpOptions.
func (c *EC2) DescribeDhcpOptionsRequest(input *ec2.DescribeDhcpOptionsInput) (req *request.Request, output *ec2.DescribeDhcpOptionsOutput) {
	c.inc("DescribeDhcpOptions")
	return c.svc.DescribeDhcpOptionsRequest(input)
}

// DescribeDhcpOptions is a passthrough to the underlying DescribeDhcpOptions method.
// It will increment the count of requests made to DescribeDhcpOptions.
func (c *EC2) DescribeDhcpOptions(input *ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error) {
	c.inc("DescribeDhcpOptions")
	return c.svc.DescribeDhcpOptions(input)
}

// DescribeDhcpOptionsWithContext is a passthrough to the underlying DescribeDhcpOptionsWithContext method.
// It will increment the count of requests made to DescribeDhcpOptions.
func (c *EC2) DescribeDhcpOptionsWithContext(ctx aws.Context, input *ec2.DescribeDhcpOptionsInput, opts ...request.Option) (*ec2.DescribeDhcpOptionsOutput, error) {
	c.inc("DescribeDhcpOptions")
	return c.svc.DescribeDhcpOptionsWithContext(ctx, input, opts...)
}

// DescribeEgressOnlyInternetGatewaysRequest is a passthrough to the underlying DescribeEgressOnlyInternetGatewaysRequest.
// It will increment the count of requests made to DescribeEgressOnlyInternetGateways.
func (c *EC2) DescribeEgressOnlyInternetGatewaysRequest(input *ec2.DescribeEgressOnlyInternetGatewaysInput) (req *request.Request, output *ec2.DescribeEgressOnlyInternetGatewaysOutput) {
	c.inc("DescribeEgressOnlyInternetGateways")
	return c.svc.DescribeEgressOnlyInternetGatewaysRequest(input)
}

// DescribeEgressOnlyInternetGateways is a passthrough to the underlying DescribeEgressOnlyInternetGateways method.
// It will increment the count of requests made to DescribeEgressOnlyInternetGateways.
func (c *EC2) DescribeEgressOnlyInternetGateways(input *ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	c.inc("DescribeEgressOnlyInternetGateways")
	return c.svc.DescribeEgressOnlyInternetGateways(input)
}

// DescribeEgressOnlyInternetGatewaysWithContext is a passthrough to the underlying DescribeEgressOnlyInternetGatewaysWithContext method.
// It will increment the count of requests made to DescribeEgressOnlyInternetGateways.
func (c *EC2) DescribeEgressOnlyInternetGatewaysWithContext(ctx aws.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput, opts ...request.Option) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	c.inc("DescribeEgressOnlyInternetGateways")
	return c.svc.DescribeEgressOnlyInternetGatewaysWithContext(ctx, input, opts...)
}

// DescribeElasticGpusRequest is a passthrough to the underlying DescribeElasticGpusRequest.
// It will increment the count of requests made to DescribeElasticGpus.
func (c *EC2) DescribeElasticGpusRequest(input *ec2.DescribeElasticGpusInput) (req *request.Request, output *ec2.DescribeElasticGpusOutput) {
	c.inc("DescribeElasticGpus")
	return c.svc.DescribeElasticGpusRequest(input)
}

// DescribeElasticGpus is a passthrough to the underlying DescribeElasticGpus method.
// It will increment the count of requests made to DescribeElasticGpus.
func (c *EC2) DescribeElasticGpus(input *ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error) {
	c.inc("DescribeElasticGpus")
	return c.svc.DescribeElasticGpus(input)
}

// DescribeElasticGpusWithContext is a passthrough to the underlying DescribeElasticGpusWithContext method.
// It will increment the count of requests made to DescribeElasticGpus.
func (c *EC2) DescribeElasticGpusWithContext(ctx aws.Context, input *ec2.DescribeElasticGpusInput, opts ...request.Option) (*ec2.DescribeElasticGpusOutput, error) {
	c.inc("DescribeElasticGpus")
	return c.svc.DescribeElasticGpusWithContext(ctx, input, opts...)
}

// DescribeExportTasksRequest is a passthrough to the underlying DescribeExportTasksRequest.
// It will increment the count of requests made to DescribeExportTasks.
func (c *EC2) DescribeExportTasksRequest(input *ec2.DescribeExportTasksInput) (req *request.Request, output *ec2.DescribeExportTasksOutput) {
	c.inc("DescribeExportTasks")
	return c.svc.DescribeExportTasksRequest(input)
}

// DescribeExportTasks is a passthrough to the underlying DescribeExportTasks method.
// It will increment the count of requests made to DescribeExportTasks.
func (c *EC2) DescribeExportTasks(input *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error) {
	c.inc("DescribeExportTasks")
	return c.svc.DescribeExportTasks(input)
}

// DescribeExportTasksWithContext is a passthrough to the underlying DescribeExportTasksWithContext method.
// It will increment the count of requests made to DescribeExportTasks.
func (c *EC2) DescribeExportTasksWithContext(ctx aws.Context, input *ec2.DescribeExportTasksInput, opts ...request.Option) (*ec2.DescribeExportTasksOutput, error) {
	c.inc("DescribeExportTasks")
	return c.svc.DescribeExportTasksWithContext(ctx, input, opts...)
}

// DescribeFlowLogsRequest is a passthrough to the underlying DescribeFlowLogsRequest.
// It will increment the count of requests made to DescribeFlowLogs.
func (c *EC2) DescribeFlowLogsRequest(input *ec2.DescribeFlowLogsInput) (req *request.Request, output *ec2.DescribeFlowLogsOutput) {
	c.inc("DescribeFlowLogs")
	return c.svc.DescribeFlowLogsRequest(input)
}

// DescribeFlowLogs is a passthrough to the underlying DescribeFlowLogs method.
// It will increment the count of requests made to DescribeFlowLogs.
func (c *EC2) DescribeFlowLogs(input *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error) {
	c.inc("DescribeFlowLogs")
	return c.svc.DescribeFlowLogs(input)
}

// DescribeFlowLogsWithContext is a passthrough to the underlying DescribeFlowLogsWithContext method.
// It will increment the count of requests made to DescribeFlowLogs.
func (c *EC2) DescribeFlowLogsWithContext(ctx aws.Context, input *ec2.DescribeFlowLogsInput, opts ...request.Option) (*ec2.DescribeFlowLogsOutput, error) {
	c.inc("DescribeFlowLogs")
	return c.svc.DescribeFlowLogsWithContext(ctx, input, opts...)
}

// DescribeFpgaImageAttributeRequest is a passthrough to the underlying DescribeFpgaImageAttributeRequest.
// It will increment the count of requests made to DescribeFpgaImageAttribute.
func (c *EC2) DescribeFpgaImageAttributeRequest(input *ec2.DescribeFpgaImageAttributeInput) (req *request.Request, output *ec2.DescribeFpgaImageAttributeOutput) {
	c.inc("DescribeFpgaImageAttribute")
	return c.svc.DescribeFpgaImageAttributeRequest(input)
}

// DescribeFpgaImageAttribute is a passthrough to the underlying DescribeFpgaImageAttribute method.
// It will increment the count of requests made to DescribeFpgaImageAttribute.
func (c *EC2) DescribeFpgaImageAttribute(input *ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	c.inc("DescribeFpgaImageAttribute")
	return c.svc.DescribeFpgaImageAttribute(input)
}

// DescribeFpgaImageAttributeWithContext is a passthrough to the underlying DescribeFpgaImageAttributeWithContext method.
// It will increment the count of requests made to DescribeFpgaImageAttribute.
func (c *EC2) DescribeFpgaImageAttributeWithContext(ctx aws.Context, input *ec2.DescribeFpgaImageAttributeInput, opts ...request.Option) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	c.inc("DescribeFpgaImageAttribute")
	return c.svc.DescribeFpgaImageAttributeWithContext(ctx, input, opts...)
}

// DescribeFpgaImagesRequest is a passthrough to the underlying DescribeFpgaImagesRequest.
// It will increment the count of requests made to DescribeFpgaImages.
func (c *EC2) DescribeFpgaImagesRequest(input *ec2.DescribeFpgaImagesInput) (req *request.Request, output *ec2.DescribeFpgaImagesOutput) {
	c.inc("DescribeFpgaImages")
	return c.svc.DescribeFpgaImagesRequest(input)
}

// DescribeFpgaImages is a passthrough to the underlying DescribeFpgaImages method.
// It will increment the count of requests made to DescribeFpgaImages.
func (c *EC2) DescribeFpgaImages(input *ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error) {
	c.inc("DescribeFpgaImages")
	return c.svc.DescribeFpgaImages(input)
}

// DescribeFpgaImagesWithContext is a passthrough to the underlying DescribeFpgaImagesWithContext method.
// It will increment the count of requests made to DescribeFpgaImages.
func (c *EC2) DescribeFpgaImagesWithContext(ctx aws.Context, input *ec2.DescribeFpgaImagesInput, opts ...request.Option) (*ec2.DescribeFpgaImagesOutput, error) {
	c.inc("DescribeFpgaImages")
	return c.svc.DescribeFpgaImagesWithContext(ctx, input, opts...)
}

// DescribeHostReservationOfferingsRequest is a passthrough to the underlying DescribeHostReservationOfferingsRequest.
// It will increment the count of requests made to DescribeHostReservationOfferings.
func (c *EC2) DescribeHostReservationOfferingsRequest(input *ec2.DescribeHostReservationOfferingsInput) (req *request.Request, output *ec2.DescribeHostReservationOfferingsOutput) {
	c.inc("DescribeHostReservationOfferings")
	return c.svc.DescribeHostReservationOfferingsRequest(input)
}

// DescribeHostReservationOfferings is a passthrough to the underlying DescribeHostReservationOfferings method.
// It will increment the count of requests made to DescribeHostReservationOfferings.
func (c *EC2) DescribeHostReservationOfferings(input *ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	c.inc("DescribeHostReservationOfferings")
	return c.svc.DescribeHostReservationOfferings(input)
}

// DescribeHostReservationOfferingsWithContext is a passthrough to the underlying DescribeHostReservationOfferingsWithContext method.
// It will increment the count of requests made to DescribeHostReservationOfferings.
func (c *EC2) DescribeHostReservationOfferingsWithContext(ctx aws.Context, input *ec2.DescribeHostReservationOfferingsInput, opts ...request.Option) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	c.inc("DescribeHostReservationOfferings")
	return c.svc.DescribeHostReservationOfferingsWithContext(ctx, input, opts...)
}

// DescribeHostReservationsRequest is a passthrough to the underlying DescribeHostReservationsRequest.
// It will increment the count of requests made to DescribeHostReservations.
func (c *EC2) DescribeHostReservationsRequest(input *ec2.DescribeHostReservationsInput) (req *request.Request, output *ec2.DescribeHostReservationsOutput) {
	c.inc("DescribeHostReservations")
	return c.svc.DescribeHostReservationsRequest(input)
}

// DescribeHostReservations is a passthrough to the underlying DescribeHostReservations method.
// It will increment the count of requests made to DescribeHostReservations.
func (c *EC2) DescribeHostReservations(input *ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error) {
	c.inc("DescribeHostReservations")
	return c.svc.DescribeHostReservations(input)
}

// DescribeHostReservationsWithContext is a passthrough to the underlying DescribeHostReservationsWithContext method.
// It will increment the count of requests made to DescribeHostReservations.
func (c *EC2) DescribeHostReservationsWithContext(ctx aws.Context, input *ec2.DescribeHostReservationsInput, opts ...request.Option) (*ec2.DescribeHostReservationsOutput, error) {
	c.inc("DescribeHostReservations")
	return c.svc.DescribeHostReservationsWithContext(ctx, input, opts...)
}

// DescribeHostsRequest is a passthrough to the underlying DescribeHostsRequest.
// It will increment the count of requests made to DescribeHosts.
func (c *EC2) DescribeHostsRequest(input *ec2.DescribeHostsInput) (req *request.Request, output *ec2.DescribeHostsOutput) {
	c.inc("DescribeHosts")
	return c.svc.DescribeHostsRequest(input)
}

// DescribeHosts is a passthrough to the underlying DescribeHosts method.
// It will increment the count of requests made to DescribeHosts.
func (c *EC2) DescribeHosts(input *ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error) {
	c.inc("DescribeHosts")
	return c.svc.DescribeHosts(input)
}

// DescribeHostsWithContext is a passthrough to the underlying DescribeHostsWithContext method.
// It will increment the count of requests made to DescribeHosts.
func (c *EC2) DescribeHostsWithContext(ctx aws.Context, input *ec2.DescribeHostsInput, opts ...request.Option) (*ec2.DescribeHostsOutput, error) {
	c.inc("DescribeHosts")
	return c.svc.DescribeHostsWithContext(ctx, input, opts...)
}

// DescribeIamInstanceProfileAssociationsRequest is a passthrough to the underlying DescribeIamInstanceProfileAssociationsRequest.
// It will increment the count of requests made to DescribeIamInstanceProfileAssociations.
func (c *EC2) DescribeIamInstanceProfileAssociationsRequest(input *ec2.DescribeIamInstanceProfileAssociationsInput) (req *request.Request, output *ec2.DescribeIamInstanceProfileAssociationsOutput) {
	c.inc("DescribeIamInstanceProfileAssociations")
	return c.svc.DescribeIamInstanceProfileAssociationsRequest(input)
}

// DescribeIamInstanceProfileAssociations is a passthrough to the underlying DescribeIamInstanceProfileAssociations method.
// It will increment the count of requests made to DescribeIamInstanceProfileAssociations.
func (c *EC2) DescribeIamInstanceProfileAssociations(input *ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	c.inc("DescribeIamInstanceProfileAssociations")
	return c.svc.DescribeIamInstanceProfileAssociations(input)
}

// DescribeIamInstanceProfileAssociationsWithContext is a passthrough to the underlying DescribeIamInstanceProfileAssociationsWithContext method.
// It will increment the count of requests made to DescribeIamInstanceProfileAssociations.
func (c *EC2) DescribeIamInstanceProfileAssociationsWithContext(ctx aws.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput, opts ...request.Option) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	c.inc("DescribeIamInstanceProfileAssociations")
	return c.svc.DescribeIamInstanceProfileAssociationsWithContext(ctx, input, opts...)
}

// DescribeIdFormatRequest is a passthrough to the underlying DescribeIdFormatRequest.
// It will increment the count of requests made to DescribeIdFormat.
func (c *EC2) DescribeIdFormatRequest(input *ec2.DescribeIdFormatInput) (req *request.Request, output *ec2.DescribeIdFormatOutput) {
	c.inc("DescribeIdFormat")
	return c.svc.DescribeIdFormatRequest(input)
}

// DescribeIdFormat is a passthrough to the underlying DescribeIdFormat method.
// It will increment the count of requests made to DescribeIdFormat.
func (c *EC2) DescribeIdFormat(input *ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error) {
	c.inc("DescribeIdFormat")
	return c.svc.DescribeIdFormat(input)
}

// DescribeIdFormatWithContext is a passthrough to the underlying DescribeIdFormatWithContext method.
// It will increment the count of requests made to DescribeIdFormat.
func (c *EC2) DescribeIdFormatWithContext(ctx aws.Context, input *ec2.DescribeIdFormatInput, opts ...request.Option) (*ec2.DescribeIdFormatOutput, error) {
	c.inc("DescribeIdFormat")
	return c.svc.DescribeIdFormatWithContext(ctx, input, opts...)
}

// DescribeIdentityIdFormatRequest is a passthrough to the underlying DescribeIdentityIdFormatRequest.
// It will increment the count of requests made to DescribeIdentityIdFormat.
func (c *EC2) DescribeIdentityIdFormatRequest(input *ec2.DescribeIdentityIdFormatInput) (req *request.Request, output *ec2.DescribeIdentityIdFormatOutput) {
	c.inc("DescribeIdentityIdFormat")
	return c.svc.DescribeIdentityIdFormatRequest(input)
}

// DescribeIdentityIdFormat is a passthrough to the underlying DescribeIdentityIdFormat method.
// It will increment the count of requests made to DescribeIdentityIdFormat.
func (c *EC2) DescribeIdentityIdFormat(input *ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error) {
	c.inc("DescribeIdentityIdFormat")
	return c.svc.DescribeIdentityIdFormat(input)
}

// DescribeIdentityIdFormatWithContext is a passthrough to the underlying DescribeIdentityIdFormatWithContext method.
// It will increment the count of requests made to DescribeIdentityIdFormat.
func (c *EC2) DescribeIdentityIdFormatWithContext(ctx aws.Context, input *ec2.DescribeIdentityIdFormatInput, opts ...request.Option) (*ec2.DescribeIdentityIdFormatOutput, error) {
	c.inc("DescribeIdentityIdFormat")
	return c.svc.DescribeIdentityIdFormatWithContext(ctx, input, opts...)
}

// DescribeImageAttributeRequest is a passthrough to the underlying DescribeImageAttributeRequest.
// It will increment the count of requests made to DescribeImageAttribute.
func (c *EC2) DescribeImageAttributeRequest(input *ec2.DescribeImageAttributeInput) (req *request.Request, output *ec2.DescribeImageAttributeOutput) {
	c.inc("DescribeImageAttribute")
	return c.svc.DescribeImageAttributeRequest(input)
}

// DescribeImageAttribute is a passthrough to the underlying DescribeImageAttribute method.
// It will increment the count of requests made to DescribeImageAttribute.
func (c *EC2) DescribeImageAttribute(input *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error) {
	c.inc("DescribeImageAttribute")
	return c.svc.DescribeImageAttribute(input)
}

// DescribeImageAttributeWithContext is a passthrough to the underlying DescribeImageAttributeWithContext method.
// It will increment the count of requests made to DescribeImageAttribute.
func (c *EC2) DescribeImageAttributeWithContext(ctx aws.Context, input *ec2.DescribeImageAttributeInput, opts ...request.Option) (*ec2.DescribeImageAttributeOutput, error) {
	c.inc("DescribeImageAttribute")
	return c.svc.DescribeImageAttributeWithContext(ctx, input, opts...)
}

// DescribeImagesRequest is a passthrough to the underlying DescribeImagesRequest.
// It will increment the count of requests made to DescribeImages.
func (c *EC2) DescribeImagesRequest(input *ec2.DescribeImagesInput) (req *request.Request, output *ec2.DescribeImagesOutput) {
	c.inc("DescribeImages")
	return c.svc.DescribeImagesRequest(input)
}

// DescribeImages is a passthrough to the underlying DescribeImages method.
// It will increment the count of requests made to DescribeImages.
func (c *EC2) DescribeImages(input *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error) {
	c.inc("DescribeImages")
	return c.svc.DescribeImages(input)
}

// DescribeImagesWithContext is a passthrough to the underlying DescribeImagesWithContext method.
// It will increment the count of requests made to DescribeImages.
func (c *EC2) DescribeImagesWithContext(ctx aws.Context, input *ec2.DescribeImagesInput, opts ...request.Option) (*ec2.DescribeImagesOutput, error) {
	c.inc("DescribeImages")
	return c.svc.DescribeImagesWithContext(ctx, input, opts...)
}

// DescribeImportImageTasksRequest is a passthrough to the underlying DescribeImportImageTasksRequest.
// It will increment the count of requests made to DescribeImportImageTasks.
func (c *EC2) DescribeImportImageTasksRequest(input *ec2.DescribeImportImageTasksInput) (req *request.Request, output *ec2.DescribeImportImageTasksOutput) {
	c.inc("DescribeImportImageTasks")
	return c.svc.DescribeImportImageTasksRequest(input)
}

// DescribeImportImageTasks is a passthrough to the underlying DescribeImportImageTasks method.
// It will increment the count of requests made to DescribeImportImageTasks.
func (c *EC2) DescribeImportImageTasks(input *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error) {
	c.inc("DescribeImportImageTasks")
	return c.svc.DescribeImportImageTasks(input)
}

// DescribeImportImageTasksWithContext is a passthrough to the underlying DescribeImportImageTasksWithContext method.
// It will increment the count of requests made to DescribeImportImageTasks.
func (c *EC2) DescribeImportImageTasksWithContext(ctx aws.Context, input *ec2.DescribeImportImageTasksInput, opts ...request.Option) (*ec2.DescribeImportImageTasksOutput, error) {
	c.inc("DescribeImportImageTasks")
	return c.svc.DescribeImportImageTasksWithContext(ctx, input, opts...)
}

// DescribeImportSnapshotTasksRequest is a passthrough to the underlying DescribeImportSnapshotTasksRequest.
// It will increment the count of requests made to DescribeImportSnapshotTasks.
func (c *EC2) DescribeImportSnapshotTasksRequest(input *ec2.DescribeImportSnapshotTasksInput) (req *request.Request, output *ec2.DescribeImportSnapshotTasksOutput) {
	c.inc("DescribeImportSnapshotTasks")
	return c.svc.DescribeImportSnapshotTasksRequest(input)
}

// DescribeImportSnapshotTasks is a passthrough to the underlying DescribeImportSnapshotTasks method.
// It will increment the count of requests made to DescribeImportSnapshotTasks.
func (c *EC2) DescribeImportSnapshotTasks(input *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	c.inc("DescribeImportSnapshotTasks")
	return c.svc.DescribeImportSnapshotTasks(input)
}

// DescribeImportSnapshotTasksWithContext is a passthrough to the underlying DescribeImportSnapshotTasksWithContext method.
// It will increment the count of requests made to DescribeImportSnapshotTasks.
func (c *EC2) DescribeImportSnapshotTasksWithContext(ctx aws.Context, input *ec2.DescribeImportSnapshotTasksInput, opts ...request.Option) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	c.inc("DescribeImportSnapshotTasks")
	return c.svc.DescribeImportSnapshotTasksWithContext(ctx, input, opts...)
}

// DescribeInstanceAttributeRequest is a passthrough to the underlying DescribeInstanceAttributeRequest.
// It will increment the count of requests made to DescribeInstanceAttribute.
func (c *EC2) DescribeInstanceAttributeRequest(input *ec2.DescribeInstanceAttributeInput) (req *request.Request, output *ec2.DescribeInstanceAttributeOutput) {
	c.inc("DescribeInstanceAttribute")
	return c.svc.DescribeInstanceAttributeRequest(input)
}

// DescribeInstanceAttribute is a passthrough to the underlying DescribeInstanceAttribute method.
// It will increment the count of requests made to DescribeInstanceAttribute.
func (c *EC2) DescribeInstanceAttribute(input *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error) {
	c.inc("DescribeInstanceAttribute")
	return c.svc.DescribeInstanceAttribute(input)
}

// DescribeInstanceAttributeWithContext is a passthrough to the underlying DescribeInstanceAttributeWithContext method.
// It will increment the count of requests made to DescribeInstanceAttribute.
func (c *EC2) DescribeInstanceAttributeWithContext(ctx aws.Context, input *ec2.DescribeInstanceAttributeInput, opts ...request.Option) (*ec2.DescribeInstanceAttributeOutput, error) {
	c.inc("DescribeInstanceAttribute")
	return c.svc.DescribeInstanceAttributeWithContext(ctx, input, opts...)
}

// DescribeInstanceStatusRequest is a passthrough to the underlying DescribeInstanceStatusRequest.
// It will increment the count of requests made to DescribeInstanceStatus.
func (c *EC2) DescribeInstanceStatusRequest(input *ec2.DescribeInstanceStatusInput) (req *request.Request, output *ec2.DescribeInstanceStatusOutput) {
	c.inc("DescribeInstanceStatus")
	return c.svc.DescribeInstanceStatusRequest(input)
}

// DescribeInstanceStatus is a passthrough to the underlying DescribeInstanceStatus method.
// It will increment the count of requests made to DescribeInstanceStatus.
func (c *EC2) DescribeInstanceStatus(input *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error) {
	c.inc("DescribeInstanceStatus")
	return c.svc.DescribeInstanceStatus(input)
}

// DescribeInstanceStatusWithContext is a passthrough to the underlying DescribeInstanceStatusWithContext method.
// It will increment the count of requests made to DescribeInstanceStatus.
func (c *EC2) DescribeInstanceStatusWithContext(ctx aws.Context, input *ec2.DescribeInstanceStatusInput, opts ...request.Option) (*ec2.DescribeInstanceStatusOutput, error) {
	c.inc("DescribeInstanceStatus")
	return c.svc.DescribeInstanceStatusWithContext(ctx, input, opts...)
}

// DescribeInstanceStatusPages is a passthrough to the underlying DescribeInstanceStatusPages method.
// It will increment the count of requests made to DescribeInstanceStatus on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeInstanceStatusPagesWithContext to avoid this.
func (c *EC2) DescribeInstanceStatusPages(input *ec2.DescribeInstanceStatusInput, fn func(*ec2.DescribeInstanceStatusOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeInstanceStatusOutput, lastPage bool) bool {
		c.inc("DescribeInstanceStatus")
		return fn(page, lastPage)
	}
	return c.DescribeInstanceStatusPages(input, wrappedFn)
}

// DescribeInstanceStatusPagesWithContext is a passthrough to the underlying DescribeInstanceStatusPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeInstanceStatus when applied to the request.
func (c *EC2) DescribeInstanceStatusPagesWithContext(ctx aws.Context, input *ec2.DescribeInstanceStatusInput, fn func(*ec2.DescribeInstanceStatusOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeInstanceStatus"))
	return c.DescribeInstanceStatusPagesWithContext(ctx, input, fn, opts...)
}

// DescribeInstancesRequest is a passthrough to the underlying DescribeInstancesRequest.
// It will increment the count of requests made to DescribeInstances.
func (c *EC2) DescribeInstancesRequest(input *ec2.DescribeInstancesInput) (req *request.Request, output *ec2.DescribeInstancesOutput) {
	c.inc("DescribeInstances")
	return c.svc.DescribeInstancesRequest(input)
}

// DescribeInstances is a passthrough to the underlying DescribeInstances method.
// It will increment the count of requests made to DescribeInstances.
func (c *EC2) DescribeInstances(input *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
	c.inc("DescribeInstances")
	return c.svc.DescribeInstances(input)
}

// DescribeInstancesWithContext is a passthrough to the underlying DescribeInstancesWithContext method.
// It will increment the count of requests made to DescribeInstances.
func (c *EC2) DescribeInstancesWithContext(ctx aws.Context, input *ec2.DescribeInstancesInput, opts ...request.Option) (*ec2.DescribeInstancesOutput, error) {
	c.inc("DescribeInstances")
	return c.svc.DescribeInstancesWithContext(ctx, input, opts...)
}

// DescribeInstancesPages is a passthrough to the underlying DescribeInstancesPages method.
// It will increment the count of requests made to DescribeInstances on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeInstancesPagesWithContext to avoid this.
func (c *EC2) DescribeInstancesPages(input *ec2.DescribeInstancesInput, fn func(*ec2.DescribeInstancesOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeInstancesOutput, lastPage bool) bool {
		c.inc("DescribeInstances")
		return fn(page, lastPage)
	}
	return c.DescribeInstancesPages(input, wrappedFn)
}

// DescribeInstancesPagesWithContext is a passthrough to the underlying DescribeInstancesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeInstances when applied to the request.
func (c *EC2) DescribeInstancesPagesWithContext(ctx aws.Context, input *ec2.DescribeInstancesInput, fn func(*ec2.DescribeInstancesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeInstances"))
	return c.DescribeInstancesPagesWithContext(ctx, input, fn, opts...)
}

// DescribeInternetGatewaysRequest is a passthrough to the underlying DescribeInternetGatewaysRequest.
// It will increment the count of requests made to DescribeInternetGateways.
func (c *EC2) DescribeInternetGatewaysRequest(input *ec2.DescribeInternetGatewaysInput) (req *request.Request, output *ec2.DescribeInternetGatewaysOutput) {
	c.inc("DescribeInternetGateways")
	return c.svc.DescribeInternetGatewaysRequest(input)
}

// DescribeInternetGateways is a passthrough to the underlying DescribeInternetGateways method.
// It will increment the count of requests made to DescribeInternetGateways.
func (c *EC2) DescribeInternetGateways(input *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error) {
	c.inc("DescribeInternetGateways")
	return c.svc.DescribeInternetGateways(input)
}

// DescribeInternetGatewaysWithContext is a passthrough to the underlying DescribeInternetGatewaysWithContext method.
// It will increment the count of requests made to DescribeInternetGateways.
func (c *EC2) DescribeInternetGatewaysWithContext(ctx aws.Context, input *ec2.DescribeInternetGatewaysInput, opts ...request.Option) (*ec2.DescribeInternetGatewaysOutput, error) {
	c.inc("DescribeInternetGateways")
	return c.svc.DescribeInternetGatewaysWithContext(ctx, input, opts...)
}

// DescribeKeyPairsRequest is a passthrough to the underlying DescribeKeyPairsRequest.
// It will increment the count of requests made to DescribeKeyPairs.
func (c *EC2) DescribeKeyPairsRequest(input *ec2.DescribeKeyPairsInput) (req *request.Request, output *ec2.DescribeKeyPairsOutput) {
	c.inc("DescribeKeyPairs")
	return c.svc.DescribeKeyPairsRequest(input)
}

// DescribeKeyPairs is a passthrough to the underlying DescribeKeyPairs method.
// It will increment the count of requests made to DescribeKeyPairs.
func (c *EC2) DescribeKeyPairs(input *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error) {
	c.inc("DescribeKeyPairs")
	return c.svc.DescribeKeyPairs(input)
}

// DescribeKeyPairsWithContext is a passthrough to the underlying DescribeKeyPairsWithContext method.
// It will increment the count of requests made to DescribeKeyPairs.
func (c *EC2) DescribeKeyPairsWithContext(ctx aws.Context, input *ec2.DescribeKeyPairsInput, opts ...request.Option) (*ec2.DescribeKeyPairsOutput, error) {
	c.inc("DescribeKeyPairs")
	return c.svc.DescribeKeyPairsWithContext(ctx, input, opts...)
}

// DescribeMovingAddressesRequest is a passthrough to the underlying DescribeMovingAddressesRequest.
// It will increment the count of requests made to DescribeMovingAddresses.
func (c *EC2) DescribeMovingAddressesRequest(input *ec2.DescribeMovingAddressesInput) (req *request.Request, output *ec2.DescribeMovingAddressesOutput) {
	c.inc("DescribeMovingAddresses")
	return c.svc.DescribeMovingAddressesRequest(input)
}

// DescribeMovingAddresses is a passthrough to the underlying DescribeMovingAddresses method.
// It will increment the count of requests made to DescribeMovingAddresses.
func (c *EC2) DescribeMovingAddresses(input *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error) {
	c.inc("DescribeMovingAddresses")
	return c.svc.DescribeMovingAddresses(input)
}

// DescribeMovingAddressesWithContext is a passthrough to the underlying DescribeMovingAddressesWithContext method.
// It will increment the count of requests made to DescribeMovingAddresses.
func (c *EC2) DescribeMovingAddressesWithContext(ctx aws.Context, input *ec2.DescribeMovingAddressesInput, opts ...request.Option) (*ec2.DescribeMovingAddressesOutput, error) {
	c.inc("DescribeMovingAddresses")
	return c.svc.DescribeMovingAddressesWithContext(ctx, input, opts...)
}

// DescribeNatGatewaysRequest is a passthrough to the underlying DescribeNatGatewaysRequest.
// It will increment the count of requests made to DescribeNatGateways.
func (c *EC2) DescribeNatGatewaysRequest(input *ec2.DescribeNatGatewaysInput) (req *request.Request, output *ec2.DescribeNatGatewaysOutput) {
	c.inc("DescribeNatGateways")
	return c.svc.DescribeNatGatewaysRequest(input)
}

// DescribeNatGateways is a passthrough to the underlying DescribeNatGateways method.
// It will increment the count of requests made to DescribeNatGateways.
func (c *EC2) DescribeNatGateways(input *ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error) {
	c.inc("DescribeNatGateways")
	return c.svc.DescribeNatGateways(input)
}

// DescribeNatGatewaysWithContext is a passthrough to the underlying DescribeNatGatewaysWithContext method.
// It will increment the count of requests made to DescribeNatGateways.
func (c *EC2) DescribeNatGatewaysWithContext(ctx aws.Context, input *ec2.DescribeNatGatewaysInput, opts ...request.Option) (*ec2.DescribeNatGatewaysOutput, error) {
	c.inc("DescribeNatGateways")
	return c.svc.DescribeNatGatewaysWithContext(ctx, input, opts...)
}

// DescribeNatGatewaysPages is a passthrough to the underlying DescribeNatGatewaysPages method.
// It will increment the count of requests made to DescribeNatGateways on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeNatGatewaysPagesWithContext to avoid this.
func (c *EC2) DescribeNatGatewaysPages(input *ec2.DescribeNatGatewaysInput, fn func(*ec2.DescribeNatGatewaysOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeNatGatewaysOutput, lastPage bool) bool {
		c.inc("DescribeNatGateways")
		return fn(page, lastPage)
	}
	return c.DescribeNatGatewaysPages(input, wrappedFn)
}

// DescribeNatGatewaysPagesWithContext is a passthrough to the underlying DescribeNatGatewaysPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeNatGateways when applied to the request.
func (c *EC2) DescribeNatGatewaysPagesWithContext(ctx aws.Context, input *ec2.DescribeNatGatewaysInput, fn func(*ec2.DescribeNatGatewaysOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeNatGateways"))
	return c.DescribeNatGatewaysPagesWithContext(ctx, input, fn, opts...)
}

// DescribeNetworkAclsRequest is a passthrough to the underlying DescribeNetworkAclsRequest.
// It will increment the count of requests made to DescribeNetworkAcls.
func (c *EC2) DescribeNetworkAclsRequest(input *ec2.DescribeNetworkAclsInput) (req *request.Request, output *ec2.DescribeNetworkAclsOutput) {
	c.inc("DescribeNetworkAcls")
	return c.svc.DescribeNetworkAclsRequest(input)
}

// DescribeNetworkAcls is a passthrough to the underlying DescribeNetworkAcls method.
// It will increment the count of requests made to DescribeNetworkAcls.
func (c *EC2) DescribeNetworkAcls(input *ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error) {
	c.inc("DescribeNetworkAcls")
	return c.svc.DescribeNetworkAcls(input)
}

// DescribeNetworkAclsWithContext is a passthrough to the underlying DescribeNetworkAclsWithContext method.
// It will increment the count of requests made to DescribeNetworkAcls.
func (c *EC2) DescribeNetworkAclsWithContext(ctx aws.Context, input *ec2.DescribeNetworkAclsInput, opts ...request.Option) (*ec2.DescribeNetworkAclsOutput, error) {
	c.inc("DescribeNetworkAcls")
	return c.svc.DescribeNetworkAclsWithContext(ctx, input, opts...)
}

// DescribeNetworkInterfaceAttributeRequest is a passthrough to the underlying DescribeNetworkInterfaceAttributeRequest.
// It will increment the count of requests made to DescribeNetworkInterfaceAttribute.
func (c *EC2) DescribeNetworkInterfaceAttributeRequest(input *ec2.DescribeNetworkInterfaceAttributeInput) (req *request.Request, output *ec2.DescribeNetworkInterfaceAttributeOutput) {
	c.inc("DescribeNetworkInterfaceAttribute")
	return c.svc.DescribeNetworkInterfaceAttributeRequest(input)
}

// DescribeNetworkInterfaceAttribute is a passthrough to the underlying DescribeNetworkInterfaceAttribute method.
// It will increment the count of requests made to DescribeNetworkInterfaceAttribute.
func (c *EC2) DescribeNetworkInterfaceAttribute(input *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	c.inc("DescribeNetworkInterfaceAttribute")
	return c.svc.DescribeNetworkInterfaceAttribute(input)
}

// DescribeNetworkInterfaceAttributeWithContext is a passthrough to the underlying DescribeNetworkInterfaceAttributeWithContext method.
// It will increment the count of requests made to DescribeNetworkInterfaceAttribute.
func (c *EC2) DescribeNetworkInterfaceAttributeWithContext(ctx aws.Context, input *ec2.DescribeNetworkInterfaceAttributeInput, opts ...request.Option) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	c.inc("DescribeNetworkInterfaceAttribute")
	return c.svc.DescribeNetworkInterfaceAttributeWithContext(ctx, input, opts...)
}

// DescribeNetworkInterfacePermissionsRequest is a passthrough to the underlying DescribeNetworkInterfacePermissionsRequest.
// It will increment the count of requests made to DescribeNetworkInterfacePermissions.
func (c *EC2) DescribeNetworkInterfacePermissionsRequest(input *ec2.DescribeNetworkInterfacePermissionsInput) (req *request.Request, output *ec2.DescribeNetworkInterfacePermissionsOutput) {
	c.inc("DescribeNetworkInterfacePermissions")
	return c.svc.DescribeNetworkInterfacePermissionsRequest(input)
}

// DescribeNetworkInterfacePermissions is a passthrough to the underlying DescribeNetworkInterfacePermissions method.
// It will increment the count of requests made to DescribeNetworkInterfacePermissions.
func (c *EC2) DescribeNetworkInterfacePermissions(input *ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	c.inc("DescribeNetworkInterfacePermissions")
	return c.svc.DescribeNetworkInterfacePermissions(input)
}

// DescribeNetworkInterfacePermissionsWithContext is a passthrough to the underlying DescribeNetworkInterfacePermissionsWithContext method.
// It will increment the count of requests made to DescribeNetworkInterfacePermissions.
func (c *EC2) DescribeNetworkInterfacePermissionsWithContext(ctx aws.Context, input *ec2.DescribeNetworkInterfacePermissionsInput, opts ...request.Option) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	c.inc("DescribeNetworkInterfacePermissions")
	return c.svc.DescribeNetworkInterfacePermissionsWithContext(ctx, input, opts...)
}

// DescribeNetworkInterfacesRequest is a passthrough to the underlying DescribeNetworkInterfacesRequest.
// It will increment the count of requests made to DescribeNetworkInterfaces.
func (c *EC2) DescribeNetworkInterfacesRequest(input *ec2.DescribeNetworkInterfacesInput) (req *request.Request, output *ec2.DescribeNetworkInterfacesOutput) {
	c.inc("DescribeNetworkInterfaces")
	return c.svc.DescribeNetworkInterfacesRequest(input)
}

// DescribeNetworkInterfaces is a passthrough to the underlying DescribeNetworkInterfaces method.
// It will increment the count of requests made to DescribeNetworkInterfaces.
func (c *EC2) DescribeNetworkInterfaces(input *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error) {
	c.inc("DescribeNetworkInterfaces")
	return c.svc.DescribeNetworkInterfaces(input)
}

// DescribeNetworkInterfacesWithContext is a passthrough to the underlying DescribeNetworkInterfacesWithContext method.
// It will increment the count of requests made to DescribeNetworkInterfaces.
func (c *EC2) DescribeNetworkInterfacesWithContext(ctx aws.Context, input *ec2.DescribeNetworkInterfacesInput, opts ...request.Option) (*ec2.DescribeNetworkInterfacesOutput, error) {
	c.inc("DescribeNetworkInterfaces")
	return c.svc.DescribeNetworkInterfacesWithContext(ctx, input, opts...)
}

// DescribePlacementGroupsRequest is a passthrough to the underlying DescribePlacementGroupsRequest.
// It will increment the count of requests made to DescribePlacementGroups.
func (c *EC2) DescribePlacementGroupsRequest(input *ec2.DescribePlacementGroupsInput) (req *request.Request, output *ec2.DescribePlacementGroupsOutput) {
	c.inc("DescribePlacementGroups")
	return c.svc.DescribePlacementGroupsRequest(input)
}

// DescribePlacementGroups is a passthrough to the underlying DescribePlacementGroups method.
// It will increment the count of requests made to DescribePlacementGroups.
func (c *EC2) DescribePlacementGroups(input *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error) {
	c.inc("DescribePlacementGroups")
	return c.svc.DescribePlacementGroups(input)
}

// DescribePlacementGroupsWithContext is a passthrough to the underlying DescribePlacementGroupsWithContext method.
// It will increment the count of requests made to DescribePlacementGroups.
func (c *EC2) DescribePlacementGroupsWithContext(ctx aws.Context, input *ec2.DescribePlacementGroupsInput, opts ...request.Option) (*ec2.DescribePlacementGroupsOutput, error) {
	c.inc("DescribePlacementGroups")
	return c.svc.DescribePlacementGroupsWithContext(ctx, input, opts...)
}

// DescribePrefixListsRequest is a passthrough to the underlying DescribePrefixListsRequest.
// It will increment the count of requests made to DescribePrefixLists.
func (c *EC2) DescribePrefixListsRequest(input *ec2.DescribePrefixListsInput) (req *request.Request, output *ec2.DescribePrefixListsOutput) {
	c.inc("DescribePrefixLists")
	return c.svc.DescribePrefixListsRequest(input)
}

// DescribePrefixLists is a passthrough to the underlying DescribePrefixLists method.
// It will increment the count of requests made to DescribePrefixLists.
func (c *EC2) DescribePrefixLists(input *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error) {
	c.inc("DescribePrefixLists")
	return c.svc.DescribePrefixLists(input)
}

// DescribePrefixListsWithContext is a passthrough to the underlying DescribePrefixListsWithContext method.
// It will increment the count of requests made to DescribePrefixLists.
func (c *EC2) DescribePrefixListsWithContext(ctx aws.Context, input *ec2.DescribePrefixListsInput, opts ...request.Option) (*ec2.DescribePrefixListsOutput, error) {
	c.inc("DescribePrefixLists")
	return c.svc.DescribePrefixListsWithContext(ctx, input, opts...)
}

// DescribeRegionsRequest is a passthrough to the underlying DescribeRegionsRequest.
// It will increment the count of requests made to DescribeRegions.
func (c *EC2) DescribeRegionsRequest(input *ec2.DescribeRegionsInput) (req *request.Request, output *ec2.DescribeRegionsOutput) {
	c.inc("DescribeRegions")
	return c.svc.DescribeRegionsRequest(input)
}

// DescribeRegions is a passthrough to the underlying DescribeRegions method.
// It will increment the count of requests made to DescribeRegions.
func (c *EC2) DescribeRegions(input *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error) {
	c.inc("DescribeRegions")
	return c.svc.DescribeRegions(input)
}

// DescribeRegionsWithContext is a passthrough to the underlying DescribeRegionsWithContext method.
// It will increment the count of requests made to DescribeRegions.
func (c *EC2) DescribeRegionsWithContext(ctx aws.Context, input *ec2.DescribeRegionsInput, opts ...request.Option) (*ec2.DescribeRegionsOutput, error) {
	c.inc("DescribeRegions")
	return c.svc.DescribeRegionsWithContext(ctx, input, opts...)
}

// DescribeReservedInstancesRequest is a passthrough to the underlying DescribeReservedInstancesRequest.
// It will increment the count of requests made to DescribeReservedInstances.
func (c *EC2) DescribeReservedInstancesRequest(input *ec2.DescribeReservedInstancesInput) (req *request.Request, output *ec2.DescribeReservedInstancesOutput) {
	c.inc("DescribeReservedInstances")
	return c.svc.DescribeReservedInstancesRequest(input)
}

// DescribeReservedInstances is a passthrough to the underlying DescribeReservedInstances method.
// It will increment the count of requests made to DescribeReservedInstances.
func (c *EC2) DescribeReservedInstances(input *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error) {
	c.inc("DescribeReservedInstances")
	return c.svc.DescribeReservedInstances(input)
}

// DescribeReservedInstancesWithContext is a passthrough to the underlying DescribeReservedInstancesWithContext method.
// It will increment the count of requests made to DescribeReservedInstances.
func (c *EC2) DescribeReservedInstancesWithContext(ctx aws.Context, input *ec2.DescribeReservedInstancesInput, opts ...request.Option) (*ec2.DescribeReservedInstancesOutput, error) {
	c.inc("DescribeReservedInstances")
	return c.svc.DescribeReservedInstancesWithContext(ctx, input, opts...)
}

// DescribeReservedInstancesListingsRequest is a passthrough to the underlying DescribeReservedInstancesListingsRequest.
// It will increment the count of requests made to DescribeReservedInstancesListings.
func (c *EC2) DescribeReservedInstancesListingsRequest(input *ec2.DescribeReservedInstancesListingsInput) (req *request.Request, output *ec2.DescribeReservedInstancesListingsOutput) {
	c.inc("DescribeReservedInstancesListings")
	return c.svc.DescribeReservedInstancesListingsRequest(input)
}

// DescribeReservedInstancesListings is a passthrough to the underlying DescribeReservedInstancesListings method.
// It will increment the count of requests made to DescribeReservedInstancesListings.
func (c *EC2) DescribeReservedInstancesListings(input *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	c.inc("DescribeReservedInstancesListings")
	return c.svc.DescribeReservedInstancesListings(input)
}

// DescribeReservedInstancesListingsWithContext is a passthrough to the underlying DescribeReservedInstancesListingsWithContext method.
// It will increment the count of requests made to DescribeReservedInstancesListings.
func (c *EC2) DescribeReservedInstancesListingsWithContext(ctx aws.Context, input *ec2.DescribeReservedInstancesListingsInput, opts ...request.Option) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	c.inc("DescribeReservedInstancesListings")
	return c.svc.DescribeReservedInstancesListingsWithContext(ctx, input, opts...)
}

// DescribeReservedInstancesModificationsRequest is a passthrough to the underlying DescribeReservedInstancesModificationsRequest.
// It will increment the count of requests made to DescribeReservedInstancesModifications.
func (c *EC2) DescribeReservedInstancesModificationsRequest(input *ec2.DescribeReservedInstancesModificationsInput) (req *request.Request, output *ec2.DescribeReservedInstancesModificationsOutput) {
	c.inc("DescribeReservedInstancesModifications")
	return c.svc.DescribeReservedInstancesModificationsRequest(input)
}

// DescribeReservedInstancesModifications is a passthrough to the underlying DescribeReservedInstancesModifications method.
// It will increment the count of requests made to DescribeReservedInstancesModifications.
func (c *EC2) DescribeReservedInstancesModifications(input *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	c.inc("DescribeReservedInstancesModifications")
	return c.svc.DescribeReservedInstancesModifications(input)
}

// DescribeReservedInstancesModificationsWithContext is a passthrough to the underlying DescribeReservedInstancesModificationsWithContext method.
// It will increment the count of requests made to DescribeReservedInstancesModifications.
func (c *EC2) DescribeReservedInstancesModificationsWithContext(ctx aws.Context, input *ec2.DescribeReservedInstancesModificationsInput, opts ...request.Option) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	c.inc("DescribeReservedInstancesModifications")
	return c.svc.DescribeReservedInstancesModificationsWithContext(ctx, input, opts...)
}

// DescribeReservedInstancesModificationsPages is a passthrough to the underlying DescribeReservedInstancesModificationsPages method.
// It will increment the count of requests made to DescribeReservedInstancesModifications on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeReservedInstancesModificationsPagesWithContext to avoid this.
func (c *EC2) DescribeReservedInstancesModificationsPages(input *ec2.DescribeReservedInstancesModificationsInput, fn func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeReservedInstancesModificationsOutput, lastPage bool) bool {
		c.inc("DescribeReservedInstancesModifications")
		return fn(page, lastPage)
	}
	return c.DescribeReservedInstancesModificationsPages(input, wrappedFn)
}

// DescribeReservedInstancesModificationsPagesWithContext is a passthrough to the underlying DescribeReservedInstancesModificationsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeReservedInstancesModifications when applied to the request.
func (c *EC2) DescribeReservedInstancesModificationsPagesWithContext(ctx aws.Context, input *ec2.DescribeReservedInstancesModificationsInput, fn func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeReservedInstancesModifications"))
	return c.DescribeReservedInstancesModificationsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeReservedInstancesOfferingsRequest is a passthrough to the underlying DescribeReservedInstancesOfferingsRequest.
// It will increment the count of requests made to DescribeReservedInstancesOfferings.
func (c *EC2) DescribeReservedInstancesOfferingsRequest(input *ec2.DescribeReservedInstancesOfferingsInput) (req *request.Request, output *ec2.DescribeReservedInstancesOfferingsOutput) {
	c.inc("DescribeReservedInstancesOfferings")
	return c.svc.DescribeReservedInstancesOfferingsRequest(input)
}

// DescribeReservedInstancesOfferings is a passthrough to the underlying DescribeReservedInstancesOfferings method.
// It will increment the count of requests made to DescribeReservedInstancesOfferings.
func (c *EC2) DescribeReservedInstancesOfferings(input *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	c.inc("DescribeReservedInstancesOfferings")
	return c.svc.DescribeReservedInstancesOfferings(input)
}

// DescribeReservedInstancesOfferingsWithContext is a passthrough to the underlying DescribeReservedInstancesOfferingsWithContext method.
// It will increment the count of requests made to DescribeReservedInstancesOfferings.
func (c *EC2) DescribeReservedInstancesOfferingsWithContext(ctx aws.Context, input *ec2.DescribeReservedInstancesOfferingsInput, opts ...request.Option) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	c.inc("DescribeReservedInstancesOfferings")
	return c.svc.DescribeReservedInstancesOfferingsWithContext(ctx, input, opts...)
}

// DescribeReservedInstancesOfferingsPages is a passthrough to the underlying DescribeReservedInstancesOfferingsPages method.
// It will increment the count of requests made to DescribeReservedInstancesOfferings on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeReservedInstancesOfferingsPagesWithContext to avoid this.
func (c *EC2) DescribeReservedInstancesOfferingsPages(input *ec2.DescribeReservedInstancesOfferingsInput, fn func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeReservedInstancesOfferingsOutput, lastPage bool) bool {
		c.inc("DescribeReservedInstancesOfferings")
		return fn(page, lastPage)
	}
	return c.DescribeReservedInstancesOfferingsPages(input, wrappedFn)
}

// DescribeReservedInstancesOfferingsPagesWithContext is a passthrough to the underlying DescribeReservedInstancesOfferingsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeReservedInstancesOfferings when applied to the request.
func (c *EC2) DescribeReservedInstancesOfferingsPagesWithContext(ctx aws.Context, input *ec2.DescribeReservedInstancesOfferingsInput, fn func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeReservedInstancesOfferings"))
	return c.DescribeReservedInstancesOfferingsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeRouteTablesRequest is a passthrough to the underlying DescribeRouteTablesRequest.
// It will increment the count of requests made to DescribeRouteTables.
func (c *EC2) DescribeRouteTablesRequest(input *ec2.DescribeRouteTablesInput) (req *request.Request, output *ec2.DescribeRouteTablesOutput) {
	c.inc("DescribeRouteTables")
	return c.svc.DescribeRouteTablesRequest(input)
}

// DescribeRouteTables is a passthrough to the underlying DescribeRouteTables method.
// It will increment the count of requests made to DescribeRouteTables.
func (c *EC2) DescribeRouteTables(input *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error) {
	c.inc("DescribeRouteTables")
	return c.svc.DescribeRouteTables(input)
}

// DescribeRouteTablesWithContext is a passthrough to the underlying DescribeRouteTablesWithContext method.
// It will increment the count of requests made to DescribeRouteTables.
func (c *EC2) DescribeRouteTablesWithContext(ctx aws.Context, input *ec2.DescribeRouteTablesInput, opts ...request.Option) (*ec2.DescribeRouteTablesOutput, error) {
	c.inc("DescribeRouteTables")
	return c.svc.DescribeRouteTablesWithContext(ctx, input, opts...)
}

// DescribeScheduledInstanceAvailabilityRequest is a passthrough to the underlying DescribeScheduledInstanceAvailabilityRequest.
// It will increment the count of requests made to DescribeScheduledInstanceAvailability.
func (c *EC2) DescribeScheduledInstanceAvailabilityRequest(input *ec2.DescribeScheduledInstanceAvailabilityInput) (req *request.Request, output *ec2.DescribeScheduledInstanceAvailabilityOutput) {
	c.inc("DescribeScheduledInstanceAvailability")
	return c.svc.DescribeScheduledInstanceAvailabilityRequest(input)
}

// DescribeScheduledInstanceAvailability is a passthrough to the underlying DescribeScheduledInstanceAvailability method.
// It will increment the count of requests made to DescribeScheduledInstanceAvailability.
func (c *EC2) DescribeScheduledInstanceAvailability(input *ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	c.inc("DescribeScheduledInstanceAvailability")
	return c.svc.DescribeScheduledInstanceAvailability(input)
}

// DescribeScheduledInstanceAvailabilityWithContext is a passthrough to the underlying DescribeScheduledInstanceAvailabilityWithContext method.
// It will increment the count of requests made to DescribeScheduledInstanceAvailability.
func (c *EC2) DescribeScheduledInstanceAvailabilityWithContext(ctx aws.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput, opts ...request.Option) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	c.inc("DescribeScheduledInstanceAvailability")
	return c.svc.DescribeScheduledInstanceAvailabilityWithContext(ctx, input, opts...)
}

// DescribeScheduledInstancesRequest is a passthrough to the underlying DescribeScheduledInstancesRequest.
// It will increment the count of requests made to DescribeScheduledInstances.
func (c *EC2) DescribeScheduledInstancesRequest(input *ec2.DescribeScheduledInstancesInput) (req *request.Request, output *ec2.DescribeScheduledInstancesOutput) {
	c.inc("DescribeScheduledInstances")
	return c.svc.DescribeScheduledInstancesRequest(input)
}

// DescribeScheduledInstances is a passthrough to the underlying DescribeScheduledInstances method.
// It will increment the count of requests made to DescribeScheduledInstances.
func (c *EC2) DescribeScheduledInstances(input *ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error) {
	c.inc("DescribeScheduledInstances")
	return c.svc.DescribeScheduledInstances(input)
}

// DescribeScheduledInstancesWithContext is a passthrough to the underlying DescribeScheduledInstancesWithContext method.
// It will increment the count of requests made to DescribeScheduledInstances.
func (c *EC2) DescribeScheduledInstancesWithContext(ctx aws.Context, input *ec2.DescribeScheduledInstancesInput, opts ...request.Option) (*ec2.DescribeScheduledInstancesOutput, error) {
	c.inc("DescribeScheduledInstances")
	return c.svc.DescribeScheduledInstancesWithContext(ctx, input, opts...)
}

// DescribeSecurityGroupReferencesRequest is a passthrough to the underlying DescribeSecurityGroupReferencesRequest.
// It will increment the count of requests made to DescribeSecurityGroupReferences.
func (c *EC2) DescribeSecurityGroupReferencesRequest(input *ec2.DescribeSecurityGroupReferencesInput) (req *request.Request, output *ec2.DescribeSecurityGroupReferencesOutput) {
	c.inc("DescribeSecurityGroupReferences")
	return c.svc.DescribeSecurityGroupReferencesRequest(input)
}

// DescribeSecurityGroupReferences is a passthrough to the underlying DescribeSecurityGroupReferences method.
// It will increment the count of requests made to DescribeSecurityGroupReferences.
func (c *EC2) DescribeSecurityGroupReferences(input *ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	c.inc("DescribeSecurityGroupReferences")
	return c.svc.DescribeSecurityGroupReferences(input)
}

// DescribeSecurityGroupReferencesWithContext is a passthrough to the underlying DescribeSecurityGroupReferencesWithContext method.
// It will increment the count of requests made to DescribeSecurityGroupReferences.
func (c *EC2) DescribeSecurityGroupReferencesWithContext(ctx aws.Context, input *ec2.DescribeSecurityGroupReferencesInput, opts ...request.Option) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	c.inc("DescribeSecurityGroupReferences")
	return c.svc.DescribeSecurityGroupReferencesWithContext(ctx, input, opts...)
}

// DescribeSecurityGroupsRequest is a passthrough to the underlying DescribeSecurityGroupsRequest.
// It will increment the count of requests made to DescribeSecurityGroups.
func (c *EC2) DescribeSecurityGroupsRequest(input *ec2.DescribeSecurityGroupsInput) (req *request.Request, output *ec2.DescribeSecurityGroupsOutput) {
	c.inc("DescribeSecurityGroups")
	return c.svc.DescribeSecurityGroupsRequest(input)
}

// DescribeSecurityGroups is a passthrough to the underlying DescribeSecurityGroups method.
// It will increment the count of requests made to DescribeSecurityGroups.
func (c *EC2) DescribeSecurityGroups(input *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error) {
	c.inc("DescribeSecurityGroups")
	return c.svc.DescribeSecurityGroups(input)
}

// DescribeSecurityGroupsWithContext is a passthrough to the underlying DescribeSecurityGroupsWithContext method.
// It will increment the count of requests made to DescribeSecurityGroups.
func (c *EC2) DescribeSecurityGroupsWithContext(ctx aws.Context, input *ec2.DescribeSecurityGroupsInput, opts ...request.Option) (*ec2.DescribeSecurityGroupsOutput, error) {
	c.inc("DescribeSecurityGroups")
	return c.svc.DescribeSecurityGroupsWithContext(ctx, input, opts...)
}

// DescribeSnapshotAttributeRequest is a passthrough to the underlying DescribeSnapshotAttributeRequest.
// It will increment the count of requests made to DescribeSnapshotAttribute.
func (c *EC2) DescribeSnapshotAttributeRequest(input *ec2.DescribeSnapshotAttributeInput) (req *request.Request, output *ec2.DescribeSnapshotAttributeOutput) {
	c.inc("DescribeSnapshotAttribute")
	return c.svc.DescribeSnapshotAttributeRequest(input)
}

// DescribeSnapshotAttribute is a passthrough to the underlying DescribeSnapshotAttribute method.
// It will increment the count of requests made to DescribeSnapshotAttribute.
func (c *EC2) DescribeSnapshotAttribute(input *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error) {
	c.inc("DescribeSnapshotAttribute")
	return c.svc.DescribeSnapshotAttribute(input)
}

// DescribeSnapshotAttributeWithContext is a passthrough to the underlying DescribeSnapshotAttributeWithContext method.
// It will increment the count of requests made to DescribeSnapshotAttribute.
func (c *EC2) DescribeSnapshotAttributeWithContext(ctx aws.Context, input *ec2.DescribeSnapshotAttributeInput, opts ...request.Option) (*ec2.DescribeSnapshotAttributeOutput, error) {
	c.inc("DescribeSnapshotAttribute")
	return c.svc.DescribeSnapshotAttributeWithContext(ctx, input, opts...)
}

// DescribeSnapshotsRequest is a passthrough to the underlying DescribeSnapshotsRequest.
// It will increment the count of requests made to DescribeSnapshots.
func (c *EC2) DescribeSnapshotsRequest(input *ec2.DescribeSnapshotsInput) (req *request.Request, output *ec2.DescribeSnapshotsOutput) {
	c.inc("DescribeSnapshots")
	return c.svc.DescribeSnapshotsRequest(input)
}

// DescribeSnapshots is a passthrough to the underlying DescribeSnapshots method.
// It will increment the count of requests made to DescribeSnapshots.
func (c *EC2) DescribeSnapshots(input *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error) {
	c.inc("DescribeSnapshots")
	return c.svc.DescribeSnapshots(input)
}

// DescribeSnapshotsWithContext is a passthrough to the underlying DescribeSnapshotsWithContext method.
// It will increment the count of requests made to DescribeSnapshots.
func (c *EC2) DescribeSnapshotsWithContext(ctx aws.Context, input *ec2.DescribeSnapshotsInput, opts ...request.Option) (*ec2.DescribeSnapshotsOutput, error) {
	c.inc("DescribeSnapshots")
	return c.svc.DescribeSnapshotsWithContext(ctx, input, opts...)
}

// DescribeSnapshotsPages is a passthrough to the underlying DescribeSnapshotsPages method.
// It will increment the count of requests made to DescribeSnapshots on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeSnapshotsPagesWithContext to avoid this.
func (c *EC2) DescribeSnapshotsPages(input *ec2.DescribeSnapshotsInput, fn func(*ec2.DescribeSnapshotsOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeSnapshotsOutput, lastPage bool) bool {
		c.inc("DescribeSnapshots")
		return fn(page, lastPage)
	}
	return c.DescribeSnapshotsPages(input, wrappedFn)
}

// DescribeSnapshotsPagesWithContext is a passthrough to the underlying DescribeSnapshotsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeSnapshots when applied to the request.
func (c *EC2) DescribeSnapshotsPagesWithContext(ctx aws.Context, input *ec2.DescribeSnapshotsInput, fn func(*ec2.DescribeSnapshotsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeSnapshots"))
	return c.DescribeSnapshotsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeSpotDatafeedSubscriptionRequest is a passthrough to the underlying DescribeSpotDatafeedSubscriptionRequest.
// It will increment the count of requests made to DescribeSpotDatafeedSubscription.
func (c *EC2) DescribeSpotDatafeedSubscriptionRequest(input *ec2.DescribeSpotDatafeedSubscriptionInput) (req *request.Request, output *ec2.DescribeSpotDatafeedSubscriptionOutput) {
	c.inc("DescribeSpotDatafeedSubscription")
	return c.svc.DescribeSpotDatafeedSubscriptionRequest(input)
}

// DescribeSpotDatafeedSubscription is a passthrough to the underlying DescribeSpotDatafeedSubscription method.
// It will increment the count of requests made to DescribeSpotDatafeedSubscription.
func (c *EC2) DescribeSpotDatafeedSubscription(input *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	c.inc("DescribeSpotDatafeedSubscription")
	return c.svc.DescribeSpotDatafeedSubscription(input)
}

// DescribeSpotDatafeedSubscriptionWithContext is a passthrough to the underlying DescribeSpotDatafeedSubscriptionWithContext method.
// It will increment the count of requests made to DescribeSpotDatafeedSubscription.
func (c *EC2) DescribeSpotDatafeedSubscriptionWithContext(ctx aws.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput, opts ...request.Option) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	c.inc("DescribeSpotDatafeedSubscription")
	return c.svc.DescribeSpotDatafeedSubscriptionWithContext(ctx, input, opts...)
}

// DescribeSpotFleetInstancesRequest is a passthrough to the underlying DescribeSpotFleetInstancesRequest.
// It will increment the count of requests made to DescribeSpotFleetInstances.
func (c *EC2) DescribeSpotFleetInstancesRequest(input *ec2.DescribeSpotFleetInstancesInput) (req *request.Request, output *ec2.DescribeSpotFleetInstancesOutput) {
	c.inc("DescribeSpotFleetInstances")
	return c.svc.DescribeSpotFleetInstancesRequest(input)
}

// DescribeSpotFleetInstances is a passthrough to the underlying DescribeSpotFleetInstances method.
// It will increment the count of requests made to DescribeSpotFleetInstances.
func (c *EC2) DescribeSpotFleetInstances(input *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	c.inc("DescribeSpotFleetInstances")
	return c.svc.DescribeSpotFleetInstances(input)
}

// DescribeSpotFleetInstancesWithContext is a passthrough to the underlying DescribeSpotFleetInstancesWithContext method.
// It will increment the count of requests made to DescribeSpotFleetInstances.
func (c *EC2) DescribeSpotFleetInstancesWithContext(ctx aws.Context, input *ec2.DescribeSpotFleetInstancesInput, opts ...request.Option) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	c.inc("DescribeSpotFleetInstances")
	return c.svc.DescribeSpotFleetInstancesWithContext(ctx, input, opts...)
}

// DescribeSpotFleetRequestHistoryRequest is a passthrough to the underlying DescribeSpotFleetRequestHistoryRequest.
// It will increment the count of requests made to DescribeSpotFleetRequestHistory.
func (c *EC2) DescribeSpotFleetRequestHistoryRequest(input *ec2.DescribeSpotFleetRequestHistoryInput) (req *request.Request, output *ec2.DescribeSpotFleetRequestHistoryOutput) {
	c.inc("DescribeSpotFleetRequestHistory")
	return c.svc.DescribeSpotFleetRequestHistoryRequest(input)
}

// DescribeSpotFleetRequestHistory is a passthrough to the underlying DescribeSpotFleetRequestHistory method.
// It will increment the count of requests made to DescribeSpotFleetRequestHistory.
func (c *EC2) DescribeSpotFleetRequestHistory(input *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	c.inc("DescribeSpotFleetRequestHistory")
	return c.svc.DescribeSpotFleetRequestHistory(input)
}

// DescribeSpotFleetRequestHistoryWithContext is a passthrough to the underlying DescribeSpotFleetRequestHistoryWithContext method.
// It will increment the count of requests made to DescribeSpotFleetRequestHistory.
func (c *EC2) DescribeSpotFleetRequestHistoryWithContext(ctx aws.Context, input *ec2.DescribeSpotFleetRequestHistoryInput, opts ...request.Option) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	c.inc("DescribeSpotFleetRequestHistory")
	return c.svc.DescribeSpotFleetRequestHistoryWithContext(ctx, input, opts...)
}

// DescribeSpotFleetRequestsRequest is a passthrough to the underlying DescribeSpotFleetRequestsRequest.
// It will increment the count of requests made to DescribeSpotFleetRequests.
func (c *EC2) DescribeSpotFleetRequestsRequest(input *ec2.DescribeSpotFleetRequestsInput) (req *request.Request, output *ec2.DescribeSpotFleetRequestsOutput) {
	c.inc("DescribeSpotFleetRequests")
	return c.svc.DescribeSpotFleetRequestsRequest(input)
}

// DescribeSpotFleetRequests is a passthrough to the underlying DescribeSpotFleetRequests method.
// It will increment the count of requests made to DescribeSpotFleetRequests.
func (c *EC2) DescribeSpotFleetRequests(input *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	c.inc("DescribeSpotFleetRequests")
	return c.svc.DescribeSpotFleetRequests(input)
}

// DescribeSpotFleetRequestsWithContext is a passthrough to the underlying DescribeSpotFleetRequestsWithContext method.
// It will increment the count of requests made to DescribeSpotFleetRequests.
func (c *EC2) DescribeSpotFleetRequestsWithContext(ctx aws.Context, input *ec2.DescribeSpotFleetRequestsInput, opts ...request.Option) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	c.inc("DescribeSpotFleetRequests")
	return c.svc.DescribeSpotFleetRequestsWithContext(ctx, input, opts...)
}

// DescribeSpotFleetRequestsPages is a passthrough to the underlying DescribeSpotFleetRequestsPages method.
// It will increment the count of requests made to DescribeSpotFleetRequests on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeSpotFleetRequestsPagesWithContext to avoid this.
func (c *EC2) DescribeSpotFleetRequestsPages(input *ec2.DescribeSpotFleetRequestsInput, fn func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeSpotFleetRequestsOutput, lastPage bool) bool {
		c.inc("DescribeSpotFleetRequests")
		return fn(page, lastPage)
	}
	return c.DescribeSpotFleetRequestsPages(input, wrappedFn)
}

// DescribeSpotFleetRequestsPagesWithContext is a passthrough to the underlying DescribeSpotFleetRequestsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeSpotFleetRequests when applied to the request.
func (c *EC2) DescribeSpotFleetRequestsPagesWithContext(ctx aws.Context, input *ec2.DescribeSpotFleetRequestsInput, fn func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeSpotFleetRequests"))
	return c.DescribeSpotFleetRequestsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeSpotInstanceRequestsRequest is a passthrough to the underlying DescribeSpotInstanceRequestsRequest.
// It will increment the count of requests made to DescribeSpotInstanceRequests.
func (c *EC2) DescribeSpotInstanceRequestsRequest(input *ec2.DescribeSpotInstanceRequestsInput) (req *request.Request, output *ec2.DescribeSpotInstanceRequestsOutput) {
	c.inc("DescribeSpotInstanceRequests")
	return c.svc.DescribeSpotInstanceRequestsRequest(input)
}

// DescribeSpotInstanceRequests is a passthrough to the underlying DescribeSpotInstanceRequests method.
// It will increment the count of requests made to DescribeSpotInstanceRequests.
func (c *EC2) DescribeSpotInstanceRequests(input *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	c.inc("DescribeSpotInstanceRequests")
	return c.svc.DescribeSpotInstanceRequests(input)
}

// DescribeSpotInstanceRequestsWithContext is a passthrough to the underlying DescribeSpotInstanceRequestsWithContext method.
// It will increment the count of requests made to DescribeSpotInstanceRequests.
func (c *EC2) DescribeSpotInstanceRequestsWithContext(ctx aws.Context, input *ec2.DescribeSpotInstanceRequestsInput, opts ...request.Option) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	c.inc("DescribeSpotInstanceRequests")
	return c.svc.DescribeSpotInstanceRequestsWithContext(ctx, input, opts...)
}

// DescribeSpotPriceHistoryRequest is a passthrough to the underlying DescribeSpotPriceHistoryRequest.
// It will increment the count of requests made to DescribeSpotPriceHistory.
func (c *EC2) DescribeSpotPriceHistoryRequest(input *ec2.DescribeSpotPriceHistoryInput) (req *request.Request, output *ec2.DescribeSpotPriceHistoryOutput) {
	c.inc("DescribeSpotPriceHistory")
	return c.svc.DescribeSpotPriceHistoryRequest(input)
}

// DescribeSpotPriceHistory is a passthrough to the underlying DescribeSpotPriceHistory method.
// It will increment the count of requests made to DescribeSpotPriceHistory.
func (c *EC2) DescribeSpotPriceHistory(input *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	c.inc("DescribeSpotPriceHistory")
	return c.svc.DescribeSpotPriceHistory(input)
}

// DescribeSpotPriceHistoryWithContext is a passthrough to the underlying DescribeSpotPriceHistoryWithContext method.
// It will increment the count of requests made to DescribeSpotPriceHistory.
func (c *EC2) DescribeSpotPriceHistoryWithContext(ctx aws.Context, input *ec2.DescribeSpotPriceHistoryInput, opts ...request.Option) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	c.inc("DescribeSpotPriceHistory")
	return c.svc.DescribeSpotPriceHistoryWithContext(ctx, input, opts...)
}

// DescribeSpotPriceHistoryPages is a passthrough to the underlying DescribeSpotPriceHistoryPages method.
// It will increment the count of requests made to DescribeSpotPriceHistory on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeSpotPriceHistoryPagesWithContext to avoid this.
func (c *EC2) DescribeSpotPriceHistoryPages(input *ec2.DescribeSpotPriceHistoryInput, fn func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeSpotPriceHistoryOutput, lastPage bool) bool {
		c.inc("DescribeSpotPriceHistory")
		return fn(page, lastPage)
	}
	return c.DescribeSpotPriceHistoryPages(input, wrappedFn)
}

// DescribeSpotPriceHistoryPagesWithContext is a passthrough to the underlying DescribeSpotPriceHistoryPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeSpotPriceHistory when applied to the request.
func (c *EC2) DescribeSpotPriceHistoryPagesWithContext(ctx aws.Context, input *ec2.DescribeSpotPriceHistoryInput, fn func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeSpotPriceHistory"))
	return c.DescribeSpotPriceHistoryPagesWithContext(ctx, input, fn, opts...)
}

// DescribeStaleSecurityGroupsRequest is a passthrough to the underlying DescribeStaleSecurityGroupsRequest.
// It will increment the count of requests made to DescribeStaleSecurityGroups.
func (c *EC2) DescribeStaleSecurityGroupsRequest(input *ec2.DescribeStaleSecurityGroupsInput) (req *request.Request, output *ec2.DescribeStaleSecurityGroupsOutput) {
	c.inc("DescribeStaleSecurityGroups")
	return c.svc.DescribeStaleSecurityGroupsRequest(input)
}

// DescribeStaleSecurityGroups is a passthrough to the underlying DescribeStaleSecurityGroups method.
// It will increment the count of requests made to DescribeStaleSecurityGroups.
func (c *EC2) DescribeStaleSecurityGroups(input *ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	c.inc("DescribeStaleSecurityGroups")
	return c.svc.DescribeStaleSecurityGroups(input)
}

// DescribeStaleSecurityGroupsWithContext is a passthrough to the underlying DescribeStaleSecurityGroupsWithContext method.
// It will increment the count of requests made to DescribeStaleSecurityGroups.
func (c *EC2) DescribeStaleSecurityGroupsWithContext(ctx aws.Context, input *ec2.DescribeStaleSecurityGroupsInput, opts ...request.Option) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	c.inc("DescribeStaleSecurityGroups")
	return c.svc.DescribeStaleSecurityGroupsWithContext(ctx, input, opts...)
}

// DescribeSubnetsRequest is a passthrough to the underlying DescribeSubnetsRequest.
// It will increment the count of requests made to DescribeSubnets.
func (c *EC2) DescribeSubnetsRequest(input *ec2.DescribeSubnetsInput) (req *request.Request, output *ec2.DescribeSubnetsOutput) {
	c.inc("DescribeSubnets")
	return c.svc.DescribeSubnetsRequest(input)
}

// DescribeSubnets is a passthrough to the underlying DescribeSubnets method.
// It will increment the count of requests made to DescribeSubnets.
func (c *EC2) DescribeSubnets(input *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error) {
	c.inc("DescribeSubnets")
	return c.svc.DescribeSubnets(input)
}

// DescribeSubnetsWithContext is a passthrough to the underlying DescribeSubnetsWithContext method.
// It will increment the count of requests made to DescribeSubnets.
func (c *EC2) DescribeSubnetsWithContext(ctx aws.Context, input *ec2.DescribeSubnetsInput, opts ...request.Option) (*ec2.DescribeSubnetsOutput, error) {
	c.inc("DescribeSubnets")
	return c.svc.DescribeSubnetsWithContext(ctx, input, opts...)
}

// DescribeTagsRequest is a passthrough to the underlying DescribeTagsRequest.
// It will increment the count of requests made to DescribeTags.
func (c *EC2) DescribeTagsRequest(input *ec2.DescribeTagsInput) (req *request.Request, output *ec2.DescribeTagsOutput) {
	c.inc("DescribeTags")
	return c.svc.DescribeTagsRequest(input)
}

// DescribeTags is a passthrough to the underlying DescribeTags method.
// It will increment the count of requests made to DescribeTags.
func (c *EC2) DescribeTags(input *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error) {
	c.inc("DescribeTags")
	return c.svc.DescribeTags(input)
}

// DescribeTagsWithContext is a passthrough to the underlying DescribeTagsWithContext method.
// It will increment the count of requests made to DescribeTags.
func (c *EC2) DescribeTagsWithContext(ctx aws.Context, input *ec2.DescribeTagsInput, opts ...request.Option) (*ec2.DescribeTagsOutput, error) {
	c.inc("DescribeTags")
	return c.svc.DescribeTagsWithContext(ctx, input, opts...)
}

// DescribeTagsPages is a passthrough to the underlying DescribeTagsPages method.
// It will increment the count of requests made to DescribeTags on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeTagsPagesWithContext to avoid this.
func (c *EC2) DescribeTagsPages(input *ec2.DescribeTagsInput, fn func(*ec2.DescribeTagsOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeTagsOutput, lastPage bool) bool {
		c.inc("DescribeTags")
		return fn(page, lastPage)
	}
	return c.DescribeTagsPages(input, wrappedFn)
}

// DescribeTagsPagesWithContext is a passthrough to the underlying DescribeTagsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeTags when applied to the request.
func (c *EC2) DescribeTagsPagesWithContext(ctx aws.Context, input *ec2.DescribeTagsInput, fn func(*ec2.DescribeTagsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeTags"))
	return c.DescribeTagsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeVolumeAttributeRequest is a passthrough to the underlying DescribeVolumeAttributeRequest.
// It will increment the count of requests made to DescribeVolumeAttribute.
func (c *EC2) DescribeVolumeAttributeRequest(input *ec2.DescribeVolumeAttributeInput) (req *request.Request, output *ec2.DescribeVolumeAttributeOutput) {
	c.inc("DescribeVolumeAttribute")
	return c.svc.DescribeVolumeAttributeRequest(input)
}

// DescribeVolumeAttribute is a passthrough to the underlying DescribeVolumeAttribute method.
// It will increment the count of requests made to DescribeVolumeAttribute.
func (c *EC2) DescribeVolumeAttribute(input *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error) {
	c.inc("DescribeVolumeAttribute")
	return c.svc.DescribeVolumeAttribute(input)
}

// DescribeVolumeAttributeWithContext is a passthrough to the underlying DescribeVolumeAttributeWithContext method.
// It will increment the count of requests made to DescribeVolumeAttribute.
func (c *EC2) DescribeVolumeAttributeWithContext(ctx aws.Context, input *ec2.DescribeVolumeAttributeInput, opts ...request.Option) (*ec2.DescribeVolumeAttributeOutput, error) {
	c.inc("DescribeVolumeAttribute")
	return c.svc.DescribeVolumeAttributeWithContext(ctx, input, opts...)
}

// DescribeVolumeStatusRequest is a passthrough to the underlying DescribeVolumeStatusRequest.
// It will increment the count of requests made to DescribeVolumeStatus.
func (c *EC2) DescribeVolumeStatusRequest(input *ec2.DescribeVolumeStatusInput) (req *request.Request, output *ec2.DescribeVolumeStatusOutput) {
	c.inc("DescribeVolumeStatus")
	return c.svc.DescribeVolumeStatusRequest(input)
}

// DescribeVolumeStatus is a passthrough to the underlying DescribeVolumeStatus method.
// It will increment the count of requests made to DescribeVolumeStatus.
func (c *EC2) DescribeVolumeStatus(input *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error) {
	c.inc("DescribeVolumeStatus")
	return c.svc.DescribeVolumeStatus(input)
}

// DescribeVolumeStatusWithContext is a passthrough to the underlying DescribeVolumeStatusWithContext method.
// It will increment the count of requests made to DescribeVolumeStatus.
func (c *EC2) DescribeVolumeStatusWithContext(ctx aws.Context, input *ec2.DescribeVolumeStatusInput, opts ...request.Option) (*ec2.DescribeVolumeStatusOutput, error) {
	c.inc("DescribeVolumeStatus")
	return c.svc.DescribeVolumeStatusWithContext(ctx, input, opts...)
}

// DescribeVolumeStatusPages is a passthrough to the underlying DescribeVolumeStatusPages method.
// It will increment the count of requests made to DescribeVolumeStatus on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeVolumeStatusPagesWithContext to avoid this.
func (c *EC2) DescribeVolumeStatusPages(input *ec2.DescribeVolumeStatusInput, fn func(*ec2.DescribeVolumeStatusOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeVolumeStatusOutput, lastPage bool) bool {
		c.inc("DescribeVolumeStatus")
		return fn(page, lastPage)
	}
	return c.DescribeVolumeStatusPages(input, wrappedFn)
}

// DescribeVolumeStatusPagesWithContext is a passthrough to the underlying DescribeVolumeStatusPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeVolumeStatus when applied to the request.
func (c *EC2) DescribeVolumeStatusPagesWithContext(ctx aws.Context, input *ec2.DescribeVolumeStatusInput, fn func(*ec2.DescribeVolumeStatusOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeVolumeStatus"))
	return c.DescribeVolumeStatusPagesWithContext(ctx, input, fn, opts...)
}

// DescribeVolumesRequest is a passthrough to the underlying DescribeVolumesRequest.
// It will increment the count of requests made to DescribeVolumes.
func (c *EC2) DescribeVolumesRequest(input *ec2.DescribeVolumesInput) (req *request.Request, output *ec2.DescribeVolumesOutput) {
	c.inc("DescribeVolumes")
	return c.svc.DescribeVolumesRequest(input)
}

// DescribeVolumes is a passthrough to the underlying DescribeVolumes method.
// It will increment the count of requests made to DescribeVolumes.
func (c *EC2) DescribeVolumes(input *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error) {
	c.inc("DescribeVolumes")
	return c.svc.DescribeVolumes(input)
}

// DescribeVolumesWithContext is a passthrough to the underlying DescribeVolumesWithContext method.
// It will increment the count of requests made to DescribeVolumes.
func (c *EC2) DescribeVolumesWithContext(ctx aws.Context, input *ec2.DescribeVolumesInput, opts ...request.Option) (*ec2.DescribeVolumesOutput, error) {
	c.inc("DescribeVolumes")
	return c.svc.DescribeVolumesWithContext(ctx, input, opts...)
}

// DescribeVolumesPages is a passthrough to the underlying DescribeVolumesPages method.
// It will increment the count of requests made to DescribeVolumes on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeVolumesPagesWithContext to avoid this.
func (c *EC2) DescribeVolumesPages(input *ec2.DescribeVolumesInput, fn func(*ec2.DescribeVolumesOutput, bool) bool) error {
	wrappedFn := func(page *ec2.DescribeVolumesOutput, lastPage bool) bool {
		c.inc("DescribeVolumes")
		return fn(page, lastPage)
	}
	return c.DescribeVolumesPages(input, wrappedFn)
}

// DescribeVolumesPagesWithContext is a passthrough to the underlying DescribeVolumesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeVolumes when applied to the request.
func (c *EC2) DescribeVolumesPagesWithContext(ctx aws.Context, input *ec2.DescribeVolumesInput, fn func(*ec2.DescribeVolumesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeVolumes"))
	return c.DescribeVolumesPagesWithContext(ctx, input, fn, opts...)
}

// DescribeVolumesModificationsRequest is a passthrough to the underlying DescribeVolumesModificationsRequest.
// It will increment the count of requests made to DescribeVolumesModifications.
func (c *EC2) DescribeVolumesModificationsRequest(input *ec2.DescribeVolumesModificationsInput) (req *request.Request, output *ec2.DescribeVolumesModificationsOutput) {
	c.inc("DescribeVolumesModifications")
	return c.svc.DescribeVolumesModificationsRequest(input)
}

// DescribeVolumesModifications is a passthrough to the underlying DescribeVolumesModifications method.
// It will increment the count of requests made to DescribeVolumesModifications.
func (c *EC2) DescribeVolumesModifications(input *ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error) {
	c.inc("DescribeVolumesModifications")
	return c.svc.DescribeVolumesModifications(input)
}

// DescribeVolumesModificationsWithContext is a passthrough to the underlying DescribeVolumesModificationsWithContext method.
// It will increment the count of requests made to DescribeVolumesModifications.
func (c *EC2) DescribeVolumesModificationsWithContext(ctx aws.Context, input *ec2.DescribeVolumesModificationsInput, opts ...request.Option) (*ec2.DescribeVolumesModificationsOutput, error) {
	c.inc("DescribeVolumesModifications")
	return c.svc.DescribeVolumesModificationsWithContext(ctx, input, opts...)
}

// DescribeVpcAttributeRequest is a passthrough to the underlying DescribeVpcAttributeRequest.
// It will increment the count of requests made to DescribeVpcAttribute.
func (c *EC2) DescribeVpcAttributeRequest(input *ec2.DescribeVpcAttributeInput) (req *request.Request, output *ec2.DescribeVpcAttributeOutput) {
	c.inc("DescribeVpcAttribute")
	return c.svc.DescribeVpcAttributeRequest(input)
}

// DescribeVpcAttribute is a passthrough to the underlying DescribeVpcAttribute method.
// It will increment the count of requests made to DescribeVpcAttribute.
func (c *EC2) DescribeVpcAttribute(input *ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error) {
	c.inc("DescribeVpcAttribute")
	return c.svc.DescribeVpcAttribute(input)
}

// DescribeVpcAttributeWithContext is a passthrough to the underlying DescribeVpcAttributeWithContext method.
// It will increment the count of requests made to DescribeVpcAttribute.
func (c *EC2) DescribeVpcAttributeWithContext(ctx aws.Context, input *ec2.DescribeVpcAttributeInput, opts ...request.Option) (*ec2.DescribeVpcAttributeOutput, error) {
	c.inc("DescribeVpcAttribute")
	return c.svc.DescribeVpcAttributeWithContext(ctx, input, opts...)
}

// DescribeVpcClassicLinkRequest is a passthrough to the underlying DescribeVpcClassicLinkRequest.
// It will increment the count of requests made to DescribeVpcClassicLink.
func (c *EC2) DescribeVpcClassicLinkRequest(input *ec2.DescribeVpcClassicLinkInput) (req *request.Request, output *ec2.DescribeVpcClassicLinkOutput) {
	c.inc("DescribeVpcClassicLink")
	return c.svc.DescribeVpcClassicLinkRequest(input)
}

// DescribeVpcClassicLink is a passthrough to the underlying DescribeVpcClassicLink method.
// It will increment the count of requests made to DescribeVpcClassicLink.
func (c *EC2) DescribeVpcClassicLink(input *ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error) {
	c.inc("DescribeVpcClassicLink")
	return c.svc.DescribeVpcClassicLink(input)
}

// DescribeVpcClassicLinkWithContext is a passthrough to the underlying DescribeVpcClassicLinkWithContext method.
// It will increment the count of requests made to DescribeVpcClassicLink.
func (c *EC2) DescribeVpcClassicLinkWithContext(ctx aws.Context, input *ec2.DescribeVpcClassicLinkInput, opts ...request.Option) (*ec2.DescribeVpcClassicLinkOutput, error) {
	c.inc("DescribeVpcClassicLink")
	return c.svc.DescribeVpcClassicLinkWithContext(ctx, input, opts...)
}

// DescribeVpcClassicLinkDnsSupportRequest is a passthrough to the underlying DescribeVpcClassicLinkDnsSupportRequest.
// It will increment the count of requests made to DescribeVpcClassicLinkDnsSupport.
func (c *EC2) DescribeVpcClassicLinkDnsSupportRequest(input *ec2.DescribeVpcClassicLinkDnsSupportInput) (req *request.Request, output *ec2.DescribeVpcClassicLinkDnsSupportOutput) {
	c.inc("DescribeVpcClassicLinkDnsSupport")
	return c.svc.DescribeVpcClassicLinkDnsSupportRequest(input)
}

// DescribeVpcClassicLinkDnsSupport is a passthrough to the underlying DescribeVpcClassicLinkDnsSupport method.
// It will increment the count of requests made to DescribeVpcClassicLinkDnsSupport.
func (c *EC2) DescribeVpcClassicLinkDnsSupport(input *ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	c.inc("DescribeVpcClassicLinkDnsSupport")
	return c.svc.DescribeVpcClassicLinkDnsSupport(input)
}

// DescribeVpcClassicLinkDnsSupportWithContext is a passthrough to the underlying DescribeVpcClassicLinkDnsSupportWithContext method.
// It will increment the count of requests made to DescribeVpcClassicLinkDnsSupport.
func (c *EC2) DescribeVpcClassicLinkDnsSupportWithContext(ctx aws.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput, opts ...request.Option) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	c.inc("DescribeVpcClassicLinkDnsSupport")
	return c.svc.DescribeVpcClassicLinkDnsSupportWithContext(ctx, input, opts...)
}

// DescribeVpcEndpointServicesRequest is a passthrough to the underlying DescribeVpcEndpointServicesRequest.
// It will increment the count of requests made to DescribeVpcEndpointServices.
func (c *EC2) DescribeVpcEndpointServicesRequest(input *ec2.DescribeVpcEndpointServicesInput) (req *request.Request, output *ec2.DescribeVpcEndpointServicesOutput) {
	c.inc("DescribeVpcEndpointServices")
	return c.svc.DescribeVpcEndpointServicesRequest(input)
}

// DescribeVpcEndpointServices is a passthrough to the underlying DescribeVpcEndpointServices method.
// It will increment the count of requests made to DescribeVpcEndpointServices.
func (c *EC2) DescribeVpcEndpointServices(input *ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	c.inc("DescribeVpcEndpointServices")
	return c.svc.DescribeVpcEndpointServices(input)
}

// DescribeVpcEndpointServicesWithContext is a passthrough to the underlying DescribeVpcEndpointServicesWithContext method.
// It will increment the count of requests made to DescribeVpcEndpointServices.
func (c *EC2) DescribeVpcEndpointServicesWithContext(ctx aws.Context, input *ec2.DescribeVpcEndpointServicesInput, opts ...request.Option) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	c.inc("DescribeVpcEndpointServices")
	return c.svc.DescribeVpcEndpointServicesWithContext(ctx, input, opts...)
}

// DescribeVpcEndpointsRequest is a passthrough to the underlying DescribeVpcEndpointsRequest.
// It will increment the count of requests made to DescribeVpcEndpoints.
func (c *EC2) DescribeVpcEndpointsRequest(input *ec2.DescribeVpcEndpointsInput) (req *request.Request, output *ec2.DescribeVpcEndpointsOutput) {
	c.inc("DescribeVpcEndpoints")
	return c.svc.DescribeVpcEndpointsRequest(input)
}

// DescribeVpcEndpoints is a passthrough to the underlying DescribeVpcEndpoints method.
// It will increment the count of requests made to DescribeVpcEndpoints.
func (c *EC2) DescribeVpcEndpoints(input *ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error) {
	c.inc("DescribeVpcEndpoints")
	return c.svc.DescribeVpcEndpoints(input)
}

// DescribeVpcEndpointsWithContext is a passthrough to the underlying DescribeVpcEndpointsWithContext method.
// It will increment the count of requests made to DescribeVpcEndpoints.
func (c *EC2) DescribeVpcEndpointsWithContext(ctx aws.Context, input *ec2.DescribeVpcEndpointsInput, opts ...request.Option) (*ec2.DescribeVpcEndpointsOutput, error) {
	c.inc("DescribeVpcEndpoints")
	return c.svc.DescribeVpcEndpointsWithContext(ctx, input, opts...)
}

// DescribeVpcPeeringConnectionsRequest is a passthrough to the underlying DescribeVpcPeeringConnectionsRequest.
// It will increment the count of requests made to DescribeVpcPeeringConnections.
func (c *EC2) DescribeVpcPeeringConnectionsRequest(input *ec2.DescribeVpcPeeringConnectionsInput) (req *request.Request, output *ec2.DescribeVpcPeeringConnectionsOutput) {
	c.inc("DescribeVpcPeeringConnections")
	return c.svc.DescribeVpcPeeringConnectionsRequest(input)
}

// DescribeVpcPeeringConnections is a passthrough to the underlying DescribeVpcPeeringConnections method.
// It will increment the count of requests made to DescribeVpcPeeringConnections.
func (c *EC2) DescribeVpcPeeringConnections(input *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	c.inc("DescribeVpcPeeringConnections")
	return c.svc.DescribeVpcPeeringConnections(input)
}

// DescribeVpcPeeringConnectionsWithContext is a passthrough to the underlying DescribeVpcPeeringConnectionsWithContext method.
// It will increment the count of requests made to DescribeVpcPeeringConnections.
func (c *EC2) DescribeVpcPeeringConnectionsWithContext(ctx aws.Context, input *ec2.DescribeVpcPeeringConnectionsInput, opts ...request.Option) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	c.inc("DescribeVpcPeeringConnections")
	return c.svc.DescribeVpcPeeringConnectionsWithContext(ctx, input, opts...)
}

// DescribeVpcsRequest is a passthrough to the underlying DescribeVpcsRequest.
// It will increment the count of requests made to DescribeVpcs.
func (c *EC2) DescribeVpcsRequest(input *ec2.DescribeVpcsInput) (req *request.Request, output *ec2.DescribeVpcsOutput) {
	c.inc("DescribeVpcs")
	return c.svc.DescribeVpcsRequest(input)
}

// DescribeVpcs is a passthrough to the underlying DescribeVpcs method.
// It will increment the count of requests made to DescribeVpcs.
func (c *EC2) DescribeVpcs(input *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error) {
	c.inc("DescribeVpcs")
	return c.svc.DescribeVpcs(input)
}

// DescribeVpcsWithContext is a passthrough to the underlying DescribeVpcsWithContext method.
// It will increment the count of requests made to DescribeVpcs.
func (c *EC2) DescribeVpcsWithContext(ctx aws.Context, input *ec2.DescribeVpcsInput, opts ...request.Option) (*ec2.DescribeVpcsOutput, error) {
	c.inc("DescribeVpcs")
	return c.svc.DescribeVpcsWithContext(ctx, input, opts...)
}

// DescribeVpnConnectionsRequest is a passthrough to the underlying DescribeVpnConnectionsRequest.
// It will increment the count of requests made to DescribeVpnConnections.
func (c *EC2) DescribeVpnConnectionsRequest(input *ec2.DescribeVpnConnectionsInput) (req *request.Request, output *ec2.DescribeVpnConnectionsOutput) {
	c.inc("DescribeVpnConnections")
	return c.svc.DescribeVpnConnectionsRequest(input)
}

// DescribeVpnConnections is a passthrough to the underlying DescribeVpnConnections method.
// It will increment the count of requests made to DescribeVpnConnections.
func (c *EC2) DescribeVpnConnections(input *ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error) {
	c.inc("DescribeVpnConnections")
	return c.svc.DescribeVpnConnections(input)
}

// DescribeVpnConnectionsWithContext is a passthrough to the underlying DescribeVpnConnectionsWithContext method.
// It will increment the count of requests made to DescribeVpnConnections.
func (c *EC2) DescribeVpnConnectionsWithContext(ctx aws.Context, input *ec2.DescribeVpnConnectionsInput, opts ...request.Option) (*ec2.DescribeVpnConnectionsOutput, error) {
	c.inc("DescribeVpnConnections")
	return c.svc.DescribeVpnConnectionsWithContext(ctx, input, opts...)
}

// DescribeVpnGatewaysRequest is a passthrough to the underlying DescribeVpnGatewaysRequest.
// It will increment the count of requests made to DescribeVpnGateways.
func (c *EC2) DescribeVpnGatewaysRequest(input *ec2.DescribeVpnGatewaysInput) (req *request.Request, output *ec2.DescribeVpnGatewaysOutput) {
	c.inc("DescribeVpnGateways")
	return c.svc.DescribeVpnGatewaysRequest(input)
}

// DescribeVpnGateways is a passthrough to the underlying DescribeVpnGateways method.
// It will increment the count of requests made to DescribeVpnGateways.
func (c *EC2) DescribeVpnGateways(input *ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error) {
	c.inc("DescribeVpnGateways")
	return c.svc.DescribeVpnGateways(input)
}

// DescribeVpnGatewaysWithContext is a passthrough to the underlying DescribeVpnGatewaysWithContext method.
// It will increment the count of requests made to DescribeVpnGateways.
func (c *EC2) DescribeVpnGatewaysWithContext(ctx aws.Context, input *ec2.DescribeVpnGatewaysInput, opts ...request.Option) (*ec2.DescribeVpnGatewaysOutput, error) {
	c.inc("DescribeVpnGateways")
	return c.svc.DescribeVpnGatewaysWithContext(ctx, input, opts...)
}

// DetachClassicLinkVpcRequest is a passthrough to the underlying DetachClassicLinkVpcRequest.
// It will increment the count of requests made to DetachClassicLinkVpc.
func (c *EC2) DetachClassicLinkVpcRequest(input *ec2.DetachClassicLinkVpcInput) (req *request.Request, output *ec2.DetachClassicLinkVpcOutput) {
	c.inc("DetachClassicLinkVpc")
	return c.svc.DetachClassicLinkVpcRequest(input)
}

// DetachClassicLinkVpc is a passthrough to the underlying DetachClassicLinkVpc method.
// It will increment the count of requests made to DetachClassicLinkVpc.
func (c *EC2) DetachClassicLinkVpc(input *ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error) {
	c.inc("DetachClassicLinkVpc")
	return c.svc.DetachClassicLinkVpc(input)
}

// DetachClassicLinkVpcWithContext is a passthrough to the underlying DetachClassicLinkVpcWithContext method.
// It will increment the count of requests made to DetachClassicLinkVpc.
func (c *EC2) DetachClassicLinkVpcWithContext(ctx aws.Context, input *ec2.DetachClassicLinkVpcInput, opts ...request.Option) (*ec2.DetachClassicLinkVpcOutput, error) {
	c.inc("DetachClassicLinkVpc")
	return c.svc.DetachClassicLinkVpcWithContext(ctx, input, opts...)
}

// DetachInternetGatewayRequest is a passthrough to the underlying DetachInternetGatewayRequest.
// It will increment the count of requests made to DetachInternetGateway.
func (c *EC2) DetachInternetGatewayRequest(input *ec2.DetachInternetGatewayInput) (req *request.Request, output *ec2.DetachInternetGatewayOutput) {
	c.inc("DetachInternetGateway")
	return c.svc.DetachInternetGatewayRequest(input)
}

// DetachInternetGateway is a passthrough to the underlying DetachInternetGateway method.
// It will increment the count of requests made to DetachInternetGateway.
func (c *EC2) DetachInternetGateway(input *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error) {
	c.inc("DetachInternetGateway")
	return c.svc.DetachInternetGateway(input)
}

// DetachInternetGatewayWithContext is a passthrough to the underlying DetachInternetGatewayWithContext method.
// It will increment the count of requests made to DetachInternetGateway.
func (c *EC2) DetachInternetGatewayWithContext(ctx aws.Context, input *ec2.DetachInternetGatewayInput, opts ...request.Option) (*ec2.DetachInternetGatewayOutput, error) {
	c.inc("DetachInternetGateway")
	return c.svc.DetachInternetGatewayWithContext(ctx, input, opts...)
}

// DetachNetworkInterfaceRequest is a passthrough to the underlying DetachNetworkInterfaceRequest.
// It will increment the count of requests made to DetachNetworkInterface.
func (c *EC2) DetachNetworkInterfaceRequest(input *ec2.DetachNetworkInterfaceInput) (req *request.Request, output *ec2.DetachNetworkInterfaceOutput) {
	c.inc("DetachNetworkInterface")
	return c.svc.DetachNetworkInterfaceRequest(input)
}

// DetachNetworkInterface is a passthrough to the underlying DetachNetworkInterface method.
// It will increment the count of requests made to DetachNetworkInterface.
func (c *EC2) DetachNetworkInterface(input *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error) {
	c.inc("DetachNetworkInterface")
	return c.svc.DetachNetworkInterface(input)
}

// DetachNetworkInterfaceWithContext is a passthrough to the underlying DetachNetworkInterfaceWithContext method.
// It will increment the count of requests made to DetachNetworkInterface.
func (c *EC2) DetachNetworkInterfaceWithContext(ctx aws.Context, input *ec2.DetachNetworkInterfaceInput, opts ...request.Option) (*ec2.DetachNetworkInterfaceOutput, error) {
	c.inc("DetachNetworkInterface")
	return c.svc.DetachNetworkInterfaceWithContext(ctx, input, opts...)
}

// DetachVolumeRequest is a passthrough to the underlying DetachVolumeRequest.
// It will increment the count of requests made to DetachVolume.
func (c *EC2) DetachVolumeRequest(input *ec2.DetachVolumeInput) (req *request.Request, output *ec2.VolumeAttachment) {
	c.inc("DetachVolume")
	return c.svc.DetachVolumeRequest(input)
}

// DetachVolume is a passthrough to the underlying DetachVolume method.
// It will increment the count of requests made to DetachVolume.
func (c *EC2) DetachVolume(input *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error) {
	c.inc("DetachVolume")
	return c.svc.DetachVolume(input)
}

// DetachVolumeWithContext is a passthrough to the underlying DetachVolumeWithContext method.
// It will increment the count of requests made to DetachVolume.
func (c *EC2) DetachVolumeWithContext(ctx aws.Context, input *ec2.DetachVolumeInput, opts ...request.Option) (*ec2.VolumeAttachment, error) {
	c.inc("DetachVolume")
	return c.svc.DetachVolumeWithContext(ctx, input, opts...)
}

// DetachVpnGatewayRequest is a passthrough to the underlying DetachVpnGatewayRequest.
// It will increment the count of requests made to DetachVpnGateway.
func (c *EC2) DetachVpnGatewayRequest(input *ec2.DetachVpnGatewayInput) (req *request.Request, output *ec2.DetachVpnGatewayOutput) {
	c.inc("DetachVpnGateway")
	return c.svc.DetachVpnGatewayRequest(input)
}

// DetachVpnGateway is a passthrough to the underlying DetachVpnGateway method.
// It will increment the count of requests made to DetachVpnGateway.
func (c *EC2) DetachVpnGateway(input *ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error) {
	c.inc("DetachVpnGateway")
	return c.svc.DetachVpnGateway(input)
}

// DetachVpnGatewayWithContext is a passthrough to the underlying DetachVpnGatewayWithContext method.
// It will increment the count of requests made to DetachVpnGateway.
func (c *EC2) DetachVpnGatewayWithContext(ctx aws.Context, input *ec2.DetachVpnGatewayInput, opts ...request.Option) (*ec2.DetachVpnGatewayOutput, error) {
	c.inc("DetachVpnGateway")
	return c.svc.DetachVpnGatewayWithContext(ctx, input, opts...)
}

// DisableVgwRoutePropagationRequest is a passthrough to the underlying DisableVgwRoutePropagationRequest.
// It will increment the count of requests made to DisableVgwRoutePropagation.
func (c *EC2) DisableVgwRoutePropagationRequest(input *ec2.DisableVgwRoutePropagationInput) (req *request.Request, output *ec2.DisableVgwRoutePropagationOutput) {
	c.inc("DisableVgwRoutePropagation")
	return c.svc.DisableVgwRoutePropagationRequest(input)
}

// DisableVgwRoutePropagation is a passthrough to the underlying DisableVgwRoutePropagation method.
// It will increment the count of requests made to DisableVgwRoutePropagation.
func (c *EC2) DisableVgwRoutePropagation(input *ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error) {
	c.inc("DisableVgwRoutePropagation")
	return c.svc.DisableVgwRoutePropagation(input)
}

// DisableVgwRoutePropagationWithContext is a passthrough to the underlying DisableVgwRoutePropagationWithContext method.
// It will increment the count of requests made to DisableVgwRoutePropagation.
func (c *EC2) DisableVgwRoutePropagationWithContext(ctx aws.Context, input *ec2.DisableVgwRoutePropagationInput, opts ...request.Option) (*ec2.DisableVgwRoutePropagationOutput, error) {
	c.inc("DisableVgwRoutePropagation")
	return c.svc.DisableVgwRoutePropagationWithContext(ctx, input, opts...)
}

// DisableVpcClassicLinkRequest is a passthrough to the underlying DisableVpcClassicLinkRequest.
// It will increment the count of requests made to DisableVpcClassicLink.
func (c *EC2) DisableVpcClassicLinkRequest(input *ec2.DisableVpcClassicLinkInput) (req *request.Request, output *ec2.DisableVpcClassicLinkOutput) {
	c.inc("DisableVpcClassicLink")
	return c.svc.DisableVpcClassicLinkRequest(input)
}

// DisableVpcClassicLink is a passthrough to the underlying DisableVpcClassicLink method.
// It will increment the count of requests made to DisableVpcClassicLink.
func (c *EC2) DisableVpcClassicLink(input *ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error) {
	c.inc("DisableVpcClassicLink")
	return c.svc.DisableVpcClassicLink(input)
}

// DisableVpcClassicLinkWithContext is a passthrough to the underlying DisableVpcClassicLinkWithContext method.
// It will increment the count of requests made to DisableVpcClassicLink.
func (c *EC2) DisableVpcClassicLinkWithContext(ctx aws.Context, input *ec2.DisableVpcClassicLinkInput, opts ...request.Option) (*ec2.DisableVpcClassicLinkOutput, error) {
	c.inc("DisableVpcClassicLink")
	return c.svc.DisableVpcClassicLinkWithContext(ctx, input, opts...)
}

// DisableVpcClassicLinkDnsSupportRequest is a passthrough to the underlying DisableVpcClassicLinkDnsSupportRequest.
// It will increment the count of requests made to DisableVpcClassicLinkDnsSupport.
func (c *EC2) DisableVpcClassicLinkDnsSupportRequest(input *ec2.DisableVpcClassicLinkDnsSupportInput) (req *request.Request, output *ec2.DisableVpcClassicLinkDnsSupportOutput) {
	c.inc("DisableVpcClassicLinkDnsSupport")
	return c.svc.DisableVpcClassicLinkDnsSupportRequest(input)
}

// DisableVpcClassicLinkDnsSupport is a passthrough to the underlying DisableVpcClassicLinkDnsSupport method.
// It will increment the count of requests made to DisableVpcClassicLinkDnsSupport.
func (c *EC2) DisableVpcClassicLinkDnsSupport(input *ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	c.inc("DisableVpcClassicLinkDnsSupport")
	return c.svc.DisableVpcClassicLinkDnsSupport(input)
}

// DisableVpcClassicLinkDnsSupportWithContext is a passthrough to the underlying DisableVpcClassicLinkDnsSupportWithContext method.
// It will increment the count of requests made to DisableVpcClassicLinkDnsSupport.
func (c *EC2) DisableVpcClassicLinkDnsSupportWithContext(ctx aws.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput, opts ...request.Option) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	c.inc("DisableVpcClassicLinkDnsSupport")
	return c.svc.DisableVpcClassicLinkDnsSupportWithContext(ctx, input, opts...)
}

// DisassociateAddressRequest is a passthrough to the underlying DisassociateAddressRequest.
// It will increment the count of requests made to DisassociateAddress.
func (c *EC2) DisassociateAddressRequest(input *ec2.DisassociateAddressInput) (req *request.Request, output *ec2.DisassociateAddressOutput) {
	c.inc("DisassociateAddress")
	return c.svc.DisassociateAddressRequest(input)
}

// DisassociateAddress is a passthrough to the underlying DisassociateAddress method.
// It will increment the count of requests made to DisassociateAddress.
func (c *EC2) DisassociateAddress(input *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error) {
	c.inc("DisassociateAddress")
	return c.svc.DisassociateAddress(input)
}

// DisassociateAddressWithContext is a passthrough to the underlying DisassociateAddressWithContext method.
// It will increment the count of requests made to DisassociateAddress.
func (c *EC2) DisassociateAddressWithContext(ctx aws.Context, input *ec2.DisassociateAddressInput, opts ...request.Option) (*ec2.DisassociateAddressOutput, error) {
	c.inc("DisassociateAddress")
	return c.svc.DisassociateAddressWithContext(ctx, input, opts...)
}

// DisassociateIamInstanceProfileRequest is a passthrough to the underlying DisassociateIamInstanceProfileRequest.
// It will increment the count of requests made to DisassociateIamInstanceProfile.
func (c *EC2) DisassociateIamInstanceProfileRequest(input *ec2.DisassociateIamInstanceProfileInput) (req *request.Request, output *ec2.DisassociateIamInstanceProfileOutput) {
	c.inc("DisassociateIamInstanceProfile")
	return c.svc.DisassociateIamInstanceProfileRequest(input)
}

// DisassociateIamInstanceProfile is a passthrough to the underlying DisassociateIamInstanceProfile method.
// It will increment the count of requests made to DisassociateIamInstanceProfile.
func (c *EC2) DisassociateIamInstanceProfile(input *ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	c.inc("DisassociateIamInstanceProfile")
	return c.svc.DisassociateIamInstanceProfile(input)
}

// DisassociateIamInstanceProfileWithContext is a passthrough to the underlying DisassociateIamInstanceProfileWithContext method.
// It will increment the count of requests made to DisassociateIamInstanceProfile.
func (c *EC2) DisassociateIamInstanceProfileWithContext(ctx aws.Context, input *ec2.DisassociateIamInstanceProfileInput, opts ...request.Option) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	c.inc("DisassociateIamInstanceProfile")
	return c.svc.DisassociateIamInstanceProfileWithContext(ctx, input, opts...)
}

// DisassociateRouteTableRequest is a passthrough to the underlying DisassociateRouteTableRequest.
// It will increment the count of requests made to DisassociateRouteTable.
func (c *EC2) DisassociateRouteTableRequest(input *ec2.DisassociateRouteTableInput) (req *request.Request, output *ec2.DisassociateRouteTableOutput) {
	c.inc("DisassociateRouteTable")
	return c.svc.DisassociateRouteTableRequest(input)
}

// DisassociateRouteTable is a passthrough to the underlying DisassociateRouteTable method.
// It will increment the count of requests made to DisassociateRouteTable.
func (c *EC2) DisassociateRouteTable(input *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error) {
	c.inc("DisassociateRouteTable")
	return c.svc.DisassociateRouteTable(input)
}

// DisassociateRouteTableWithContext is a passthrough to the underlying DisassociateRouteTableWithContext method.
// It will increment the count of requests made to DisassociateRouteTable.
func (c *EC2) DisassociateRouteTableWithContext(ctx aws.Context, input *ec2.DisassociateRouteTableInput, opts ...request.Option) (*ec2.DisassociateRouteTableOutput, error) {
	c.inc("DisassociateRouteTable")
	return c.svc.DisassociateRouteTableWithContext(ctx, input, opts...)
}

// DisassociateSubnetCidrBlockRequest is a passthrough to the underlying DisassociateSubnetCidrBlockRequest.
// It will increment the count of requests made to DisassociateSubnetCidrBlock.
func (c *EC2) DisassociateSubnetCidrBlockRequest(input *ec2.DisassociateSubnetCidrBlockInput) (req *request.Request, output *ec2.DisassociateSubnetCidrBlockOutput) {
	c.inc("DisassociateSubnetCidrBlock")
	return c.svc.DisassociateSubnetCidrBlockRequest(input)
}

// DisassociateSubnetCidrBlock is a passthrough to the underlying DisassociateSubnetCidrBlock method.
// It will increment the count of requests made to DisassociateSubnetCidrBlock.
func (c *EC2) DisassociateSubnetCidrBlock(input *ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	c.inc("DisassociateSubnetCidrBlock")
	return c.svc.DisassociateSubnetCidrBlock(input)
}

// DisassociateSubnetCidrBlockWithContext is a passthrough to the underlying DisassociateSubnetCidrBlockWithContext method.
// It will increment the count of requests made to DisassociateSubnetCidrBlock.
func (c *EC2) DisassociateSubnetCidrBlockWithContext(ctx aws.Context, input *ec2.DisassociateSubnetCidrBlockInput, opts ...request.Option) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	c.inc("DisassociateSubnetCidrBlock")
	return c.svc.DisassociateSubnetCidrBlockWithContext(ctx, input, opts...)
}

// DisassociateVpcCidrBlockRequest is a passthrough to the underlying DisassociateVpcCidrBlockRequest.
// It will increment the count of requests made to DisassociateVpcCidrBlock.
func (c *EC2) DisassociateVpcCidrBlockRequest(input *ec2.DisassociateVpcCidrBlockInput) (req *request.Request, output *ec2.DisassociateVpcCidrBlockOutput) {
	c.inc("DisassociateVpcCidrBlock")
	return c.svc.DisassociateVpcCidrBlockRequest(input)
}

// DisassociateVpcCidrBlock is a passthrough to the underlying DisassociateVpcCidrBlock method.
// It will increment the count of requests made to DisassociateVpcCidrBlock.
func (c *EC2) DisassociateVpcCidrBlock(input *ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	c.inc("DisassociateVpcCidrBlock")
	return c.svc.DisassociateVpcCidrBlock(input)
}

// DisassociateVpcCidrBlockWithContext is a passthrough to the underlying DisassociateVpcCidrBlockWithContext method.
// It will increment the count of requests made to DisassociateVpcCidrBlock.
func (c *EC2) DisassociateVpcCidrBlockWithContext(ctx aws.Context, input *ec2.DisassociateVpcCidrBlockInput, opts ...request.Option) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	c.inc("DisassociateVpcCidrBlock")
	return c.svc.DisassociateVpcCidrBlockWithContext(ctx, input, opts...)
}

// EnableVgwRoutePropagationRequest is a passthrough to the underlying EnableVgwRoutePropagationRequest.
// It will increment the count of requests made to EnableVgwRoutePropagation.
func (c *EC2) EnableVgwRoutePropagationRequest(input *ec2.EnableVgwRoutePropagationInput) (req *request.Request, output *ec2.EnableVgwRoutePropagationOutput) {
	c.inc("EnableVgwRoutePropagation")
	return c.svc.EnableVgwRoutePropagationRequest(input)
}

// EnableVgwRoutePropagation is a passthrough to the underlying EnableVgwRoutePropagation method.
// It will increment the count of requests made to EnableVgwRoutePropagation.
func (c *EC2) EnableVgwRoutePropagation(input *ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error) {
	c.inc("EnableVgwRoutePropagation")
	return c.svc.EnableVgwRoutePropagation(input)
}

// EnableVgwRoutePropagationWithContext is a passthrough to the underlying EnableVgwRoutePropagationWithContext method.
// It will increment the count of requests made to EnableVgwRoutePropagation.
func (c *EC2) EnableVgwRoutePropagationWithContext(ctx aws.Context, input *ec2.EnableVgwRoutePropagationInput, opts ...request.Option) (*ec2.EnableVgwRoutePropagationOutput, error) {
	c.inc("EnableVgwRoutePropagation")
	return c.svc.EnableVgwRoutePropagationWithContext(ctx, input, opts...)
}

// EnableVolumeIORequest is a passthrough to the underlying EnableVolumeIORequest.
// It will increment the count of requests made to EnableVolumeIO.
func (c *EC2) EnableVolumeIORequest(input *ec2.EnableVolumeIOInput) (req *request.Request, output *ec2.EnableVolumeIOOutput) {
	c.inc("EnableVolumeIO")
	return c.svc.EnableVolumeIORequest(input)
}

// EnableVolumeIO is a passthrough to the underlying EnableVolumeIO method.
// It will increment the count of requests made to EnableVolumeIO.
func (c *EC2) EnableVolumeIO(input *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error) {
	c.inc("EnableVolumeIO")
	return c.svc.EnableVolumeIO(input)
}

// EnableVolumeIOWithContext is a passthrough to the underlying EnableVolumeIOWithContext method.
// It will increment the count of requests made to EnableVolumeIO.
func (c *EC2) EnableVolumeIOWithContext(ctx aws.Context, input *ec2.EnableVolumeIOInput, opts ...request.Option) (*ec2.EnableVolumeIOOutput, error) {
	c.inc("EnableVolumeIO")
	return c.svc.EnableVolumeIOWithContext(ctx, input, opts...)
}

// EnableVpcClassicLinkRequest is a passthrough to the underlying EnableVpcClassicLinkRequest.
// It will increment the count of requests made to EnableVpcClassicLink.
func (c *EC2) EnableVpcClassicLinkRequest(input *ec2.EnableVpcClassicLinkInput) (req *request.Request, output *ec2.EnableVpcClassicLinkOutput) {
	c.inc("EnableVpcClassicLink")
	return c.svc.EnableVpcClassicLinkRequest(input)
}

// EnableVpcClassicLink is a passthrough to the underlying EnableVpcClassicLink method.
// It will increment the count of requests made to EnableVpcClassicLink.
func (c *EC2) EnableVpcClassicLink(input *ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error) {
	c.inc("EnableVpcClassicLink")
	return c.svc.EnableVpcClassicLink(input)
}

// EnableVpcClassicLinkWithContext is a passthrough to the underlying EnableVpcClassicLinkWithContext method.
// It will increment the count of requests made to EnableVpcClassicLink.
func (c *EC2) EnableVpcClassicLinkWithContext(ctx aws.Context, input *ec2.EnableVpcClassicLinkInput, opts ...request.Option) (*ec2.EnableVpcClassicLinkOutput, error) {
	c.inc("EnableVpcClassicLink")
	return c.svc.EnableVpcClassicLinkWithContext(ctx, input, opts...)
}

// EnableVpcClassicLinkDnsSupportRequest is a passthrough to the underlying EnableVpcClassicLinkDnsSupportRequest.
// It will increment the count of requests made to EnableVpcClassicLinkDnsSupport.
func (c *EC2) EnableVpcClassicLinkDnsSupportRequest(input *ec2.EnableVpcClassicLinkDnsSupportInput) (req *request.Request, output *ec2.EnableVpcClassicLinkDnsSupportOutput) {
	c.inc("EnableVpcClassicLinkDnsSupport")
	return c.svc.EnableVpcClassicLinkDnsSupportRequest(input)
}

// EnableVpcClassicLinkDnsSupport is a passthrough to the underlying EnableVpcClassicLinkDnsSupport method.
// It will increment the count of requests made to EnableVpcClassicLinkDnsSupport.
func (c *EC2) EnableVpcClassicLinkDnsSupport(input *ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	c.inc("EnableVpcClassicLinkDnsSupport")
	return c.svc.EnableVpcClassicLinkDnsSupport(input)
}

// EnableVpcClassicLinkDnsSupportWithContext is a passthrough to the underlying EnableVpcClassicLinkDnsSupportWithContext method.
// It will increment the count of requests made to EnableVpcClassicLinkDnsSupport.
func (c *EC2) EnableVpcClassicLinkDnsSupportWithContext(ctx aws.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput, opts ...request.Option) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	c.inc("EnableVpcClassicLinkDnsSupport")
	return c.svc.EnableVpcClassicLinkDnsSupportWithContext(ctx, input, opts...)
}

// GetConsoleOutputRequest is a passthrough to the underlying GetConsoleOutputRequest.
// It will increment the count of requests made to GetConsoleOutput.
func (c *EC2) GetConsoleOutputRequest(input *ec2.GetConsoleOutputInput) (req *request.Request, output *ec2.GetConsoleOutputOutput) {
	c.inc("GetConsoleOutput")
	return c.svc.GetConsoleOutputRequest(input)
}

// GetConsoleOutput is a passthrough to the underlying GetConsoleOutput method.
// It will increment the count of requests made to GetConsoleOutput.
func (c *EC2) GetConsoleOutput(input *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error) {
	c.inc("GetConsoleOutput")
	return c.svc.GetConsoleOutput(input)
}

// GetConsoleOutputWithContext is a passthrough to the underlying GetConsoleOutputWithContext method.
// It will increment the count of requests made to GetConsoleOutput.
func (c *EC2) GetConsoleOutputWithContext(ctx aws.Context, input *ec2.GetConsoleOutputInput, opts ...request.Option) (*ec2.GetConsoleOutputOutput, error) {
	c.inc("GetConsoleOutput")
	return c.svc.GetConsoleOutputWithContext(ctx, input, opts...)
}

// GetConsoleScreenshotRequest is a passthrough to the underlying GetConsoleScreenshotRequest.
// It will increment the count of requests made to GetConsoleScreenshot.
func (c *EC2) GetConsoleScreenshotRequest(input *ec2.GetConsoleScreenshotInput) (req *request.Request, output *ec2.GetConsoleScreenshotOutput) {
	c.inc("GetConsoleScreenshot")
	return c.svc.GetConsoleScreenshotRequest(input)
}

// GetConsoleScreenshot is a passthrough to the underlying GetConsoleScreenshot method.
// It will increment the count of requests made to GetConsoleScreenshot.
func (c *EC2) GetConsoleScreenshot(input *ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error) {
	c.inc("GetConsoleScreenshot")
	return c.svc.GetConsoleScreenshot(input)
}

// GetConsoleScreenshotWithContext is a passthrough to the underlying GetConsoleScreenshotWithContext method.
// It will increment the count of requests made to GetConsoleScreenshot.
func (c *EC2) GetConsoleScreenshotWithContext(ctx aws.Context, input *ec2.GetConsoleScreenshotInput, opts ...request.Option) (*ec2.GetConsoleScreenshotOutput, error) {
	c.inc("GetConsoleScreenshot")
	return c.svc.GetConsoleScreenshotWithContext(ctx, input, opts...)
}

// GetHostReservationPurchasePreviewRequest is a passthrough to the underlying GetHostReservationPurchasePreviewRequest.
// It will increment the count of requests made to GetHostReservationPurchasePreview.
func (c *EC2) GetHostReservationPurchasePreviewRequest(input *ec2.GetHostReservationPurchasePreviewInput) (req *request.Request, output *ec2.GetHostReservationPurchasePreviewOutput) {
	c.inc("GetHostReservationPurchasePreview")
	return c.svc.GetHostReservationPurchasePreviewRequest(input)
}

// GetHostReservationPurchasePreview is a passthrough to the underlying GetHostReservationPurchasePreview method.
// It will increment the count of requests made to GetHostReservationPurchasePreview.
func (c *EC2) GetHostReservationPurchasePreview(input *ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	c.inc("GetHostReservationPurchasePreview")
	return c.svc.GetHostReservationPurchasePreview(input)
}

// GetHostReservationPurchasePreviewWithContext is a passthrough to the underlying GetHostReservationPurchasePreviewWithContext method.
// It will increment the count of requests made to GetHostReservationPurchasePreview.
func (c *EC2) GetHostReservationPurchasePreviewWithContext(ctx aws.Context, input *ec2.GetHostReservationPurchasePreviewInput, opts ...request.Option) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	c.inc("GetHostReservationPurchasePreview")
	return c.svc.GetHostReservationPurchasePreviewWithContext(ctx, input, opts...)
}

// GetPasswordDataRequest is a passthrough to the underlying GetPasswordDataRequest.
// It will increment the count of requests made to GetPasswordData.
func (c *EC2) GetPasswordDataRequest(input *ec2.GetPasswordDataInput) (req *request.Request, output *ec2.GetPasswordDataOutput) {
	c.inc("GetPasswordData")
	return c.svc.GetPasswordDataRequest(input)
}

// GetPasswordData is a passthrough to the underlying GetPasswordData method.
// It will increment the count of requests made to GetPasswordData.
func (c *EC2) GetPasswordData(input *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error) {
	c.inc("GetPasswordData")
	return c.svc.GetPasswordData(input)
}

// GetPasswordDataWithContext is a passthrough to the underlying GetPasswordDataWithContext method.
// It will increment the count of requests made to GetPasswordData.
func (c *EC2) GetPasswordDataWithContext(ctx aws.Context, input *ec2.GetPasswordDataInput, opts ...request.Option) (*ec2.GetPasswordDataOutput, error) {
	c.inc("GetPasswordData")
	return c.svc.GetPasswordDataWithContext(ctx, input, opts...)
}

// GetReservedInstancesExchangeQuoteRequest is a passthrough to the underlying GetReservedInstancesExchangeQuoteRequest.
// It will increment the count of requests made to GetReservedInstancesExchangeQuote.
func (c *EC2) GetReservedInstancesExchangeQuoteRequest(input *ec2.GetReservedInstancesExchangeQuoteInput) (req *request.Request, output *ec2.GetReservedInstancesExchangeQuoteOutput) {
	c.inc("GetReservedInstancesExchangeQuote")
	return c.svc.GetReservedInstancesExchangeQuoteRequest(input)
}

// GetReservedInstancesExchangeQuote is a passthrough to the underlying GetReservedInstancesExchangeQuote method.
// It will increment the count of requests made to GetReservedInstancesExchangeQuote.
func (c *EC2) GetReservedInstancesExchangeQuote(input *ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	c.inc("GetReservedInstancesExchangeQuote")
	return c.svc.GetReservedInstancesExchangeQuote(input)
}

// GetReservedInstancesExchangeQuoteWithContext is a passthrough to the underlying GetReservedInstancesExchangeQuoteWithContext method.
// It will increment the count of requests made to GetReservedInstancesExchangeQuote.
func (c *EC2) GetReservedInstancesExchangeQuoteWithContext(ctx aws.Context, input *ec2.GetReservedInstancesExchangeQuoteInput, opts ...request.Option) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	c.inc("GetReservedInstancesExchangeQuote")
	return c.svc.GetReservedInstancesExchangeQuoteWithContext(ctx, input, opts...)
}

// ImportImageRequest is a passthrough to the underlying ImportImageRequest.
// It will increment the count of requests made to ImportImage.
func (c *EC2) ImportImageRequest(input *ec2.ImportImageInput) (req *request.Request, output *ec2.ImportImageOutput) {
	c.inc("ImportImage")
	return c.svc.ImportImageRequest(input)
}

// ImportImage is a passthrough to the underlying ImportImage method.
// It will increment the count of requests made to ImportImage.
func (c *EC2) ImportImage(input *ec2.ImportImageInput) (*ec2.ImportImageOutput, error) {
	c.inc("ImportImage")
	return c.svc.ImportImage(input)
}

// ImportImageWithContext is a passthrough to the underlying ImportImageWithContext method.
// It will increment the count of requests made to ImportImage.
func (c *EC2) ImportImageWithContext(ctx aws.Context, input *ec2.ImportImageInput, opts ...request.Option) (*ec2.ImportImageOutput, error) {
	c.inc("ImportImage")
	return c.svc.ImportImageWithContext(ctx, input, opts...)
}

// ImportInstanceRequest is a passthrough to the underlying ImportInstanceRequest.
// It will increment the count of requests made to ImportInstance.
func (c *EC2) ImportInstanceRequest(input *ec2.ImportInstanceInput) (req *request.Request, output *ec2.ImportInstanceOutput) {
	c.inc("ImportInstance")
	return c.svc.ImportInstanceRequest(input)
}

// ImportInstance is a passthrough to the underlying ImportInstance method.
// It will increment the count of requests made to ImportInstance.
func (c *EC2) ImportInstance(input *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error) {
	c.inc("ImportInstance")
	return c.svc.ImportInstance(input)
}

// ImportInstanceWithContext is a passthrough to the underlying ImportInstanceWithContext method.
// It will increment the count of requests made to ImportInstance.
func (c *EC2) ImportInstanceWithContext(ctx aws.Context, input *ec2.ImportInstanceInput, opts ...request.Option) (*ec2.ImportInstanceOutput, error) {
	c.inc("ImportInstance")
	return c.svc.ImportInstanceWithContext(ctx, input, opts...)
}

// ImportKeyPairRequest is a passthrough to the underlying ImportKeyPairRequest.
// It will increment the count of requests made to ImportKeyPair.
func (c *EC2) ImportKeyPairRequest(input *ec2.ImportKeyPairInput) (req *request.Request, output *ec2.ImportKeyPairOutput) {
	c.inc("ImportKeyPair")
	return c.svc.ImportKeyPairRequest(input)
}

// ImportKeyPair is a passthrough to the underlying ImportKeyPair method.
// It will increment the count of requests made to ImportKeyPair.
func (c *EC2) ImportKeyPair(input *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error) {
	c.inc("ImportKeyPair")
	return c.svc.ImportKeyPair(input)
}

// ImportKeyPairWithContext is a passthrough to the underlying ImportKeyPairWithContext method.
// It will increment the count of requests made to ImportKeyPair.
func (c *EC2) ImportKeyPairWithContext(ctx aws.Context, input *ec2.ImportKeyPairInput, opts ...request.Option) (*ec2.ImportKeyPairOutput, error) {
	c.inc("ImportKeyPair")
	return c.svc.ImportKeyPairWithContext(ctx, input, opts...)
}

// ImportSnapshotRequest is a passthrough to the underlying ImportSnapshotRequest.
// It will increment the count of requests made to ImportSnapshot.
func (c *EC2) ImportSnapshotRequest(input *ec2.ImportSnapshotInput) (req *request.Request, output *ec2.ImportSnapshotOutput) {
	c.inc("ImportSnapshot")
	return c.svc.ImportSnapshotRequest(input)
}

// ImportSnapshot is a passthrough to the underlying ImportSnapshot method.
// It will increment the count of requests made to ImportSnapshot.
func (c *EC2) ImportSnapshot(input *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error) {
	c.inc("ImportSnapshot")
	return c.svc.ImportSnapshot(input)
}

// ImportSnapshotWithContext is a passthrough to the underlying ImportSnapshotWithContext method.
// It will increment the count of requests made to ImportSnapshot.
func (c *EC2) ImportSnapshotWithContext(ctx aws.Context, input *ec2.ImportSnapshotInput, opts ...request.Option) (*ec2.ImportSnapshotOutput, error) {
	c.inc("ImportSnapshot")
	return c.svc.ImportSnapshotWithContext(ctx, input, opts...)
}

// ImportVolumeRequest is a passthrough to the underlying ImportVolumeRequest.
// It will increment the count of requests made to ImportVolume.
func (c *EC2) ImportVolumeRequest(input *ec2.ImportVolumeInput) (req *request.Request, output *ec2.ImportVolumeOutput) {
	c.inc("ImportVolume")
	return c.svc.ImportVolumeRequest(input)
}

// ImportVolume is a passthrough to the underlying ImportVolume method.
// It will increment the count of requests made to ImportVolume.
func (c *EC2) ImportVolume(input *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error) {
	c.inc("ImportVolume")
	return c.svc.ImportVolume(input)
}

// ImportVolumeWithContext is a passthrough to the underlying ImportVolumeWithContext method.
// It will increment the count of requests made to ImportVolume.
func (c *EC2) ImportVolumeWithContext(ctx aws.Context, input *ec2.ImportVolumeInput, opts ...request.Option) (*ec2.ImportVolumeOutput, error) {
	c.inc("ImportVolume")
	return c.svc.ImportVolumeWithContext(ctx, input, opts...)
}

// ModifyFpgaImageAttributeRequest is a passthrough to the underlying ModifyFpgaImageAttributeRequest.
// It will increment the count of requests made to ModifyFpgaImageAttribute.
func (c *EC2) ModifyFpgaImageAttributeRequest(input *ec2.ModifyFpgaImageAttributeInput) (req *request.Request, output *ec2.ModifyFpgaImageAttributeOutput) {
	c.inc("ModifyFpgaImageAttribute")
	return c.svc.ModifyFpgaImageAttributeRequest(input)
}

// ModifyFpgaImageAttribute is a passthrough to the underlying ModifyFpgaImageAttribute method.
// It will increment the count of requests made to ModifyFpgaImageAttribute.
func (c *EC2) ModifyFpgaImageAttribute(input *ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	c.inc("ModifyFpgaImageAttribute")
	return c.svc.ModifyFpgaImageAttribute(input)
}

// ModifyFpgaImageAttributeWithContext is a passthrough to the underlying ModifyFpgaImageAttributeWithContext method.
// It will increment the count of requests made to ModifyFpgaImageAttribute.
func (c *EC2) ModifyFpgaImageAttributeWithContext(ctx aws.Context, input *ec2.ModifyFpgaImageAttributeInput, opts ...request.Option) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	c.inc("ModifyFpgaImageAttribute")
	return c.svc.ModifyFpgaImageAttributeWithContext(ctx, input, opts...)
}

// ModifyHostsRequest is a passthrough to the underlying ModifyHostsRequest.
// It will increment the count of requests made to ModifyHosts.
func (c *EC2) ModifyHostsRequest(input *ec2.ModifyHostsInput) (req *request.Request, output *ec2.ModifyHostsOutput) {
	c.inc("ModifyHosts")
	return c.svc.ModifyHostsRequest(input)
}

// ModifyHosts is a passthrough to the underlying ModifyHosts method.
// It will increment the count of requests made to ModifyHosts.
func (c *EC2) ModifyHosts(input *ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error) {
	c.inc("ModifyHosts")
	return c.svc.ModifyHosts(input)
}

// ModifyHostsWithContext is a passthrough to the underlying ModifyHostsWithContext method.
// It will increment the count of requests made to ModifyHosts.
func (c *EC2) ModifyHostsWithContext(ctx aws.Context, input *ec2.ModifyHostsInput, opts ...request.Option) (*ec2.ModifyHostsOutput, error) {
	c.inc("ModifyHosts")
	return c.svc.ModifyHostsWithContext(ctx, input, opts...)
}

// ModifyIdFormatRequest is a passthrough to the underlying ModifyIdFormatRequest.
// It will increment the count of requests made to ModifyIdFormat.
func (c *EC2) ModifyIdFormatRequest(input *ec2.ModifyIdFormatInput) (req *request.Request, output *ec2.ModifyIdFormatOutput) {
	c.inc("ModifyIdFormat")
	return c.svc.ModifyIdFormatRequest(input)
}

// ModifyIdFormat is a passthrough to the underlying ModifyIdFormat method.
// It will increment the count of requests made to ModifyIdFormat.
func (c *EC2) ModifyIdFormat(input *ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error) {
	c.inc("ModifyIdFormat")
	return c.svc.ModifyIdFormat(input)
}

// ModifyIdFormatWithContext is a passthrough to the underlying ModifyIdFormatWithContext method.
// It will increment the count of requests made to ModifyIdFormat.
func (c *EC2) ModifyIdFormatWithContext(ctx aws.Context, input *ec2.ModifyIdFormatInput, opts ...request.Option) (*ec2.ModifyIdFormatOutput, error) {
	c.inc("ModifyIdFormat")
	return c.svc.ModifyIdFormatWithContext(ctx, input, opts...)
}

// ModifyIdentityIdFormatRequest is a passthrough to the underlying ModifyIdentityIdFormatRequest.
// It will increment the count of requests made to ModifyIdentityIdFormat.
func (c *EC2) ModifyIdentityIdFormatRequest(input *ec2.ModifyIdentityIdFormatInput) (req *request.Request, output *ec2.ModifyIdentityIdFormatOutput) {
	c.inc("ModifyIdentityIdFormat")
	return c.svc.ModifyIdentityIdFormatRequest(input)
}

// ModifyIdentityIdFormat is a passthrough to the underlying ModifyIdentityIdFormat method.
// It will increment the count of requests made to ModifyIdentityIdFormat.
func (c *EC2) ModifyIdentityIdFormat(input *ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error) {
	c.inc("ModifyIdentityIdFormat")
	return c.svc.ModifyIdentityIdFormat(input)
}

// ModifyIdentityIdFormatWithContext is a passthrough to the underlying ModifyIdentityIdFormatWithContext method.
// It will increment the count of requests made to ModifyIdentityIdFormat.
func (c *EC2) ModifyIdentityIdFormatWithContext(ctx aws.Context, input *ec2.ModifyIdentityIdFormatInput, opts ...request.Option) (*ec2.ModifyIdentityIdFormatOutput, error) {
	c.inc("ModifyIdentityIdFormat")
	return c.svc.ModifyIdentityIdFormatWithContext(ctx, input, opts...)
}

// ModifyImageAttributeRequest is a passthrough to the underlying ModifyImageAttributeRequest.
// It will increment the count of requests made to ModifyImageAttribute.
func (c *EC2) ModifyImageAttributeRequest(input *ec2.ModifyImageAttributeInput) (req *request.Request, output *ec2.ModifyImageAttributeOutput) {
	c.inc("ModifyImageAttribute")
	return c.svc.ModifyImageAttributeRequest(input)
}

// ModifyImageAttribute is a passthrough to the underlying ModifyImageAttribute method.
// It will increment the count of requests made to ModifyImageAttribute.
func (c *EC2) ModifyImageAttribute(input *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error) {
	c.inc("ModifyImageAttribute")
	return c.svc.ModifyImageAttribute(input)
}

// ModifyImageAttributeWithContext is a passthrough to the underlying ModifyImageAttributeWithContext method.
// It will increment the count of requests made to ModifyImageAttribute.
func (c *EC2) ModifyImageAttributeWithContext(ctx aws.Context, input *ec2.ModifyImageAttributeInput, opts ...request.Option) (*ec2.ModifyImageAttributeOutput, error) {
	c.inc("ModifyImageAttribute")
	return c.svc.ModifyImageAttributeWithContext(ctx, input, opts...)
}

// ModifyInstanceAttributeRequest is a passthrough to the underlying ModifyInstanceAttributeRequest.
// It will increment the count of requests made to ModifyInstanceAttribute.
func (c *EC2) ModifyInstanceAttributeRequest(input *ec2.ModifyInstanceAttributeInput) (req *request.Request, output *ec2.ModifyInstanceAttributeOutput) {
	c.inc("ModifyInstanceAttribute")
	return c.svc.ModifyInstanceAttributeRequest(input)
}

// ModifyInstanceAttribute is a passthrough to the underlying ModifyInstanceAttribute method.
// It will increment the count of requests made to ModifyInstanceAttribute.
func (c *EC2) ModifyInstanceAttribute(input *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error) {
	c.inc("ModifyInstanceAttribute")
	return c.svc.ModifyInstanceAttribute(input)
}

// ModifyInstanceAttributeWithContext is a passthrough to the underlying ModifyInstanceAttributeWithContext method.
// It will increment the count of requests made to ModifyInstanceAttribute.
func (c *EC2) ModifyInstanceAttributeWithContext(ctx aws.Context, input *ec2.ModifyInstanceAttributeInput, opts ...request.Option) (*ec2.ModifyInstanceAttributeOutput, error) {
	c.inc("ModifyInstanceAttribute")
	return c.svc.ModifyInstanceAttributeWithContext(ctx, input, opts...)
}

// ModifyInstancePlacementRequest is a passthrough to the underlying ModifyInstancePlacementRequest.
// It will increment the count of requests made to ModifyInstancePlacement.
func (c *EC2) ModifyInstancePlacementRequest(input *ec2.ModifyInstancePlacementInput) (req *request.Request, output *ec2.ModifyInstancePlacementOutput) {
	c.inc("ModifyInstancePlacement")
	return c.svc.ModifyInstancePlacementRequest(input)
}

// ModifyInstancePlacement is a passthrough to the underlying ModifyInstancePlacement method.
// It will increment the count of requests made to ModifyInstancePlacement.
func (c *EC2) ModifyInstancePlacement(input *ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error) {
	c.inc("ModifyInstancePlacement")
	return c.svc.ModifyInstancePlacement(input)
}

// ModifyInstancePlacementWithContext is a passthrough to the underlying ModifyInstancePlacementWithContext method.
// It will increment the count of requests made to ModifyInstancePlacement.
func (c *EC2) ModifyInstancePlacementWithContext(ctx aws.Context, input *ec2.ModifyInstancePlacementInput, opts ...request.Option) (*ec2.ModifyInstancePlacementOutput, error) {
	c.inc("ModifyInstancePlacement")
	return c.svc.ModifyInstancePlacementWithContext(ctx, input, opts...)
}

// ModifyNetworkInterfaceAttributeRequest is a passthrough to the underlying ModifyNetworkInterfaceAttributeRequest.
// It will increment the count of requests made to ModifyNetworkInterfaceAttribute.
func (c *EC2) ModifyNetworkInterfaceAttributeRequest(input *ec2.ModifyNetworkInterfaceAttributeInput) (req *request.Request, output *ec2.ModifyNetworkInterfaceAttributeOutput) {
	c.inc("ModifyNetworkInterfaceAttribute")
	return c.svc.ModifyNetworkInterfaceAttributeRequest(input)
}

// ModifyNetworkInterfaceAttribute is a passthrough to the underlying ModifyNetworkInterfaceAttribute method.
// It will increment the count of requests made to ModifyNetworkInterfaceAttribute.
func (c *EC2) ModifyNetworkInterfaceAttribute(input *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	c.inc("ModifyNetworkInterfaceAttribute")
	return c.svc.ModifyNetworkInterfaceAttribute(input)
}

// ModifyNetworkInterfaceAttributeWithContext is a passthrough to the underlying ModifyNetworkInterfaceAttributeWithContext method.
// It will increment the count of requests made to ModifyNetworkInterfaceAttribute.
func (c *EC2) ModifyNetworkInterfaceAttributeWithContext(ctx aws.Context, input *ec2.ModifyNetworkInterfaceAttributeInput, opts ...request.Option) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	c.inc("ModifyNetworkInterfaceAttribute")
	return c.svc.ModifyNetworkInterfaceAttributeWithContext(ctx, input, opts...)
}

// ModifyReservedInstancesRequest is a passthrough to the underlying ModifyReservedInstancesRequest.
// It will increment the count of requests made to ModifyReservedInstances.
func (c *EC2) ModifyReservedInstancesRequest(input *ec2.ModifyReservedInstancesInput) (req *request.Request, output *ec2.ModifyReservedInstancesOutput) {
	c.inc("ModifyReservedInstances")
	return c.svc.ModifyReservedInstancesRequest(input)
}

// ModifyReservedInstances is a passthrough to the underlying ModifyReservedInstances method.
// It will increment the count of requests made to ModifyReservedInstances.
func (c *EC2) ModifyReservedInstances(input *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error) {
	c.inc("ModifyReservedInstances")
	return c.svc.ModifyReservedInstances(input)
}

// ModifyReservedInstancesWithContext is a passthrough to the underlying ModifyReservedInstancesWithContext method.
// It will increment the count of requests made to ModifyReservedInstances.
func (c *EC2) ModifyReservedInstancesWithContext(ctx aws.Context, input *ec2.ModifyReservedInstancesInput, opts ...request.Option) (*ec2.ModifyReservedInstancesOutput, error) {
	c.inc("ModifyReservedInstances")
	return c.svc.ModifyReservedInstancesWithContext(ctx, input, opts...)
}

// ModifySnapshotAttributeRequest is a passthrough to the underlying ModifySnapshotAttributeRequest.
// It will increment the count of requests made to ModifySnapshotAttribute.
func (c *EC2) ModifySnapshotAttributeRequest(input *ec2.ModifySnapshotAttributeInput) (req *request.Request, output *ec2.ModifySnapshotAttributeOutput) {
	c.inc("ModifySnapshotAttribute")
	return c.svc.ModifySnapshotAttributeRequest(input)
}

// ModifySnapshotAttribute is a passthrough to the underlying ModifySnapshotAttribute method.
// It will increment the count of requests made to ModifySnapshotAttribute.
func (c *EC2) ModifySnapshotAttribute(input *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error) {
	c.inc("ModifySnapshotAttribute")
	return c.svc.ModifySnapshotAttribute(input)
}

// ModifySnapshotAttributeWithContext is a passthrough to the underlying ModifySnapshotAttributeWithContext method.
// It will increment the count of requests made to ModifySnapshotAttribute.
func (c *EC2) ModifySnapshotAttributeWithContext(ctx aws.Context, input *ec2.ModifySnapshotAttributeInput, opts ...request.Option) (*ec2.ModifySnapshotAttributeOutput, error) {
	c.inc("ModifySnapshotAttribute")
	return c.svc.ModifySnapshotAttributeWithContext(ctx, input, opts...)
}

// ModifySpotFleetRequestRequest is a passthrough to the underlying ModifySpotFleetRequestRequest.
// It will increment the count of requests made to ModifySpotFleetRequest.
func (c *EC2) ModifySpotFleetRequestRequest(input *ec2.ModifySpotFleetRequestInput) (req *request.Request, output *ec2.ModifySpotFleetRequestOutput) {
	c.inc("ModifySpotFleetRequest")
	return c.svc.ModifySpotFleetRequestRequest(input)
}

// ModifySpotFleetRequest is a passthrough to the underlying ModifySpotFleetRequest method.
// It will increment the count of requests made to ModifySpotFleetRequest.
func (c *EC2) ModifySpotFleetRequest(input *ec2.ModifySpotFleetRequestInput) (*ec2.ModifySpotFleetRequestOutput, error) {
	c.inc("ModifySpotFleetRequest")
	return c.svc.ModifySpotFleetRequest(input)
}

// ModifySpotFleetRequestWithContext is a passthrough to the underlying ModifySpotFleetRequestWithContext method.
// It will increment the count of requests made to ModifySpotFleetRequest.
func (c *EC2) ModifySpotFleetRequestWithContext(ctx aws.Context, input *ec2.ModifySpotFleetRequestInput, opts ...request.Option) (*ec2.ModifySpotFleetRequestOutput, error) {
	c.inc("ModifySpotFleetRequest")
	return c.svc.ModifySpotFleetRequestWithContext(ctx, input, opts...)
}

// ModifySubnetAttributeRequest is a passthrough to the underlying ModifySubnetAttributeRequest.
// It will increment the count of requests made to ModifySubnetAttribute.
func (c *EC2) ModifySubnetAttributeRequest(input *ec2.ModifySubnetAttributeInput) (req *request.Request, output *ec2.ModifySubnetAttributeOutput) {
	c.inc("ModifySubnetAttribute")
	return c.svc.ModifySubnetAttributeRequest(input)
}

// ModifySubnetAttribute is a passthrough to the underlying ModifySubnetAttribute method.
// It will increment the count of requests made to ModifySubnetAttribute.
func (c *EC2) ModifySubnetAttribute(input *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error) {
	c.inc("ModifySubnetAttribute")
	return c.svc.ModifySubnetAttribute(input)
}

// ModifySubnetAttributeWithContext is a passthrough to the underlying ModifySubnetAttributeWithContext method.
// It will increment the count of requests made to ModifySubnetAttribute.
func (c *EC2) ModifySubnetAttributeWithContext(ctx aws.Context, input *ec2.ModifySubnetAttributeInput, opts ...request.Option) (*ec2.ModifySubnetAttributeOutput, error) {
	c.inc("ModifySubnetAttribute")
	return c.svc.ModifySubnetAttributeWithContext(ctx, input, opts...)
}

// ModifyVolumeRequest is a passthrough to the underlying ModifyVolumeRequest.
// It will increment the count of requests made to ModifyVolume.
func (c *EC2) ModifyVolumeRequest(input *ec2.ModifyVolumeInput) (req *request.Request, output *ec2.ModifyVolumeOutput) {
	c.inc("ModifyVolume")
	return c.svc.ModifyVolumeRequest(input)
}

// ModifyVolume is a passthrough to the underlying ModifyVolume method.
// It will increment the count of requests made to ModifyVolume.
func (c *EC2) ModifyVolume(input *ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error) {
	c.inc("ModifyVolume")
	return c.svc.ModifyVolume(input)
}

// ModifyVolumeWithContext is a passthrough to the underlying ModifyVolumeWithContext method.
// It will increment the count of requests made to ModifyVolume.
func (c *EC2) ModifyVolumeWithContext(ctx aws.Context, input *ec2.ModifyVolumeInput, opts ...request.Option) (*ec2.ModifyVolumeOutput, error) {
	c.inc("ModifyVolume")
	return c.svc.ModifyVolumeWithContext(ctx, input, opts...)
}

// ModifyVolumeAttributeRequest is a passthrough to the underlying ModifyVolumeAttributeRequest.
// It will increment the count of requests made to ModifyVolumeAttribute.
func (c *EC2) ModifyVolumeAttributeRequest(input *ec2.ModifyVolumeAttributeInput) (req *request.Request, output *ec2.ModifyVolumeAttributeOutput) {
	c.inc("ModifyVolumeAttribute")
	return c.svc.ModifyVolumeAttributeRequest(input)
}

// ModifyVolumeAttribute is a passthrough to the underlying ModifyVolumeAttribute method.
// It will increment the count of requests made to ModifyVolumeAttribute.
func (c *EC2) ModifyVolumeAttribute(input *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error) {
	c.inc("ModifyVolumeAttribute")
	return c.svc.ModifyVolumeAttribute(input)
}

// ModifyVolumeAttributeWithContext is a passthrough to the underlying ModifyVolumeAttributeWithContext method.
// It will increment the count of requests made to ModifyVolumeAttribute.
func (c *EC2) ModifyVolumeAttributeWithContext(ctx aws.Context, input *ec2.ModifyVolumeAttributeInput, opts ...request.Option) (*ec2.ModifyVolumeAttributeOutput, error) {
	c.inc("ModifyVolumeAttribute")
	return c.svc.ModifyVolumeAttributeWithContext(ctx, input, opts...)
}

// ModifyVpcAttributeRequest is a passthrough to the underlying ModifyVpcAttributeRequest.
// It will increment the count of requests made to ModifyVpcAttribute.
func (c *EC2) ModifyVpcAttributeRequest(input *ec2.ModifyVpcAttributeInput) (req *request.Request, output *ec2.ModifyVpcAttributeOutput) {
	c.inc("ModifyVpcAttribute")
	return c.svc.ModifyVpcAttributeRequest(input)
}

// ModifyVpcAttribute is a passthrough to the underlying ModifyVpcAttribute method.
// It will increment the count of requests made to ModifyVpcAttribute.
func (c *EC2) ModifyVpcAttribute(input *ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error) {
	c.inc("ModifyVpcAttribute")
	return c.svc.ModifyVpcAttribute(input)
}

// ModifyVpcAttributeWithContext is a passthrough to the underlying ModifyVpcAttributeWithContext method.
// It will increment the count of requests made to ModifyVpcAttribute.
func (c *EC2) ModifyVpcAttributeWithContext(ctx aws.Context, input *ec2.ModifyVpcAttributeInput, opts ...request.Option) (*ec2.ModifyVpcAttributeOutput, error) {
	c.inc("ModifyVpcAttribute")
	return c.svc.ModifyVpcAttributeWithContext(ctx, input, opts...)
}

// ModifyVpcEndpointRequest is a passthrough to the underlying ModifyVpcEndpointRequest.
// It will increment the count of requests made to ModifyVpcEndpoint.
func (c *EC2) ModifyVpcEndpointRequest(input *ec2.ModifyVpcEndpointInput) (req *request.Request, output *ec2.ModifyVpcEndpointOutput) {
	c.inc("ModifyVpcEndpoint")
	return c.svc.ModifyVpcEndpointRequest(input)
}

// ModifyVpcEndpoint is a passthrough to the underlying ModifyVpcEndpoint method.
// It will increment the count of requests made to ModifyVpcEndpoint.
func (c *EC2) ModifyVpcEndpoint(input *ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error) {
	c.inc("ModifyVpcEndpoint")
	return c.svc.ModifyVpcEndpoint(input)
}

// ModifyVpcEndpointWithContext is a passthrough to the underlying ModifyVpcEndpointWithContext method.
// It will increment the count of requests made to ModifyVpcEndpoint.
func (c *EC2) ModifyVpcEndpointWithContext(ctx aws.Context, input *ec2.ModifyVpcEndpointInput, opts ...request.Option) (*ec2.ModifyVpcEndpointOutput, error) {
	c.inc("ModifyVpcEndpoint")
	return c.svc.ModifyVpcEndpointWithContext(ctx, input, opts...)
}

// ModifyVpcPeeringConnectionOptionsRequest is a passthrough to the underlying ModifyVpcPeeringConnectionOptionsRequest.
// It will increment the count of requests made to ModifyVpcPeeringConnectionOptions.
func (c *EC2) ModifyVpcPeeringConnectionOptionsRequest(input *ec2.ModifyVpcPeeringConnectionOptionsInput) (req *request.Request, output *ec2.ModifyVpcPeeringConnectionOptionsOutput) {
	c.inc("ModifyVpcPeeringConnectionOptions")
	return c.svc.ModifyVpcPeeringConnectionOptionsRequest(input)
}

// ModifyVpcPeeringConnectionOptions is a passthrough to the underlying ModifyVpcPeeringConnectionOptions method.
// It will increment the count of requests made to ModifyVpcPeeringConnectionOptions.
func (c *EC2) ModifyVpcPeeringConnectionOptions(input *ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	c.inc("ModifyVpcPeeringConnectionOptions")
	return c.svc.ModifyVpcPeeringConnectionOptions(input)
}

// ModifyVpcPeeringConnectionOptionsWithContext is a passthrough to the underlying ModifyVpcPeeringConnectionOptionsWithContext method.
// It will increment the count of requests made to ModifyVpcPeeringConnectionOptions.
func (c *EC2) ModifyVpcPeeringConnectionOptionsWithContext(ctx aws.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput, opts ...request.Option) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	c.inc("ModifyVpcPeeringConnectionOptions")
	return c.svc.ModifyVpcPeeringConnectionOptionsWithContext(ctx, input, opts...)
}

// ModifyVpcTenancyRequest is a passthrough to the underlying ModifyVpcTenancyRequest.
// It will increment the count of requests made to ModifyVpcTenancy.
func (c *EC2) ModifyVpcTenancyRequest(input *ec2.ModifyVpcTenancyInput) (req *request.Request, output *ec2.ModifyVpcTenancyOutput) {
	c.inc("ModifyVpcTenancy")
	return c.svc.ModifyVpcTenancyRequest(input)
}

// ModifyVpcTenancy is a passthrough to the underlying ModifyVpcTenancy method.
// It will increment the count of requests made to ModifyVpcTenancy.
func (c *EC2) ModifyVpcTenancy(input *ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error) {
	c.inc("ModifyVpcTenancy")
	return c.svc.ModifyVpcTenancy(input)
}

// ModifyVpcTenancyWithContext is a passthrough to the underlying ModifyVpcTenancyWithContext method.
// It will increment the count of requests made to ModifyVpcTenancy.
func (c *EC2) ModifyVpcTenancyWithContext(ctx aws.Context, input *ec2.ModifyVpcTenancyInput, opts ...request.Option) (*ec2.ModifyVpcTenancyOutput, error) {
	c.inc("ModifyVpcTenancy")
	return c.svc.ModifyVpcTenancyWithContext(ctx, input, opts...)
}

// MonitorInstancesRequest is a passthrough to the underlying MonitorInstancesRequest.
// It will increment the count of requests made to MonitorInstances.
func (c *EC2) MonitorInstancesRequest(input *ec2.MonitorInstancesInput) (req *request.Request, output *ec2.MonitorInstancesOutput) {
	c.inc("MonitorInstances")
	return c.svc.MonitorInstancesRequest(input)
}

// MonitorInstances is a passthrough to the underlying MonitorInstances method.
// It will increment the count of requests made to MonitorInstances.
func (c *EC2) MonitorInstances(input *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error) {
	c.inc("MonitorInstances")
	return c.svc.MonitorInstances(input)
}

// MonitorInstancesWithContext is a passthrough to the underlying MonitorInstancesWithContext method.
// It will increment the count of requests made to MonitorInstances.
func (c *EC2) MonitorInstancesWithContext(ctx aws.Context, input *ec2.MonitorInstancesInput, opts ...request.Option) (*ec2.MonitorInstancesOutput, error) {
	c.inc("MonitorInstances")
	return c.svc.MonitorInstancesWithContext(ctx, input, opts...)
}

// MoveAddressToVpcRequest is a passthrough to the underlying MoveAddressToVpcRequest.
// It will increment the count of requests made to MoveAddressToVpc.
func (c *EC2) MoveAddressToVpcRequest(input *ec2.MoveAddressToVpcInput) (req *request.Request, output *ec2.MoveAddressToVpcOutput) {
	c.inc("MoveAddressToVpc")
	return c.svc.MoveAddressToVpcRequest(input)
}

// MoveAddressToVpc is a passthrough to the underlying MoveAddressToVpc method.
// It will increment the count of requests made to MoveAddressToVpc.
func (c *EC2) MoveAddressToVpc(input *ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error) {
	c.inc("MoveAddressToVpc")
	return c.svc.MoveAddressToVpc(input)
}

// MoveAddressToVpcWithContext is a passthrough to the underlying MoveAddressToVpcWithContext method.
// It will increment the count of requests made to MoveAddressToVpc.
func (c *EC2) MoveAddressToVpcWithContext(ctx aws.Context, input *ec2.MoveAddressToVpcInput, opts ...request.Option) (*ec2.MoveAddressToVpcOutput, error) {
	c.inc("MoveAddressToVpc")
	return c.svc.MoveAddressToVpcWithContext(ctx, input, opts...)
}

// PurchaseHostReservationRequest is a passthrough to the underlying PurchaseHostReservationRequest.
// It will increment the count of requests made to PurchaseHostReservation.
func (c *EC2) PurchaseHostReservationRequest(input *ec2.PurchaseHostReservationInput) (req *request.Request, output *ec2.PurchaseHostReservationOutput) {
	c.inc("PurchaseHostReservation")
	return c.svc.PurchaseHostReservationRequest(input)
}

// PurchaseHostReservation is a passthrough to the underlying PurchaseHostReservation method.
// It will increment the count of requests made to PurchaseHostReservation.
func (c *EC2) PurchaseHostReservation(input *ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error) {
	c.inc("PurchaseHostReservation")
	return c.svc.PurchaseHostReservation(input)
}

// PurchaseHostReservationWithContext is a passthrough to the underlying PurchaseHostReservationWithContext method.
// It will increment the count of requests made to PurchaseHostReservation.
func (c *EC2) PurchaseHostReservationWithContext(ctx aws.Context, input *ec2.PurchaseHostReservationInput, opts ...request.Option) (*ec2.PurchaseHostReservationOutput, error) {
	c.inc("PurchaseHostReservation")
	return c.svc.PurchaseHostReservationWithContext(ctx, input, opts...)
}

// PurchaseReservedInstancesOfferingRequest is a passthrough to the underlying PurchaseReservedInstancesOfferingRequest.
// It will increment the count of requests made to PurchaseReservedInstancesOffering.
func (c *EC2) PurchaseReservedInstancesOfferingRequest(input *ec2.PurchaseReservedInstancesOfferingInput) (req *request.Request, output *ec2.PurchaseReservedInstancesOfferingOutput) {
	c.inc("PurchaseReservedInstancesOffering")
	return c.svc.PurchaseReservedInstancesOfferingRequest(input)
}

// PurchaseReservedInstancesOffering is a passthrough to the underlying PurchaseReservedInstancesOffering method.
// It will increment the count of requests made to PurchaseReservedInstancesOffering.
func (c *EC2) PurchaseReservedInstancesOffering(input *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	c.inc("PurchaseReservedInstancesOffering")
	return c.svc.PurchaseReservedInstancesOffering(input)
}

// PurchaseReservedInstancesOfferingWithContext is a passthrough to the underlying PurchaseReservedInstancesOfferingWithContext method.
// It will increment the count of requests made to PurchaseReservedInstancesOffering.
func (c *EC2) PurchaseReservedInstancesOfferingWithContext(ctx aws.Context, input *ec2.PurchaseReservedInstancesOfferingInput, opts ...request.Option) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	c.inc("PurchaseReservedInstancesOffering")
	return c.svc.PurchaseReservedInstancesOfferingWithContext(ctx, input, opts...)
}

// PurchaseScheduledInstancesRequest is a passthrough to the underlying PurchaseScheduledInstancesRequest.
// It will increment the count of requests made to PurchaseScheduledInstances.
func (c *EC2) PurchaseScheduledInstancesRequest(input *ec2.PurchaseScheduledInstancesInput) (req *request.Request, output *ec2.PurchaseScheduledInstancesOutput) {
	c.inc("PurchaseScheduledInstances")
	return c.svc.PurchaseScheduledInstancesRequest(input)
}

// PurchaseScheduledInstances is a passthrough to the underlying PurchaseScheduledInstances method.
// It will increment the count of requests made to PurchaseScheduledInstances.
func (c *EC2) PurchaseScheduledInstances(input *ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error) {
	c.inc("PurchaseScheduledInstances")
	return c.svc.PurchaseScheduledInstances(input)
}

// PurchaseScheduledInstancesWithContext is a passthrough to the underlying PurchaseScheduledInstancesWithContext method.
// It will increment the count of requests made to PurchaseScheduledInstances.
func (c *EC2) PurchaseScheduledInstancesWithContext(ctx aws.Context, input *ec2.PurchaseScheduledInstancesInput, opts ...request.Option) (*ec2.PurchaseScheduledInstancesOutput, error) {
	c.inc("PurchaseScheduledInstances")
	return c.svc.PurchaseScheduledInstancesWithContext(ctx, input, opts...)
}

// RebootInstancesRequest is a passthrough to the underlying RebootInstancesRequest.
// It will increment the count of requests made to RebootInstances.
func (c *EC2) RebootInstancesRequest(input *ec2.RebootInstancesInput) (req *request.Request, output *ec2.RebootInstancesOutput) {
	c.inc("RebootInstances")
	return c.svc.RebootInstancesRequest(input)
}

// RebootInstances is a passthrough to the underlying RebootInstances method.
// It will increment the count of requests made to RebootInstances.
func (c *EC2) RebootInstances(input *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error) {
	c.inc("RebootInstances")
	return c.svc.RebootInstances(input)
}

// RebootInstancesWithContext is a passthrough to the underlying RebootInstancesWithContext method.
// It will increment the count of requests made to RebootInstances.
func (c *EC2) RebootInstancesWithContext(ctx aws.Context, input *ec2.RebootInstancesInput, opts ...request.Option) (*ec2.RebootInstancesOutput, error) {
	c.inc("RebootInstances")
	return c.svc.RebootInstancesWithContext(ctx, input, opts...)
}

// RegisterImageRequest is a passthrough to the underlying RegisterImageRequest.
// It will increment the count of requests made to RegisterImage.
func (c *EC2) RegisterImageRequest(input *ec2.RegisterImageInput) (req *request.Request, output *ec2.RegisterImageOutput) {
	c.inc("RegisterImage")
	return c.svc.RegisterImageRequest(input)
}

// RegisterImage is a passthrough to the underlying RegisterImage method.
// It will increment the count of requests made to RegisterImage.
func (c *EC2) RegisterImage(input *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error) {
	c.inc("RegisterImage")
	return c.svc.RegisterImage(input)
}

// RegisterImageWithContext is a passthrough to the underlying RegisterImageWithContext method.
// It will increment the count of requests made to RegisterImage.
func (c *EC2) RegisterImageWithContext(ctx aws.Context, input *ec2.RegisterImageInput, opts ...request.Option) (*ec2.RegisterImageOutput, error) {
	c.inc("RegisterImage")
	return c.svc.RegisterImageWithContext(ctx, input, opts...)
}

// RejectVpcPeeringConnectionRequest is a passthrough to the underlying RejectVpcPeeringConnectionRequest.
// It will increment the count of requests made to RejectVpcPeeringConnection.
func (c *EC2) RejectVpcPeeringConnectionRequest(input *ec2.RejectVpcPeeringConnectionInput) (req *request.Request, output *ec2.RejectVpcPeeringConnectionOutput) {
	c.inc("RejectVpcPeeringConnection")
	return c.svc.RejectVpcPeeringConnectionRequest(input)
}

// RejectVpcPeeringConnection is a passthrough to the underlying RejectVpcPeeringConnection method.
// It will increment the count of requests made to RejectVpcPeeringConnection.
func (c *EC2) RejectVpcPeeringConnection(input *ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	c.inc("RejectVpcPeeringConnection")
	return c.svc.RejectVpcPeeringConnection(input)
}

// RejectVpcPeeringConnectionWithContext is a passthrough to the underlying RejectVpcPeeringConnectionWithContext method.
// It will increment the count of requests made to RejectVpcPeeringConnection.
func (c *EC2) RejectVpcPeeringConnectionWithContext(ctx aws.Context, input *ec2.RejectVpcPeeringConnectionInput, opts ...request.Option) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	c.inc("RejectVpcPeeringConnection")
	return c.svc.RejectVpcPeeringConnectionWithContext(ctx, input, opts...)
}

// ReleaseAddressRequest is a passthrough to the underlying ReleaseAddressRequest.
// It will increment the count of requests made to ReleaseAddress.
func (c *EC2) ReleaseAddressRequest(input *ec2.ReleaseAddressInput) (req *request.Request, output *ec2.ReleaseAddressOutput) {
	c.inc("ReleaseAddress")
	return c.svc.ReleaseAddressRequest(input)
}

// ReleaseAddress is a passthrough to the underlying ReleaseAddress method.
// It will increment the count of requests made to ReleaseAddress.
func (c *EC2) ReleaseAddress(input *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error) {
	c.inc("ReleaseAddress")
	return c.svc.ReleaseAddress(input)
}

// ReleaseAddressWithContext is a passthrough to the underlying ReleaseAddressWithContext method.
// It will increment the count of requests made to ReleaseAddress.
func (c *EC2) ReleaseAddressWithContext(ctx aws.Context, input *ec2.ReleaseAddressInput, opts ...request.Option) (*ec2.ReleaseAddressOutput, error) {
	c.inc("ReleaseAddress")
	return c.svc.ReleaseAddressWithContext(ctx, input, opts...)
}

// ReleaseHostsRequest is a passthrough to the underlying ReleaseHostsRequest.
// It will increment the count of requests made to ReleaseHosts.
func (c *EC2) ReleaseHostsRequest(input *ec2.ReleaseHostsInput) (req *request.Request, output *ec2.ReleaseHostsOutput) {
	c.inc("ReleaseHosts")
	return c.svc.ReleaseHostsRequest(input)
}

// ReleaseHosts is a passthrough to the underlying ReleaseHosts method.
// It will increment the count of requests made to ReleaseHosts.
func (c *EC2) ReleaseHosts(input *ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error) {
	c.inc("ReleaseHosts")
	return c.svc.ReleaseHosts(input)
}

// ReleaseHostsWithContext is a passthrough to the underlying ReleaseHostsWithContext method.
// It will increment the count of requests made to ReleaseHosts.
func (c *EC2) ReleaseHostsWithContext(ctx aws.Context, input *ec2.ReleaseHostsInput, opts ...request.Option) (*ec2.ReleaseHostsOutput, error) {
	c.inc("ReleaseHosts")
	return c.svc.ReleaseHostsWithContext(ctx, input, opts...)
}

// ReplaceIamInstanceProfileAssociationRequest is a passthrough to the underlying ReplaceIamInstanceProfileAssociationRequest.
// It will increment the count of requests made to ReplaceIamInstanceProfileAssociation.
func (c *EC2) ReplaceIamInstanceProfileAssociationRequest(input *ec2.ReplaceIamInstanceProfileAssociationInput) (req *request.Request, output *ec2.ReplaceIamInstanceProfileAssociationOutput) {
	c.inc("ReplaceIamInstanceProfileAssociation")
	return c.svc.ReplaceIamInstanceProfileAssociationRequest(input)
}

// ReplaceIamInstanceProfileAssociation is a passthrough to the underlying ReplaceIamInstanceProfileAssociation method.
// It will increment the count of requests made to ReplaceIamInstanceProfileAssociation.
func (c *EC2) ReplaceIamInstanceProfileAssociation(input *ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	c.inc("ReplaceIamInstanceProfileAssociation")
	return c.svc.ReplaceIamInstanceProfileAssociation(input)
}

// ReplaceIamInstanceProfileAssociationWithContext is a passthrough to the underlying ReplaceIamInstanceProfileAssociationWithContext method.
// It will increment the count of requests made to ReplaceIamInstanceProfileAssociation.
func (c *EC2) ReplaceIamInstanceProfileAssociationWithContext(ctx aws.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput, opts ...request.Option) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	c.inc("ReplaceIamInstanceProfileAssociation")
	return c.svc.ReplaceIamInstanceProfileAssociationWithContext(ctx, input, opts...)
}

// ReplaceNetworkAclAssociationRequest is a passthrough to the underlying ReplaceNetworkAclAssociationRequest.
// It will increment the count of requests made to ReplaceNetworkAclAssociation.
func (c *EC2) ReplaceNetworkAclAssociationRequest(input *ec2.ReplaceNetworkAclAssociationInput) (req *request.Request, output *ec2.ReplaceNetworkAclAssociationOutput) {
	c.inc("ReplaceNetworkAclAssociation")
	return c.svc.ReplaceNetworkAclAssociationRequest(input)
}

// ReplaceNetworkAclAssociation is a passthrough to the underlying ReplaceNetworkAclAssociation method.
// It will increment the count of requests made to ReplaceNetworkAclAssociation.
func (c *EC2) ReplaceNetworkAclAssociation(input *ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	c.inc("ReplaceNetworkAclAssociation")
	return c.svc.ReplaceNetworkAclAssociation(input)
}

// ReplaceNetworkAclAssociationWithContext is a passthrough to the underlying ReplaceNetworkAclAssociationWithContext method.
// It will increment the count of requests made to ReplaceNetworkAclAssociation.
func (c *EC2) ReplaceNetworkAclAssociationWithContext(ctx aws.Context, input *ec2.ReplaceNetworkAclAssociationInput, opts ...request.Option) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	c.inc("ReplaceNetworkAclAssociation")
	return c.svc.ReplaceNetworkAclAssociationWithContext(ctx, input, opts...)
}

// ReplaceNetworkAclEntryRequest is a passthrough to the underlying ReplaceNetworkAclEntryRequest.
// It will increment the count of requests made to ReplaceNetworkAclEntry.
func (c *EC2) ReplaceNetworkAclEntryRequest(input *ec2.ReplaceNetworkAclEntryInput) (req *request.Request, output *ec2.ReplaceNetworkAclEntryOutput) {
	c.inc("ReplaceNetworkAclEntry")
	return c.svc.ReplaceNetworkAclEntryRequest(input)
}

// ReplaceNetworkAclEntry is a passthrough to the underlying ReplaceNetworkAclEntry method.
// It will increment the count of requests made to ReplaceNetworkAclEntry.
func (c *EC2) ReplaceNetworkAclEntry(input *ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	c.inc("ReplaceNetworkAclEntry")
	return c.svc.ReplaceNetworkAclEntry(input)
}

// ReplaceNetworkAclEntryWithContext is a passthrough to the underlying ReplaceNetworkAclEntryWithContext method.
// It will increment the count of requests made to ReplaceNetworkAclEntry.
func (c *EC2) ReplaceNetworkAclEntryWithContext(ctx aws.Context, input *ec2.ReplaceNetworkAclEntryInput, opts ...request.Option) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	c.inc("ReplaceNetworkAclEntry")
	return c.svc.ReplaceNetworkAclEntryWithContext(ctx, input, opts...)
}

// ReplaceRouteRequest is a passthrough to the underlying ReplaceRouteRequest.
// It will increment the count of requests made to ReplaceRoute.
func (c *EC2) ReplaceRouteRequest(input *ec2.ReplaceRouteInput) (req *request.Request, output *ec2.ReplaceRouteOutput) {
	c.inc("ReplaceRoute")
	return c.svc.ReplaceRouteRequest(input)
}

// ReplaceRoute is a passthrough to the underlying ReplaceRoute method.
// It will increment the count of requests made to ReplaceRoute.
func (c *EC2) ReplaceRoute(input *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error) {
	c.inc("ReplaceRoute")
	return c.svc.ReplaceRoute(input)
}

// ReplaceRouteWithContext is a passthrough to the underlying ReplaceRouteWithContext method.
// It will increment the count of requests made to ReplaceRoute.
func (c *EC2) ReplaceRouteWithContext(ctx aws.Context, input *ec2.ReplaceRouteInput, opts ...request.Option) (*ec2.ReplaceRouteOutput, error) {
	c.inc("ReplaceRoute")
	return c.svc.ReplaceRouteWithContext(ctx, input, opts...)
}

// ReplaceRouteTableAssociationRequest is a passthrough to the underlying ReplaceRouteTableAssociationRequest.
// It will increment the count of requests made to ReplaceRouteTableAssociation.
func (c *EC2) ReplaceRouteTableAssociationRequest(input *ec2.ReplaceRouteTableAssociationInput) (req *request.Request, output *ec2.ReplaceRouteTableAssociationOutput) {
	c.inc("ReplaceRouteTableAssociation")
	return c.svc.ReplaceRouteTableAssociationRequest(input)
}

// ReplaceRouteTableAssociation is a passthrough to the underlying ReplaceRouteTableAssociation method.
// It will increment the count of requests made to ReplaceRouteTableAssociation.
func (c *EC2) ReplaceRouteTableAssociation(input *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	c.inc("ReplaceRouteTableAssociation")
	return c.svc.ReplaceRouteTableAssociation(input)
}

// ReplaceRouteTableAssociationWithContext is a passthrough to the underlying ReplaceRouteTableAssociationWithContext method.
// It will increment the count of requests made to ReplaceRouteTableAssociation.
func (c *EC2) ReplaceRouteTableAssociationWithContext(ctx aws.Context, input *ec2.ReplaceRouteTableAssociationInput, opts ...request.Option) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	c.inc("ReplaceRouteTableAssociation")
	return c.svc.ReplaceRouteTableAssociationWithContext(ctx, input, opts...)
}

// ReportInstanceStatusRequest is a passthrough to the underlying ReportInstanceStatusRequest.
// It will increment the count of requests made to ReportInstanceStatus.
func (c *EC2) ReportInstanceStatusRequest(input *ec2.ReportInstanceStatusInput) (req *request.Request, output *ec2.ReportInstanceStatusOutput) {
	c.inc("ReportInstanceStatus")
	return c.svc.ReportInstanceStatusRequest(input)
}

// ReportInstanceStatus is a passthrough to the underlying ReportInstanceStatus method.
// It will increment the count of requests made to ReportInstanceStatus.
func (c *EC2) ReportInstanceStatus(input *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error) {
	c.inc("ReportInstanceStatus")
	return c.svc.ReportInstanceStatus(input)
}

// ReportInstanceStatusWithContext is a passthrough to the underlying ReportInstanceStatusWithContext method.
// It will increment the count of requests made to ReportInstanceStatus.
func (c *EC2) ReportInstanceStatusWithContext(ctx aws.Context, input *ec2.ReportInstanceStatusInput, opts ...request.Option) (*ec2.ReportInstanceStatusOutput, error) {
	c.inc("ReportInstanceStatus")
	return c.svc.ReportInstanceStatusWithContext(ctx, input, opts...)
}

// RequestSpotFleetRequest is a passthrough to the underlying RequestSpotFleetRequest.
// It will increment the count of requests made to RequestSpotFleet.
func (c *EC2) RequestSpotFleetRequest(input *ec2.RequestSpotFleetInput) (req *request.Request, output *ec2.RequestSpotFleetOutput) {
	c.inc("RequestSpotFleet")
	return c.svc.RequestSpotFleetRequest(input)
}

// RequestSpotFleet is a passthrough to the underlying RequestSpotFleet method.
// It will increment the count of requests made to RequestSpotFleet.
func (c *EC2) RequestSpotFleet(input *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error) {
	c.inc("RequestSpotFleet")
	return c.svc.RequestSpotFleet(input)
}

// RequestSpotFleetWithContext is a passthrough to the underlying RequestSpotFleetWithContext method.
// It will increment the count of requests made to RequestSpotFleet.
func (c *EC2) RequestSpotFleetWithContext(ctx aws.Context, input *ec2.RequestSpotFleetInput, opts ...request.Option) (*ec2.RequestSpotFleetOutput, error) {
	c.inc("RequestSpotFleet")
	return c.svc.RequestSpotFleetWithContext(ctx, input, opts...)
}

// RequestSpotInstancesRequest is a passthrough to the underlying RequestSpotInstancesRequest.
// It will increment the count of requests made to RequestSpotInstances.
func (c *EC2) RequestSpotInstancesRequest(input *ec2.RequestSpotInstancesInput) (req *request.Request, output *ec2.RequestSpotInstancesOutput) {
	c.inc("RequestSpotInstances")
	return c.svc.RequestSpotInstancesRequest(input)
}

// RequestSpotInstances is a passthrough to the underlying RequestSpotInstances method.
// It will increment the count of requests made to RequestSpotInstances.
func (c *EC2) RequestSpotInstances(input *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error) {
	c.inc("RequestSpotInstances")
	return c.svc.RequestSpotInstances(input)
}

// RequestSpotInstancesWithContext is a passthrough to the underlying RequestSpotInstancesWithContext method.
// It will increment the count of requests made to RequestSpotInstances.
func (c *EC2) RequestSpotInstancesWithContext(ctx aws.Context, input *ec2.RequestSpotInstancesInput, opts ...request.Option) (*ec2.RequestSpotInstancesOutput, error) {
	c.inc("RequestSpotInstances")
	return c.svc.RequestSpotInstancesWithContext(ctx, input, opts...)
}

// ResetFpgaImageAttributeRequest is a passthrough to the underlying ResetFpgaImageAttributeRequest.
// It will increment the count of requests made to ResetFpgaImageAttribute.
func (c *EC2) ResetFpgaImageAttributeRequest(input *ec2.ResetFpgaImageAttributeInput) (req *request.Request, output *ec2.ResetFpgaImageAttributeOutput) {
	c.inc("ResetFpgaImageAttribute")
	return c.svc.ResetFpgaImageAttributeRequest(input)
}

// ResetFpgaImageAttribute is a passthrough to the underlying ResetFpgaImageAttribute method.
// It will increment the count of requests made to ResetFpgaImageAttribute.
func (c *EC2) ResetFpgaImageAttribute(input *ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error) {
	c.inc("ResetFpgaImageAttribute")
	return c.svc.ResetFpgaImageAttribute(input)
}

// ResetFpgaImageAttributeWithContext is a passthrough to the underlying ResetFpgaImageAttributeWithContext method.
// It will increment the count of requests made to ResetFpgaImageAttribute.
func (c *EC2) ResetFpgaImageAttributeWithContext(ctx aws.Context, input *ec2.ResetFpgaImageAttributeInput, opts ...request.Option) (*ec2.ResetFpgaImageAttributeOutput, error) {
	c.inc("ResetFpgaImageAttribute")
	return c.svc.ResetFpgaImageAttributeWithContext(ctx, input, opts...)
}

// ResetImageAttributeRequest is a passthrough to the underlying ResetImageAttributeRequest.
// It will increment the count of requests made to ResetImageAttribute.
func (c *EC2) ResetImageAttributeRequest(input *ec2.ResetImageAttributeInput) (req *request.Request, output *ec2.ResetImageAttributeOutput) {
	c.inc("ResetImageAttribute")
	return c.svc.ResetImageAttributeRequest(input)
}

// ResetImageAttribute is a passthrough to the underlying ResetImageAttribute method.
// It will increment the count of requests made to ResetImageAttribute.
func (c *EC2) ResetImageAttribute(input *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error) {
	c.inc("ResetImageAttribute")
	return c.svc.ResetImageAttribute(input)
}

// ResetImageAttributeWithContext is a passthrough to the underlying ResetImageAttributeWithContext method.
// It will increment the count of requests made to ResetImageAttribute.
func (c *EC2) ResetImageAttributeWithContext(ctx aws.Context, input *ec2.ResetImageAttributeInput, opts ...request.Option) (*ec2.ResetImageAttributeOutput, error) {
	c.inc("ResetImageAttribute")
	return c.svc.ResetImageAttributeWithContext(ctx, input, opts...)
}

// ResetInstanceAttributeRequest is a passthrough to the underlying ResetInstanceAttributeRequest.
// It will increment the count of requests made to ResetInstanceAttribute.
func (c *EC2) ResetInstanceAttributeRequest(input *ec2.ResetInstanceAttributeInput) (req *request.Request, output *ec2.ResetInstanceAttributeOutput) {
	c.inc("ResetInstanceAttribute")
	return c.svc.ResetInstanceAttributeRequest(input)
}

// ResetInstanceAttribute is a passthrough to the underlying ResetInstanceAttribute method.
// It will increment the count of requests made to ResetInstanceAttribute.
func (c *EC2) ResetInstanceAttribute(input *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error) {
	c.inc("ResetInstanceAttribute")
	return c.svc.ResetInstanceAttribute(input)
}

// ResetInstanceAttributeWithContext is a passthrough to the underlying ResetInstanceAttributeWithContext method.
// It will increment the count of requests made to ResetInstanceAttribute.
func (c *EC2) ResetInstanceAttributeWithContext(ctx aws.Context, input *ec2.ResetInstanceAttributeInput, opts ...request.Option) (*ec2.ResetInstanceAttributeOutput, error) {
	c.inc("ResetInstanceAttribute")
	return c.svc.ResetInstanceAttributeWithContext(ctx, input, opts...)
}

// ResetNetworkInterfaceAttributeRequest is a passthrough to the underlying ResetNetworkInterfaceAttributeRequest.
// It will increment the count of requests made to ResetNetworkInterfaceAttribute.
func (c *EC2) ResetNetworkInterfaceAttributeRequest(input *ec2.ResetNetworkInterfaceAttributeInput) (req *request.Request, output *ec2.ResetNetworkInterfaceAttributeOutput) {
	c.inc("ResetNetworkInterfaceAttribute")
	return c.svc.ResetNetworkInterfaceAttributeRequest(input)
}

// ResetNetworkInterfaceAttribute is a passthrough to the underlying ResetNetworkInterfaceAttribute method.
// It will increment the count of requests made to ResetNetworkInterfaceAttribute.
func (c *EC2) ResetNetworkInterfaceAttribute(input *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	c.inc("ResetNetworkInterfaceAttribute")
	return c.svc.ResetNetworkInterfaceAttribute(input)
}

// ResetNetworkInterfaceAttributeWithContext is a passthrough to the underlying ResetNetworkInterfaceAttributeWithContext method.
// It will increment the count of requests made to ResetNetworkInterfaceAttribute.
func (c *EC2) ResetNetworkInterfaceAttributeWithContext(ctx aws.Context, input *ec2.ResetNetworkInterfaceAttributeInput, opts ...request.Option) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	c.inc("ResetNetworkInterfaceAttribute")
	return c.svc.ResetNetworkInterfaceAttributeWithContext(ctx, input, opts...)
}

// ResetSnapshotAttributeRequest is a passthrough to the underlying ResetSnapshotAttributeRequest.
// It will increment the count of requests made to ResetSnapshotAttribute.
func (c *EC2) ResetSnapshotAttributeRequest(input *ec2.ResetSnapshotAttributeInput) (req *request.Request, output *ec2.ResetSnapshotAttributeOutput) {
	c.inc("ResetSnapshotAttribute")
	return c.svc.ResetSnapshotAttributeRequest(input)
}

// ResetSnapshotAttribute is a passthrough to the underlying ResetSnapshotAttribute method.
// It will increment the count of requests made to ResetSnapshotAttribute.
func (c *EC2) ResetSnapshotAttribute(input *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error) {
	c.inc("ResetSnapshotAttribute")
	return c.svc.ResetSnapshotAttribute(input)
}

// ResetSnapshotAttributeWithContext is a passthrough to the underlying ResetSnapshotAttributeWithContext method.
// It will increment the count of requests made to ResetSnapshotAttribute.
func (c *EC2) ResetSnapshotAttributeWithContext(ctx aws.Context, input *ec2.ResetSnapshotAttributeInput, opts ...request.Option) (*ec2.ResetSnapshotAttributeOutput, error) {
	c.inc("ResetSnapshotAttribute")
	return c.svc.ResetSnapshotAttributeWithContext(ctx, input, opts...)
}

// RestoreAddressToClassicRequest is a passthrough to the underlying RestoreAddressToClassicRequest.
// It will increment the count of requests made to RestoreAddressToClassic.
func (c *EC2) RestoreAddressToClassicRequest(input *ec2.RestoreAddressToClassicInput) (req *request.Request, output *ec2.RestoreAddressToClassicOutput) {
	c.inc("RestoreAddressToClassic")
	return c.svc.RestoreAddressToClassicRequest(input)
}

// RestoreAddressToClassic is a passthrough to the underlying RestoreAddressToClassic method.
// It will increment the count of requests made to RestoreAddressToClassic.
func (c *EC2) RestoreAddressToClassic(input *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error) {
	c.inc("RestoreAddressToClassic")
	return c.svc.RestoreAddressToClassic(input)
}

// RestoreAddressToClassicWithContext is a passthrough to the underlying RestoreAddressToClassicWithContext method.
// It will increment the count of requests made to RestoreAddressToClassic.
func (c *EC2) RestoreAddressToClassicWithContext(ctx aws.Context, input *ec2.RestoreAddressToClassicInput, opts ...request.Option) (*ec2.RestoreAddressToClassicOutput, error) {
	c.inc("RestoreAddressToClassic")
	return c.svc.RestoreAddressToClassicWithContext(ctx, input, opts...)
}

// RevokeSecurityGroupEgressRequest is a passthrough to the underlying RevokeSecurityGroupEgressRequest.
// It will increment the count of requests made to RevokeSecurityGroupEgress.
func (c *EC2) RevokeSecurityGroupEgressRequest(input *ec2.RevokeSecurityGroupEgressInput) (req *request.Request, output *ec2.RevokeSecurityGroupEgressOutput) {
	c.inc("RevokeSecurityGroupEgress")
	return c.svc.RevokeSecurityGroupEgressRequest(input)
}

// RevokeSecurityGroupEgress is a passthrough to the underlying RevokeSecurityGroupEgress method.
// It will increment the count of requests made to RevokeSecurityGroupEgress.
func (c *EC2) RevokeSecurityGroupEgress(input *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	c.inc("RevokeSecurityGroupEgress")
	return c.svc.RevokeSecurityGroupEgress(input)
}

// RevokeSecurityGroupEgressWithContext is a passthrough to the underlying RevokeSecurityGroupEgressWithContext method.
// It will increment the count of requests made to RevokeSecurityGroupEgress.
func (c *EC2) RevokeSecurityGroupEgressWithContext(ctx aws.Context, input *ec2.RevokeSecurityGroupEgressInput, opts ...request.Option) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	c.inc("RevokeSecurityGroupEgress")
	return c.svc.RevokeSecurityGroupEgressWithContext(ctx, input, opts...)
}

// RevokeSecurityGroupIngressRequest is a passthrough to the underlying RevokeSecurityGroupIngressRequest.
// It will increment the count of requests made to RevokeSecurityGroupIngress.
func (c *EC2) RevokeSecurityGroupIngressRequest(input *ec2.RevokeSecurityGroupIngressInput) (req *request.Request, output *ec2.RevokeSecurityGroupIngressOutput) {
	c.inc("RevokeSecurityGroupIngress")
	return c.svc.RevokeSecurityGroupIngressRequest(input)
}

// RevokeSecurityGroupIngress is a passthrough to the underlying RevokeSecurityGroupIngress method.
// It will increment the count of requests made to RevokeSecurityGroupIngress.
func (c *EC2) RevokeSecurityGroupIngress(input *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	c.inc("RevokeSecurityGroupIngress")
	return c.svc.RevokeSecurityGroupIngress(input)
}

// RevokeSecurityGroupIngressWithContext is a passthrough to the underlying RevokeSecurityGroupIngressWithContext method.
// It will increment the count of requests made to RevokeSecurityGroupIngress.
func (c *EC2) RevokeSecurityGroupIngressWithContext(ctx aws.Context, input *ec2.RevokeSecurityGroupIngressInput, opts ...request.Option) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	c.inc("RevokeSecurityGroupIngress")
	return c.svc.RevokeSecurityGroupIngressWithContext(ctx, input, opts...)
}

// RunInstancesRequest is a passthrough to the underlying RunInstancesRequest.
// It will increment the count of requests made to RunInstances.
func (c *EC2) RunInstancesRequest(input *ec2.RunInstancesInput) (req *request.Request, output *ec2.Reservation) {
	c.inc("RunInstances")
	return c.svc.RunInstancesRequest(input)
}

// RunInstances is a passthrough to the underlying RunInstances method.
// It will increment the count of requests made to RunInstances.
func (c *EC2) RunInstances(input *ec2.RunInstancesInput) (*ec2.Reservation, error) {
	c.inc("RunInstances")
	return c.svc.RunInstances(input)
}

// RunInstancesWithContext is a passthrough to the underlying RunInstancesWithContext method.
// It will increment the count of requests made to RunInstances.
func (c *EC2) RunInstancesWithContext(ctx aws.Context, input *ec2.RunInstancesInput, opts ...request.Option) (*ec2.Reservation, error) {
	c.inc("RunInstances")
	return c.svc.RunInstancesWithContext(ctx, input, opts...)
}

// RunScheduledInstancesRequest is a passthrough to the underlying RunScheduledInstancesRequest.
// It will increment the count of requests made to RunScheduledInstances.
func (c *EC2) RunScheduledInstancesRequest(input *ec2.RunScheduledInstancesInput) (req *request.Request, output *ec2.RunScheduledInstancesOutput) {
	c.inc("RunScheduledInstances")
	return c.svc.RunScheduledInstancesRequest(input)
}

// RunScheduledInstances is a passthrough to the underlying RunScheduledInstances method.
// It will increment the count of requests made to RunScheduledInstances.
func (c *EC2) RunScheduledInstances(input *ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error) {
	c.inc("RunScheduledInstances")
	return c.svc.RunScheduledInstances(input)
}

// RunScheduledInstancesWithContext is a passthrough to the underlying RunScheduledInstancesWithContext method.
// It will increment the count of requests made to RunScheduledInstances.
func (c *EC2) RunScheduledInstancesWithContext(ctx aws.Context, input *ec2.RunScheduledInstancesInput, opts ...request.Option) (*ec2.RunScheduledInstancesOutput, error) {
	c.inc("RunScheduledInstances")
	return c.svc.RunScheduledInstancesWithContext(ctx, input, opts...)
}

// StartInstancesRequest is a passthrough to the underlying StartInstancesRequest.
// It will increment the count of requests made to StartInstances.
func (c *EC2) StartInstancesRequest(input *ec2.StartInstancesInput) (req *request.Request, output *ec2.StartInstancesOutput) {
	c.inc("StartInstances")
	return c.svc.StartInstancesRequest(input)
}

// StartInstances is a passthrough to the underlying StartInstances method.
// It will increment the count of requests made to StartInstances.
func (c *EC2) StartInstances(input *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error) {
	c.inc("StartInstances")
	return c.svc.StartInstances(input)
}

// StartInstancesWithContext is a passthrough to the underlying StartInstancesWithContext method.
// It will increment the count of requests made to StartInstances.
func (c *EC2) StartInstancesWithContext(ctx aws.Context, input *ec2.StartInstancesInput, opts ...request.Option) (*ec2.StartInstancesOutput, error) {
	c.inc("StartInstances")
	return c.svc.StartInstancesWithContext(ctx, input, opts...)
}

// StopInstancesRequest is a passthrough to the underlying StopInstancesRequest.
// It will increment the count of requests made to StopInstances.
func (c *EC2) StopInstancesRequest(input *ec2.StopInstancesInput) (req *request.Request, output *ec2.StopInstancesOutput) {
	c.inc("StopInstances")
	return c.svc.StopInstancesRequest(input)
}

// StopInstances is a passthrough to the underlying StopInstances method.
// It will increment the count of requests made to StopInstances.
func (c *EC2) StopInstances(input *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error) {
	c.inc("StopInstances")
	return c.svc.StopInstances(input)
}

// StopInstancesWithContext is a passthrough to the underlying StopInstancesWithContext method.
// It will increment the count of requests made to StopInstances.
func (c *EC2) StopInstancesWithContext(ctx aws.Context, input *ec2.StopInstancesInput, opts ...request.Option) (*ec2.StopInstancesOutput, error) {
	c.inc("StopInstances")
	return c.svc.StopInstancesWithContext(ctx, input, opts...)
}

// TerminateInstancesRequest is a passthrough to the underlying TerminateInstancesRequest.
// It will increment the count of requests made to TerminateInstances.
func (c *EC2) TerminateInstancesRequest(input *ec2.TerminateInstancesInput) (req *request.Request, output *ec2.TerminateInstancesOutput) {
	c.inc("TerminateInstances")
	return c.svc.TerminateInstancesRequest(input)
}

// TerminateInstances is a passthrough to the underlying TerminateInstances method.
// It will increment the count of requests made to TerminateInstances.
func (c *EC2) TerminateInstances(input *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error) {
	c.inc("TerminateInstances")
	return c.svc.TerminateInstances(input)
}

// TerminateInstancesWithContext is a passthrough to the underlying TerminateInstancesWithContext method.
// It will increment the count of requests made to TerminateInstances.
func (c *EC2) TerminateInstancesWithContext(ctx aws.Context, input *ec2.TerminateInstancesInput, opts ...request.Option) (*ec2.TerminateInstancesOutput, error) {
	c.inc("TerminateInstances")
	return c.svc.TerminateInstancesWithContext(ctx, input, opts...)
}

// UnassignIpv6AddressesRequest is a passthrough to the underlying UnassignIpv6AddressesRequest.
// It will increment the count of requests made to UnassignIpv6Addresses.
func (c *EC2) UnassignIpv6AddressesRequest(input *ec2.UnassignIpv6AddressesInput) (req *request.Request, output *ec2.UnassignIpv6AddressesOutput) {
	c.inc("UnassignIpv6Addresses")
	return c.svc.UnassignIpv6AddressesRequest(input)
}

// UnassignIpv6Addresses is a passthrough to the underlying UnassignIpv6Addresses method.
// It will increment the count of requests made to UnassignIpv6Addresses.
func (c *EC2) UnassignIpv6Addresses(input *ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error) {
	c.inc("UnassignIpv6Addresses")
	return c.svc.UnassignIpv6Addresses(input)
}

// UnassignIpv6AddressesWithContext is a passthrough to the underlying UnassignIpv6AddressesWithContext method.
// It will increment the count of requests made to UnassignIpv6Addresses.
func (c *EC2) UnassignIpv6AddressesWithContext(ctx aws.Context, input *ec2.UnassignIpv6AddressesInput, opts ...request.Option) (*ec2.UnassignIpv6AddressesOutput, error) {
	c.inc("UnassignIpv6Addresses")
	return c.svc.UnassignIpv6AddressesWithContext(ctx, input, opts...)
}

// UnassignPrivateIpAddressesRequest is a passthrough to the underlying UnassignPrivateIpAddressesRequest.
// It will increment the count of requests made to UnassignPrivateIpAddresses.
func (c *EC2) UnassignPrivateIpAddressesRequest(input *ec2.UnassignPrivateIpAddressesInput) (req *request.Request, output *ec2.UnassignPrivateIpAddressesOutput) {
	c.inc("UnassignPrivateIpAddresses")
	return c.svc.UnassignPrivateIpAddressesRequest(input)
}

// UnassignPrivateIpAddresses is a passthrough to the underlying UnassignPrivateIpAddresses method.
// It will increment the count of requests made to UnassignPrivateIpAddresses.
func (c *EC2) UnassignPrivateIpAddresses(input *ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	c.inc("UnassignPrivateIpAddresses")
	return c.svc.UnassignPrivateIpAddresses(input)
}

// UnassignPrivateIpAddressesWithContext is a passthrough to the underlying UnassignPrivateIpAddressesWithContext method.
// It will increment the count of requests made to UnassignPrivateIpAddresses.
func (c *EC2) UnassignPrivateIpAddressesWithContext(ctx aws.Context, input *ec2.UnassignPrivateIpAddressesInput, opts ...request.Option) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	c.inc("UnassignPrivateIpAddresses")
	return c.svc.UnassignPrivateIpAddressesWithContext(ctx, input, opts...)
}

// UnmonitorInstancesRequest is a passthrough to the underlying UnmonitorInstancesRequest.
// It will increment the count of requests made to UnmonitorInstances.
func (c *EC2) UnmonitorInstancesRequest(input *ec2.UnmonitorInstancesInput) (req *request.Request, output *ec2.UnmonitorInstancesOutput) {
	c.inc("UnmonitorInstances")
	return c.svc.UnmonitorInstancesRequest(input)
}

// UnmonitorInstances is a passthrough to the underlying UnmonitorInstances method.
// It will increment the count of requests made to UnmonitorInstances.
func (c *EC2) UnmonitorInstances(input *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error) {
	c.inc("UnmonitorInstances")
	return c.svc.UnmonitorInstances(input)
}

// UnmonitorInstancesWithContext is a passthrough to the underlying UnmonitorInstancesWithContext method.
// It will increment the count of requests made to UnmonitorInstances.
func (c *EC2) UnmonitorInstancesWithContext(ctx aws.Context, input *ec2.UnmonitorInstancesInput, opts ...request.Option) (*ec2.UnmonitorInstancesOutput, error) {
	c.inc("UnmonitorInstances")
	return c.svc.UnmonitorInstancesWithContext(ctx, input, opts...)
}

// UpdateSecurityGroupRuleDescriptionsEgressRequest is a passthrough to the underlying UpdateSecurityGroupRuleDescriptionsEgressRequest.
// It will increment the count of requests made to UpdateSecurityGroupRuleDescriptionsEgress.
func (c *EC2) UpdateSecurityGroupRuleDescriptionsEgressRequest(input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (req *request.Request, output *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput) {
	c.inc("UpdateSecurityGroupRuleDescriptionsEgress")
	return c.svc.UpdateSecurityGroupRuleDescriptionsEgressRequest(input)
}

// UpdateSecurityGroupRuleDescriptionsEgress is a passthrough to the underlying UpdateSecurityGroupRuleDescriptionsEgress method.
// It will increment the count of requests made to UpdateSecurityGroupRuleDescriptionsEgress.
func (c *EC2) UpdateSecurityGroupRuleDescriptionsEgress(input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	c.inc("UpdateSecurityGroupRuleDescriptionsEgress")
	return c.svc.UpdateSecurityGroupRuleDescriptionsEgress(input)
}

// UpdateSecurityGroupRuleDescriptionsEgressWithContext is a passthrough to the underlying UpdateSecurityGroupRuleDescriptionsEgressWithContext method.
// It will increment the count of requests made to UpdateSecurityGroupRuleDescriptionsEgress.
func (c *EC2) UpdateSecurityGroupRuleDescriptionsEgressWithContext(ctx aws.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, opts ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	c.inc("UpdateSecurityGroupRuleDescriptionsEgress")
	return c.svc.UpdateSecurityGroupRuleDescriptionsEgressWithContext(ctx, input, opts...)
}

// UpdateSecurityGroupRuleDescriptionsIngressRequest is a passthrough to the underlying UpdateSecurityGroupRuleDescriptionsIngressRequest.
// It will increment the count of requests made to UpdateSecurityGroupRuleDescriptionsIngress.
func (c *EC2) UpdateSecurityGroupRuleDescriptionsIngressRequest(input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (req *request.Request, output *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput) {
	c.inc("UpdateSecurityGroupRuleDescriptionsIngress")
	return c.svc.UpdateSecurityGroupRuleDescriptionsIngressRequest(input)
}

// UpdateSecurityGroupRuleDescriptionsIngress is a passthrough to the underlying UpdateSecurityGroupRuleDescriptionsIngress method.
// It will increment the count of requests made to UpdateSecurityGroupRuleDescriptionsIngress.
func (c *EC2) UpdateSecurityGroupRuleDescriptionsIngress(input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	c.inc("UpdateSecurityGroupRuleDescriptionsIngress")
	return c.svc.UpdateSecurityGroupRuleDescriptionsIngress(input)
}

// UpdateSecurityGroupRuleDescriptionsIngressWithContext is a passthrough to the underlying UpdateSecurityGroupRuleDescriptionsIngressWithContext method.
// It will increment the count of requests made to UpdateSecurityGroupRuleDescriptionsIngress.
func (c *EC2) UpdateSecurityGroupRuleDescriptionsIngressWithContext(ctx aws.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, opts ...request.Option) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	c.inc("UpdateSecurityGroupRuleDescriptionsIngress")
	return c.svc.UpdateSecurityGroupRuleDescriptionsIngressWithContext(ctx, input, opts...)
}
