// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ec2counter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ec2"
)

// WaitUntilBundleTaskComplete calls WaitUntilBundleTaskCompleteWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilBundleTaskComplete(input *ec2.DescribeBundleTasksInput) error {
	return c.WaitUntilBundleTaskCompleteWithContext(aws.BackgroundContext(), input)
}

// WaitUntilBundleTaskCompleteWithContext calls the underlying client method with a request option that
// will count DescribeBundleTasks requests.
func (c *EC2) WaitUntilBundleTaskCompleteWithContext(ctx aws.Context, input *ec2.DescribeBundleTasksInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeBundleTasks")))
	return c.svc.WaitUntilBundleTaskCompleteWithContext(ctx, input, opts...)
}

// WaitUntilConversionTaskCancelled calls WaitUntilConversionTaskCancelledWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilConversionTaskCancelled(input *ec2.DescribeConversionTasksInput) error {
	return c.WaitUntilConversionTaskCancelledWithContext(aws.BackgroundContext(), input)
}

// WaitUntilConversionTaskCancelledWithContext calls the underlying client method with a request option that
// will count DescribeConversionTasks requests.
func (c *EC2) WaitUntilConversionTaskCancelledWithContext(ctx aws.Context, input *ec2.DescribeConversionTasksInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeConversionTasks")))
	return c.svc.WaitUntilConversionTaskCancelledWithContext(ctx, input, opts...)
}

// WaitUntilConversionTaskCompleted calls WaitUntilConversionTaskCompletedWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilConversionTaskCompleted(input *ec2.DescribeConversionTasksInput) error {
	return c.WaitUntilConversionTaskCompletedWithContext(aws.BackgroundContext(), input)
}

// WaitUntilConversionTaskCompletedWithContext calls the underlying client method with a request option that
// will count DescribeConversionTasks requests.
func (c *EC2) WaitUntilConversionTaskCompletedWithContext(ctx aws.Context, input *ec2.DescribeConversionTasksInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeConversionTasks")))
	return c.svc.WaitUntilConversionTaskCompletedWithContext(ctx, input, opts...)
}

// WaitUntilConversionTaskDeleted calls WaitUntilConversionTaskDeletedWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilConversionTaskDeleted(input *ec2.DescribeConversionTasksInput) error {
	return c.WaitUntilConversionTaskDeletedWithContext(aws.BackgroundContext(), input)
}

// WaitUntilConversionTaskDeletedWithContext calls the underlying client method with a request option that
// will count DescribeConversionTasks requests.
func (c *EC2) WaitUntilConversionTaskDeletedWithContext(ctx aws.Context, input *ec2.DescribeConversionTasksInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeConversionTasks")))
	return c.svc.WaitUntilConversionTaskDeletedWithContext(ctx, input, opts...)
}

// WaitUntilCustomerGatewayAvailable calls WaitUntilCustomerGatewayAvailableWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilCustomerGatewayAvailable(input *ec2.DescribeCustomerGatewaysInput) error {
	return c.WaitUntilCustomerGatewayAvailableWithContext(aws.BackgroundContext(), input)
}

// WaitUntilCustomerGatewayAvailableWithContext calls the underlying client method with a request option that
// will count DescribeCustomerGateways requests.
func (c *EC2) WaitUntilCustomerGatewayAvailableWithContext(ctx aws.Context, input *ec2.DescribeCustomerGatewaysInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeCustomerGateways")))
	return c.svc.WaitUntilCustomerGatewayAvailableWithContext(ctx, input, opts...)
}

// WaitUntilExportTaskCancelled calls WaitUntilExportTaskCancelledWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilExportTaskCancelled(input *ec2.DescribeExportTasksInput) error {
	return c.WaitUntilExportTaskCancelledWithContext(aws.BackgroundContext(), input)
}

// WaitUntilExportTaskCancelledWithContext calls the underlying client method with a request option that
// will count DescribeExportTasks requests.
func (c *EC2) WaitUntilExportTaskCancelledWithContext(ctx aws.Context, input *ec2.DescribeExportTasksInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeExportTasks")))
	return c.svc.WaitUntilExportTaskCancelledWithContext(ctx, input, opts...)
}

// WaitUntilExportTaskCompleted calls WaitUntilExportTaskCompletedWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilExportTaskCompleted(input *ec2.DescribeExportTasksInput) error {
	return c.WaitUntilExportTaskCompletedWithContext(aws.BackgroundContext(), input)
}

// WaitUntilExportTaskCompletedWithContext calls the underlying client method with a request option that
// will count DescribeExportTasks requests.
func (c *EC2) WaitUntilExportTaskCompletedWithContext(ctx aws.Context, input *ec2.DescribeExportTasksInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeExportTasks")))
	return c.svc.WaitUntilExportTaskCompletedWithContext(ctx, input, opts...)
}

// WaitUntilImageAvailable calls WaitUntilImageAvailableWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilImageAvailable(input *ec2.DescribeImagesInput) error {
	return c.WaitUntilImageAvailableWithContext(aws.BackgroundContext(), input)
}

// WaitUntilImageAvailableWithContext calls the underlying client method with a request option that
// will count DescribeImages requests.
func (c *EC2) WaitUntilImageAvailableWithContext(ctx aws.Context, input *ec2.DescribeImagesInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeImages")))
	return c.svc.WaitUntilImageAvailableWithContext(ctx, input, opts...)
}

// WaitUntilImageExists calls WaitUntilImageExistsWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilImageExists(input *ec2.DescribeImagesInput) error {
	return c.WaitUntilImageExistsWithContext(aws.BackgroundContext(), input)
}

// WaitUntilImageExistsWithContext calls the underlying client method with a request option that
// will count DescribeImages requests.
func (c *EC2) WaitUntilImageExistsWithContext(ctx aws.Context, input *ec2.DescribeImagesInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeImages")))
	return c.svc.WaitUntilImageExistsWithContext(ctx, input, opts...)
}

// WaitUntilInstanceExists calls WaitUntilInstanceExistsWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilInstanceExists(input *ec2.DescribeInstancesInput) error {
	return c.WaitUntilInstanceExistsWithContext(aws.BackgroundContext(), input)
}

// WaitUntilInstanceExistsWithContext calls the underlying client method with a request option that
// will count DescribeInstances requests.
func (c *EC2) WaitUntilInstanceExistsWithContext(ctx aws.Context, input *ec2.DescribeInstancesInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeInstances")))
	return c.svc.WaitUntilInstanceExistsWithContext(ctx, input, opts...)
}

// WaitUntilInstanceRunning calls WaitUntilInstanceRunningWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilInstanceRunning(input *ec2.DescribeInstancesInput) error {
	return c.WaitUntilInstanceRunningWithContext(aws.BackgroundContext(), input)
}

// WaitUntilInstanceRunningWithContext calls the underlying client method with a request option that
// will count DescribeInstances requests.
func (c *EC2) WaitUntilInstanceRunningWithContext(ctx aws.Context, input *ec2.DescribeInstancesInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeInstances")))
	return c.svc.WaitUntilInstanceRunningWithContext(ctx, input, opts...)
}

// WaitUntilInstanceStatusOk calls WaitUntilInstanceStatusOkWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilInstanceStatusOk(input *ec2.DescribeInstanceStatusInput) error {
	return c.WaitUntilInstanceStatusOkWithContext(aws.BackgroundContext(), input)
}

// WaitUntilInstanceStatusOkWithContext calls the underlying client method with a request option that
// will count DescribeInstanceStatus requests.
func (c *EC2) WaitUntilInstanceStatusOkWithContext(ctx aws.Context, input *ec2.DescribeInstanceStatusInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeInstanceStatus")))
	return c.svc.WaitUntilInstanceStatusOkWithContext(ctx, input, opts...)
}

// WaitUntilInstanceStopped calls WaitUntilInstanceStoppedWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilInstanceStopped(input *ec2.DescribeInstancesInput) error {
	return c.WaitUntilInstanceStoppedWithContext(aws.BackgroundContext(), input)
}

// WaitUntilInstanceStoppedWithContext calls the underlying client method with a request option that
// will count DescribeInstances requests.
func (c *EC2) WaitUntilInstanceStoppedWithContext(ctx aws.Context, input *ec2.DescribeInstancesInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeInstances")))
	return c.svc.WaitUntilInstanceStoppedWithContext(ctx, input, opts...)
}

// WaitUntilInstanceTerminated calls WaitUntilInstanceTerminatedWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilInstanceTerminated(input *ec2.DescribeInstancesInput) error {
	return c.WaitUntilInstanceTerminatedWithContext(aws.BackgroundContext(), input)
}

// WaitUntilInstanceTerminatedWithContext calls the underlying client method with a request option that
// will count DescribeInstances requests.
func (c *EC2) WaitUntilInstanceTerminatedWithContext(ctx aws.Context, input *ec2.DescribeInstancesInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeInstances")))
	return c.svc.WaitUntilInstanceTerminatedWithContext(ctx, input, opts...)
}

// WaitUntilKeyPairExists calls WaitUntilKeyPairExistsWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilKeyPairExists(input *ec2.DescribeKeyPairsInput) error {
	return c.WaitUntilKeyPairExistsWithContext(aws.BackgroundContext(), input)
}

// WaitUntilKeyPairExistsWithContext calls the underlying client method with a request option that
// will count DescribeKeyPairs requests.
func (c *EC2) WaitUntilKeyPairExistsWithContext(ctx aws.Context, input *ec2.DescribeKeyPairsInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeKeyPairs")))
	return c.svc.WaitUntilKeyPairExistsWithContext(ctx, input, opts...)
}

// WaitUntilNatGatewayAvailable calls WaitUntilNatGatewayAvailableWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilNatGatewayAvailable(input *ec2.DescribeNatGatewaysInput) error {
	return c.WaitUntilNatGatewayAvailableWithContext(aws.BackgroundContext(), input)
}

// WaitUntilNatGatewayAvailableWithContext calls the underlying client method with a request option that
// will count DescribeNatGateways requests.
func (c *EC2) WaitUntilNatGatewayAvailableWithContext(ctx aws.Context, input *ec2.DescribeNatGatewaysInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeNatGateways")))
	return c.svc.WaitUntilNatGatewayAvailableWithContext(ctx, input, opts...)
}

// WaitUntilNetworkInterfaceAvailable calls WaitUntilNetworkInterfaceAvailableWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilNetworkInterfaceAvailable(input *ec2.DescribeNetworkInterfacesInput) error {
	return c.WaitUntilNetworkInterfaceAvailableWithContext(aws.BackgroundContext(), input)
}

// WaitUntilNetworkInterfaceAvailableWithContext calls the underlying client method with a request option that
// will count DescribeNetworkInterfaces requests.
func (c *EC2) WaitUntilNetworkInterfaceAvailableWithContext(ctx aws.Context, input *ec2.DescribeNetworkInterfacesInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeNetworkInterfaces")))
	return c.svc.WaitUntilNetworkInterfaceAvailableWithContext(ctx, input, opts...)
}

// WaitUntilPasswordDataAvailable calls WaitUntilPasswordDataAvailableWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilPasswordDataAvailable(input *ec2.GetPasswordDataInput) error {
	return c.WaitUntilPasswordDataAvailableWithContext(aws.BackgroundContext(), input)
}

// WaitUntilPasswordDataAvailableWithContext calls the underlying client method with a request option that
// will count GetPasswordData requests.
func (c *EC2) WaitUntilPasswordDataAvailableWithContext(ctx aws.Context, input *ec2.GetPasswordDataInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("GetPasswordData")))
	return c.svc.WaitUntilPasswordDataAvailableWithContext(ctx, input, opts...)
}

// WaitUntilSnapshotCompleted calls WaitUntilSnapshotCompletedWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilSnapshotCompleted(input *ec2.DescribeSnapshotsInput) error {
	return c.WaitUntilSnapshotCompletedWithContext(aws.BackgroundContext(), input)
}

// WaitUntilSnapshotCompletedWithContext calls the underlying client method with a request option that
// will count DescribeSnapshots requests.
func (c *EC2) WaitUntilSnapshotCompletedWithContext(ctx aws.Context, input *ec2.DescribeSnapshotsInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeSnapshots")))
	return c.svc.WaitUntilSnapshotCompletedWithContext(ctx, input, opts...)
}

// WaitUntilSpotInstanceRequestFulfilled calls WaitUntilSpotInstanceRequestFulfilledWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilSpotInstanceRequestFulfilled(input *ec2.DescribeSpotInstanceRequestsInput) error {
	return c.WaitUntilSpotInstanceRequestFulfilledWithContext(aws.BackgroundContext(), input)
}

// WaitUntilSpotInstanceRequestFulfilledWithContext calls the underlying client method with a request option that
// will count DescribeSpotInstanceRequests requests.
func (c *EC2) WaitUntilSpotInstanceRequestFulfilledWithContext(ctx aws.Context, input *ec2.DescribeSpotInstanceRequestsInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeSpotInstanceRequests")))
	return c.svc.WaitUntilSpotInstanceRequestFulfilledWithContext(ctx, input, opts...)
}

// WaitUntilSubnetAvailable calls WaitUntilSubnetAvailableWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilSubnetAvailable(input *ec2.DescribeSubnetsInput) error {
	return c.WaitUntilSubnetAvailableWithContext(aws.BackgroundContext(), input)
}

// WaitUntilSubnetAvailableWithContext calls the underlying client method with a request option that
// will count DescribeSubnets requests.
func (c *EC2) WaitUntilSubnetAvailableWithContext(ctx aws.Context, input *ec2.DescribeSubnetsInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeSubnets")))
	return c.svc.WaitUntilSubnetAvailableWithContext(ctx, input, opts...)
}

// WaitUntilSystemStatusOk calls WaitUntilSystemStatusOkWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilSystemStatusOk(input *ec2.DescribeInstanceStatusInput) error {
	return c.WaitUntilSystemStatusOkWithContext(aws.BackgroundContext(), input)
}

// WaitUntilSystemStatusOkWithContext calls the underlying client method with a request option that
// will count DescribeInstanceStatus requests.
func (c *EC2) WaitUntilSystemStatusOkWithContext(ctx aws.Context, input *ec2.DescribeInstanceStatusInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeInstanceStatus")))
	return c.svc.WaitUntilSystemStatusOkWithContext(ctx, input, opts...)
}

// WaitUntilVolumeAvailable calls WaitUntilVolumeAvailableWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilVolumeAvailable(input *ec2.DescribeVolumesInput) error {
	return c.WaitUntilVolumeAvailableWithContext(aws.BackgroundContext(), input)
}

// WaitUntilVolumeAvailableWithContext calls the underlying client method with a request option that
// will count DescribeVolumes requests.
func (c *EC2) WaitUntilVolumeAvailableWithContext(ctx aws.Context, input *ec2.DescribeVolumesInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeVolumes")))
	return c.svc.WaitUntilVolumeAvailableWithContext(ctx, input, opts...)
}

// WaitUntilVolumeDeleted calls WaitUntilVolumeDeletedWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilVolumeDeleted(input *ec2.DescribeVolumesInput) error {
	return c.WaitUntilVolumeDeletedWithContext(aws.BackgroundContext(), input)
}

// WaitUntilVolumeDeletedWithContext calls the underlying client method with a request option that
// will count DescribeVolumes requests.
func (c *EC2) WaitUntilVolumeDeletedWithContext(ctx aws.Context, input *ec2.DescribeVolumesInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeVolumes")))
	return c.svc.WaitUntilVolumeDeletedWithContext(ctx, input, opts...)
}

// WaitUntilVolumeInUse calls WaitUntilVolumeInUseWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilVolumeInUse(input *ec2.DescribeVolumesInput) error {
	return c.WaitUntilVolumeInUseWithContext(aws.BackgroundContext(), input)
}

// WaitUntilVolumeInUseWithContext calls the underlying client method with a request option that
// will count DescribeVolumes requests.
func (c *EC2) WaitUntilVolumeInUseWithContext(ctx aws.Context, input *ec2.DescribeVolumesInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeVolumes")))
	return c.svc.WaitUntilVolumeInUseWithContext(ctx, input, opts...)
}

// WaitUntilVpcAvailable calls WaitUntilVpcAvailableWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilVpcAvailable(input *ec2.DescribeVpcsInput) error {
	return c.WaitUntilVpcAvailableWithContext(aws.BackgroundContext(), input)
}

// WaitUntilVpcAvailableWithContext calls the underlying client method with a request option that
// will count DescribeVpcs requests.
func (c *EC2) WaitUntilVpcAvailableWithContext(ctx aws.Context, input *ec2.DescribeVpcsInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeVpcs")))
	return c.svc.WaitUntilVpcAvailableWithContext(ctx, input, opts...)
}

// WaitUntilVpcExists calls WaitUntilVpcExistsWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilVpcExists(input *ec2.DescribeVpcsInput) error {
	return c.WaitUntilVpcExistsWithContext(aws.BackgroundContext(), input)
}

// WaitUntilVpcExistsWithContext calls the underlying client method with a request option that
// will count DescribeVpcs requests.
func (c *EC2) WaitUntilVpcExistsWithContext(ctx aws.Context, input *ec2.DescribeVpcsInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeVpcs")))
	return c.svc.WaitUntilVpcExistsWithContext(ctx, input, opts...)
}

// WaitUntilVpcPeeringConnectionDeleted calls WaitUntilVpcPeeringConnectionDeletedWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilVpcPeeringConnectionDeleted(input *ec2.DescribeVpcPeeringConnectionsInput) error {
	return c.WaitUntilVpcPeeringConnectionDeletedWithContext(aws.BackgroundContext(), input)
}

// WaitUntilVpcPeeringConnectionDeletedWithContext calls the underlying client method with a request option that
// will count DescribeVpcPeeringConnections requests.
func (c *EC2) WaitUntilVpcPeeringConnectionDeletedWithContext(ctx aws.Context, input *ec2.DescribeVpcPeeringConnectionsInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeVpcPeeringConnections")))
	return c.svc.WaitUntilVpcPeeringConnectionDeletedWithContext(ctx, input, opts...)
}

// WaitUntilVpcPeeringConnectionExists calls WaitUntilVpcPeeringConnectionExistsWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilVpcPeeringConnectionExists(input *ec2.DescribeVpcPeeringConnectionsInput) error {
	return c.WaitUntilVpcPeeringConnectionExistsWithContext(aws.BackgroundContext(), input)
}

// WaitUntilVpcPeeringConnectionExistsWithContext calls the underlying client method with a request option that
// will count DescribeVpcPeeringConnections requests.
func (c *EC2) WaitUntilVpcPeeringConnectionExistsWithContext(ctx aws.Context, input *ec2.DescribeVpcPeeringConnectionsInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeVpcPeeringConnections")))
	return c.svc.WaitUntilVpcPeeringConnectionExistsWithContext(ctx, input, opts...)
}

// WaitUntilVpnConnectionAvailable calls WaitUntilVpnConnectionAvailableWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilVpnConnectionAvailable(input *ec2.DescribeVpnConnectionsInput) error {
	return c.WaitUntilVpnConnectionAvailableWithContext(aws.BackgroundContext(), input)
}

// WaitUntilVpnConnectionAvailableWithContext calls the underlying client method with a request option that
// will count DescribeVpnConnections requests.
func (c *EC2) WaitUntilVpnConnectionAvailableWithContext(ctx aws.Context, input *ec2.DescribeVpnConnectionsInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeVpnConnections")))
	return c.svc.WaitUntilVpnConnectionAvailableWithContext(ctx, input, opts...)
}

// WaitUntilVpnConnectionDeleted calls WaitUntilVpnConnectionDeletedWithContext with aws.BackgroundContext().
func (c *EC2) WaitUntilVpnConnectionDeleted(input *ec2.DescribeVpnConnectionsInput) error {
	return c.WaitUntilVpnConnectionDeletedWithContext(aws.BackgroundContext(), input)
}

// WaitUntilVpnConnectionDeletedWithContext calls the underlying client method with a request option that
// will count DescribeVpnConnections requests.
func (c *EC2) WaitUntilVpnConnectionDeletedWithContext(ctx aws.Context, input *ec2.DescribeVpnConnectionsInput, opts ...request.WaiterOption) error {
	opts = append(opts, request.WithWaiterRequestOptions(c.incViaRequestOption("DescribeVpnConnections")))
	return c.svc.WaitUntilVpnConnectionDeletedWithContext(ctx, input, opts...)
}
