// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package sagemakercounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sagemaker"
)

// AddTagsRequest is a passthrough to the underlying AddTagsRequest.
// It will increment the count of requests made to AddTags.
func (c *SageMaker) AddTagsRequest(input *sagemaker.AddTagsInput) (req *request.Request, output *sagemaker.AddTagsOutput) {
	c.inc("AddTags")
	return c.svc.AddTagsRequest(input)
}

// AddTags is a passthrough to the underlying AddTags method.
// It will increment the count of requests made to AddTags.
func (c *SageMaker) AddTags(input *sagemaker.AddTagsInput) (*sagemaker.AddTagsOutput, error) {
	c.inc("AddTags")
	return c.svc.AddTags(input)
}

// AddTagsWithContext is a passthrough to the underlying AddTagsWithContext method.
// It will increment the count of requests made to AddTags.
func (c *SageMaker) AddTagsWithContext(ctx aws.Context, input *sagemaker.AddTagsInput, opts ...request.Option) (*sagemaker.AddTagsOutput, error) {
	c.inc("AddTags")
	return c.svc.AddTagsWithContext(ctx, input, opts...)
}

// CreateEndpointRequest is a passthrough to the underlying CreateEndpointRequest.
// It will increment the count of requests made to CreateEndpoint.
func (c *SageMaker) CreateEndpointRequest(input *sagemaker.CreateEndpointInput) (req *request.Request, output *sagemaker.CreateEndpointOutput) {
	c.inc("CreateEndpoint")
	return c.svc.CreateEndpointRequest(input)
}

// CreateEndpoint is a passthrough to the underlying CreateEndpoint method.
// It will increment the count of requests made to CreateEndpoint.
func (c *SageMaker) CreateEndpoint(input *sagemaker.CreateEndpointInput) (*sagemaker.CreateEndpointOutput, error) {
	c.inc("CreateEndpoint")
	return c.svc.CreateEndpoint(input)
}

// CreateEndpointWithContext is a passthrough to the underlying CreateEndpointWithContext method.
// It will increment the count of requests made to CreateEndpoint.
func (c *SageMaker) CreateEndpointWithContext(ctx aws.Context, input *sagemaker.CreateEndpointInput, opts ...request.Option) (*sagemaker.CreateEndpointOutput, error) {
	c.inc("CreateEndpoint")
	return c.svc.CreateEndpointWithContext(ctx, input, opts...)
}

// CreateEndpointConfigRequest is a passthrough to the underlying CreateEndpointConfigRequest.
// It will increment the count of requests made to CreateEndpointConfig.
func (c *SageMaker) CreateEndpointConfigRequest(input *sagemaker.CreateEndpointConfigInput) (req *request.Request, output *sagemaker.CreateEndpointConfigOutput) {
	c.inc("CreateEndpointConfig")
	return c.svc.CreateEndpointConfigRequest(input)
}

// CreateEndpointConfig is a passthrough to the underlying CreateEndpointConfig method.
// It will increment the count of requests made to CreateEndpointConfig.
func (c *SageMaker) CreateEndpointConfig(input *sagemaker.CreateEndpointConfigInput) (*sagemaker.CreateEndpointConfigOutput, error) {
	c.inc("CreateEndpointConfig")
	return c.svc.CreateEndpointConfig(input)
}

// CreateEndpointConfigWithContext is a passthrough to the underlying CreateEndpointConfigWithContext method.
// It will increment the count of requests made to CreateEndpointConfig.
func (c *SageMaker) CreateEndpointConfigWithContext(ctx aws.Context, input *sagemaker.CreateEndpointConfigInput, opts ...request.Option) (*sagemaker.CreateEndpointConfigOutput, error) {
	c.inc("CreateEndpointConfig")
	return c.svc.CreateEndpointConfigWithContext(ctx, input, opts...)
}

// CreateModelRequest is a passthrough to the underlying CreateModelRequest.
// It will increment the count of requests made to CreateModel.
func (c *SageMaker) CreateModelRequest(input *sagemaker.CreateModelInput) (req *request.Request, output *sagemaker.CreateModelOutput) {
	c.inc("CreateModel")
	return c.svc.CreateModelRequest(input)
}

// CreateModel is a passthrough to the underlying CreateModel method.
// It will increment the count of requests made to CreateModel.
func (c *SageMaker) CreateModel(input *sagemaker.CreateModelInput) (*sagemaker.CreateModelOutput, error) {
	c.inc("CreateModel")
	return c.svc.CreateModel(input)
}

// CreateModelWithContext is a passthrough to the underlying CreateModelWithContext method.
// It will increment the count of requests made to CreateModel.
func (c *SageMaker) CreateModelWithContext(ctx aws.Context, input *sagemaker.CreateModelInput, opts ...request.Option) (*sagemaker.CreateModelOutput, error) {
	c.inc("CreateModel")
	return c.svc.CreateModelWithContext(ctx, input, opts...)
}

// CreateNotebookInstanceRequest is a passthrough to the underlying CreateNotebookInstanceRequest.
// It will increment the count of requests made to CreateNotebookInstance.
func (c *SageMaker) CreateNotebookInstanceRequest(input *sagemaker.CreateNotebookInstanceInput) (req *request.Request, output *sagemaker.CreateNotebookInstanceOutput) {
	c.inc("CreateNotebookInstance")
	return c.svc.CreateNotebookInstanceRequest(input)
}

// CreateNotebookInstance is a passthrough to the underlying CreateNotebookInstance method.
// It will increment the count of requests made to CreateNotebookInstance.
func (c *SageMaker) CreateNotebookInstance(input *sagemaker.CreateNotebookInstanceInput) (*sagemaker.CreateNotebookInstanceOutput, error) {
	c.inc("CreateNotebookInstance")
	return c.svc.CreateNotebookInstance(input)
}

// CreateNotebookInstanceWithContext is a passthrough to the underlying CreateNotebookInstanceWithContext method.
// It will increment the count of requests made to CreateNotebookInstance.
func (c *SageMaker) CreateNotebookInstanceWithContext(ctx aws.Context, input *sagemaker.CreateNotebookInstanceInput, opts ...request.Option) (*sagemaker.CreateNotebookInstanceOutput, error) {
	c.inc("CreateNotebookInstance")
	return c.svc.CreateNotebookInstanceWithContext(ctx, input, opts...)
}

// CreatePresignedNotebookInstanceUrlRequest is a passthrough to the underlying CreatePresignedNotebookInstanceUrlRequest.
// It will increment the count of requests made to CreatePresignedNotebookInstanceUrl.
func (c *SageMaker) CreatePresignedNotebookInstanceUrlRequest(input *sagemaker.CreatePresignedNotebookInstanceUrlInput) (req *request.Request, output *sagemaker.CreatePresignedNotebookInstanceUrlOutput) {
	c.inc("CreatePresignedNotebookInstanceUrl")
	return c.svc.CreatePresignedNotebookInstanceUrlRequest(input)
}

// CreatePresignedNotebookInstanceUrl is a passthrough to the underlying CreatePresignedNotebookInstanceUrl method.
// It will increment the count of requests made to CreatePresignedNotebookInstanceUrl.
func (c *SageMaker) CreatePresignedNotebookInstanceUrl(input *sagemaker.CreatePresignedNotebookInstanceUrlInput) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	c.inc("CreatePresignedNotebookInstanceUrl")
	return c.svc.CreatePresignedNotebookInstanceUrl(input)
}

// CreatePresignedNotebookInstanceUrlWithContext is a passthrough to the underlying CreatePresignedNotebookInstanceUrlWithContext method.
// It will increment the count of requests made to CreatePresignedNotebookInstanceUrl.
func (c *SageMaker) CreatePresignedNotebookInstanceUrlWithContext(ctx aws.Context, input *sagemaker.CreatePresignedNotebookInstanceUrlInput, opts ...request.Option) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	c.inc("CreatePresignedNotebookInstanceUrl")
	return c.svc.CreatePresignedNotebookInstanceUrlWithContext(ctx, input, opts...)
}

// CreateTrainingJobRequest is a passthrough to the underlying CreateTrainingJobRequest.
// It will increment the count of requests made to CreateTrainingJob.
func (c *SageMaker) CreateTrainingJobRequest(input *sagemaker.CreateTrainingJobInput) (req *request.Request, output *sagemaker.CreateTrainingJobOutput) {
	c.inc("CreateTrainingJob")
	return c.svc.CreateTrainingJobRequest(input)
}

// CreateTrainingJob is a passthrough to the underlying CreateTrainingJob method.
// It will increment the count of requests made to CreateTrainingJob.
func (c *SageMaker) CreateTrainingJob(input *sagemaker.CreateTrainingJobInput) (*sagemaker.CreateTrainingJobOutput, error) {
	c.inc("CreateTrainingJob")
	return c.svc.CreateTrainingJob(input)
}

// CreateTrainingJobWithContext is a passthrough to the underlying CreateTrainingJobWithContext method.
// It will increment the count of requests made to CreateTrainingJob.
func (c *SageMaker) CreateTrainingJobWithContext(ctx aws.Context, input *sagemaker.CreateTrainingJobInput, opts ...request.Option) (*sagemaker.CreateTrainingJobOutput, error) {
	c.inc("CreateTrainingJob")
	return c.svc.CreateTrainingJobWithContext(ctx, input, opts...)
}

// DeleteEndpointRequest is a passthrough to the underlying DeleteEndpointRequest.
// It will increment the count of requests made to DeleteEndpoint.
func (c *SageMaker) DeleteEndpointRequest(input *sagemaker.DeleteEndpointInput) (req *request.Request, output *sagemaker.DeleteEndpointOutput) {
	c.inc("DeleteEndpoint")
	return c.svc.DeleteEndpointRequest(input)
}

// DeleteEndpoint is a passthrough to the underlying DeleteEndpoint method.
// It will increment the count of requests made to DeleteEndpoint.
func (c *SageMaker) DeleteEndpoint(input *sagemaker.DeleteEndpointInput) (*sagemaker.DeleteEndpointOutput, error) {
	c.inc("DeleteEndpoint")
	return c.svc.DeleteEndpoint(input)
}

// DeleteEndpointWithContext is a passthrough to the underlying DeleteEndpointWithContext method.
// It will increment the count of requests made to DeleteEndpoint.
func (c *SageMaker) DeleteEndpointWithContext(ctx aws.Context, input *sagemaker.DeleteEndpointInput, opts ...request.Option) (*sagemaker.DeleteEndpointOutput, error) {
	c.inc("DeleteEndpoint")
	return c.svc.DeleteEndpointWithContext(ctx, input, opts...)
}

// DeleteEndpointConfigRequest is a passthrough to the underlying DeleteEndpointConfigRequest.
// It will increment the count of requests made to DeleteEndpointConfig.
func (c *SageMaker) DeleteEndpointConfigRequest(input *sagemaker.DeleteEndpointConfigInput) (req *request.Request, output *sagemaker.DeleteEndpointConfigOutput) {
	c.inc("DeleteEndpointConfig")
	return c.svc.DeleteEndpointConfigRequest(input)
}

// DeleteEndpointConfig is a passthrough to the underlying DeleteEndpointConfig method.
// It will increment the count of requests made to DeleteEndpointConfig.
func (c *SageMaker) DeleteEndpointConfig(input *sagemaker.DeleteEndpointConfigInput) (*sagemaker.DeleteEndpointConfigOutput, error) {
	c.inc("DeleteEndpointConfig")
	return c.svc.DeleteEndpointConfig(input)
}

// DeleteEndpointConfigWithContext is a passthrough to the underlying DeleteEndpointConfigWithContext method.
// It will increment the count of requests made to DeleteEndpointConfig.
func (c *SageMaker) DeleteEndpointConfigWithContext(ctx aws.Context, input *sagemaker.DeleteEndpointConfigInput, opts ...request.Option) (*sagemaker.DeleteEndpointConfigOutput, error) {
	c.inc("DeleteEndpointConfig")
	return c.svc.DeleteEndpointConfigWithContext(ctx, input, opts...)
}

// DeleteModelRequest is a passthrough to the underlying DeleteModelRequest.
// It will increment the count of requests made to DeleteModel.
func (c *SageMaker) DeleteModelRequest(input *sagemaker.DeleteModelInput) (req *request.Request, output *sagemaker.DeleteModelOutput) {
	c.inc("DeleteModel")
	return c.svc.DeleteModelRequest(input)
}

// DeleteModel is a passthrough to the underlying DeleteModel method.
// It will increment the count of requests made to DeleteModel.
func (c *SageMaker) DeleteModel(input *sagemaker.DeleteModelInput) (*sagemaker.DeleteModelOutput, error) {
	c.inc("DeleteModel")
	return c.svc.DeleteModel(input)
}

// DeleteModelWithContext is a passthrough to the underlying DeleteModelWithContext method.
// It will increment the count of requests made to DeleteModel.
func (c *SageMaker) DeleteModelWithContext(ctx aws.Context, input *sagemaker.DeleteModelInput, opts ...request.Option) (*sagemaker.DeleteModelOutput, error) {
	c.inc("DeleteModel")
	return c.svc.DeleteModelWithContext(ctx, input, opts...)
}

// DeleteNotebookInstanceRequest is a passthrough to the underlying DeleteNotebookInstanceRequest.
// It will increment the count of requests made to DeleteNotebookInstance.
func (c *SageMaker) DeleteNotebookInstanceRequest(input *sagemaker.DeleteNotebookInstanceInput) (req *request.Request, output *sagemaker.DeleteNotebookInstanceOutput) {
	c.inc("DeleteNotebookInstance")
	return c.svc.DeleteNotebookInstanceRequest(input)
}

// DeleteNotebookInstance is a passthrough to the underlying DeleteNotebookInstance method.
// It will increment the count of requests made to DeleteNotebookInstance.
func (c *SageMaker) DeleteNotebookInstance(input *sagemaker.DeleteNotebookInstanceInput) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	c.inc("DeleteNotebookInstance")
	return c.svc.DeleteNotebookInstance(input)
}

// DeleteNotebookInstanceWithContext is a passthrough to the underlying DeleteNotebookInstanceWithContext method.
// It will increment the count of requests made to DeleteNotebookInstance.
func (c *SageMaker) DeleteNotebookInstanceWithContext(ctx aws.Context, input *sagemaker.DeleteNotebookInstanceInput, opts ...request.Option) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	c.inc("DeleteNotebookInstance")
	return c.svc.DeleteNotebookInstanceWithContext(ctx, input, opts...)
}

// DeleteTagsRequest is a passthrough to the underlying DeleteTagsRequest.
// It will increment the count of requests made to DeleteTags.
func (c *SageMaker) DeleteTagsRequest(input *sagemaker.DeleteTagsInput) (req *request.Request, output *sagemaker.DeleteTagsOutput) {
	c.inc("DeleteTags")
	return c.svc.DeleteTagsRequest(input)
}

// DeleteTags is a passthrough to the underlying DeleteTags method.
// It will increment the count of requests made to DeleteTags.
func (c *SageMaker) DeleteTags(input *sagemaker.DeleteTagsInput) (*sagemaker.DeleteTagsOutput, error) {
	c.inc("DeleteTags")
	return c.svc.DeleteTags(input)
}

// DeleteTagsWithContext is a passthrough to the underlying DeleteTagsWithContext method.
// It will increment the count of requests made to DeleteTags.
func (c *SageMaker) DeleteTagsWithContext(ctx aws.Context, input *sagemaker.DeleteTagsInput, opts ...request.Option) (*sagemaker.DeleteTagsOutput, error) {
	c.inc("DeleteTags")
	return c.svc.DeleteTagsWithContext(ctx, input, opts...)
}

// DescribeEndpointRequest is a passthrough to the underlying DescribeEndpointRequest.
// It will increment the count of requests made to DescribeEndpoint.
func (c *SageMaker) DescribeEndpointRequest(input *sagemaker.DescribeEndpointInput) (req *request.Request, output *sagemaker.DescribeEndpointOutput) {
	c.inc("DescribeEndpoint")
	return c.svc.DescribeEndpointRequest(input)
}

// DescribeEndpoint is a passthrough to the underlying DescribeEndpoint method.
// It will increment the count of requests made to DescribeEndpoint.
func (c *SageMaker) DescribeEndpoint(input *sagemaker.DescribeEndpointInput) (*sagemaker.DescribeEndpointOutput, error) {
	c.inc("DescribeEndpoint")
	return c.svc.DescribeEndpoint(input)
}

// DescribeEndpointWithContext is a passthrough to the underlying DescribeEndpointWithContext method.
// It will increment the count of requests made to DescribeEndpoint.
func (c *SageMaker) DescribeEndpointWithContext(ctx aws.Context, input *sagemaker.DescribeEndpointInput, opts ...request.Option) (*sagemaker.DescribeEndpointOutput, error) {
	c.inc("DescribeEndpoint")
	return c.svc.DescribeEndpointWithContext(ctx, input, opts...)
}

// DescribeEndpointConfigRequest is a passthrough to the underlying DescribeEndpointConfigRequest.
// It will increment the count of requests made to DescribeEndpointConfig.
func (c *SageMaker) DescribeEndpointConfigRequest(input *sagemaker.DescribeEndpointConfigInput) (req *request.Request, output *sagemaker.DescribeEndpointConfigOutput) {
	c.inc("DescribeEndpointConfig")
	return c.svc.DescribeEndpointConfigRequest(input)
}

// DescribeEndpointConfig is a passthrough to the underlying DescribeEndpointConfig method.
// It will increment the count of requests made to DescribeEndpointConfig.
func (c *SageMaker) DescribeEndpointConfig(input *sagemaker.DescribeEndpointConfigInput) (*sagemaker.DescribeEndpointConfigOutput, error) {
	c.inc("DescribeEndpointConfig")
	return c.svc.DescribeEndpointConfig(input)
}

// DescribeEndpointConfigWithContext is a passthrough to the underlying DescribeEndpointConfigWithContext method.
// It will increment the count of requests made to DescribeEndpointConfig.
func (c *SageMaker) DescribeEndpointConfigWithContext(ctx aws.Context, input *sagemaker.DescribeEndpointConfigInput, opts ...request.Option) (*sagemaker.DescribeEndpointConfigOutput, error) {
	c.inc("DescribeEndpointConfig")
	return c.svc.DescribeEndpointConfigWithContext(ctx, input, opts...)
}

// DescribeModelRequest is a passthrough to the underlying DescribeModelRequest.
// It will increment the count of requests made to DescribeModel.
func (c *SageMaker) DescribeModelRequest(input *sagemaker.DescribeModelInput) (req *request.Request, output *sagemaker.DescribeModelOutput) {
	c.inc("DescribeModel")
	return c.svc.DescribeModelRequest(input)
}

// DescribeModel is a passthrough to the underlying DescribeModel method.
// It will increment the count of requests made to DescribeModel.
func (c *SageMaker) DescribeModel(input *sagemaker.DescribeModelInput) (*sagemaker.DescribeModelOutput, error) {
	c.inc("DescribeModel")
	return c.svc.DescribeModel(input)
}

// DescribeModelWithContext is a passthrough to the underlying DescribeModelWithContext method.
// It will increment the count of requests made to DescribeModel.
func (c *SageMaker) DescribeModelWithContext(ctx aws.Context, input *sagemaker.DescribeModelInput, opts ...request.Option) (*sagemaker.DescribeModelOutput, error) {
	c.inc("DescribeModel")
	return c.svc.DescribeModelWithContext(ctx, input, opts...)
}

// DescribeNotebookInstanceRequest is a passthrough to the underlying DescribeNotebookInstanceRequest.
// It will increment the count of requests made to DescribeNotebookInstance.
func (c *SageMaker) DescribeNotebookInstanceRequest(input *sagemaker.DescribeNotebookInstanceInput) (req *request.Request, output *sagemaker.DescribeNotebookInstanceOutput) {
	c.inc("DescribeNotebookInstance")
	return c.svc.DescribeNotebookInstanceRequest(input)
}

// DescribeNotebookInstance is a passthrough to the underlying DescribeNotebookInstance method.
// It will increment the count of requests made to DescribeNotebookInstance.
func (c *SageMaker) DescribeNotebookInstance(input *sagemaker.DescribeNotebookInstanceInput) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	c.inc("DescribeNotebookInstance")
	return c.svc.DescribeNotebookInstance(input)
}

// DescribeNotebookInstanceWithContext is a passthrough to the underlying DescribeNotebookInstanceWithContext method.
// It will increment the count of requests made to DescribeNotebookInstance.
func (c *SageMaker) DescribeNotebookInstanceWithContext(ctx aws.Context, input *sagemaker.DescribeNotebookInstanceInput, opts ...request.Option) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	c.inc("DescribeNotebookInstance")
	return c.svc.DescribeNotebookInstanceWithContext(ctx, input, opts...)
}

// DescribeTrainingJobRequest is a passthrough to the underlying DescribeTrainingJobRequest.
// It will increment the count of requests made to DescribeTrainingJob.
func (c *SageMaker) DescribeTrainingJobRequest(input *sagemaker.DescribeTrainingJobInput) (req *request.Request, output *sagemaker.DescribeTrainingJobOutput) {
	c.inc("DescribeTrainingJob")
	return c.svc.DescribeTrainingJobRequest(input)
}

// DescribeTrainingJob is a passthrough to the underlying DescribeTrainingJob method.
// It will increment the count of requests made to DescribeTrainingJob.
func (c *SageMaker) DescribeTrainingJob(input *sagemaker.DescribeTrainingJobInput) (*sagemaker.DescribeTrainingJobOutput, error) {
	c.inc("DescribeTrainingJob")
	return c.svc.DescribeTrainingJob(input)
}

// DescribeTrainingJobWithContext is a passthrough to the underlying DescribeTrainingJobWithContext method.
// It will increment the count of requests made to DescribeTrainingJob.
func (c *SageMaker) DescribeTrainingJobWithContext(ctx aws.Context, input *sagemaker.DescribeTrainingJobInput, opts ...request.Option) (*sagemaker.DescribeTrainingJobOutput, error) {
	c.inc("DescribeTrainingJob")
	return c.svc.DescribeTrainingJobWithContext(ctx, input, opts...)
}

// ListEndpointConfigsRequest is a passthrough to the underlying ListEndpointConfigsRequest.
// It will increment the count of requests made to ListEndpointConfigs.
func (c *SageMaker) ListEndpointConfigsRequest(input *sagemaker.ListEndpointConfigsInput) (req *request.Request, output *sagemaker.ListEndpointConfigsOutput) {
	c.inc("ListEndpointConfigs")
	return c.svc.ListEndpointConfigsRequest(input)
}

// ListEndpointConfigs is a passthrough to the underlying ListEndpointConfigs method.
// It will increment the count of requests made to ListEndpointConfigs.
func (c *SageMaker) ListEndpointConfigs(input *sagemaker.ListEndpointConfigsInput) (*sagemaker.ListEndpointConfigsOutput, error) {
	c.inc("ListEndpointConfigs")
	return c.svc.ListEndpointConfigs(input)
}

// ListEndpointConfigsWithContext is a passthrough to the underlying ListEndpointConfigsWithContext method.
// It will increment the count of requests made to ListEndpointConfigs.
func (c *SageMaker) ListEndpointConfigsWithContext(ctx aws.Context, input *sagemaker.ListEndpointConfigsInput, opts ...request.Option) (*sagemaker.ListEndpointConfigsOutput, error) {
	c.inc("ListEndpointConfigs")
	return c.svc.ListEndpointConfigsWithContext(ctx, input, opts...)
}

// ListEndpointConfigsPages is a passthrough to the underlying ListEndpointConfigsPages method.
// It will increment the count of requests made to ListEndpointConfigs on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListEndpointConfigsPagesWithContext to avoid this.
func (c *SageMaker) ListEndpointConfigsPages(input *sagemaker.ListEndpointConfigsInput, fn func(*sagemaker.ListEndpointConfigsOutput, bool) bool) error {
	wrappedFn := func(page *sagemaker.ListEndpointConfigsOutput, lastPage bool) bool {
		c.inc("ListEndpointConfigs")
		return fn(page, lastPage)
	}
	return c.svc.ListEndpointConfigsPages(input, wrappedFn)
}

// ListEndpointConfigsPagesWithContext is a passthrough to the underlying ListEndpointConfigsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListEndpointConfigs when applied to the request.
func (c *SageMaker) ListEndpointConfigsPagesWithContext(ctx aws.Context, input *sagemaker.ListEndpointConfigsInput, fn func(*sagemaker.ListEndpointConfigsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListEndpointConfigs"))
	return c.svc.ListEndpointConfigsPagesWithContext(ctx, input, fn, opts...)
}

// ListEndpointsRequest is a passthrough to the underlying ListEndpointsRequest.
// It will increment the count of requests made to ListEndpoints.
func (c *SageMaker) ListEndpointsRequest(input *sagemaker.ListEndpointsInput) (req *request.Request, output *sagemaker.ListEndpointsOutput) {
	c.inc("ListEndpoints")
	return c.svc.ListEndpointsRequest(input)
}

// ListEndpoints is a passthrough to the underlying ListEndpoints method.
// It will increment the count of requests made to ListEndpoints.
func (c *SageMaker) ListEndpoints(input *sagemaker.ListEndpointsInput) (*sagemaker.ListEndpointsOutput, error) {
	c.inc("ListEndpoints")
	return c.svc.ListEndpoints(input)
}

// ListEndpointsWithContext is a passthrough to the underlying ListEndpointsWithContext method.
// It will increment the count of requests made to ListEndpoints.
func (c *SageMaker) ListEndpointsWithContext(ctx aws.Context, input *sagemaker.ListEndpointsInput, opts ...request.Option) (*sagemaker.ListEndpointsOutput, error) {
	c.inc("ListEndpoints")
	return c.svc.ListEndpointsWithContext(ctx, input, opts...)
}

// ListEndpointsPages is a passthrough to the underlying ListEndpointsPages method.
// It will increment the count of requests made to ListEndpoints on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListEndpointsPagesWithContext to avoid this.
func (c *SageMaker) ListEndpointsPages(input *sagemaker.ListEndpointsInput, fn func(*sagemaker.ListEndpointsOutput, bool) bool) error {
	wrappedFn := func(page *sagemaker.ListEndpointsOutput, lastPage bool) bool {
		c.inc("ListEndpoints")
		return fn(page, lastPage)
	}
	return c.svc.ListEndpointsPages(input, wrappedFn)
}

// ListEndpointsPagesWithContext is a passthrough to the underlying ListEndpointsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListEndpoints when applied to the request.
func (c *SageMaker) ListEndpointsPagesWithContext(ctx aws.Context, input *sagemaker.ListEndpointsInput, fn func(*sagemaker.ListEndpointsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListEndpoints"))
	return c.svc.ListEndpointsPagesWithContext(ctx, input, fn, opts...)
}

// ListModelsRequest is a passthrough to the underlying ListModelsRequest.
// It will increment the count of requests made to ListModels.
func (c *SageMaker) ListModelsRequest(input *sagemaker.ListModelsInput) (req *request.Request, output *sagemaker.ListModelsOutput) {
	c.inc("ListModels")
	return c.svc.ListModelsRequest(input)
}

// ListModels is a passthrough to the underlying ListModels method.
// It will increment the count of requests made to ListModels.
func (c *SageMaker) ListModels(input *sagemaker.ListModelsInput) (*sagemaker.ListModelsOutput, error) {
	c.inc("ListModels")
	return c.svc.ListModels(input)
}

// ListModelsWithContext is a passthrough to the underlying ListModelsWithContext method.
// It will increment the count of requests made to ListModels.
func (c *SageMaker) ListModelsWithContext(ctx aws.Context, input *sagemaker.ListModelsInput, opts ...request.Option) (*sagemaker.ListModelsOutput, error) {
	c.inc("ListModels")
	return c.svc.ListModelsWithContext(ctx, input, opts...)
}

// ListModelsPages is a passthrough to the underlying ListModelsPages method.
// It will increment the count of requests made to ListModels on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListModelsPagesWithContext to avoid this.
func (c *SageMaker) ListModelsPages(input *sagemaker.ListModelsInput, fn func(*sagemaker.ListModelsOutput, bool) bool) error {
	wrappedFn := func(page *sagemaker.ListModelsOutput, lastPage bool) bool {
		c.inc("ListModels")
		return fn(page, lastPage)
	}
	return c.svc.ListModelsPages(input, wrappedFn)
}

// ListModelsPagesWithContext is a passthrough to the underlying ListModelsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListModels when applied to the request.
func (c *SageMaker) ListModelsPagesWithContext(ctx aws.Context, input *sagemaker.ListModelsInput, fn func(*sagemaker.ListModelsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListModels"))
	return c.svc.ListModelsPagesWithContext(ctx, input, fn, opts...)
}

// ListNotebookInstancesRequest is a passthrough to the underlying ListNotebookInstancesRequest.
// It will increment the count of requests made to ListNotebookInstances.
func (c *SageMaker) ListNotebookInstancesRequest(input *sagemaker.ListNotebookInstancesInput) (req *request.Request, output *sagemaker.ListNotebookInstancesOutput) {
	c.inc("ListNotebookInstances")
	return c.svc.ListNotebookInstancesRequest(input)
}

// ListNotebookInstances is a passthrough to the underlying ListNotebookInstances method.
// It will increment the count of requests made to ListNotebookInstances.
func (c *SageMaker) ListNotebookInstances(input *sagemaker.ListNotebookInstancesInput) (*sagemaker.ListNotebookInstancesOutput, error) {
	c.inc("ListNotebookInstances")
	return c.svc.ListNotebookInstances(input)
}

// ListNotebookInstancesWithContext is a passthrough to the underlying ListNotebookInstancesWithContext method.
// It will increment the count of requests made to ListNotebookInstances.
func (c *SageMaker) ListNotebookInstancesWithContext(ctx aws.Context, input *sagemaker.ListNotebookInstancesInput, opts ...request.Option) (*sagemaker.ListNotebookInstancesOutput, error) {
	c.inc("ListNotebookInstances")
	return c.svc.ListNotebookInstancesWithContext(ctx, input, opts...)
}

// ListNotebookInstancesPages is a passthrough to the underlying ListNotebookInstancesPages method.
// It will increment the count of requests made to ListNotebookInstances on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListNotebookInstancesPagesWithContext to avoid this.
func (c *SageMaker) ListNotebookInstancesPages(input *sagemaker.ListNotebookInstancesInput, fn func(*sagemaker.ListNotebookInstancesOutput, bool) bool) error {
	wrappedFn := func(page *sagemaker.ListNotebookInstancesOutput, lastPage bool) bool {
		c.inc("ListNotebookInstances")
		return fn(page, lastPage)
	}
	return c.svc.ListNotebookInstancesPages(input, wrappedFn)
}

// ListNotebookInstancesPagesWithContext is a passthrough to the underlying ListNotebookInstancesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListNotebookInstances when applied to the request.
func (c *SageMaker) ListNotebookInstancesPagesWithContext(ctx aws.Context, input *sagemaker.ListNotebookInstancesInput, fn func(*sagemaker.ListNotebookInstancesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListNotebookInstances"))
	return c.svc.ListNotebookInstancesPagesWithContext(ctx, input, fn, opts...)
}

// ListTagsRequest is a passthrough to the underlying ListTagsRequest.
// It will increment the count of requests made to ListTags.
func (c *SageMaker) ListTagsRequest(input *sagemaker.ListTagsInput) (req *request.Request, output *sagemaker.ListTagsOutput) {
	c.inc("ListTags")
	return c.svc.ListTagsRequest(input)
}

// ListTags is a passthrough to the underlying ListTags method.
// It will increment the count of requests made to ListTags.
func (c *SageMaker) ListTags(input *sagemaker.ListTagsInput) (*sagemaker.ListTagsOutput, error) {
	c.inc("ListTags")
	return c.svc.ListTags(input)
}

// ListTagsWithContext is a passthrough to the underlying ListTagsWithContext method.
// It will increment the count of requests made to ListTags.
func (c *SageMaker) ListTagsWithContext(ctx aws.Context, input *sagemaker.ListTagsInput, opts ...request.Option) (*sagemaker.ListTagsOutput, error) {
	c.inc("ListTags")
	return c.svc.ListTagsWithContext(ctx, input, opts...)
}

// ListTagsPages is a passthrough to the underlying ListTagsPages method.
// It will increment the count of requests made to ListTags on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListTagsPagesWithContext to avoid this.
func (c *SageMaker) ListTagsPages(input *sagemaker.ListTagsInput, fn func(*sagemaker.ListTagsOutput, bool) bool) error {
	wrappedFn := func(page *sagemaker.ListTagsOutput, lastPage bool) bool {
		c.inc("ListTags")
		return fn(page, lastPage)
	}
	return c.svc.ListTagsPages(input, wrappedFn)
}

// ListTagsPagesWithContext is a passthrough to the underlying ListTagsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListTags when applied to the request.
func (c *SageMaker) ListTagsPagesWithContext(ctx aws.Context, input *sagemaker.ListTagsInput, fn func(*sagemaker.ListTagsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListTags"))
	return c.svc.ListTagsPagesWithContext(ctx, input, fn, opts...)
}

// ListTrainingJobsRequest is a passthrough to the underlying ListTrainingJobsRequest.
// It will increment the count of requests made to ListTrainingJobs.
func (c *SageMaker) ListTrainingJobsRequest(input *sagemaker.ListTrainingJobsInput) (req *request.Request, output *sagemaker.ListTrainingJobsOutput) {
	c.inc("ListTrainingJobs")
	return c.svc.ListTrainingJobsRequest(input)
}

// ListTrainingJobs is a passthrough to the underlying ListTrainingJobs method.
// It will increment the count of requests made to ListTrainingJobs.
func (c *SageMaker) ListTrainingJobs(input *sagemaker.ListTrainingJobsInput) (*sagemaker.ListTrainingJobsOutput, error) {
	c.inc("ListTrainingJobs")
	return c.svc.ListTrainingJobs(input)
}

// ListTrainingJobsWithContext is a passthrough to the underlying ListTrainingJobsWithContext method.
// It will increment the count of requests made to ListTrainingJobs.
func (c *SageMaker) ListTrainingJobsWithContext(ctx aws.Context, input *sagemaker.ListTrainingJobsInput, opts ...request.Option) (*sagemaker.ListTrainingJobsOutput, error) {
	c.inc("ListTrainingJobs")
	return c.svc.ListTrainingJobsWithContext(ctx, input, opts...)
}

// ListTrainingJobsPages is a passthrough to the underlying ListTrainingJobsPages method.
// It will increment the count of requests made to ListTrainingJobs on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListTrainingJobsPagesWithContext to avoid this.
func (c *SageMaker) ListTrainingJobsPages(input *sagemaker.ListTrainingJobsInput, fn func(*sagemaker.ListTrainingJobsOutput, bool) bool) error {
	wrappedFn := func(page *sagemaker.ListTrainingJobsOutput, lastPage bool) bool {
		c.inc("ListTrainingJobs")
		return fn(page, lastPage)
	}
	return c.svc.ListTrainingJobsPages(input, wrappedFn)
}

// ListTrainingJobsPagesWithContext is a passthrough to the underlying ListTrainingJobsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListTrainingJobs when applied to the request.
func (c *SageMaker) ListTrainingJobsPagesWithContext(ctx aws.Context, input *sagemaker.ListTrainingJobsInput, fn func(*sagemaker.ListTrainingJobsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListTrainingJobs"))
	return c.svc.ListTrainingJobsPagesWithContext(ctx, input, fn, opts...)
}

// StartNotebookInstanceRequest is a passthrough to the underlying StartNotebookInstanceRequest.
// It will increment the count of requests made to StartNotebookInstance.
func (c *SageMaker) StartNotebookInstanceRequest(input *sagemaker.StartNotebookInstanceInput) (req *request.Request, output *sagemaker.StartNotebookInstanceOutput) {
	c.inc("StartNotebookInstance")
	return c.svc.StartNotebookInstanceRequest(input)
}

// StartNotebookInstance is a passthrough to the underlying StartNotebookInstance method.
// It will increment the count of requests made to StartNotebookInstance.
func (c *SageMaker) StartNotebookInstance(input *sagemaker.StartNotebookInstanceInput) (*sagemaker.StartNotebookInstanceOutput, error) {
	c.inc("StartNotebookInstance")
	return c.svc.StartNotebookInstance(input)
}

// StartNotebookInstanceWithContext is a passthrough to the underlying StartNotebookInstanceWithContext method.
// It will increment the count of requests made to StartNotebookInstance.
func (c *SageMaker) StartNotebookInstanceWithContext(ctx aws.Context, input *sagemaker.StartNotebookInstanceInput, opts ...request.Option) (*sagemaker.StartNotebookInstanceOutput, error) {
	c.inc("StartNotebookInstance")
	return c.svc.StartNotebookInstanceWithContext(ctx, input, opts...)
}

// StopNotebookInstanceRequest is a passthrough to the underlying StopNotebookInstanceRequest.
// It will increment the count of requests made to StopNotebookInstance.
func (c *SageMaker) StopNotebookInstanceRequest(input *sagemaker.StopNotebookInstanceInput) (req *request.Request, output *sagemaker.StopNotebookInstanceOutput) {
	c.inc("StopNotebookInstance")
	return c.svc.StopNotebookInstanceRequest(input)
}

// StopNotebookInstance is a passthrough to the underlying StopNotebookInstance method.
// It will increment the count of requests made to StopNotebookInstance.
func (c *SageMaker) StopNotebookInstance(input *sagemaker.StopNotebookInstanceInput) (*sagemaker.StopNotebookInstanceOutput, error) {
	c.inc("StopNotebookInstance")
	return c.svc.StopNotebookInstance(input)
}

// StopNotebookInstanceWithContext is a passthrough to the underlying StopNotebookInstanceWithContext method.
// It will increment the count of requests made to StopNotebookInstance.
func (c *SageMaker) StopNotebookInstanceWithContext(ctx aws.Context, input *sagemaker.StopNotebookInstanceInput, opts ...request.Option) (*sagemaker.StopNotebookInstanceOutput, error) {
	c.inc("StopNotebookInstance")
	return c.svc.StopNotebookInstanceWithContext(ctx, input, opts...)
}

// StopTrainingJobRequest is a passthrough to the underlying StopTrainingJobRequest.
// It will increment the count of requests made to StopTrainingJob.
func (c *SageMaker) StopTrainingJobRequest(input *sagemaker.StopTrainingJobInput) (req *request.Request, output *sagemaker.StopTrainingJobOutput) {
	c.inc("StopTrainingJob")
	return c.svc.StopTrainingJobRequest(input)
}

// StopTrainingJob is a passthrough to the underlying StopTrainingJob method.
// It will increment the count of requests made to StopTrainingJob.
func (c *SageMaker) StopTrainingJob(input *sagemaker.StopTrainingJobInput) (*sagemaker.StopTrainingJobOutput, error) {
	c.inc("StopTrainingJob")
	return c.svc.StopTrainingJob(input)
}

// StopTrainingJobWithContext is a passthrough to the underlying StopTrainingJobWithContext method.
// It will increment the count of requests made to StopTrainingJob.
func (c *SageMaker) StopTrainingJobWithContext(ctx aws.Context, input *sagemaker.StopTrainingJobInput, opts ...request.Option) (*sagemaker.StopTrainingJobOutput, error) {
	c.inc("StopTrainingJob")
	return c.svc.StopTrainingJobWithContext(ctx, input, opts...)
}

// UpdateEndpointRequest is a passthrough to the underlying UpdateEndpointRequest.
// It will increment the count of requests made to UpdateEndpoint.
func (c *SageMaker) UpdateEndpointRequest(input *sagemaker.UpdateEndpointInput) (req *request.Request, output *sagemaker.UpdateEndpointOutput) {
	c.inc("UpdateEndpoint")
	return c.svc.UpdateEndpointRequest(input)
}

// UpdateEndpoint is a passthrough to the underlying UpdateEndpoint method.
// It will increment the count of requests made to UpdateEndpoint.
func (c *SageMaker) UpdateEndpoint(input *sagemaker.UpdateEndpointInput) (*sagemaker.UpdateEndpointOutput, error) {
	c.inc("UpdateEndpoint")
	return c.svc.UpdateEndpoint(input)
}

// UpdateEndpointWithContext is a passthrough to the underlying UpdateEndpointWithContext method.
// It will increment the count of requests made to UpdateEndpoint.
func (c *SageMaker) UpdateEndpointWithContext(ctx aws.Context, input *sagemaker.UpdateEndpointInput, opts ...request.Option) (*sagemaker.UpdateEndpointOutput, error) {
	c.inc("UpdateEndpoint")
	return c.svc.UpdateEndpointWithContext(ctx, input, opts...)
}

// UpdateEndpointWeightsAndCapacitiesRequest is a passthrough to the underlying UpdateEndpointWeightsAndCapacitiesRequest.
// It will increment the count of requests made to UpdateEndpointWeightsAndCapacities.
func (c *SageMaker) UpdateEndpointWeightsAndCapacitiesRequest(input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (req *request.Request, output *sagemaker.UpdateEndpointWeightsAndCapacitiesOutput) {
	c.inc("UpdateEndpointWeightsAndCapacities")
	return c.svc.UpdateEndpointWeightsAndCapacitiesRequest(input)
}

// UpdateEndpointWeightsAndCapacities is a passthrough to the underlying UpdateEndpointWeightsAndCapacities method.
// It will increment the count of requests made to UpdateEndpointWeightsAndCapacities.
func (c *SageMaker) UpdateEndpointWeightsAndCapacities(input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	c.inc("UpdateEndpointWeightsAndCapacities")
	return c.svc.UpdateEndpointWeightsAndCapacities(input)
}

// UpdateEndpointWeightsAndCapacitiesWithContext is a passthrough to the underlying UpdateEndpointWeightsAndCapacitiesWithContext method.
// It will increment the count of requests made to UpdateEndpointWeightsAndCapacities.
func (c *SageMaker) UpdateEndpointWeightsAndCapacitiesWithContext(ctx aws.Context, input *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, opts ...request.Option) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	c.inc("UpdateEndpointWeightsAndCapacities")
	return c.svc.UpdateEndpointWeightsAndCapacitiesWithContext(ctx, input, opts...)
}

// UpdateNotebookInstanceRequest is a passthrough to the underlying UpdateNotebookInstanceRequest.
// It will increment the count of requests made to UpdateNotebookInstance.
func (c *SageMaker) UpdateNotebookInstanceRequest(input *sagemaker.UpdateNotebookInstanceInput) (req *request.Request, output *sagemaker.UpdateNotebookInstanceOutput) {
	c.inc("UpdateNotebookInstance")
	return c.svc.UpdateNotebookInstanceRequest(input)
}

// UpdateNotebookInstance is a passthrough to the underlying UpdateNotebookInstance method.
// It will increment the count of requests made to UpdateNotebookInstance.
func (c *SageMaker) UpdateNotebookInstance(input *sagemaker.UpdateNotebookInstanceInput) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	c.inc("UpdateNotebookInstance")
	return c.svc.UpdateNotebookInstance(input)
}

// UpdateNotebookInstanceWithContext is a passthrough to the underlying UpdateNotebookInstanceWithContext method.
// It will increment the count of requests made to UpdateNotebookInstance.
func (c *SageMaker) UpdateNotebookInstanceWithContext(ctx aws.Context, input *sagemaker.UpdateNotebookInstanceInput, opts ...request.Option) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	c.inc("UpdateNotebookInstance")
	return c.svc.UpdateNotebookInstanceWithContext(ctx, input, opts...)
}
