// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package redshiftcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/redshift"
)

// AuthorizeClusterSecurityGroupIngressRequest is a passthrough to the underlying AuthorizeClusterSecurityGroupIngressRequest.
// It will increment the count of requests made to AuthorizeClusterSecurityGroupIngress.
func (c *Redshift) AuthorizeClusterSecurityGroupIngressRequest(input *redshift.AuthorizeClusterSecurityGroupIngressInput) (req *request.Request, output *redshift.AuthorizeClusterSecurityGroupIngressOutput) {
	c.inc("AuthorizeClusterSecurityGroupIngress")
	return c.svc.AuthorizeClusterSecurityGroupIngressRequest(input)
}

// AuthorizeClusterSecurityGroupIngress is a passthrough to the underlying AuthorizeClusterSecurityGroupIngress method.
// It will increment the count of requests made to AuthorizeClusterSecurityGroupIngress.
func (c *Redshift) AuthorizeClusterSecurityGroupIngress(input *redshift.AuthorizeClusterSecurityGroupIngressInput) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error) {
	c.inc("AuthorizeClusterSecurityGroupIngress")
	return c.svc.AuthorizeClusterSecurityGroupIngress(input)
}

// AuthorizeClusterSecurityGroupIngressWithContext is a passthrough to the underlying AuthorizeClusterSecurityGroupIngressWithContext method.
// It will increment the count of requests made to AuthorizeClusterSecurityGroupIngress.
func (c *Redshift) AuthorizeClusterSecurityGroupIngressWithContext(ctx aws.Context, input *redshift.AuthorizeClusterSecurityGroupIngressInput, opts ...request.Option) (*redshift.AuthorizeClusterSecurityGroupIngressOutput, error) {
	c.inc("AuthorizeClusterSecurityGroupIngress")
	return c.svc.AuthorizeClusterSecurityGroupIngressWithContext(ctx, input, opts...)
}

// AuthorizeSnapshotAccessRequest is a passthrough to the underlying AuthorizeSnapshotAccessRequest.
// It will increment the count of requests made to AuthorizeSnapshotAccess.
func (c *Redshift) AuthorizeSnapshotAccessRequest(input *redshift.AuthorizeSnapshotAccessInput) (req *request.Request, output *redshift.AuthorizeSnapshotAccessOutput) {
	c.inc("AuthorizeSnapshotAccess")
	return c.svc.AuthorizeSnapshotAccessRequest(input)
}

// AuthorizeSnapshotAccess is a passthrough to the underlying AuthorizeSnapshotAccess method.
// It will increment the count of requests made to AuthorizeSnapshotAccess.
func (c *Redshift) AuthorizeSnapshotAccess(input *redshift.AuthorizeSnapshotAccessInput) (*redshift.AuthorizeSnapshotAccessOutput, error) {
	c.inc("AuthorizeSnapshotAccess")
	return c.svc.AuthorizeSnapshotAccess(input)
}

// AuthorizeSnapshotAccessWithContext is a passthrough to the underlying AuthorizeSnapshotAccessWithContext method.
// It will increment the count of requests made to AuthorizeSnapshotAccess.
func (c *Redshift) AuthorizeSnapshotAccessWithContext(ctx aws.Context, input *redshift.AuthorizeSnapshotAccessInput, opts ...request.Option) (*redshift.AuthorizeSnapshotAccessOutput, error) {
	c.inc("AuthorizeSnapshotAccess")
	return c.svc.AuthorizeSnapshotAccessWithContext(ctx, input, opts...)
}

// CopyClusterSnapshotRequest is a passthrough to the underlying CopyClusterSnapshotRequest.
// It will increment the count of requests made to CopyClusterSnapshot.
func (c *Redshift) CopyClusterSnapshotRequest(input *redshift.CopyClusterSnapshotInput) (req *request.Request, output *redshift.CopyClusterSnapshotOutput) {
	c.inc("CopyClusterSnapshot")
	return c.svc.CopyClusterSnapshotRequest(input)
}

// CopyClusterSnapshot is a passthrough to the underlying CopyClusterSnapshot method.
// It will increment the count of requests made to CopyClusterSnapshot.
func (c *Redshift) CopyClusterSnapshot(input *redshift.CopyClusterSnapshotInput) (*redshift.CopyClusterSnapshotOutput, error) {
	c.inc("CopyClusterSnapshot")
	return c.svc.CopyClusterSnapshot(input)
}

// CopyClusterSnapshotWithContext is a passthrough to the underlying CopyClusterSnapshotWithContext method.
// It will increment the count of requests made to CopyClusterSnapshot.
func (c *Redshift) CopyClusterSnapshotWithContext(ctx aws.Context, input *redshift.CopyClusterSnapshotInput, opts ...request.Option) (*redshift.CopyClusterSnapshotOutput, error) {
	c.inc("CopyClusterSnapshot")
	return c.svc.CopyClusterSnapshotWithContext(ctx, input, opts...)
}

// CreateClusterRequest is a passthrough to the underlying CreateClusterRequest.
// It will increment the count of requests made to CreateCluster.
func (c *Redshift) CreateClusterRequest(input *redshift.CreateClusterInput) (req *request.Request, output *redshift.CreateClusterOutput) {
	c.inc("CreateCluster")
	return c.svc.CreateClusterRequest(input)
}

// CreateCluster is a passthrough to the underlying CreateCluster method.
// It will increment the count of requests made to CreateCluster.
func (c *Redshift) CreateCluster(input *redshift.CreateClusterInput) (*redshift.CreateClusterOutput, error) {
	c.inc("CreateCluster")
	return c.svc.CreateCluster(input)
}

// CreateClusterWithContext is a passthrough to the underlying CreateClusterWithContext method.
// It will increment the count of requests made to CreateCluster.
func (c *Redshift) CreateClusterWithContext(ctx aws.Context, input *redshift.CreateClusterInput, opts ...request.Option) (*redshift.CreateClusterOutput, error) {
	c.inc("CreateCluster")
	return c.svc.CreateClusterWithContext(ctx, input, opts...)
}

// CreateClusterParameterGroupRequest is a passthrough to the underlying CreateClusterParameterGroupRequest.
// It will increment the count of requests made to CreateClusterParameterGroup.
func (c *Redshift) CreateClusterParameterGroupRequest(input *redshift.CreateClusterParameterGroupInput) (req *request.Request, output *redshift.CreateClusterParameterGroupOutput) {
	c.inc("CreateClusterParameterGroup")
	return c.svc.CreateClusterParameterGroupRequest(input)
}

// CreateClusterParameterGroup is a passthrough to the underlying CreateClusterParameterGroup method.
// It will increment the count of requests made to CreateClusterParameterGroup.
func (c *Redshift) CreateClusterParameterGroup(input *redshift.CreateClusterParameterGroupInput) (*redshift.CreateClusterParameterGroupOutput, error) {
	c.inc("CreateClusterParameterGroup")
	return c.svc.CreateClusterParameterGroup(input)
}

// CreateClusterParameterGroupWithContext is a passthrough to the underlying CreateClusterParameterGroupWithContext method.
// It will increment the count of requests made to CreateClusterParameterGroup.
func (c *Redshift) CreateClusterParameterGroupWithContext(ctx aws.Context, input *redshift.CreateClusterParameterGroupInput, opts ...request.Option) (*redshift.CreateClusterParameterGroupOutput, error) {
	c.inc("CreateClusterParameterGroup")
	return c.svc.CreateClusterParameterGroupWithContext(ctx, input, opts...)
}

// CreateClusterSecurityGroupRequest is a passthrough to the underlying CreateClusterSecurityGroupRequest.
// It will increment the count of requests made to CreateClusterSecurityGroup.
func (c *Redshift) CreateClusterSecurityGroupRequest(input *redshift.CreateClusterSecurityGroupInput) (req *request.Request, output *redshift.CreateClusterSecurityGroupOutput) {
	c.inc("CreateClusterSecurityGroup")
	return c.svc.CreateClusterSecurityGroupRequest(input)
}

// CreateClusterSecurityGroup is a passthrough to the underlying CreateClusterSecurityGroup method.
// It will increment the count of requests made to CreateClusterSecurityGroup.
func (c *Redshift) CreateClusterSecurityGroup(input *redshift.CreateClusterSecurityGroupInput) (*redshift.CreateClusterSecurityGroupOutput, error) {
	c.inc("CreateClusterSecurityGroup")
	return c.svc.CreateClusterSecurityGroup(input)
}

// CreateClusterSecurityGroupWithContext is a passthrough to the underlying CreateClusterSecurityGroupWithContext method.
// It will increment the count of requests made to CreateClusterSecurityGroup.
func (c *Redshift) CreateClusterSecurityGroupWithContext(ctx aws.Context, input *redshift.CreateClusterSecurityGroupInput, opts ...request.Option) (*redshift.CreateClusterSecurityGroupOutput, error) {
	c.inc("CreateClusterSecurityGroup")
	return c.svc.CreateClusterSecurityGroupWithContext(ctx, input, opts...)
}

// CreateClusterSnapshotRequest is a passthrough to the underlying CreateClusterSnapshotRequest.
// It will increment the count of requests made to CreateClusterSnapshot.
func (c *Redshift) CreateClusterSnapshotRequest(input *redshift.CreateClusterSnapshotInput) (req *request.Request, output *redshift.CreateClusterSnapshotOutput) {
	c.inc("CreateClusterSnapshot")
	return c.svc.CreateClusterSnapshotRequest(input)
}

// CreateClusterSnapshot is a passthrough to the underlying CreateClusterSnapshot method.
// It will increment the count of requests made to CreateClusterSnapshot.
func (c *Redshift) CreateClusterSnapshot(input *redshift.CreateClusterSnapshotInput) (*redshift.CreateClusterSnapshotOutput, error) {
	c.inc("CreateClusterSnapshot")
	return c.svc.CreateClusterSnapshot(input)
}

// CreateClusterSnapshotWithContext is a passthrough to the underlying CreateClusterSnapshotWithContext method.
// It will increment the count of requests made to CreateClusterSnapshot.
func (c *Redshift) CreateClusterSnapshotWithContext(ctx aws.Context, input *redshift.CreateClusterSnapshotInput, opts ...request.Option) (*redshift.CreateClusterSnapshotOutput, error) {
	c.inc("CreateClusterSnapshot")
	return c.svc.CreateClusterSnapshotWithContext(ctx, input, opts...)
}

// CreateClusterSubnetGroupRequest is a passthrough to the underlying CreateClusterSubnetGroupRequest.
// It will increment the count of requests made to CreateClusterSubnetGroup.
func (c *Redshift) CreateClusterSubnetGroupRequest(input *redshift.CreateClusterSubnetGroupInput) (req *request.Request, output *redshift.CreateClusterSubnetGroupOutput) {
	c.inc("CreateClusterSubnetGroup")
	return c.svc.CreateClusterSubnetGroupRequest(input)
}

// CreateClusterSubnetGroup is a passthrough to the underlying CreateClusterSubnetGroup method.
// It will increment the count of requests made to CreateClusterSubnetGroup.
func (c *Redshift) CreateClusterSubnetGroup(input *redshift.CreateClusterSubnetGroupInput) (*redshift.CreateClusterSubnetGroupOutput, error) {
	c.inc("CreateClusterSubnetGroup")
	return c.svc.CreateClusterSubnetGroup(input)
}

// CreateClusterSubnetGroupWithContext is a passthrough to the underlying CreateClusterSubnetGroupWithContext method.
// It will increment the count of requests made to CreateClusterSubnetGroup.
func (c *Redshift) CreateClusterSubnetGroupWithContext(ctx aws.Context, input *redshift.CreateClusterSubnetGroupInput, opts ...request.Option) (*redshift.CreateClusterSubnetGroupOutput, error) {
	c.inc("CreateClusterSubnetGroup")
	return c.svc.CreateClusterSubnetGroupWithContext(ctx, input, opts...)
}

// CreateEventSubscriptionRequest is a passthrough to the underlying CreateEventSubscriptionRequest.
// It will increment the count of requests made to CreateEventSubscription.
func (c *Redshift) CreateEventSubscriptionRequest(input *redshift.CreateEventSubscriptionInput) (req *request.Request, output *redshift.CreateEventSubscriptionOutput) {
	c.inc("CreateEventSubscription")
	return c.svc.CreateEventSubscriptionRequest(input)
}

// CreateEventSubscription is a passthrough to the underlying CreateEventSubscription method.
// It will increment the count of requests made to CreateEventSubscription.
func (c *Redshift) CreateEventSubscription(input *redshift.CreateEventSubscriptionInput) (*redshift.CreateEventSubscriptionOutput, error) {
	c.inc("CreateEventSubscription")
	return c.svc.CreateEventSubscription(input)
}

// CreateEventSubscriptionWithContext is a passthrough to the underlying CreateEventSubscriptionWithContext method.
// It will increment the count of requests made to CreateEventSubscription.
func (c *Redshift) CreateEventSubscriptionWithContext(ctx aws.Context, input *redshift.CreateEventSubscriptionInput, opts ...request.Option) (*redshift.CreateEventSubscriptionOutput, error) {
	c.inc("CreateEventSubscription")
	return c.svc.CreateEventSubscriptionWithContext(ctx, input, opts...)
}

// CreateHsmClientCertificateRequest is a passthrough to the underlying CreateHsmClientCertificateRequest.
// It will increment the count of requests made to CreateHsmClientCertificate.
func (c *Redshift) CreateHsmClientCertificateRequest(input *redshift.CreateHsmClientCertificateInput) (req *request.Request, output *redshift.CreateHsmClientCertificateOutput) {
	c.inc("CreateHsmClientCertificate")
	return c.svc.CreateHsmClientCertificateRequest(input)
}

// CreateHsmClientCertificate is a passthrough to the underlying CreateHsmClientCertificate method.
// It will increment the count of requests made to CreateHsmClientCertificate.
func (c *Redshift) CreateHsmClientCertificate(input *redshift.CreateHsmClientCertificateInput) (*redshift.CreateHsmClientCertificateOutput, error) {
	c.inc("CreateHsmClientCertificate")
	return c.svc.CreateHsmClientCertificate(input)
}

// CreateHsmClientCertificateWithContext is a passthrough to the underlying CreateHsmClientCertificateWithContext method.
// It will increment the count of requests made to CreateHsmClientCertificate.
func (c *Redshift) CreateHsmClientCertificateWithContext(ctx aws.Context, input *redshift.CreateHsmClientCertificateInput, opts ...request.Option) (*redshift.CreateHsmClientCertificateOutput, error) {
	c.inc("CreateHsmClientCertificate")
	return c.svc.CreateHsmClientCertificateWithContext(ctx, input, opts...)
}

// CreateHsmConfigurationRequest is a passthrough to the underlying CreateHsmConfigurationRequest.
// It will increment the count of requests made to CreateHsmConfiguration.
func (c *Redshift) CreateHsmConfigurationRequest(input *redshift.CreateHsmConfigurationInput) (req *request.Request, output *redshift.CreateHsmConfigurationOutput) {
	c.inc("CreateHsmConfiguration")
	return c.svc.CreateHsmConfigurationRequest(input)
}

// CreateHsmConfiguration is a passthrough to the underlying CreateHsmConfiguration method.
// It will increment the count of requests made to CreateHsmConfiguration.
func (c *Redshift) CreateHsmConfiguration(input *redshift.CreateHsmConfigurationInput) (*redshift.CreateHsmConfigurationOutput, error) {
	c.inc("CreateHsmConfiguration")
	return c.svc.CreateHsmConfiguration(input)
}

// CreateHsmConfigurationWithContext is a passthrough to the underlying CreateHsmConfigurationWithContext method.
// It will increment the count of requests made to CreateHsmConfiguration.
func (c *Redshift) CreateHsmConfigurationWithContext(ctx aws.Context, input *redshift.CreateHsmConfigurationInput, opts ...request.Option) (*redshift.CreateHsmConfigurationOutput, error) {
	c.inc("CreateHsmConfiguration")
	return c.svc.CreateHsmConfigurationWithContext(ctx, input, opts...)
}

// CreateSnapshotCopyGrantRequest is a passthrough to the underlying CreateSnapshotCopyGrantRequest.
// It will increment the count of requests made to CreateSnapshotCopyGrant.
func (c *Redshift) CreateSnapshotCopyGrantRequest(input *redshift.CreateSnapshotCopyGrantInput) (req *request.Request, output *redshift.CreateSnapshotCopyGrantOutput) {
	c.inc("CreateSnapshotCopyGrant")
	return c.svc.CreateSnapshotCopyGrantRequest(input)
}

// CreateSnapshotCopyGrant is a passthrough to the underlying CreateSnapshotCopyGrant method.
// It will increment the count of requests made to CreateSnapshotCopyGrant.
func (c *Redshift) CreateSnapshotCopyGrant(input *redshift.CreateSnapshotCopyGrantInput) (*redshift.CreateSnapshotCopyGrantOutput, error) {
	c.inc("CreateSnapshotCopyGrant")
	return c.svc.CreateSnapshotCopyGrant(input)
}

// CreateSnapshotCopyGrantWithContext is a passthrough to the underlying CreateSnapshotCopyGrantWithContext method.
// It will increment the count of requests made to CreateSnapshotCopyGrant.
func (c *Redshift) CreateSnapshotCopyGrantWithContext(ctx aws.Context, input *redshift.CreateSnapshotCopyGrantInput, opts ...request.Option) (*redshift.CreateSnapshotCopyGrantOutput, error) {
	c.inc("CreateSnapshotCopyGrant")
	return c.svc.CreateSnapshotCopyGrantWithContext(ctx, input, opts...)
}

// CreateTagsRequest is a passthrough to the underlying CreateTagsRequest.
// It will increment the count of requests made to CreateTags.
func (c *Redshift) CreateTagsRequest(input *redshift.CreateTagsInput) (req *request.Request, output *redshift.CreateTagsOutput) {
	c.inc("CreateTags")
	return c.svc.CreateTagsRequest(input)
}

// CreateTags is a passthrough to the underlying CreateTags method.
// It will increment the count of requests made to CreateTags.
func (c *Redshift) CreateTags(input *redshift.CreateTagsInput) (*redshift.CreateTagsOutput, error) {
	c.inc("CreateTags")
	return c.svc.CreateTags(input)
}

// CreateTagsWithContext is a passthrough to the underlying CreateTagsWithContext method.
// It will increment the count of requests made to CreateTags.
func (c *Redshift) CreateTagsWithContext(ctx aws.Context, input *redshift.CreateTagsInput, opts ...request.Option) (*redshift.CreateTagsOutput, error) {
	c.inc("CreateTags")
	return c.svc.CreateTagsWithContext(ctx, input, opts...)
}

// DeleteClusterRequest is a passthrough to the underlying DeleteClusterRequest.
// It will increment the count of requests made to DeleteCluster.
func (c *Redshift) DeleteClusterRequest(input *redshift.DeleteClusterInput) (req *request.Request, output *redshift.DeleteClusterOutput) {
	c.inc("DeleteCluster")
	return c.svc.DeleteClusterRequest(input)
}

// DeleteCluster is a passthrough to the underlying DeleteCluster method.
// It will increment the count of requests made to DeleteCluster.
func (c *Redshift) DeleteCluster(input *redshift.DeleteClusterInput) (*redshift.DeleteClusterOutput, error) {
	c.inc("DeleteCluster")
	return c.svc.DeleteCluster(input)
}

// DeleteClusterWithContext is a passthrough to the underlying DeleteClusterWithContext method.
// It will increment the count of requests made to DeleteCluster.
func (c *Redshift) DeleteClusterWithContext(ctx aws.Context, input *redshift.DeleteClusterInput, opts ...request.Option) (*redshift.DeleteClusterOutput, error) {
	c.inc("DeleteCluster")
	return c.svc.DeleteClusterWithContext(ctx, input, opts...)
}

// DeleteClusterParameterGroupRequest is a passthrough to the underlying DeleteClusterParameterGroupRequest.
// It will increment the count of requests made to DeleteClusterParameterGroup.
func (c *Redshift) DeleteClusterParameterGroupRequest(input *redshift.DeleteClusterParameterGroupInput) (req *request.Request, output *redshift.DeleteClusterParameterGroupOutput) {
	c.inc("DeleteClusterParameterGroup")
	return c.svc.DeleteClusterParameterGroupRequest(input)
}

// DeleteClusterParameterGroup is a passthrough to the underlying DeleteClusterParameterGroup method.
// It will increment the count of requests made to DeleteClusterParameterGroup.
func (c *Redshift) DeleteClusterParameterGroup(input *redshift.DeleteClusterParameterGroupInput) (*redshift.DeleteClusterParameterGroupOutput, error) {
	c.inc("DeleteClusterParameterGroup")
	return c.svc.DeleteClusterParameterGroup(input)
}

// DeleteClusterParameterGroupWithContext is a passthrough to the underlying DeleteClusterParameterGroupWithContext method.
// It will increment the count of requests made to DeleteClusterParameterGroup.
func (c *Redshift) DeleteClusterParameterGroupWithContext(ctx aws.Context, input *redshift.DeleteClusterParameterGroupInput, opts ...request.Option) (*redshift.DeleteClusterParameterGroupOutput, error) {
	c.inc("DeleteClusterParameterGroup")
	return c.svc.DeleteClusterParameterGroupWithContext(ctx, input, opts...)
}

// DeleteClusterSecurityGroupRequest is a passthrough to the underlying DeleteClusterSecurityGroupRequest.
// It will increment the count of requests made to DeleteClusterSecurityGroup.
func (c *Redshift) DeleteClusterSecurityGroupRequest(input *redshift.DeleteClusterSecurityGroupInput) (req *request.Request, output *redshift.DeleteClusterSecurityGroupOutput) {
	c.inc("DeleteClusterSecurityGroup")
	return c.svc.DeleteClusterSecurityGroupRequest(input)
}

// DeleteClusterSecurityGroup is a passthrough to the underlying DeleteClusterSecurityGroup method.
// It will increment the count of requests made to DeleteClusterSecurityGroup.
func (c *Redshift) DeleteClusterSecurityGroup(input *redshift.DeleteClusterSecurityGroupInput) (*redshift.DeleteClusterSecurityGroupOutput, error) {
	c.inc("DeleteClusterSecurityGroup")
	return c.svc.DeleteClusterSecurityGroup(input)
}

// DeleteClusterSecurityGroupWithContext is a passthrough to the underlying DeleteClusterSecurityGroupWithContext method.
// It will increment the count of requests made to DeleteClusterSecurityGroup.
func (c *Redshift) DeleteClusterSecurityGroupWithContext(ctx aws.Context, input *redshift.DeleteClusterSecurityGroupInput, opts ...request.Option) (*redshift.DeleteClusterSecurityGroupOutput, error) {
	c.inc("DeleteClusterSecurityGroup")
	return c.svc.DeleteClusterSecurityGroupWithContext(ctx, input, opts...)
}

// DeleteClusterSnapshotRequest is a passthrough to the underlying DeleteClusterSnapshotRequest.
// It will increment the count of requests made to DeleteClusterSnapshot.
func (c *Redshift) DeleteClusterSnapshotRequest(input *redshift.DeleteClusterSnapshotInput) (req *request.Request, output *redshift.DeleteClusterSnapshotOutput) {
	c.inc("DeleteClusterSnapshot")
	return c.svc.DeleteClusterSnapshotRequest(input)
}

// DeleteClusterSnapshot is a passthrough to the underlying DeleteClusterSnapshot method.
// It will increment the count of requests made to DeleteClusterSnapshot.
func (c *Redshift) DeleteClusterSnapshot(input *redshift.DeleteClusterSnapshotInput) (*redshift.DeleteClusterSnapshotOutput, error) {
	c.inc("DeleteClusterSnapshot")
	return c.svc.DeleteClusterSnapshot(input)
}

// DeleteClusterSnapshotWithContext is a passthrough to the underlying DeleteClusterSnapshotWithContext method.
// It will increment the count of requests made to DeleteClusterSnapshot.
func (c *Redshift) DeleteClusterSnapshotWithContext(ctx aws.Context, input *redshift.DeleteClusterSnapshotInput, opts ...request.Option) (*redshift.DeleteClusterSnapshotOutput, error) {
	c.inc("DeleteClusterSnapshot")
	return c.svc.DeleteClusterSnapshotWithContext(ctx, input, opts...)
}

// DeleteClusterSubnetGroupRequest is a passthrough to the underlying DeleteClusterSubnetGroupRequest.
// It will increment the count of requests made to DeleteClusterSubnetGroup.
func (c *Redshift) DeleteClusterSubnetGroupRequest(input *redshift.DeleteClusterSubnetGroupInput) (req *request.Request, output *redshift.DeleteClusterSubnetGroupOutput) {
	c.inc("DeleteClusterSubnetGroup")
	return c.svc.DeleteClusterSubnetGroupRequest(input)
}

// DeleteClusterSubnetGroup is a passthrough to the underlying DeleteClusterSubnetGroup method.
// It will increment the count of requests made to DeleteClusterSubnetGroup.
func (c *Redshift) DeleteClusterSubnetGroup(input *redshift.DeleteClusterSubnetGroupInput) (*redshift.DeleteClusterSubnetGroupOutput, error) {
	c.inc("DeleteClusterSubnetGroup")
	return c.svc.DeleteClusterSubnetGroup(input)
}

// DeleteClusterSubnetGroupWithContext is a passthrough to the underlying DeleteClusterSubnetGroupWithContext method.
// It will increment the count of requests made to DeleteClusterSubnetGroup.
func (c *Redshift) DeleteClusterSubnetGroupWithContext(ctx aws.Context, input *redshift.DeleteClusterSubnetGroupInput, opts ...request.Option) (*redshift.DeleteClusterSubnetGroupOutput, error) {
	c.inc("DeleteClusterSubnetGroup")
	return c.svc.DeleteClusterSubnetGroupWithContext(ctx, input, opts...)
}

// DeleteEventSubscriptionRequest is a passthrough to the underlying DeleteEventSubscriptionRequest.
// It will increment the count of requests made to DeleteEventSubscription.
func (c *Redshift) DeleteEventSubscriptionRequest(input *redshift.DeleteEventSubscriptionInput) (req *request.Request, output *redshift.DeleteEventSubscriptionOutput) {
	c.inc("DeleteEventSubscription")
	return c.svc.DeleteEventSubscriptionRequest(input)
}

// DeleteEventSubscription is a passthrough to the underlying DeleteEventSubscription method.
// It will increment the count of requests made to DeleteEventSubscription.
func (c *Redshift) DeleteEventSubscription(input *redshift.DeleteEventSubscriptionInput) (*redshift.DeleteEventSubscriptionOutput, error) {
	c.inc("DeleteEventSubscription")
	return c.svc.DeleteEventSubscription(input)
}

// DeleteEventSubscriptionWithContext is a passthrough to the underlying DeleteEventSubscriptionWithContext method.
// It will increment the count of requests made to DeleteEventSubscription.
func (c *Redshift) DeleteEventSubscriptionWithContext(ctx aws.Context, input *redshift.DeleteEventSubscriptionInput, opts ...request.Option) (*redshift.DeleteEventSubscriptionOutput, error) {
	c.inc("DeleteEventSubscription")
	return c.svc.DeleteEventSubscriptionWithContext(ctx, input, opts...)
}

// DeleteHsmClientCertificateRequest is a passthrough to the underlying DeleteHsmClientCertificateRequest.
// It will increment the count of requests made to DeleteHsmClientCertificate.
func (c *Redshift) DeleteHsmClientCertificateRequest(input *redshift.DeleteHsmClientCertificateInput) (req *request.Request, output *redshift.DeleteHsmClientCertificateOutput) {
	c.inc("DeleteHsmClientCertificate")
	return c.svc.DeleteHsmClientCertificateRequest(input)
}

// DeleteHsmClientCertificate is a passthrough to the underlying DeleteHsmClientCertificate method.
// It will increment the count of requests made to DeleteHsmClientCertificate.
func (c *Redshift) DeleteHsmClientCertificate(input *redshift.DeleteHsmClientCertificateInput) (*redshift.DeleteHsmClientCertificateOutput, error) {
	c.inc("DeleteHsmClientCertificate")
	return c.svc.DeleteHsmClientCertificate(input)
}

// DeleteHsmClientCertificateWithContext is a passthrough to the underlying DeleteHsmClientCertificateWithContext method.
// It will increment the count of requests made to DeleteHsmClientCertificate.
func (c *Redshift) DeleteHsmClientCertificateWithContext(ctx aws.Context, input *redshift.DeleteHsmClientCertificateInput, opts ...request.Option) (*redshift.DeleteHsmClientCertificateOutput, error) {
	c.inc("DeleteHsmClientCertificate")
	return c.svc.DeleteHsmClientCertificateWithContext(ctx, input, opts...)
}

// DeleteHsmConfigurationRequest is a passthrough to the underlying DeleteHsmConfigurationRequest.
// It will increment the count of requests made to DeleteHsmConfiguration.
func (c *Redshift) DeleteHsmConfigurationRequest(input *redshift.DeleteHsmConfigurationInput) (req *request.Request, output *redshift.DeleteHsmConfigurationOutput) {
	c.inc("DeleteHsmConfiguration")
	return c.svc.DeleteHsmConfigurationRequest(input)
}

// DeleteHsmConfiguration is a passthrough to the underlying DeleteHsmConfiguration method.
// It will increment the count of requests made to DeleteHsmConfiguration.
func (c *Redshift) DeleteHsmConfiguration(input *redshift.DeleteHsmConfigurationInput) (*redshift.DeleteHsmConfigurationOutput, error) {
	c.inc("DeleteHsmConfiguration")
	return c.svc.DeleteHsmConfiguration(input)
}

// DeleteHsmConfigurationWithContext is a passthrough to the underlying DeleteHsmConfigurationWithContext method.
// It will increment the count of requests made to DeleteHsmConfiguration.
func (c *Redshift) DeleteHsmConfigurationWithContext(ctx aws.Context, input *redshift.DeleteHsmConfigurationInput, opts ...request.Option) (*redshift.DeleteHsmConfigurationOutput, error) {
	c.inc("DeleteHsmConfiguration")
	return c.svc.DeleteHsmConfigurationWithContext(ctx, input, opts...)
}

// DeleteSnapshotCopyGrantRequest is a passthrough to the underlying DeleteSnapshotCopyGrantRequest.
// It will increment the count of requests made to DeleteSnapshotCopyGrant.
func (c *Redshift) DeleteSnapshotCopyGrantRequest(input *redshift.DeleteSnapshotCopyGrantInput) (req *request.Request, output *redshift.DeleteSnapshotCopyGrantOutput) {
	c.inc("DeleteSnapshotCopyGrant")
	return c.svc.DeleteSnapshotCopyGrantRequest(input)
}

// DeleteSnapshotCopyGrant is a passthrough to the underlying DeleteSnapshotCopyGrant method.
// It will increment the count of requests made to DeleteSnapshotCopyGrant.
func (c *Redshift) DeleteSnapshotCopyGrant(input *redshift.DeleteSnapshotCopyGrantInput) (*redshift.DeleteSnapshotCopyGrantOutput, error) {
	c.inc("DeleteSnapshotCopyGrant")
	return c.svc.DeleteSnapshotCopyGrant(input)
}

// DeleteSnapshotCopyGrantWithContext is a passthrough to the underlying DeleteSnapshotCopyGrantWithContext method.
// It will increment the count of requests made to DeleteSnapshotCopyGrant.
func (c *Redshift) DeleteSnapshotCopyGrantWithContext(ctx aws.Context, input *redshift.DeleteSnapshotCopyGrantInput, opts ...request.Option) (*redshift.DeleteSnapshotCopyGrantOutput, error) {
	c.inc("DeleteSnapshotCopyGrant")
	return c.svc.DeleteSnapshotCopyGrantWithContext(ctx, input, opts...)
}

// DeleteTagsRequest is a passthrough to the underlying DeleteTagsRequest.
// It will increment the count of requests made to DeleteTags.
func (c *Redshift) DeleteTagsRequest(input *redshift.DeleteTagsInput) (req *request.Request, output *redshift.DeleteTagsOutput) {
	c.inc("DeleteTags")
	return c.svc.DeleteTagsRequest(input)
}

// DeleteTags is a passthrough to the underlying DeleteTags method.
// It will increment the count of requests made to DeleteTags.
func (c *Redshift) DeleteTags(input *redshift.DeleteTagsInput) (*redshift.DeleteTagsOutput, error) {
	c.inc("DeleteTags")
	return c.svc.DeleteTags(input)
}

// DeleteTagsWithContext is a passthrough to the underlying DeleteTagsWithContext method.
// It will increment the count of requests made to DeleteTags.
func (c *Redshift) DeleteTagsWithContext(ctx aws.Context, input *redshift.DeleteTagsInput, opts ...request.Option) (*redshift.DeleteTagsOutput, error) {
	c.inc("DeleteTags")
	return c.svc.DeleteTagsWithContext(ctx, input, opts...)
}

// DescribeClusterParameterGroupsRequest is a passthrough to the underlying DescribeClusterParameterGroupsRequest.
// It will increment the count of requests made to DescribeClusterParameterGroups.
func (c *Redshift) DescribeClusterParameterGroupsRequest(input *redshift.DescribeClusterParameterGroupsInput) (req *request.Request, output *redshift.DescribeClusterParameterGroupsOutput) {
	c.inc("DescribeClusterParameterGroups")
	return c.svc.DescribeClusterParameterGroupsRequest(input)
}

// DescribeClusterParameterGroups is a passthrough to the underlying DescribeClusterParameterGroups method.
// It will increment the count of requests made to DescribeClusterParameterGroups.
func (c *Redshift) DescribeClusterParameterGroups(input *redshift.DescribeClusterParameterGroupsInput) (*redshift.DescribeClusterParameterGroupsOutput, error) {
	c.inc("DescribeClusterParameterGroups")
	return c.svc.DescribeClusterParameterGroups(input)
}

// DescribeClusterParameterGroupsWithContext is a passthrough to the underlying DescribeClusterParameterGroupsWithContext method.
// It will increment the count of requests made to DescribeClusterParameterGroups.
func (c *Redshift) DescribeClusterParameterGroupsWithContext(ctx aws.Context, input *redshift.DescribeClusterParameterGroupsInput, opts ...request.Option) (*redshift.DescribeClusterParameterGroupsOutput, error) {
	c.inc("DescribeClusterParameterGroups")
	return c.svc.DescribeClusterParameterGroupsWithContext(ctx, input, opts...)
}

// DescribeClusterParameterGroupsPages is a passthrough to the underlying DescribeClusterParameterGroupsPages method.
// It will increment the count of requests made to DescribeClusterParameterGroups on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeClusterParameterGroupsPagesWithContext to avoid this.
func (c *Redshift) DescribeClusterParameterGroupsPages(input *redshift.DescribeClusterParameterGroupsInput, fn func(*redshift.DescribeClusterParameterGroupsOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeClusterParameterGroupsOutput, lastPage bool) bool {
		c.inc("DescribeClusterParameterGroups")
		return fn(page, lastPage)
	}
	return c.svc.DescribeClusterParameterGroupsPages(input, wrappedFn)
}

// DescribeClusterParameterGroupsPagesWithContext is a passthrough to the underlying DescribeClusterParameterGroupsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeClusterParameterGroups when applied to the request.
func (c *Redshift) DescribeClusterParameterGroupsPagesWithContext(ctx aws.Context, input *redshift.DescribeClusterParameterGroupsInput, fn func(*redshift.DescribeClusterParameterGroupsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeClusterParameterGroups"))
	return c.svc.DescribeClusterParameterGroupsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeClusterParametersRequest is a passthrough to the underlying DescribeClusterParametersRequest.
// It will increment the count of requests made to DescribeClusterParameters.
func (c *Redshift) DescribeClusterParametersRequest(input *redshift.DescribeClusterParametersInput) (req *request.Request, output *redshift.DescribeClusterParametersOutput) {
	c.inc("DescribeClusterParameters")
	return c.svc.DescribeClusterParametersRequest(input)
}

// DescribeClusterParameters is a passthrough to the underlying DescribeClusterParameters method.
// It will increment the count of requests made to DescribeClusterParameters.
func (c *Redshift) DescribeClusterParameters(input *redshift.DescribeClusterParametersInput) (*redshift.DescribeClusterParametersOutput, error) {
	c.inc("DescribeClusterParameters")
	return c.svc.DescribeClusterParameters(input)
}

// DescribeClusterParametersWithContext is a passthrough to the underlying DescribeClusterParametersWithContext method.
// It will increment the count of requests made to DescribeClusterParameters.
func (c *Redshift) DescribeClusterParametersWithContext(ctx aws.Context, input *redshift.DescribeClusterParametersInput, opts ...request.Option) (*redshift.DescribeClusterParametersOutput, error) {
	c.inc("DescribeClusterParameters")
	return c.svc.DescribeClusterParametersWithContext(ctx, input, opts...)
}

// DescribeClusterParametersPages is a passthrough to the underlying DescribeClusterParametersPages method.
// It will increment the count of requests made to DescribeClusterParameters on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeClusterParametersPagesWithContext to avoid this.
func (c *Redshift) DescribeClusterParametersPages(input *redshift.DescribeClusterParametersInput, fn func(*redshift.DescribeClusterParametersOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeClusterParametersOutput, lastPage bool) bool {
		c.inc("DescribeClusterParameters")
		return fn(page, lastPage)
	}
	return c.svc.DescribeClusterParametersPages(input, wrappedFn)
}

// DescribeClusterParametersPagesWithContext is a passthrough to the underlying DescribeClusterParametersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeClusterParameters when applied to the request.
func (c *Redshift) DescribeClusterParametersPagesWithContext(ctx aws.Context, input *redshift.DescribeClusterParametersInput, fn func(*redshift.DescribeClusterParametersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeClusterParameters"))
	return c.svc.DescribeClusterParametersPagesWithContext(ctx, input, fn, opts...)
}

// DescribeClusterSecurityGroupsRequest is a passthrough to the underlying DescribeClusterSecurityGroupsRequest.
// It will increment the count of requests made to DescribeClusterSecurityGroups.
func (c *Redshift) DescribeClusterSecurityGroupsRequest(input *redshift.DescribeClusterSecurityGroupsInput) (req *request.Request, output *redshift.DescribeClusterSecurityGroupsOutput) {
	c.inc("DescribeClusterSecurityGroups")
	return c.svc.DescribeClusterSecurityGroupsRequest(input)
}

// DescribeClusterSecurityGroups is a passthrough to the underlying DescribeClusterSecurityGroups method.
// It will increment the count of requests made to DescribeClusterSecurityGroups.
func (c *Redshift) DescribeClusterSecurityGroups(input *redshift.DescribeClusterSecurityGroupsInput) (*redshift.DescribeClusterSecurityGroupsOutput, error) {
	c.inc("DescribeClusterSecurityGroups")
	return c.svc.DescribeClusterSecurityGroups(input)
}

// DescribeClusterSecurityGroupsWithContext is a passthrough to the underlying DescribeClusterSecurityGroupsWithContext method.
// It will increment the count of requests made to DescribeClusterSecurityGroups.
func (c *Redshift) DescribeClusterSecurityGroupsWithContext(ctx aws.Context, input *redshift.DescribeClusterSecurityGroupsInput, opts ...request.Option) (*redshift.DescribeClusterSecurityGroupsOutput, error) {
	c.inc("DescribeClusterSecurityGroups")
	return c.svc.DescribeClusterSecurityGroupsWithContext(ctx, input, opts...)
}

// DescribeClusterSecurityGroupsPages is a passthrough to the underlying DescribeClusterSecurityGroupsPages method.
// It will increment the count of requests made to DescribeClusterSecurityGroups on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeClusterSecurityGroupsPagesWithContext to avoid this.
func (c *Redshift) DescribeClusterSecurityGroupsPages(input *redshift.DescribeClusterSecurityGroupsInput, fn func(*redshift.DescribeClusterSecurityGroupsOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeClusterSecurityGroupsOutput, lastPage bool) bool {
		c.inc("DescribeClusterSecurityGroups")
		return fn(page, lastPage)
	}
	return c.svc.DescribeClusterSecurityGroupsPages(input, wrappedFn)
}

// DescribeClusterSecurityGroupsPagesWithContext is a passthrough to the underlying DescribeClusterSecurityGroupsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeClusterSecurityGroups when applied to the request.
func (c *Redshift) DescribeClusterSecurityGroupsPagesWithContext(ctx aws.Context, input *redshift.DescribeClusterSecurityGroupsInput, fn func(*redshift.DescribeClusterSecurityGroupsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeClusterSecurityGroups"))
	return c.svc.DescribeClusterSecurityGroupsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeClusterSnapshotsRequest is a passthrough to the underlying DescribeClusterSnapshotsRequest.
// It will increment the count of requests made to DescribeClusterSnapshots.
func (c *Redshift) DescribeClusterSnapshotsRequest(input *redshift.DescribeClusterSnapshotsInput) (req *request.Request, output *redshift.DescribeClusterSnapshotsOutput) {
	c.inc("DescribeClusterSnapshots")
	return c.svc.DescribeClusterSnapshotsRequest(input)
}

// DescribeClusterSnapshots is a passthrough to the underlying DescribeClusterSnapshots method.
// It will increment the count of requests made to DescribeClusterSnapshots.
func (c *Redshift) DescribeClusterSnapshots(input *redshift.DescribeClusterSnapshotsInput) (*redshift.DescribeClusterSnapshotsOutput, error) {
	c.inc("DescribeClusterSnapshots")
	return c.svc.DescribeClusterSnapshots(input)
}

// DescribeClusterSnapshotsWithContext is a passthrough to the underlying DescribeClusterSnapshotsWithContext method.
// It will increment the count of requests made to DescribeClusterSnapshots.
func (c *Redshift) DescribeClusterSnapshotsWithContext(ctx aws.Context, input *redshift.DescribeClusterSnapshotsInput, opts ...request.Option) (*redshift.DescribeClusterSnapshotsOutput, error) {
	c.inc("DescribeClusterSnapshots")
	return c.svc.DescribeClusterSnapshotsWithContext(ctx, input, opts...)
}

// DescribeClusterSnapshotsPages is a passthrough to the underlying DescribeClusterSnapshotsPages method.
// It will increment the count of requests made to DescribeClusterSnapshots on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeClusterSnapshotsPagesWithContext to avoid this.
func (c *Redshift) DescribeClusterSnapshotsPages(input *redshift.DescribeClusterSnapshotsInput, fn func(*redshift.DescribeClusterSnapshotsOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeClusterSnapshotsOutput, lastPage bool) bool {
		c.inc("DescribeClusterSnapshots")
		return fn(page, lastPage)
	}
	return c.svc.DescribeClusterSnapshotsPages(input, wrappedFn)
}

// DescribeClusterSnapshotsPagesWithContext is a passthrough to the underlying DescribeClusterSnapshotsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeClusterSnapshots when applied to the request.
func (c *Redshift) DescribeClusterSnapshotsPagesWithContext(ctx aws.Context, input *redshift.DescribeClusterSnapshotsInput, fn func(*redshift.DescribeClusterSnapshotsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeClusterSnapshots"))
	return c.svc.DescribeClusterSnapshotsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeClusterSubnetGroupsRequest is a passthrough to the underlying DescribeClusterSubnetGroupsRequest.
// It will increment the count of requests made to DescribeClusterSubnetGroups.
func (c *Redshift) DescribeClusterSubnetGroupsRequest(input *redshift.DescribeClusterSubnetGroupsInput) (req *request.Request, output *redshift.DescribeClusterSubnetGroupsOutput) {
	c.inc("DescribeClusterSubnetGroups")
	return c.svc.DescribeClusterSubnetGroupsRequest(input)
}

// DescribeClusterSubnetGroups is a passthrough to the underlying DescribeClusterSubnetGroups method.
// It will increment the count of requests made to DescribeClusterSubnetGroups.
func (c *Redshift) DescribeClusterSubnetGroups(input *redshift.DescribeClusterSubnetGroupsInput) (*redshift.DescribeClusterSubnetGroupsOutput, error) {
	c.inc("DescribeClusterSubnetGroups")
	return c.svc.DescribeClusterSubnetGroups(input)
}

// DescribeClusterSubnetGroupsWithContext is a passthrough to the underlying DescribeClusterSubnetGroupsWithContext method.
// It will increment the count of requests made to DescribeClusterSubnetGroups.
func (c *Redshift) DescribeClusterSubnetGroupsWithContext(ctx aws.Context, input *redshift.DescribeClusterSubnetGroupsInput, opts ...request.Option) (*redshift.DescribeClusterSubnetGroupsOutput, error) {
	c.inc("DescribeClusterSubnetGroups")
	return c.svc.DescribeClusterSubnetGroupsWithContext(ctx, input, opts...)
}

// DescribeClusterSubnetGroupsPages is a passthrough to the underlying DescribeClusterSubnetGroupsPages method.
// It will increment the count of requests made to DescribeClusterSubnetGroups on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeClusterSubnetGroupsPagesWithContext to avoid this.
func (c *Redshift) DescribeClusterSubnetGroupsPages(input *redshift.DescribeClusterSubnetGroupsInput, fn func(*redshift.DescribeClusterSubnetGroupsOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeClusterSubnetGroupsOutput, lastPage bool) bool {
		c.inc("DescribeClusterSubnetGroups")
		return fn(page, lastPage)
	}
	return c.svc.DescribeClusterSubnetGroupsPages(input, wrappedFn)
}

// DescribeClusterSubnetGroupsPagesWithContext is a passthrough to the underlying DescribeClusterSubnetGroupsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeClusterSubnetGroups when applied to the request.
func (c *Redshift) DescribeClusterSubnetGroupsPagesWithContext(ctx aws.Context, input *redshift.DescribeClusterSubnetGroupsInput, fn func(*redshift.DescribeClusterSubnetGroupsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeClusterSubnetGroups"))
	return c.svc.DescribeClusterSubnetGroupsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeClusterVersionsRequest is a passthrough to the underlying DescribeClusterVersionsRequest.
// It will increment the count of requests made to DescribeClusterVersions.
func (c *Redshift) DescribeClusterVersionsRequest(input *redshift.DescribeClusterVersionsInput) (req *request.Request, output *redshift.DescribeClusterVersionsOutput) {
	c.inc("DescribeClusterVersions")
	return c.svc.DescribeClusterVersionsRequest(input)
}

// DescribeClusterVersions is a passthrough to the underlying DescribeClusterVersions method.
// It will increment the count of requests made to DescribeClusterVersions.
func (c *Redshift) DescribeClusterVersions(input *redshift.DescribeClusterVersionsInput) (*redshift.DescribeClusterVersionsOutput, error) {
	c.inc("DescribeClusterVersions")
	return c.svc.DescribeClusterVersions(input)
}

// DescribeClusterVersionsWithContext is a passthrough to the underlying DescribeClusterVersionsWithContext method.
// It will increment the count of requests made to DescribeClusterVersions.
func (c *Redshift) DescribeClusterVersionsWithContext(ctx aws.Context, input *redshift.DescribeClusterVersionsInput, opts ...request.Option) (*redshift.DescribeClusterVersionsOutput, error) {
	c.inc("DescribeClusterVersions")
	return c.svc.DescribeClusterVersionsWithContext(ctx, input, opts...)
}

// DescribeClusterVersionsPages is a passthrough to the underlying DescribeClusterVersionsPages method.
// It will increment the count of requests made to DescribeClusterVersions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeClusterVersionsPagesWithContext to avoid this.
func (c *Redshift) DescribeClusterVersionsPages(input *redshift.DescribeClusterVersionsInput, fn func(*redshift.DescribeClusterVersionsOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeClusterVersionsOutput, lastPage bool) bool {
		c.inc("DescribeClusterVersions")
		return fn(page, lastPage)
	}
	return c.svc.DescribeClusterVersionsPages(input, wrappedFn)
}

// DescribeClusterVersionsPagesWithContext is a passthrough to the underlying DescribeClusterVersionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeClusterVersions when applied to the request.
func (c *Redshift) DescribeClusterVersionsPagesWithContext(ctx aws.Context, input *redshift.DescribeClusterVersionsInput, fn func(*redshift.DescribeClusterVersionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeClusterVersions"))
	return c.svc.DescribeClusterVersionsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeClustersRequest is a passthrough to the underlying DescribeClustersRequest.
// It will increment the count of requests made to DescribeClusters.
func (c *Redshift) DescribeClustersRequest(input *redshift.DescribeClustersInput) (req *request.Request, output *redshift.DescribeClustersOutput) {
	c.inc("DescribeClusters")
	return c.svc.DescribeClustersRequest(input)
}

// DescribeClusters is a passthrough to the underlying DescribeClusters method.
// It will increment the count of requests made to DescribeClusters.
func (c *Redshift) DescribeClusters(input *redshift.DescribeClustersInput) (*redshift.DescribeClustersOutput, error) {
	c.inc("DescribeClusters")
	return c.svc.DescribeClusters(input)
}

// DescribeClustersWithContext is a passthrough to the underlying DescribeClustersWithContext method.
// It will increment the count of requests made to DescribeClusters.
func (c *Redshift) DescribeClustersWithContext(ctx aws.Context, input *redshift.DescribeClustersInput, opts ...request.Option) (*redshift.DescribeClustersOutput, error) {
	c.inc("DescribeClusters")
	return c.svc.DescribeClustersWithContext(ctx, input, opts...)
}

// DescribeClustersPages is a passthrough to the underlying DescribeClustersPages method.
// It will increment the count of requests made to DescribeClusters on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeClustersPagesWithContext to avoid this.
func (c *Redshift) DescribeClustersPages(input *redshift.DescribeClustersInput, fn func(*redshift.DescribeClustersOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeClustersOutput, lastPage bool) bool {
		c.inc("DescribeClusters")
		return fn(page, lastPage)
	}
	return c.svc.DescribeClustersPages(input, wrappedFn)
}

// DescribeClustersPagesWithContext is a passthrough to the underlying DescribeClustersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeClusters when applied to the request.
func (c *Redshift) DescribeClustersPagesWithContext(ctx aws.Context, input *redshift.DescribeClustersInput, fn func(*redshift.DescribeClustersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeClusters"))
	return c.svc.DescribeClustersPagesWithContext(ctx, input, fn, opts...)
}

// DescribeDefaultClusterParametersRequest is a passthrough to the underlying DescribeDefaultClusterParametersRequest.
// It will increment the count of requests made to DescribeDefaultClusterParameters.
func (c *Redshift) DescribeDefaultClusterParametersRequest(input *redshift.DescribeDefaultClusterParametersInput) (req *request.Request, output *redshift.DescribeDefaultClusterParametersOutput) {
	c.inc("DescribeDefaultClusterParameters")
	return c.svc.DescribeDefaultClusterParametersRequest(input)
}

// DescribeDefaultClusterParameters is a passthrough to the underlying DescribeDefaultClusterParameters method.
// It will increment the count of requests made to DescribeDefaultClusterParameters.
func (c *Redshift) DescribeDefaultClusterParameters(input *redshift.DescribeDefaultClusterParametersInput) (*redshift.DescribeDefaultClusterParametersOutput, error) {
	c.inc("DescribeDefaultClusterParameters")
	return c.svc.DescribeDefaultClusterParameters(input)
}

// DescribeDefaultClusterParametersWithContext is a passthrough to the underlying DescribeDefaultClusterParametersWithContext method.
// It will increment the count of requests made to DescribeDefaultClusterParameters.
func (c *Redshift) DescribeDefaultClusterParametersWithContext(ctx aws.Context, input *redshift.DescribeDefaultClusterParametersInput, opts ...request.Option) (*redshift.DescribeDefaultClusterParametersOutput, error) {
	c.inc("DescribeDefaultClusterParameters")
	return c.svc.DescribeDefaultClusterParametersWithContext(ctx, input, opts...)
}

// DescribeDefaultClusterParametersPages is a passthrough to the underlying DescribeDefaultClusterParametersPages method.
// It will increment the count of requests made to DescribeDefaultClusterParameters on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeDefaultClusterParametersPagesWithContext to avoid this.
func (c *Redshift) DescribeDefaultClusterParametersPages(input *redshift.DescribeDefaultClusterParametersInput, fn func(*redshift.DescribeDefaultClusterParametersOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeDefaultClusterParametersOutput, lastPage bool) bool {
		c.inc("DescribeDefaultClusterParameters")
		return fn(page, lastPage)
	}
	return c.svc.DescribeDefaultClusterParametersPages(input, wrappedFn)
}

// DescribeDefaultClusterParametersPagesWithContext is a passthrough to the underlying DescribeDefaultClusterParametersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeDefaultClusterParameters when applied to the request.
func (c *Redshift) DescribeDefaultClusterParametersPagesWithContext(ctx aws.Context, input *redshift.DescribeDefaultClusterParametersInput, fn func(*redshift.DescribeDefaultClusterParametersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeDefaultClusterParameters"))
	return c.svc.DescribeDefaultClusterParametersPagesWithContext(ctx, input, fn, opts...)
}

// DescribeEventCategoriesRequest is a passthrough to the underlying DescribeEventCategoriesRequest.
// It will increment the count of requests made to DescribeEventCategories.
func (c *Redshift) DescribeEventCategoriesRequest(input *redshift.DescribeEventCategoriesInput) (req *request.Request, output *redshift.DescribeEventCategoriesOutput) {
	c.inc("DescribeEventCategories")
	return c.svc.DescribeEventCategoriesRequest(input)
}

// DescribeEventCategories is a passthrough to the underlying DescribeEventCategories method.
// It will increment the count of requests made to DescribeEventCategories.
func (c *Redshift) DescribeEventCategories(input *redshift.DescribeEventCategoriesInput) (*redshift.DescribeEventCategoriesOutput, error) {
	c.inc("DescribeEventCategories")
	return c.svc.DescribeEventCategories(input)
}

// DescribeEventCategoriesWithContext is a passthrough to the underlying DescribeEventCategoriesWithContext method.
// It will increment the count of requests made to DescribeEventCategories.
func (c *Redshift) DescribeEventCategoriesWithContext(ctx aws.Context, input *redshift.DescribeEventCategoriesInput, opts ...request.Option) (*redshift.DescribeEventCategoriesOutput, error) {
	c.inc("DescribeEventCategories")
	return c.svc.DescribeEventCategoriesWithContext(ctx, input, opts...)
}

// DescribeEventSubscriptionsRequest is a passthrough to the underlying DescribeEventSubscriptionsRequest.
// It will increment the count of requests made to DescribeEventSubscriptions.
func (c *Redshift) DescribeEventSubscriptionsRequest(input *redshift.DescribeEventSubscriptionsInput) (req *request.Request, output *redshift.DescribeEventSubscriptionsOutput) {
	c.inc("DescribeEventSubscriptions")
	return c.svc.DescribeEventSubscriptionsRequest(input)
}

// DescribeEventSubscriptions is a passthrough to the underlying DescribeEventSubscriptions method.
// It will increment the count of requests made to DescribeEventSubscriptions.
func (c *Redshift) DescribeEventSubscriptions(input *redshift.DescribeEventSubscriptionsInput) (*redshift.DescribeEventSubscriptionsOutput, error) {
	c.inc("DescribeEventSubscriptions")
	return c.svc.DescribeEventSubscriptions(input)
}

// DescribeEventSubscriptionsWithContext is a passthrough to the underlying DescribeEventSubscriptionsWithContext method.
// It will increment the count of requests made to DescribeEventSubscriptions.
func (c *Redshift) DescribeEventSubscriptionsWithContext(ctx aws.Context, input *redshift.DescribeEventSubscriptionsInput, opts ...request.Option) (*redshift.DescribeEventSubscriptionsOutput, error) {
	c.inc("DescribeEventSubscriptions")
	return c.svc.DescribeEventSubscriptionsWithContext(ctx, input, opts...)
}

// DescribeEventSubscriptionsPages is a passthrough to the underlying DescribeEventSubscriptionsPages method.
// It will increment the count of requests made to DescribeEventSubscriptions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeEventSubscriptionsPagesWithContext to avoid this.
func (c *Redshift) DescribeEventSubscriptionsPages(input *redshift.DescribeEventSubscriptionsInput, fn func(*redshift.DescribeEventSubscriptionsOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeEventSubscriptionsOutput, lastPage bool) bool {
		c.inc("DescribeEventSubscriptions")
		return fn(page, lastPage)
	}
	return c.svc.DescribeEventSubscriptionsPages(input, wrappedFn)
}

// DescribeEventSubscriptionsPagesWithContext is a passthrough to the underlying DescribeEventSubscriptionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeEventSubscriptions when applied to the request.
func (c *Redshift) DescribeEventSubscriptionsPagesWithContext(ctx aws.Context, input *redshift.DescribeEventSubscriptionsInput, fn func(*redshift.DescribeEventSubscriptionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeEventSubscriptions"))
	return c.svc.DescribeEventSubscriptionsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeEventsRequest is a passthrough to the underlying DescribeEventsRequest.
// It will increment the count of requests made to DescribeEvents.
func (c *Redshift) DescribeEventsRequest(input *redshift.DescribeEventsInput) (req *request.Request, output *redshift.DescribeEventsOutput) {
	c.inc("DescribeEvents")
	return c.svc.DescribeEventsRequest(input)
}

// DescribeEvents is a passthrough to the underlying DescribeEvents method.
// It will increment the count of requests made to DescribeEvents.
func (c *Redshift) DescribeEvents(input *redshift.DescribeEventsInput) (*redshift.DescribeEventsOutput, error) {
	c.inc("DescribeEvents")
	return c.svc.DescribeEvents(input)
}

// DescribeEventsWithContext is a passthrough to the underlying DescribeEventsWithContext method.
// It will increment the count of requests made to DescribeEvents.
func (c *Redshift) DescribeEventsWithContext(ctx aws.Context, input *redshift.DescribeEventsInput, opts ...request.Option) (*redshift.DescribeEventsOutput, error) {
	c.inc("DescribeEvents")
	return c.svc.DescribeEventsWithContext(ctx, input, opts...)
}

// DescribeEventsPages is a passthrough to the underlying DescribeEventsPages method.
// It will increment the count of requests made to DescribeEvents on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeEventsPagesWithContext to avoid this.
func (c *Redshift) DescribeEventsPages(input *redshift.DescribeEventsInput, fn func(*redshift.DescribeEventsOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeEventsOutput, lastPage bool) bool {
		c.inc("DescribeEvents")
		return fn(page, lastPage)
	}
	return c.svc.DescribeEventsPages(input, wrappedFn)
}

// DescribeEventsPagesWithContext is a passthrough to the underlying DescribeEventsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeEvents when applied to the request.
func (c *Redshift) DescribeEventsPagesWithContext(ctx aws.Context, input *redshift.DescribeEventsInput, fn func(*redshift.DescribeEventsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeEvents"))
	return c.svc.DescribeEventsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeHsmClientCertificatesRequest is a passthrough to the underlying DescribeHsmClientCertificatesRequest.
// It will increment the count of requests made to DescribeHsmClientCertificates.
func (c *Redshift) DescribeHsmClientCertificatesRequest(input *redshift.DescribeHsmClientCertificatesInput) (req *request.Request, output *redshift.DescribeHsmClientCertificatesOutput) {
	c.inc("DescribeHsmClientCertificates")
	return c.svc.DescribeHsmClientCertificatesRequest(input)
}

// DescribeHsmClientCertificates is a passthrough to the underlying DescribeHsmClientCertificates method.
// It will increment the count of requests made to DescribeHsmClientCertificates.
func (c *Redshift) DescribeHsmClientCertificates(input *redshift.DescribeHsmClientCertificatesInput) (*redshift.DescribeHsmClientCertificatesOutput, error) {
	c.inc("DescribeHsmClientCertificates")
	return c.svc.DescribeHsmClientCertificates(input)
}

// DescribeHsmClientCertificatesWithContext is a passthrough to the underlying DescribeHsmClientCertificatesWithContext method.
// It will increment the count of requests made to DescribeHsmClientCertificates.
func (c *Redshift) DescribeHsmClientCertificatesWithContext(ctx aws.Context, input *redshift.DescribeHsmClientCertificatesInput, opts ...request.Option) (*redshift.DescribeHsmClientCertificatesOutput, error) {
	c.inc("DescribeHsmClientCertificates")
	return c.svc.DescribeHsmClientCertificatesWithContext(ctx, input, opts...)
}

// DescribeHsmClientCertificatesPages is a passthrough to the underlying DescribeHsmClientCertificatesPages method.
// It will increment the count of requests made to DescribeHsmClientCertificates on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeHsmClientCertificatesPagesWithContext to avoid this.
func (c *Redshift) DescribeHsmClientCertificatesPages(input *redshift.DescribeHsmClientCertificatesInput, fn func(*redshift.DescribeHsmClientCertificatesOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeHsmClientCertificatesOutput, lastPage bool) bool {
		c.inc("DescribeHsmClientCertificates")
		return fn(page, lastPage)
	}
	return c.svc.DescribeHsmClientCertificatesPages(input, wrappedFn)
}

// DescribeHsmClientCertificatesPagesWithContext is a passthrough to the underlying DescribeHsmClientCertificatesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeHsmClientCertificates when applied to the request.
func (c *Redshift) DescribeHsmClientCertificatesPagesWithContext(ctx aws.Context, input *redshift.DescribeHsmClientCertificatesInput, fn func(*redshift.DescribeHsmClientCertificatesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeHsmClientCertificates"))
	return c.svc.DescribeHsmClientCertificatesPagesWithContext(ctx, input, fn, opts...)
}

// DescribeHsmConfigurationsRequest is a passthrough to the underlying DescribeHsmConfigurationsRequest.
// It will increment the count of requests made to DescribeHsmConfigurations.
func (c *Redshift) DescribeHsmConfigurationsRequest(input *redshift.DescribeHsmConfigurationsInput) (req *request.Request, output *redshift.DescribeHsmConfigurationsOutput) {
	c.inc("DescribeHsmConfigurations")
	return c.svc.DescribeHsmConfigurationsRequest(input)
}

// DescribeHsmConfigurations is a passthrough to the underlying DescribeHsmConfigurations method.
// It will increment the count of requests made to DescribeHsmConfigurations.
func (c *Redshift) DescribeHsmConfigurations(input *redshift.DescribeHsmConfigurationsInput) (*redshift.DescribeHsmConfigurationsOutput, error) {
	c.inc("DescribeHsmConfigurations")
	return c.svc.DescribeHsmConfigurations(input)
}

// DescribeHsmConfigurationsWithContext is a passthrough to the underlying DescribeHsmConfigurationsWithContext method.
// It will increment the count of requests made to DescribeHsmConfigurations.
func (c *Redshift) DescribeHsmConfigurationsWithContext(ctx aws.Context, input *redshift.DescribeHsmConfigurationsInput, opts ...request.Option) (*redshift.DescribeHsmConfigurationsOutput, error) {
	c.inc("DescribeHsmConfigurations")
	return c.svc.DescribeHsmConfigurationsWithContext(ctx, input, opts...)
}

// DescribeHsmConfigurationsPages is a passthrough to the underlying DescribeHsmConfigurationsPages method.
// It will increment the count of requests made to DescribeHsmConfigurations on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeHsmConfigurationsPagesWithContext to avoid this.
func (c *Redshift) DescribeHsmConfigurationsPages(input *redshift.DescribeHsmConfigurationsInput, fn func(*redshift.DescribeHsmConfigurationsOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeHsmConfigurationsOutput, lastPage bool) bool {
		c.inc("DescribeHsmConfigurations")
		return fn(page, lastPage)
	}
	return c.svc.DescribeHsmConfigurationsPages(input, wrappedFn)
}

// DescribeHsmConfigurationsPagesWithContext is a passthrough to the underlying DescribeHsmConfigurationsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeHsmConfigurations when applied to the request.
func (c *Redshift) DescribeHsmConfigurationsPagesWithContext(ctx aws.Context, input *redshift.DescribeHsmConfigurationsInput, fn func(*redshift.DescribeHsmConfigurationsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeHsmConfigurations"))
	return c.svc.DescribeHsmConfigurationsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeLoggingStatusRequest is a passthrough to the underlying DescribeLoggingStatusRequest.
// It will increment the count of requests made to DescribeLoggingStatus.
func (c *Redshift) DescribeLoggingStatusRequest(input *redshift.DescribeLoggingStatusInput) (req *request.Request, output *redshift.LoggingStatus) {
	c.inc("DescribeLoggingStatus")
	return c.svc.DescribeLoggingStatusRequest(input)
}

// DescribeLoggingStatus is a passthrough to the underlying DescribeLoggingStatus method.
// It will increment the count of requests made to DescribeLoggingStatus.
func (c *Redshift) DescribeLoggingStatus(input *redshift.DescribeLoggingStatusInput) (*redshift.LoggingStatus, error) {
	c.inc("DescribeLoggingStatus")
	return c.svc.DescribeLoggingStatus(input)
}

// DescribeLoggingStatusWithContext is a passthrough to the underlying DescribeLoggingStatusWithContext method.
// It will increment the count of requests made to DescribeLoggingStatus.
func (c *Redshift) DescribeLoggingStatusWithContext(ctx aws.Context, input *redshift.DescribeLoggingStatusInput, opts ...request.Option) (*redshift.LoggingStatus, error) {
	c.inc("DescribeLoggingStatus")
	return c.svc.DescribeLoggingStatusWithContext(ctx, input, opts...)
}

// DescribeOrderableClusterOptionsRequest is a passthrough to the underlying DescribeOrderableClusterOptionsRequest.
// It will increment the count of requests made to DescribeOrderableClusterOptions.
func (c *Redshift) DescribeOrderableClusterOptionsRequest(input *redshift.DescribeOrderableClusterOptionsInput) (req *request.Request, output *redshift.DescribeOrderableClusterOptionsOutput) {
	c.inc("DescribeOrderableClusterOptions")
	return c.svc.DescribeOrderableClusterOptionsRequest(input)
}

// DescribeOrderableClusterOptions is a passthrough to the underlying DescribeOrderableClusterOptions method.
// It will increment the count of requests made to DescribeOrderableClusterOptions.
func (c *Redshift) DescribeOrderableClusterOptions(input *redshift.DescribeOrderableClusterOptionsInput) (*redshift.DescribeOrderableClusterOptionsOutput, error) {
	c.inc("DescribeOrderableClusterOptions")
	return c.svc.DescribeOrderableClusterOptions(input)
}

// DescribeOrderableClusterOptionsWithContext is a passthrough to the underlying DescribeOrderableClusterOptionsWithContext method.
// It will increment the count of requests made to DescribeOrderableClusterOptions.
func (c *Redshift) DescribeOrderableClusterOptionsWithContext(ctx aws.Context, input *redshift.DescribeOrderableClusterOptionsInput, opts ...request.Option) (*redshift.DescribeOrderableClusterOptionsOutput, error) {
	c.inc("DescribeOrderableClusterOptions")
	return c.svc.DescribeOrderableClusterOptionsWithContext(ctx, input, opts...)
}

// DescribeOrderableClusterOptionsPages is a passthrough to the underlying DescribeOrderableClusterOptionsPages method.
// It will increment the count of requests made to DescribeOrderableClusterOptions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeOrderableClusterOptionsPagesWithContext to avoid this.
func (c *Redshift) DescribeOrderableClusterOptionsPages(input *redshift.DescribeOrderableClusterOptionsInput, fn func(*redshift.DescribeOrderableClusterOptionsOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeOrderableClusterOptionsOutput, lastPage bool) bool {
		c.inc("DescribeOrderableClusterOptions")
		return fn(page, lastPage)
	}
	return c.svc.DescribeOrderableClusterOptionsPages(input, wrappedFn)
}

// DescribeOrderableClusterOptionsPagesWithContext is a passthrough to the underlying DescribeOrderableClusterOptionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeOrderableClusterOptions when applied to the request.
func (c *Redshift) DescribeOrderableClusterOptionsPagesWithContext(ctx aws.Context, input *redshift.DescribeOrderableClusterOptionsInput, fn func(*redshift.DescribeOrderableClusterOptionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeOrderableClusterOptions"))
	return c.svc.DescribeOrderableClusterOptionsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeReservedNodeOfferingsRequest is a passthrough to the underlying DescribeReservedNodeOfferingsRequest.
// It will increment the count of requests made to DescribeReservedNodeOfferings.
func (c *Redshift) DescribeReservedNodeOfferingsRequest(input *redshift.DescribeReservedNodeOfferingsInput) (req *request.Request, output *redshift.DescribeReservedNodeOfferingsOutput) {
	c.inc("DescribeReservedNodeOfferings")
	return c.svc.DescribeReservedNodeOfferingsRequest(input)
}

// DescribeReservedNodeOfferings is a passthrough to the underlying DescribeReservedNodeOfferings method.
// It will increment the count of requests made to DescribeReservedNodeOfferings.
func (c *Redshift) DescribeReservedNodeOfferings(input *redshift.DescribeReservedNodeOfferingsInput) (*redshift.DescribeReservedNodeOfferingsOutput, error) {
	c.inc("DescribeReservedNodeOfferings")
	return c.svc.DescribeReservedNodeOfferings(input)
}

// DescribeReservedNodeOfferingsWithContext is a passthrough to the underlying DescribeReservedNodeOfferingsWithContext method.
// It will increment the count of requests made to DescribeReservedNodeOfferings.
func (c *Redshift) DescribeReservedNodeOfferingsWithContext(ctx aws.Context, input *redshift.DescribeReservedNodeOfferingsInput, opts ...request.Option) (*redshift.DescribeReservedNodeOfferingsOutput, error) {
	c.inc("DescribeReservedNodeOfferings")
	return c.svc.DescribeReservedNodeOfferingsWithContext(ctx, input, opts...)
}

// DescribeReservedNodeOfferingsPages is a passthrough to the underlying DescribeReservedNodeOfferingsPages method.
// It will increment the count of requests made to DescribeReservedNodeOfferings on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeReservedNodeOfferingsPagesWithContext to avoid this.
func (c *Redshift) DescribeReservedNodeOfferingsPages(input *redshift.DescribeReservedNodeOfferingsInput, fn func(*redshift.DescribeReservedNodeOfferingsOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeReservedNodeOfferingsOutput, lastPage bool) bool {
		c.inc("DescribeReservedNodeOfferings")
		return fn(page, lastPage)
	}
	return c.svc.DescribeReservedNodeOfferingsPages(input, wrappedFn)
}

// DescribeReservedNodeOfferingsPagesWithContext is a passthrough to the underlying DescribeReservedNodeOfferingsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeReservedNodeOfferings when applied to the request.
func (c *Redshift) DescribeReservedNodeOfferingsPagesWithContext(ctx aws.Context, input *redshift.DescribeReservedNodeOfferingsInput, fn func(*redshift.DescribeReservedNodeOfferingsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeReservedNodeOfferings"))
	return c.svc.DescribeReservedNodeOfferingsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeReservedNodesRequest is a passthrough to the underlying DescribeReservedNodesRequest.
// It will increment the count of requests made to DescribeReservedNodes.
func (c *Redshift) DescribeReservedNodesRequest(input *redshift.DescribeReservedNodesInput) (req *request.Request, output *redshift.DescribeReservedNodesOutput) {
	c.inc("DescribeReservedNodes")
	return c.svc.DescribeReservedNodesRequest(input)
}

// DescribeReservedNodes is a passthrough to the underlying DescribeReservedNodes method.
// It will increment the count of requests made to DescribeReservedNodes.
func (c *Redshift) DescribeReservedNodes(input *redshift.DescribeReservedNodesInput) (*redshift.DescribeReservedNodesOutput, error) {
	c.inc("DescribeReservedNodes")
	return c.svc.DescribeReservedNodes(input)
}

// DescribeReservedNodesWithContext is a passthrough to the underlying DescribeReservedNodesWithContext method.
// It will increment the count of requests made to DescribeReservedNodes.
func (c *Redshift) DescribeReservedNodesWithContext(ctx aws.Context, input *redshift.DescribeReservedNodesInput, opts ...request.Option) (*redshift.DescribeReservedNodesOutput, error) {
	c.inc("DescribeReservedNodes")
	return c.svc.DescribeReservedNodesWithContext(ctx, input, opts...)
}

// DescribeReservedNodesPages is a passthrough to the underlying DescribeReservedNodesPages method.
// It will increment the count of requests made to DescribeReservedNodes on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeReservedNodesPagesWithContext to avoid this.
func (c *Redshift) DescribeReservedNodesPages(input *redshift.DescribeReservedNodesInput, fn func(*redshift.DescribeReservedNodesOutput, bool) bool) error {
	wrappedFn := func(page *redshift.DescribeReservedNodesOutput, lastPage bool) bool {
		c.inc("DescribeReservedNodes")
		return fn(page, lastPage)
	}
	return c.svc.DescribeReservedNodesPages(input, wrappedFn)
}

// DescribeReservedNodesPagesWithContext is a passthrough to the underlying DescribeReservedNodesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeReservedNodes when applied to the request.
func (c *Redshift) DescribeReservedNodesPagesWithContext(ctx aws.Context, input *redshift.DescribeReservedNodesInput, fn func(*redshift.DescribeReservedNodesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeReservedNodes"))
	return c.svc.DescribeReservedNodesPagesWithContext(ctx, input, fn, opts...)
}

// DescribeResizeRequest is a passthrough to the underlying DescribeResizeRequest.
// It will increment the count of requests made to DescribeResize.
func (c *Redshift) DescribeResizeRequest(input *redshift.DescribeResizeInput) (req *request.Request, output *redshift.DescribeResizeOutput) {
	c.inc("DescribeResize")
	return c.svc.DescribeResizeRequest(input)
}

// DescribeResize is a passthrough to the underlying DescribeResize method.
// It will increment the count of requests made to DescribeResize.
func (c *Redshift) DescribeResize(input *redshift.DescribeResizeInput) (*redshift.DescribeResizeOutput, error) {
	c.inc("DescribeResize")
	return c.svc.DescribeResize(input)
}

// DescribeResizeWithContext is a passthrough to the underlying DescribeResizeWithContext method.
// It will increment the count of requests made to DescribeResize.
func (c *Redshift) DescribeResizeWithContext(ctx aws.Context, input *redshift.DescribeResizeInput, opts ...request.Option) (*redshift.DescribeResizeOutput, error) {
	c.inc("DescribeResize")
	return c.svc.DescribeResizeWithContext(ctx, input, opts...)
}

// DescribeSnapshotCopyGrantsRequest is a passthrough to the underlying DescribeSnapshotCopyGrantsRequest.
// It will increment the count of requests made to DescribeSnapshotCopyGrants.
func (c *Redshift) DescribeSnapshotCopyGrantsRequest(input *redshift.DescribeSnapshotCopyGrantsInput) (req *request.Request, output *redshift.DescribeSnapshotCopyGrantsOutput) {
	c.inc("DescribeSnapshotCopyGrants")
	return c.svc.DescribeSnapshotCopyGrantsRequest(input)
}

// DescribeSnapshotCopyGrants is a passthrough to the underlying DescribeSnapshotCopyGrants method.
// It will increment the count of requests made to DescribeSnapshotCopyGrants.
func (c *Redshift) DescribeSnapshotCopyGrants(input *redshift.DescribeSnapshotCopyGrantsInput) (*redshift.DescribeSnapshotCopyGrantsOutput, error) {
	c.inc("DescribeSnapshotCopyGrants")
	return c.svc.DescribeSnapshotCopyGrants(input)
}

// DescribeSnapshotCopyGrantsWithContext is a passthrough to the underlying DescribeSnapshotCopyGrantsWithContext method.
// It will increment the count of requests made to DescribeSnapshotCopyGrants.
func (c *Redshift) DescribeSnapshotCopyGrantsWithContext(ctx aws.Context, input *redshift.DescribeSnapshotCopyGrantsInput, opts ...request.Option) (*redshift.DescribeSnapshotCopyGrantsOutput, error) {
	c.inc("DescribeSnapshotCopyGrants")
	return c.svc.DescribeSnapshotCopyGrantsWithContext(ctx, input, opts...)
}

// DescribeTableRestoreStatusRequest is a passthrough to the underlying DescribeTableRestoreStatusRequest.
// It will increment the count of requests made to DescribeTableRestoreStatus.
func (c *Redshift) DescribeTableRestoreStatusRequest(input *redshift.DescribeTableRestoreStatusInput) (req *request.Request, output *redshift.DescribeTableRestoreStatusOutput) {
	c.inc("DescribeTableRestoreStatus")
	return c.svc.DescribeTableRestoreStatusRequest(input)
}

// DescribeTableRestoreStatus is a passthrough to the underlying DescribeTableRestoreStatus method.
// It will increment the count of requests made to DescribeTableRestoreStatus.
func (c *Redshift) DescribeTableRestoreStatus(input *redshift.DescribeTableRestoreStatusInput) (*redshift.DescribeTableRestoreStatusOutput, error) {
	c.inc("DescribeTableRestoreStatus")
	return c.svc.DescribeTableRestoreStatus(input)
}

// DescribeTableRestoreStatusWithContext is a passthrough to the underlying DescribeTableRestoreStatusWithContext method.
// It will increment the count of requests made to DescribeTableRestoreStatus.
func (c *Redshift) DescribeTableRestoreStatusWithContext(ctx aws.Context, input *redshift.DescribeTableRestoreStatusInput, opts ...request.Option) (*redshift.DescribeTableRestoreStatusOutput, error) {
	c.inc("DescribeTableRestoreStatus")
	return c.svc.DescribeTableRestoreStatusWithContext(ctx, input, opts...)
}

// DescribeTagsRequest is a passthrough to the underlying DescribeTagsRequest.
// It will increment the count of requests made to DescribeTags.
func (c *Redshift) DescribeTagsRequest(input *redshift.DescribeTagsInput) (req *request.Request, output *redshift.DescribeTagsOutput) {
	c.inc("DescribeTags")
	return c.svc.DescribeTagsRequest(input)
}

// DescribeTags is a passthrough to the underlying DescribeTags method.
// It will increment the count of requests made to DescribeTags.
func (c *Redshift) DescribeTags(input *redshift.DescribeTagsInput) (*redshift.DescribeTagsOutput, error) {
	c.inc("DescribeTags")
	return c.svc.DescribeTags(input)
}

// DescribeTagsWithContext is a passthrough to the underlying DescribeTagsWithContext method.
// It will increment the count of requests made to DescribeTags.
func (c *Redshift) DescribeTagsWithContext(ctx aws.Context, input *redshift.DescribeTagsInput, opts ...request.Option) (*redshift.DescribeTagsOutput, error) {
	c.inc("DescribeTags")
	return c.svc.DescribeTagsWithContext(ctx, input, opts...)
}

// DisableLoggingRequest is a passthrough to the underlying DisableLoggingRequest.
// It will increment the count of requests made to DisableLogging.
func (c *Redshift) DisableLoggingRequest(input *redshift.DisableLoggingInput) (req *request.Request, output *redshift.LoggingStatus) {
	c.inc("DisableLogging")
	return c.svc.DisableLoggingRequest(input)
}

// DisableLogging is a passthrough to the underlying DisableLogging method.
// It will increment the count of requests made to DisableLogging.
func (c *Redshift) DisableLogging(input *redshift.DisableLoggingInput) (*redshift.LoggingStatus, error) {
	c.inc("DisableLogging")
	return c.svc.DisableLogging(input)
}

// DisableLoggingWithContext is a passthrough to the underlying DisableLoggingWithContext method.
// It will increment the count of requests made to DisableLogging.
func (c *Redshift) DisableLoggingWithContext(ctx aws.Context, input *redshift.DisableLoggingInput, opts ...request.Option) (*redshift.LoggingStatus, error) {
	c.inc("DisableLogging")
	return c.svc.DisableLoggingWithContext(ctx, input, opts...)
}

// DisableSnapshotCopyRequest is a passthrough to the underlying DisableSnapshotCopyRequest.
// It will increment the count of requests made to DisableSnapshotCopy.
func (c *Redshift) DisableSnapshotCopyRequest(input *redshift.DisableSnapshotCopyInput) (req *request.Request, output *redshift.DisableSnapshotCopyOutput) {
	c.inc("DisableSnapshotCopy")
	return c.svc.DisableSnapshotCopyRequest(input)
}

// DisableSnapshotCopy is a passthrough to the underlying DisableSnapshotCopy method.
// It will increment the count of requests made to DisableSnapshotCopy.
func (c *Redshift) DisableSnapshotCopy(input *redshift.DisableSnapshotCopyInput) (*redshift.DisableSnapshotCopyOutput, error) {
	c.inc("DisableSnapshotCopy")
	return c.svc.DisableSnapshotCopy(input)
}

// DisableSnapshotCopyWithContext is a passthrough to the underlying DisableSnapshotCopyWithContext method.
// It will increment the count of requests made to DisableSnapshotCopy.
func (c *Redshift) DisableSnapshotCopyWithContext(ctx aws.Context, input *redshift.DisableSnapshotCopyInput, opts ...request.Option) (*redshift.DisableSnapshotCopyOutput, error) {
	c.inc("DisableSnapshotCopy")
	return c.svc.DisableSnapshotCopyWithContext(ctx, input, opts...)
}

// EnableLoggingRequest is a passthrough to the underlying EnableLoggingRequest.
// It will increment the count of requests made to EnableLogging.
func (c *Redshift) EnableLoggingRequest(input *redshift.EnableLoggingInput) (req *request.Request, output *redshift.LoggingStatus) {
	c.inc("EnableLogging")
	return c.svc.EnableLoggingRequest(input)
}

// EnableLogging is a passthrough to the underlying EnableLogging method.
// It will increment the count of requests made to EnableLogging.
func (c *Redshift) EnableLogging(input *redshift.EnableLoggingInput) (*redshift.LoggingStatus, error) {
	c.inc("EnableLogging")
	return c.svc.EnableLogging(input)
}

// EnableLoggingWithContext is a passthrough to the underlying EnableLoggingWithContext method.
// It will increment the count of requests made to EnableLogging.
func (c *Redshift) EnableLoggingWithContext(ctx aws.Context, input *redshift.EnableLoggingInput, opts ...request.Option) (*redshift.LoggingStatus, error) {
	c.inc("EnableLogging")
	return c.svc.EnableLoggingWithContext(ctx, input, opts...)
}

// EnableSnapshotCopyRequest is a passthrough to the underlying EnableSnapshotCopyRequest.
// It will increment the count of requests made to EnableSnapshotCopy.
func (c *Redshift) EnableSnapshotCopyRequest(input *redshift.EnableSnapshotCopyInput) (req *request.Request, output *redshift.EnableSnapshotCopyOutput) {
	c.inc("EnableSnapshotCopy")
	return c.svc.EnableSnapshotCopyRequest(input)
}

// EnableSnapshotCopy is a passthrough to the underlying EnableSnapshotCopy method.
// It will increment the count of requests made to EnableSnapshotCopy.
func (c *Redshift) EnableSnapshotCopy(input *redshift.EnableSnapshotCopyInput) (*redshift.EnableSnapshotCopyOutput, error) {
	c.inc("EnableSnapshotCopy")
	return c.svc.EnableSnapshotCopy(input)
}

// EnableSnapshotCopyWithContext is a passthrough to the underlying EnableSnapshotCopyWithContext method.
// It will increment the count of requests made to EnableSnapshotCopy.
func (c *Redshift) EnableSnapshotCopyWithContext(ctx aws.Context, input *redshift.EnableSnapshotCopyInput, opts ...request.Option) (*redshift.EnableSnapshotCopyOutput, error) {
	c.inc("EnableSnapshotCopy")
	return c.svc.EnableSnapshotCopyWithContext(ctx, input, opts...)
}

// GetClusterCredentialsRequest is a passthrough to the underlying GetClusterCredentialsRequest.
// It will increment the count of requests made to GetClusterCredentials.
func (c *Redshift) GetClusterCredentialsRequest(input *redshift.GetClusterCredentialsInput) (req *request.Request, output *redshift.GetClusterCredentialsOutput) {
	c.inc("GetClusterCredentials")
	return c.svc.GetClusterCredentialsRequest(input)
}

// GetClusterCredentials is a passthrough to the underlying GetClusterCredentials method.
// It will increment the count of requests made to GetClusterCredentials.
func (c *Redshift) GetClusterCredentials(input *redshift.GetClusterCredentialsInput) (*redshift.GetClusterCredentialsOutput, error) {
	c.inc("GetClusterCredentials")
	return c.svc.GetClusterCredentials(input)
}

// GetClusterCredentialsWithContext is a passthrough to the underlying GetClusterCredentialsWithContext method.
// It will increment the count of requests made to GetClusterCredentials.
func (c *Redshift) GetClusterCredentialsWithContext(ctx aws.Context, input *redshift.GetClusterCredentialsInput, opts ...request.Option) (*redshift.GetClusterCredentialsOutput, error) {
	c.inc("GetClusterCredentials")
	return c.svc.GetClusterCredentialsWithContext(ctx, input, opts...)
}

// ModifyClusterRequest is a passthrough to the underlying ModifyClusterRequest.
// It will increment the count of requests made to ModifyCluster.
func (c *Redshift) ModifyClusterRequest(input *redshift.ModifyClusterInput) (req *request.Request, output *redshift.ModifyClusterOutput) {
	c.inc("ModifyCluster")
	return c.svc.ModifyClusterRequest(input)
}

// ModifyCluster is a passthrough to the underlying ModifyCluster method.
// It will increment the count of requests made to ModifyCluster.
func (c *Redshift) ModifyCluster(input *redshift.ModifyClusterInput) (*redshift.ModifyClusterOutput, error) {
	c.inc("ModifyCluster")
	return c.svc.ModifyCluster(input)
}

// ModifyClusterWithContext is a passthrough to the underlying ModifyClusterWithContext method.
// It will increment the count of requests made to ModifyCluster.
func (c *Redshift) ModifyClusterWithContext(ctx aws.Context, input *redshift.ModifyClusterInput, opts ...request.Option) (*redshift.ModifyClusterOutput, error) {
	c.inc("ModifyCluster")
	return c.svc.ModifyClusterWithContext(ctx, input, opts...)
}

// ModifyClusterIamRolesRequest is a passthrough to the underlying ModifyClusterIamRolesRequest.
// It will increment the count of requests made to ModifyClusterIamRoles.
func (c *Redshift) ModifyClusterIamRolesRequest(input *redshift.ModifyClusterIamRolesInput) (req *request.Request, output *redshift.ModifyClusterIamRolesOutput) {
	c.inc("ModifyClusterIamRoles")
	return c.svc.ModifyClusterIamRolesRequest(input)
}

// ModifyClusterIamRoles is a passthrough to the underlying ModifyClusterIamRoles method.
// It will increment the count of requests made to ModifyClusterIamRoles.
func (c *Redshift) ModifyClusterIamRoles(input *redshift.ModifyClusterIamRolesInput) (*redshift.ModifyClusterIamRolesOutput, error) {
	c.inc("ModifyClusterIamRoles")
	return c.svc.ModifyClusterIamRoles(input)
}

// ModifyClusterIamRolesWithContext is a passthrough to the underlying ModifyClusterIamRolesWithContext method.
// It will increment the count of requests made to ModifyClusterIamRoles.
func (c *Redshift) ModifyClusterIamRolesWithContext(ctx aws.Context, input *redshift.ModifyClusterIamRolesInput, opts ...request.Option) (*redshift.ModifyClusterIamRolesOutput, error) {
	c.inc("ModifyClusterIamRoles")
	return c.svc.ModifyClusterIamRolesWithContext(ctx, input, opts...)
}

// ModifyClusterParameterGroupRequest is a passthrough to the underlying ModifyClusterParameterGroupRequest.
// It will increment the count of requests made to ModifyClusterParameterGroup.
func (c *Redshift) ModifyClusterParameterGroupRequest(input *redshift.ModifyClusterParameterGroupInput) (req *request.Request, output *redshift.ClusterParameterGroupNameMessage) {
	c.inc("ModifyClusterParameterGroup")
	return c.svc.ModifyClusterParameterGroupRequest(input)
}

// ModifyClusterParameterGroup is a passthrough to the underlying ModifyClusterParameterGroup method.
// It will increment the count of requests made to ModifyClusterParameterGroup.
func (c *Redshift) ModifyClusterParameterGroup(input *redshift.ModifyClusterParameterGroupInput) (*redshift.ClusterParameterGroupNameMessage, error) {
	c.inc("ModifyClusterParameterGroup")
	return c.svc.ModifyClusterParameterGroup(input)
}

// ModifyClusterParameterGroupWithContext is a passthrough to the underlying ModifyClusterParameterGroupWithContext method.
// It will increment the count of requests made to ModifyClusterParameterGroup.
func (c *Redshift) ModifyClusterParameterGroupWithContext(ctx aws.Context, input *redshift.ModifyClusterParameterGroupInput, opts ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error) {
	c.inc("ModifyClusterParameterGroup")
	return c.svc.ModifyClusterParameterGroupWithContext(ctx, input, opts...)
}

// ModifyClusterSubnetGroupRequest is a passthrough to the underlying ModifyClusterSubnetGroupRequest.
// It will increment the count of requests made to ModifyClusterSubnetGroup.
func (c *Redshift) ModifyClusterSubnetGroupRequest(input *redshift.ModifyClusterSubnetGroupInput) (req *request.Request, output *redshift.ModifyClusterSubnetGroupOutput) {
	c.inc("ModifyClusterSubnetGroup")
	return c.svc.ModifyClusterSubnetGroupRequest(input)
}

// ModifyClusterSubnetGroup is a passthrough to the underlying ModifyClusterSubnetGroup method.
// It will increment the count of requests made to ModifyClusterSubnetGroup.
func (c *Redshift) ModifyClusterSubnetGroup(input *redshift.ModifyClusterSubnetGroupInput) (*redshift.ModifyClusterSubnetGroupOutput, error) {
	c.inc("ModifyClusterSubnetGroup")
	return c.svc.ModifyClusterSubnetGroup(input)
}

// ModifyClusterSubnetGroupWithContext is a passthrough to the underlying ModifyClusterSubnetGroupWithContext method.
// It will increment the count of requests made to ModifyClusterSubnetGroup.
func (c *Redshift) ModifyClusterSubnetGroupWithContext(ctx aws.Context, input *redshift.ModifyClusterSubnetGroupInput, opts ...request.Option) (*redshift.ModifyClusterSubnetGroupOutput, error) {
	c.inc("ModifyClusterSubnetGroup")
	return c.svc.ModifyClusterSubnetGroupWithContext(ctx, input, opts...)
}

// ModifyEventSubscriptionRequest is a passthrough to the underlying ModifyEventSubscriptionRequest.
// It will increment the count of requests made to ModifyEventSubscription.
func (c *Redshift) ModifyEventSubscriptionRequest(input *redshift.ModifyEventSubscriptionInput) (req *request.Request, output *redshift.ModifyEventSubscriptionOutput) {
	c.inc("ModifyEventSubscription")
	return c.svc.ModifyEventSubscriptionRequest(input)
}

// ModifyEventSubscription is a passthrough to the underlying ModifyEventSubscription method.
// It will increment the count of requests made to ModifyEventSubscription.
func (c *Redshift) ModifyEventSubscription(input *redshift.ModifyEventSubscriptionInput) (*redshift.ModifyEventSubscriptionOutput, error) {
	c.inc("ModifyEventSubscription")
	return c.svc.ModifyEventSubscription(input)
}

// ModifyEventSubscriptionWithContext is a passthrough to the underlying ModifyEventSubscriptionWithContext method.
// It will increment the count of requests made to ModifyEventSubscription.
func (c *Redshift) ModifyEventSubscriptionWithContext(ctx aws.Context, input *redshift.ModifyEventSubscriptionInput, opts ...request.Option) (*redshift.ModifyEventSubscriptionOutput, error) {
	c.inc("ModifyEventSubscription")
	return c.svc.ModifyEventSubscriptionWithContext(ctx, input, opts...)
}

// ModifySnapshotCopyRetentionPeriodRequest is a passthrough to the underlying ModifySnapshotCopyRetentionPeriodRequest.
// It will increment the count of requests made to ModifySnapshotCopyRetentionPeriod.
func (c *Redshift) ModifySnapshotCopyRetentionPeriodRequest(input *redshift.ModifySnapshotCopyRetentionPeriodInput) (req *request.Request, output *redshift.ModifySnapshotCopyRetentionPeriodOutput) {
	c.inc("ModifySnapshotCopyRetentionPeriod")
	return c.svc.ModifySnapshotCopyRetentionPeriodRequest(input)
}

// ModifySnapshotCopyRetentionPeriod is a passthrough to the underlying ModifySnapshotCopyRetentionPeriod method.
// It will increment the count of requests made to ModifySnapshotCopyRetentionPeriod.
func (c *Redshift) ModifySnapshotCopyRetentionPeriod(input *redshift.ModifySnapshotCopyRetentionPeriodInput) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error) {
	c.inc("ModifySnapshotCopyRetentionPeriod")
	return c.svc.ModifySnapshotCopyRetentionPeriod(input)
}

// ModifySnapshotCopyRetentionPeriodWithContext is a passthrough to the underlying ModifySnapshotCopyRetentionPeriodWithContext method.
// It will increment the count of requests made to ModifySnapshotCopyRetentionPeriod.
func (c *Redshift) ModifySnapshotCopyRetentionPeriodWithContext(ctx aws.Context, input *redshift.ModifySnapshotCopyRetentionPeriodInput, opts ...request.Option) (*redshift.ModifySnapshotCopyRetentionPeriodOutput, error) {
	c.inc("ModifySnapshotCopyRetentionPeriod")
	return c.svc.ModifySnapshotCopyRetentionPeriodWithContext(ctx, input, opts...)
}

// PurchaseReservedNodeOfferingRequest is a passthrough to the underlying PurchaseReservedNodeOfferingRequest.
// It will increment the count of requests made to PurchaseReservedNodeOffering.
func (c *Redshift) PurchaseReservedNodeOfferingRequest(input *redshift.PurchaseReservedNodeOfferingInput) (req *request.Request, output *redshift.PurchaseReservedNodeOfferingOutput) {
	c.inc("PurchaseReservedNodeOffering")
	return c.svc.PurchaseReservedNodeOfferingRequest(input)
}

// PurchaseReservedNodeOffering is a passthrough to the underlying PurchaseReservedNodeOffering method.
// It will increment the count of requests made to PurchaseReservedNodeOffering.
func (c *Redshift) PurchaseReservedNodeOffering(input *redshift.PurchaseReservedNodeOfferingInput) (*redshift.PurchaseReservedNodeOfferingOutput, error) {
	c.inc("PurchaseReservedNodeOffering")
	return c.svc.PurchaseReservedNodeOffering(input)
}

// PurchaseReservedNodeOfferingWithContext is a passthrough to the underlying PurchaseReservedNodeOfferingWithContext method.
// It will increment the count of requests made to PurchaseReservedNodeOffering.
func (c *Redshift) PurchaseReservedNodeOfferingWithContext(ctx aws.Context, input *redshift.PurchaseReservedNodeOfferingInput, opts ...request.Option) (*redshift.PurchaseReservedNodeOfferingOutput, error) {
	c.inc("PurchaseReservedNodeOffering")
	return c.svc.PurchaseReservedNodeOfferingWithContext(ctx, input, opts...)
}

// RebootClusterRequest is a passthrough to the underlying RebootClusterRequest.
// It will increment the count of requests made to RebootCluster.
func (c *Redshift) RebootClusterRequest(input *redshift.RebootClusterInput) (req *request.Request, output *redshift.RebootClusterOutput) {
	c.inc("RebootCluster")
	return c.svc.RebootClusterRequest(input)
}

// RebootCluster is a passthrough to the underlying RebootCluster method.
// It will increment the count of requests made to RebootCluster.
func (c *Redshift) RebootCluster(input *redshift.RebootClusterInput) (*redshift.RebootClusterOutput, error) {
	c.inc("RebootCluster")
	return c.svc.RebootCluster(input)
}

// RebootClusterWithContext is a passthrough to the underlying RebootClusterWithContext method.
// It will increment the count of requests made to RebootCluster.
func (c *Redshift) RebootClusterWithContext(ctx aws.Context, input *redshift.RebootClusterInput, opts ...request.Option) (*redshift.RebootClusterOutput, error) {
	c.inc("RebootCluster")
	return c.svc.RebootClusterWithContext(ctx, input, opts...)
}

// ResetClusterParameterGroupRequest is a passthrough to the underlying ResetClusterParameterGroupRequest.
// It will increment the count of requests made to ResetClusterParameterGroup.
func (c *Redshift) ResetClusterParameterGroupRequest(input *redshift.ResetClusterParameterGroupInput) (req *request.Request, output *redshift.ClusterParameterGroupNameMessage) {
	c.inc("ResetClusterParameterGroup")
	return c.svc.ResetClusterParameterGroupRequest(input)
}

// ResetClusterParameterGroup is a passthrough to the underlying ResetClusterParameterGroup method.
// It will increment the count of requests made to ResetClusterParameterGroup.
func (c *Redshift) ResetClusterParameterGroup(input *redshift.ResetClusterParameterGroupInput) (*redshift.ClusterParameterGroupNameMessage, error) {
	c.inc("ResetClusterParameterGroup")
	return c.svc.ResetClusterParameterGroup(input)
}

// ResetClusterParameterGroupWithContext is a passthrough to the underlying ResetClusterParameterGroupWithContext method.
// It will increment the count of requests made to ResetClusterParameterGroup.
func (c *Redshift) ResetClusterParameterGroupWithContext(ctx aws.Context, input *redshift.ResetClusterParameterGroupInput, opts ...request.Option) (*redshift.ClusterParameterGroupNameMessage, error) {
	c.inc("ResetClusterParameterGroup")
	return c.svc.ResetClusterParameterGroupWithContext(ctx, input, opts...)
}

// RestoreFromClusterSnapshotRequest is a passthrough to the underlying RestoreFromClusterSnapshotRequest.
// It will increment the count of requests made to RestoreFromClusterSnapshot.
func (c *Redshift) RestoreFromClusterSnapshotRequest(input *redshift.RestoreFromClusterSnapshotInput) (req *request.Request, output *redshift.RestoreFromClusterSnapshotOutput) {
	c.inc("RestoreFromClusterSnapshot")
	return c.svc.RestoreFromClusterSnapshotRequest(input)
}

// RestoreFromClusterSnapshot is a passthrough to the underlying RestoreFromClusterSnapshot method.
// It will increment the count of requests made to RestoreFromClusterSnapshot.
func (c *Redshift) RestoreFromClusterSnapshot(input *redshift.RestoreFromClusterSnapshotInput) (*redshift.RestoreFromClusterSnapshotOutput, error) {
	c.inc("RestoreFromClusterSnapshot")
	return c.svc.RestoreFromClusterSnapshot(input)
}

// RestoreFromClusterSnapshotWithContext is a passthrough to the underlying RestoreFromClusterSnapshotWithContext method.
// It will increment the count of requests made to RestoreFromClusterSnapshot.
func (c *Redshift) RestoreFromClusterSnapshotWithContext(ctx aws.Context, input *redshift.RestoreFromClusterSnapshotInput, opts ...request.Option) (*redshift.RestoreFromClusterSnapshotOutput, error) {
	c.inc("RestoreFromClusterSnapshot")
	return c.svc.RestoreFromClusterSnapshotWithContext(ctx, input, opts...)
}

// RestoreTableFromClusterSnapshotRequest is a passthrough to the underlying RestoreTableFromClusterSnapshotRequest.
// It will increment the count of requests made to RestoreTableFromClusterSnapshot.
func (c *Redshift) RestoreTableFromClusterSnapshotRequest(input *redshift.RestoreTableFromClusterSnapshotInput) (req *request.Request, output *redshift.RestoreTableFromClusterSnapshotOutput) {
	c.inc("RestoreTableFromClusterSnapshot")
	return c.svc.RestoreTableFromClusterSnapshotRequest(input)
}

// RestoreTableFromClusterSnapshot is a passthrough to the underlying RestoreTableFromClusterSnapshot method.
// It will increment the count of requests made to RestoreTableFromClusterSnapshot.
func (c *Redshift) RestoreTableFromClusterSnapshot(input *redshift.RestoreTableFromClusterSnapshotInput) (*redshift.RestoreTableFromClusterSnapshotOutput, error) {
	c.inc("RestoreTableFromClusterSnapshot")
	return c.svc.RestoreTableFromClusterSnapshot(input)
}

// RestoreTableFromClusterSnapshotWithContext is a passthrough to the underlying RestoreTableFromClusterSnapshotWithContext method.
// It will increment the count of requests made to RestoreTableFromClusterSnapshot.
func (c *Redshift) RestoreTableFromClusterSnapshotWithContext(ctx aws.Context, input *redshift.RestoreTableFromClusterSnapshotInput, opts ...request.Option) (*redshift.RestoreTableFromClusterSnapshotOutput, error) {
	c.inc("RestoreTableFromClusterSnapshot")
	return c.svc.RestoreTableFromClusterSnapshotWithContext(ctx, input, opts...)
}

// RevokeClusterSecurityGroupIngressRequest is a passthrough to the underlying RevokeClusterSecurityGroupIngressRequest.
// It will increment the count of requests made to RevokeClusterSecurityGroupIngress.
func (c *Redshift) RevokeClusterSecurityGroupIngressRequest(input *redshift.RevokeClusterSecurityGroupIngressInput) (req *request.Request, output *redshift.RevokeClusterSecurityGroupIngressOutput) {
	c.inc("RevokeClusterSecurityGroupIngress")
	return c.svc.RevokeClusterSecurityGroupIngressRequest(input)
}

// RevokeClusterSecurityGroupIngress is a passthrough to the underlying RevokeClusterSecurityGroupIngress method.
// It will increment the count of requests made to RevokeClusterSecurityGroupIngress.
func (c *Redshift) RevokeClusterSecurityGroupIngress(input *redshift.RevokeClusterSecurityGroupIngressInput) (*redshift.RevokeClusterSecurityGroupIngressOutput, error) {
	c.inc("RevokeClusterSecurityGroupIngress")
	return c.svc.RevokeClusterSecurityGroupIngress(input)
}

// RevokeClusterSecurityGroupIngressWithContext is a passthrough to the underlying RevokeClusterSecurityGroupIngressWithContext method.
// It will increment the count of requests made to RevokeClusterSecurityGroupIngress.
func (c *Redshift) RevokeClusterSecurityGroupIngressWithContext(ctx aws.Context, input *redshift.RevokeClusterSecurityGroupIngressInput, opts ...request.Option) (*redshift.RevokeClusterSecurityGroupIngressOutput, error) {
	c.inc("RevokeClusterSecurityGroupIngress")
	return c.svc.RevokeClusterSecurityGroupIngressWithContext(ctx, input, opts...)
}

// RevokeSnapshotAccessRequest is a passthrough to the underlying RevokeSnapshotAccessRequest.
// It will increment the count of requests made to RevokeSnapshotAccess.
func (c *Redshift) RevokeSnapshotAccessRequest(input *redshift.RevokeSnapshotAccessInput) (req *request.Request, output *redshift.RevokeSnapshotAccessOutput) {
	c.inc("RevokeSnapshotAccess")
	return c.svc.RevokeSnapshotAccessRequest(input)
}

// RevokeSnapshotAccess is a passthrough to the underlying RevokeSnapshotAccess method.
// It will increment the count of requests made to RevokeSnapshotAccess.
func (c *Redshift) RevokeSnapshotAccess(input *redshift.RevokeSnapshotAccessInput) (*redshift.RevokeSnapshotAccessOutput, error) {
	c.inc("RevokeSnapshotAccess")
	return c.svc.RevokeSnapshotAccess(input)
}

// RevokeSnapshotAccessWithContext is a passthrough to the underlying RevokeSnapshotAccessWithContext method.
// It will increment the count of requests made to RevokeSnapshotAccess.
func (c *Redshift) RevokeSnapshotAccessWithContext(ctx aws.Context, input *redshift.RevokeSnapshotAccessInput, opts ...request.Option) (*redshift.RevokeSnapshotAccessOutput, error) {
	c.inc("RevokeSnapshotAccess")
	return c.svc.RevokeSnapshotAccessWithContext(ctx, input, opts...)
}

// RotateEncryptionKeyRequest is a passthrough to the underlying RotateEncryptionKeyRequest.
// It will increment the count of requests made to RotateEncryptionKey.
func (c *Redshift) RotateEncryptionKeyRequest(input *redshift.RotateEncryptionKeyInput) (req *request.Request, output *redshift.RotateEncryptionKeyOutput) {
	c.inc("RotateEncryptionKey")
	return c.svc.RotateEncryptionKeyRequest(input)
}

// RotateEncryptionKey is a passthrough to the underlying RotateEncryptionKey method.
// It will increment the count of requests made to RotateEncryptionKey.
func (c *Redshift) RotateEncryptionKey(input *redshift.RotateEncryptionKeyInput) (*redshift.RotateEncryptionKeyOutput, error) {
	c.inc("RotateEncryptionKey")
	return c.svc.RotateEncryptionKey(input)
}

// RotateEncryptionKeyWithContext is a passthrough to the underlying RotateEncryptionKeyWithContext method.
// It will increment the count of requests made to RotateEncryptionKey.
func (c *Redshift) RotateEncryptionKeyWithContext(ctx aws.Context, input *redshift.RotateEncryptionKeyInput, opts ...request.Option) (*redshift.RotateEncryptionKeyOutput, error) {
	c.inc("RotateEncryptionKey")
	return c.svc.RotateEncryptionKeyWithContext(ctx, input, opts...)
}
