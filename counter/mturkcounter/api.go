// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package mturkcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/mturk"
)

// AcceptQualificationRequestRequest is a passthrough to the underlying AcceptQualificationRequestRequest.
// It will increment the count of requests made to AcceptQualificationRequest.
func (c *MTurk) AcceptQualificationRequestRequest(input *mturk.AcceptQualificationRequestInput) (req *request.Request, output *mturk.AcceptQualificationRequestOutput) {
	c.inc("AcceptQualificationRequest")
	return c.svc.AcceptQualificationRequestRequest(input)
}

// AcceptQualificationRequest is a passthrough to the underlying AcceptQualificationRequest method.
// It will increment the count of requests made to AcceptQualificationRequest.
func (c *MTurk) AcceptQualificationRequest(input *mturk.AcceptQualificationRequestInput) (*mturk.AcceptQualificationRequestOutput, error) {
	c.inc("AcceptQualificationRequest")
	return c.svc.AcceptQualificationRequest(input)
}

// AcceptQualificationRequestWithContext is a passthrough to the underlying AcceptQualificationRequestWithContext method.
// It will increment the count of requests made to AcceptQualificationRequest.
func (c *MTurk) AcceptQualificationRequestWithContext(ctx aws.Context, input *mturk.AcceptQualificationRequestInput, opts ...request.Option) (*mturk.AcceptQualificationRequestOutput, error) {
	c.inc("AcceptQualificationRequest")
	return c.svc.AcceptQualificationRequestWithContext(ctx, input, opts...)
}

// ApproveAssignmentRequest is a passthrough to the underlying ApproveAssignmentRequest.
// It will increment the count of requests made to ApproveAssignment.
func (c *MTurk) ApproveAssignmentRequest(input *mturk.ApproveAssignmentInput) (req *request.Request, output *mturk.ApproveAssignmentOutput) {
	c.inc("ApproveAssignment")
	return c.svc.ApproveAssignmentRequest(input)
}

// ApproveAssignment is a passthrough to the underlying ApproveAssignment method.
// It will increment the count of requests made to ApproveAssignment.
func (c *MTurk) ApproveAssignment(input *mturk.ApproveAssignmentInput) (*mturk.ApproveAssignmentOutput, error) {
	c.inc("ApproveAssignment")
	return c.svc.ApproveAssignment(input)
}

// ApproveAssignmentWithContext is a passthrough to the underlying ApproveAssignmentWithContext method.
// It will increment the count of requests made to ApproveAssignment.
func (c *MTurk) ApproveAssignmentWithContext(ctx aws.Context, input *mturk.ApproveAssignmentInput, opts ...request.Option) (*mturk.ApproveAssignmentOutput, error) {
	c.inc("ApproveAssignment")
	return c.svc.ApproveAssignmentWithContext(ctx, input, opts...)
}

// AssociateQualificationWithWorkerRequest is a passthrough to the underlying AssociateQualificationWithWorkerRequest.
// It will increment the count of requests made to AssociateQualificationWithWorker.
func (c *MTurk) AssociateQualificationWithWorkerRequest(input *mturk.AssociateQualificationWithWorkerInput) (req *request.Request, output *mturk.AssociateQualificationWithWorkerOutput) {
	c.inc("AssociateQualificationWithWorker")
	return c.svc.AssociateQualificationWithWorkerRequest(input)
}

// AssociateQualificationWithWorker is a passthrough to the underlying AssociateQualificationWithWorker method.
// It will increment the count of requests made to AssociateQualificationWithWorker.
func (c *MTurk) AssociateQualificationWithWorker(input *mturk.AssociateQualificationWithWorkerInput) (*mturk.AssociateQualificationWithWorkerOutput, error) {
	c.inc("AssociateQualificationWithWorker")
	return c.svc.AssociateQualificationWithWorker(input)
}

// AssociateQualificationWithWorkerWithContext is a passthrough to the underlying AssociateQualificationWithWorkerWithContext method.
// It will increment the count of requests made to AssociateQualificationWithWorker.
func (c *MTurk) AssociateQualificationWithWorkerWithContext(ctx aws.Context, input *mturk.AssociateQualificationWithWorkerInput, opts ...request.Option) (*mturk.AssociateQualificationWithWorkerOutput, error) {
	c.inc("AssociateQualificationWithWorker")
	return c.svc.AssociateQualificationWithWorkerWithContext(ctx, input, opts...)
}

// CreateAdditionalAssignmentsForHITRequest is a passthrough to the underlying CreateAdditionalAssignmentsForHITRequest.
// It will increment the count of requests made to CreateAdditionalAssignmentsForHIT.
func (c *MTurk) CreateAdditionalAssignmentsForHITRequest(input *mturk.CreateAdditionalAssignmentsForHITInput) (req *request.Request, output *mturk.CreateAdditionalAssignmentsForHITOutput) {
	c.inc("CreateAdditionalAssignmentsForHIT")
	return c.svc.CreateAdditionalAssignmentsForHITRequest(input)
}

// CreateAdditionalAssignmentsForHIT is a passthrough to the underlying CreateAdditionalAssignmentsForHIT method.
// It will increment the count of requests made to CreateAdditionalAssignmentsForHIT.
func (c *MTurk) CreateAdditionalAssignmentsForHIT(input *mturk.CreateAdditionalAssignmentsForHITInput) (*mturk.CreateAdditionalAssignmentsForHITOutput, error) {
	c.inc("CreateAdditionalAssignmentsForHIT")
	return c.svc.CreateAdditionalAssignmentsForHIT(input)
}

// CreateAdditionalAssignmentsForHITWithContext is a passthrough to the underlying CreateAdditionalAssignmentsForHITWithContext method.
// It will increment the count of requests made to CreateAdditionalAssignmentsForHIT.
func (c *MTurk) CreateAdditionalAssignmentsForHITWithContext(ctx aws.Context, input *mturk.CreateAdditionalAssignmentsForHITInput, opts ...request.Option) (*mturk.CreateAdditionalAssignmentsForHITOutput, error) {
	c.inc("CreateAdditionalAssignmentsForHIT")
	return c.svc.CreateAdditionalAssignmentsForHITWithContext(ctx, input, opts...)
}

// CreateHITRequest is a passthrough to the underlying CreateHITRequest.
// It will increment the count of requests made to CreateHIT.
func (c *MTurk) CreateHITRequest(input *mturk.CreateHITInput) (req *request.Request, output *mturk.CreateHITOutput) {
	c.inc("CreateHIT")
	return c.svc.CreateHITRequest(input)
}

// CreateHIT is a passthrough to the underlying CreateHIT method.
// It will increment the count of requests made to CreateHIT.
func (c *MTurk) CreateHIT(input *mturk.CreateHITInput) (*mturk.CreateHITOutput, error) {
	c.inc("CreateHIT")
	return c.svc.CreateHIT(input)
}

// CreateHITWithContext is a passthrough to the underlying CreateHITWithContext method.
// It will increment the count of requests made to CreateHIT.
func (c *MTurk) CreateHITWithContext(ctx aws.Context, input *mturk.CreateHITInput, opts ...request.Option) (*mturk.CreateHITOutput, error) {
	c.inc("CreateHIT")
	return c.svc.CreateHITWithContext(ctx, input, opts...)
}

// CreateHITTypeRequest is a passthrough to the underlying CreateHITTypeRequest.
// It will increment the count of requests made to CreateHITType.
func (c *MTurk) CreateHITTypeRequest(input *mturk.CreateHITTypeInput) (req *request.Request, output *mturk.CreateHITTypeOutput) {
	c.inc("CreateHITType")
	return c.svc.CreateHITTypeRequest(input)
}

// CreateHITType is a passthrough to the underlying CreateHITType method.
// It will increment the count of requests made to CreateHITType.
func (c *MTurk) CreateHITType(input *mturk.CreateHITTypeInput) (*mturk.CreateHITTypeOutput, error) {
	c.inc("CreateHITType")
	return c.svc.CreateHITType(input)
}

// CreateHITTypeWithContext is a passthrough to the underlying CreateHITTypeWithContext method.
// It will increment the count of requests made to CreateHITType.
func (c *MTurk) CreateHITTypeWithContext(ctx aws.Context, input *mturk.CreateHITTypeInput, opts ...request.Option) (*mturk.CreateHITTypeOutput, error) {
	c.inc("CreateHITType")
	return c.svc.CreateHITTypeWithContext(ctx, input, opts...)
}

// CreateHITWithHITTypeRequest is a passthrough to the underlying CreateHITWithHITTypeRequest.
// It will increment the count of requests made to CreateHITWithHITType.
func (c *MTurk) CreateHITWithHITTypeRequest(input *mturk.CreateHITWithHITTypeInput) (req *request.Request, output *mturk.CreateHITWithHITTypeOutput) {
	c.inc("CreateHITWithHITType")
	return c.svc.CreateHITWithHITTypeRequest(input)
}

// CreateHITWithHITType is a passthrough to the underlying CreateHITWithHITType method.
// It will increment the count of requests made to CreateHITWithHITType.
func (c *MTurk) CreateHITWithHITType(input *mturk.CreateHITWithHITTypeInput) (*mturk.CreateHITWithHITTypeOutput, error) {
	c.inc("CreateHITWithHITType")
	return c.svc.CreateHITWithHITType(input)
}

// CreateHITWithHITTypeWithContext is a passthrough to the underlying CreateHITWithHITTypeWithContext method.
// It will increment the count of requests made to CreateHITWithHITType.
func (c *MTurk) CreateHITWithHITTypeWithContext(ctx aws.Context, input *mturk.CreateHITWithHITTypeInput, opts ...request.Option) (*mturk.CreateHITWithHITTypeOutput, error) {
	c.inc("CreateHITWithHITType")
	return c.svc.CreateHITWithHITTypeWithContext(ctx, input, opts...)
}

// CreateQualificationTypeRequest is a passthrough to the underlying CreateQualificationTypeRequest.
// It will increment the count of requests made to CreateQualificationType.
func (c *MTurk) CreateQualificationTypeRequest(input *mturk.CreateQualificationTypeInput) (req *request.Request, output *mturk.CreateQualificationTypeOutput) {
	c.inc("CreateQualificationType")
	return c.svc.CreateQualificationTypeRequest(input)
}

// CreateQualificationType is a passthrough to the underlying CreateQualificationType method.
// It will increment the count of requests made to CreateQualificationType.
func (c *MTurk) CreateQualificationType(input *mturk.CreateQualificationTypeInput) (*mturk.CreateQualificationTypeOutput, error) {
	c.inc("CreateQualificationType")
	return c.svc.CreateQualificationType(input)
}

// CreateQualificationTypeWithContext is a passthrough to the underlying CreateQualificationTypeWithContext method.
// It will increment the count of requests made to CreateQualificationType.
func (c *MTurk) CreateQualificationTypeWithContext(ctx aws.Context, input *mturk.CreateQualificationTypeInput, opts ...request.Option) (*mturk.CreateQualificationTypeOutput, error) {
	c.inc("CreateQualificationType")
	return c.svc.CreateQualificationTypeWithContext(ctx, input, opts...)
}

// CreateWorkerBlockRequest is a passthrough to the underlying CreateWorkerBlockRequest.
// It will increment the count of requests made to CreateWorkerBlock.
func (c *MTurk) CreateWorkerBlockRequest(input *mturk.CreateWorkerBlockInput) (req *request.Request, output *mturk.CreateWorkerBlockOutput) {
	c.inc("CreateWorkerBlock")
	return c.svc.CreateWorkerBlockRequest(input)
}

// CreateWorkerBlock is a passthrough to the underlying CreateWorkerBlock method.
// It will increment the count of requests made to CreateWorkerBlock.
func (c *MTurk) CreateWorkerBlock(input *mturk.CreateWorkerBlockInput) (*mturk.CreateWorkerBlockOutput, error) {
	c.inc("CreateWorkerBlock")
	return c.svc.CreateWorkerBlock(input)
}

// CreateWorkerBlockWithContext is a passthrough to the underlying CreateWorkerBlockWithContext method.
// It will increment the count of requests made to CreateWorkerBlock.
func (c *MTurk) CreateWorkerBlockWithContext(ctx aws.Context, input *mturk.CreateWorkerBlockInput, opts ...request.Option) (*mturk.CreateWorkerBlockOutput, error) {
	c.inc("CreateWorkerBlock")
	return c.svc.CreateWorkerBlockWithContext(ctx, input, opts...)
}

// DeleteHITRequest is a passthrough to the underlying DeleteHITRequest.
// It will increment the count of requests made to DeleteHIT.
func (c *MTurk) DeleteHITRequest(input *mturk.DeleteHITInput) (req *request.Request, output *mturk.DeleteHITOutput) {
	c.inc("DeleteHIT")
	return c.svc.DeleteHITRequest(input)
}

// DeleteHIT is a passthrough to the underlying DeleteHIT method.
// It will increment the count of requests made to DeleteHIT.
func (c *MTurk) DeleteHIT(input *mturk.DeleteHITInput) (*mturk.DeleteHITOutput, error) {
	c.inc("DeleteHIT")
	return c.svc.DeleteHIT(input)
}

// DeleteHITWithContext is a passthrough to the underlying DeleteHITWithContext method.
// It will increment the count of requests made to DeleteHIT.
func (c *MTurk) DeleteHITWithContext(ctx aws.Context, input *mturk.DeleteHITInput, opts ...request.Option) (*mturk.DeleteHITOutput, error) {
	c.inc("DeleteHIT")
	return c.svc.DeleteHITWithContext(ctx, input, opts...)
}

// DeleteQualificationTypeRequest is a passthrough to the underlying DeleteQualificationTypeRequest.
// It will increment the count of requests made to DeleteQualificationType.
func (c *MTurk) DeleteQualificationTypeRequest(input *mturk.DeleteQualificationTypeInput) (req *request.Request, output *mturk.DeleteQualificationTypeOutput) {
	c.inc("DeleteQualificationType")
	return c.svc.DeleteQualificationTypeRequest(input)
}

// DeleteQualificationType is a passthrough to the underlying DeleteQualificationType method.
// It will increment the count of requests made to DeleteQualificationType.
func (c *MTurk) DeleteQualificationType(input *mturk.DeleteQualificationTypeInput) (*mturk.DeleteQualificationTypeOutput, error) {
	c.inc("DeleteQualificationType")
	return c.svc.DeleteQualificationType(input)
}

// DeleteQualificationTypeWithContext is a passthrough to the underlying DeleteQualificationTypeWithContext method.
// It will increment the count of requests made to DeleteQualificationType.
func (c *MTurk) DeleteQualificationTypeWithContext(ctx aws.Context, input *mturk.DeleteQualificationTypeInput, opts ...request.Option) (*mturk.DeleteQualificationTypeOutput, error) {
	c.inc("DeleteQualificationType")
	return c.svc.DeleteQualificationTypeWithContext(ctx, input, opts...)
}

// DeleteWorkerBlockRequest is a passthrough to the underlying DeleteWorkerBlockRequest.
// It will increment the count of requests made to DeleteWorkerBlock.
func (c *MTurk) DeleteWorkerBlockRequest(input *mturk.DeleteWorkerBlockInput) (req *request.Request, output *mturk.DeleteWorkerBlockOutput) {
	c.inc("DeleteWorkerBlock")
	return c.svc.DeleteWorkerBlockRequest(input)
}

// DeleteWorkerBlock is a passthrough to the underlying DeleteWorkerBlock method.
// It will increment the count of requests made to DeleteWorkerBlock.
func (c *MTurk) DeleteWorkerBlock(input *mturk.DeleteWorkerBlockInput) (*mturk.DeleteWorkerBlockOutput, error) {
	c.inc("DeleteWorkerBlock")
	return c.svc.DeleteWorkerBlock(input)
}

// DeleteWorkerBlockWithContext is a passthrough to the underlying DeleteWorkerBlockWithContext method.
// It will increment the count of requests made to DeleteWorkerBlock.
func (c *MTurk) DeleteWorkerBlockWithContext(ctx aws.Context, input *mturk.DeleteWorkerBlockInput, opts ...request.Option) (*mturk.DeleteWorkerBlockOutput, error) {
	c.inc("DeleteWorkerBlock")
	return c.svc.DeleteWorkerBlockWithContext(ctx, input, opts...)
}

// DisassociateQualificationFromWorkerRequest is a passthrough to the underlying DisassociateQualificationFromWorkerRequest.
// It will increment the count of requests made to DisassociateQualificationFromWorker.
func (c *MTurk) DisassociateQualificationFromWorkerRequest(input *mturk.DisassociateQualificationFromWorkerInput) (req *request.Request, output *mturk.DisassociateQualificationFromWorkerOutput) {
	c.inc("DisassociateQualificationFromWorker")
	return c.svc.DisassociateQualificationFromWorkerRequest(input)
}

// DisassociateQualificationFromWorker is a passthrough to the underlying DisassociateQualificationFromWorker method.
// It will increment the count of requests made to DisassociateQualificationFromWorker.
func (c *MTurk) DisassociateQualificationFromWorker(input *mturk.DisassociateQualificationFromWorkerInput) (*mturk.DisassociateQualificationFromWorkerOutput, error) {
	c.inc("DisassociateQualificationFromWorker")
	return c.svc.DisassociateQualificationFromWorker(input)
}

// DisassociateQualificationFromWorkerWithContext is a passthrough to the underlying DisassociateQualificationFromWorkerWithContext method.
// It will increment the count of requests made to DisassociateQualificationFromWorker.
func (c *MTurk) DisassociateQualificationFromWorkerWithContext(ctx aws.Context, input *mturk.DisassociateQualificationFromWorkerInput, opts ...request.Option) (*mturk.DisassociateQualificationFromWorkerOutput, error) {
	c.inc("DisassociateQualificationFromWorker")
	return c.svc.DisassociateQualificationFromWorkerWithContext(ctx, input, opts...)
}

// GetAccountBalanceRequest is a passthrough to the underlying GetAccountBalanceRequest.
// It will increment the count of requests made to GetAccountBalance.
func (c *MTurk) GetAccountBalanceRequest(input *mturk.GetAccountBalanceInput) (req *request.Request, output *mturk.GetAccountBalanceOutput) {
	c.inc("GetAccountBalance")
	return c.svc.GetAccountBalanceRequest(input)
}

// GetAccountBalance is a passthrough to the underlying GetAccountBalance method.
// It will increment the count of requests made to GetAccountBalance.
func (c *MTurk) GetAccountBalance(input *mturk.GetAccountBalanceInput) (*mturk.GetAccountBalanceOutput, error) {
	c.inc("GetAccountBalance")
	return c.svc.GetAccountBalance(input)
}

// GetAccountBalanceWithContext is a passthrough to the underlying GetAccountBalanceWithContext method.
// It will increment the count of requests made to GetAccountBalance.
func (c *MTurk) GetAccountBalanceWithContext(ctx aws.Context, input *mturk.GetAccountBalanceInput, opts ...request.Option) (*mturk.GetAccountBalanceOutput, error) {
	c.inc("GetAccountBalance")
	return c.svc.GetAccountBalanceWithContext(ctx, input, opts...)
}

// GetAssignmentRequest is a passthrough to the underlying GetAssignmentRequest.
// It will increment the count of requests made to GetAssignment.
func (c *MTurk) GetAssignmentRequest(input *mturk.GetAssignmentInput) (req *request.Request, output *mturk.GetAssignmentOutput) {
	c.inc("GetAssignment")
	return c.svc.GetAssignmentRequest(input)
}

// GetAssignment is a passthrough to the underlying GetAssignment method.
// It will increment the count of requests made to GetAssignment.
func (c *MTurk) GetAssignment(input *mturk.GetAssignmentInput) (*mturk.GetAssignmentOutput, error) {
	c.inc("GetAssignment")
	return c.svc.GetAssignment(input)
}

// GetAssignmentWithContext is a passthrough to the underlying GetAssignmentWithContext method.
// It will increment the count of requests made to GetAssignment.
func (c *MTurk) GetAssignmentWithContext(ctx aws.Context, input *mturk.GetAssignmentInput, opts ...request.Option) (*mturk.GetAssignmentOutput, error) {
	c.inc("GetAssignment")
	return c.svc.GetAssignmentWithContext(ctx, input, opts...)
}

// GetFileUploadURLRequest is a passthrough to the underlying GetFileUploadURLRequest.
// It will increment the count of requests made to GetFileUploadURL.
func (c *MTurk) GetFileUploadURLRequest(input *mturk.GetFileUploadURLInput) (req *request.Request, output *mturk.GetFileUploadURLOutput) {
	c.inc("GetFileUploadURL")
	return c.svc.GetFileUploadURLRequest(input)
}

// GetFileUploadURL is a passthrough to the underlying GetFileUploadURL method.
// It will increment the count of requests made to GetFileUploadURL.
func (c *MTurk) GetFileUploadURL(input *mturk.GetFileUploadURLInput) (*mturk.GetFileUploadURLOutput, error) {
	c.inc("GetFileUploadURL")
	return c.svc.GetFileUploadURL(input)
}

// GetFileUploadURLWithContext is a passthrough to the underlying GetFileUploadURLWithContext method.
// It will increment the count of requests made to GetFileUploadURL.
func (c *MTurk) GetFileUploadURLWithContext(ctx aws.Context, input *mturk.GetFileUploadURLInput, opts ...request.Option) (*mturk.GetFileUploadURLOutput, error) {
	c.inc("GetFileUploadURL")
	return c.svc.GetFileUploadURLWithContext(ctx, input, opts...)
}

// GetHITRequest is a passthrough to the underlying GetHITRequest.
// It will increment the count of requests made to GetHIT.
func (c *MTurk) GetHITRequest(input *mturk.GetHITInput) (req *request.Request, output *mturk.GetHITOutput) {
	c.inc("GetHIT")
	return c.svc.GetHITRequest(input)
}

// GetHIT is a passthrough to the underlying GetHIT method.
// It will increment the count of requests made to GetHIT.
func (c *MTurk) GetHIT(input *mturk.GetHITInput) (*mturk.GetHITOutput, error) {
	c.inc("GetHIT")
	return c.svc.GetHIT(input)
}

// GetHITWithContext is a passthrough to the underlying GetHITWithContext method.
// It will increment the count of requests made to GetHIT.
func (c *MTurk) GetHITWithContext(ctx aws.Context, input *mturk.GetHITInput, opts ...request.Option) (*mturk.GetHITOutput, error) {
	c.inc("GetHIT")
	return c.svc.GetHITWithContext(ctx, input, opts...)
}

// GetQualificationScoreRequest is a passthrough to the underlying GetQualificationScoreRequest.
// It will increment the count of requests made to GetQualificationScore.
func (c *MTurk) GetQualificationScoreRequest(input *mturk.GetQualificationScoreInput) (req *request.Request, output *mturk.GetQualificationScoreOutput) {
	c.inc("GetQualificationScore")
	return c.svc.GetQualificationScoreRequest(input)
}

// GetQualificationScore is a passthrough to the underlying GetQualificationScore method.
// It will increment the count of requests made to GetQualificationScore.
func (c *MTurk) GetQualificationScore(input *mturk.GetQualificationScoreInput) (*mturk.GetQualificationScoreOutput, error) {
	c.inc("GetQualificationScore")
	return c.svc.GetQualificationScore(input)
}

// GetQualificationScoreWithContext is a passthrough to the underlying GetQualificationScoreWithContext method.
// It will increment the count of requests made to GetQualificationScore.
func (c *MTurk) GetQualificationScoreWithContext(ctx aws.Context, input *mturk.GetQualificationScoreInput, opts ...request.Option) (*mturk.GetQualificationScoreOutput, error) {
	c.inc("GetQualificationScore")
	return c.svc.GetQualificationScoreWithContext(ctx, input, opts...)
}

// GetQualificationTypeRequest is a passthrough to the underlying GetQualificationTypeRequest.
// It will increment the count of requests made to GetQualificationType.
func (c *MTurk) GetQualificationTypeRequest(input *mturk.GetQualificationTypeInput) (req *request.Request, output *mturk.GetQualificationTypeOutput) {
	c.inc("GetQualificationType")
	return c.svc.GetQualificationTypeRequest(input)
}

// GetQualificationType is a passthrough to the underlying GetQualificationType method.
// It will increment the count of requests made to GetQualificationType.
func (c *MTurk) GetQualificationType(input *mturk.GetQualificationTypeInput) (*mturk.GetQualificationTypeOutput, error) {
	c.inc("GetQualificationType")
	return c.svc.GetQualificationType(input)
}

// GetQualificationTypeWithContext is a passthrough to the underlying GetQualificationTypeWithContext method.
// It will increment the count of requests made to GetQualificationType.
func (c *MTurk) GetQualificationTypeWithContext(ctx aws.Context, input *mturk.GetQualificationTypeInput, opts ...request.Option) (*mturk.GetQualificationTypeOutput, error) {
	c.inc("GetQualificationType")
	return c.svc.GetQualificationTypeWithContext(ctx, input, opts...)
}

// ListAssignmentsForHITRequest is a passthrough to the underlying ListAssignmentsForHITRequest.
// It will increment the count of requests made to ListAssignmentsForHIT.
func (c *MTurk) ListAssignmentsForHITRequest(input *mturk.ListAssignmentsForHITInput) (req *request.Request, output *mturk.ListAssignmentsForHITOutput) {
	c.inc("ListAssignmentsForHIT")
	return c.svc.ListAssignmentsForHITRequest(input)
}

// ListAssignmentsForHIT is a passthrough to the underlying ListAssignmentsForHIT method.
// It will increment the count of requests made to ListAssignmentsForHIT.
func (c *MTurk) ListAssignmentsForHIT(input *mturk.ListAssignmentsForHITInput) (*mturk.ListAssignmentsForHITOutput, error) {
	c.inc("ListAssignmentsForHIT")
	return c.svc.ListAssignmentsForHIT(input)
}

// ListAssignmentsForHITWithContext is a passthrough to the underlying ListAssignmentsForHITWithContext method.
// It will increment the count of requests made to ListAssignmentsForHIT.
func (c *MTurk) ListAssignmentsForHITWithContext(ctx aws.Context, input *mturk.ListAssignmentsForHITInput, opts ...request.Option) (*mturk.ListAssignmentsForHITOutput, error) {
	c.inc("ListAssignmentsForHIT")
	return c.svc.ListAssignmentsForHITWithContext(ctx, input, opts...)
}

// ListAssignmentsForHITPages is a passthrough to the underlying ListAssignmentsForHITPages method.
// It will increment the count of requests made to ListAssignmentsForHIT on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAssignmentsForHITPagesWithContext to avoid this.
func (c *MTurk) ListAssignmentsForHITPages(input *mturk.ListAssignmentsForHITInput, fn func(*mturk.ListAssignmentsForHITOutput, bool) bool) error {
	wrappedFn := func(page *mturk.ListAssignmentsForHITOutput, lastPage bool) bool {
		c.inc("ListAssignmentsForHIT")
		return fn(page, lastPage)
	}
	return c.svc.ListAssignmentsForHITPages(input, wrappedFn)
}

// ListAssignmentsForHITPagesWithContext is a passthrough to the underlying ListAssignmentsForHITPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAssignmentsForHIT when applied to the request.
func (c *MTurk) ListAssignmentsForHITPagesWithContext(ctx aws.Context, input *mturk.ListAssignmentsForHITInput, fn func(*mturk.ListAssignmentsForHITOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAssignmentsForHIT"))
	return c.svc.ListAssignmentsForHITPagesWithContext(ctx, input, fn, opts...)
}

// ListBonusPaymentsRequest is a passthrough to the underlying ListBonusPaymentsRequest.
// It will increment the count of requests made to ListBonusPayments.
func (c *MTurk) ListBonusPaymentsRequest(input *mturk.ListBonusPaymentsInput) (req *request.Request, output *mturk.ListBonusPaymentsOutput) {
	c.inc("ListBonusPayments")
	return c.svc.ListBonusPaymentsRequest(input)
}

// ListBonusPayments is a passthrough to the underlying ListBonusPayments method.
// It will increment the count of requests made to ListBonusPayments.
func (c *MTurk) ListBonusPayments(input *mturk.ListBonusPaymentsInput) (*mturk.ListBonusPaymentsOutput, error) {
	c.inc("ListBonusPayments")
	return c.svc.ListBonusPayments(input)
}

// ListBonusPaymentsWithContext is a passthrough to the underlying ListBonusPaymentsWithContext method.
// It will increment the count of requests made to ListBonusPayments.
func (c *MTurk) ListBonusPaymentsWithContext(ctx aws.Context, input *mturk.ListBonusPaymentsInput, opts ...request.Option) (*mturk.ListBonusPaymentsOutput, error) {
	c.inc("ListBonusPayments")
	return c.svc.ListBonusPaymentsWithContext(ctx, input, opts...)
}

// ListBonusPaymentsPages is a passthrough to the underlying ListBonusPaymentsPages method.
// It will increment the count of requests made to ListBonusPayments on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListBonusPaymentsPagesWithContext to avoid this.
func (c *MTurk) ListBonusPaymentsPages(input *mturk.ListBonusPaymentsInput, fn func(*mturk.ListBonusPaymentsOutput, bool) bool) error {
	wrappedFn := func(page *mturk.ListBonusPaymentsOutput, lastPage bool) bool {
		c.inc("ListBonusPayments")
		return fn(page, lastPage)
	}
	return c.svc.ListBonusPaymentsPages(input, wrappedFn)
}

// ListBonusPaymentsPagesWithContext is a passthrough to the underlying ListBonusPaymentsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListBonusPayments when applied to the request.
func (c *MTurk) ListBonusPaymentsPagesWithContext(ctx aws.Context, input *mturk.ListBonusPaymentsInput, fn func(*mturk.ListBonusPaymentsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListBonusPayments"))
	return c.svc.ListBonusPaymentsPagesWithContext(ctx, input, fn, opts...)
}

// ListHITsRequest is a passthrough to the underlying ListHITsRequest.
// It will increment the count of requests made to ListHITs.
func (c *MTurk) ListHITsRequest(input *mturk.ListHITsInput) (req *request.Request, output *mturk.ListHITsOutput) {
	c.inc("ListHITs")
	return c.svc.ListHITsRequest(input)
}

// ListHITs is a passthrough to the underlying ListHITs method.
// It will increment the count of requests made to ListHITs.
func (c *MTurk) ListHITs(input *mturk.ListHITsInput) (*mturk.ListHITsOutput, error) {
	c.inc("ListHITs")
	return c.svc.ListHITs(input)
}

// ListHITsWithContext is a passthrough to the underlying ListHITsWithContext method.
// It will increment the count of requests made to ListHITs.
func (c *MTurk) ListHITsWithContext(ctx aws.Context, input *mturk.ListHITsInput, opts ...request.Option) (*mturk.ListHITsOutput, error) {
	c.inc("ListHITs")
	return c.svc.ListHITsWithContext(ctx, input, opts...)
}

// ListHITsPages is a passthrough to the underlying ListHITsPages method.
// It will increment the count of requests made to ListHITs on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListHITsPagesWithContext to avoid this.
func (c *MTurk) ListHITsPages(input *mturk.ListHITsInput, fn func(*mturk.ListHITsOutput, bool) bool) error {
	wrappedFn := func(page *mturk.ListHITsOutput, lastPage bool) bool {
		c.inc("ListHITs")
		return fn(page, lastPage)
	}
	return c.svc.ListHITsPages(input, wrappedFn)
}

// ListHITsPagesWithContext is a passthrough to the underlying ListHITsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListHITs when applied to the request.
func (c *MTurk) ListHITsPagesWithContext(ctx aws.Context, input *mturk.ListHITsInput, fn func(*mturk.ListHITsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListHITs"))
	return c.svc.ListHITsPagesWithContext(ctx, input, fn, opts...)
}

// ListHITsForQualificationTypeRequest is a passthrough to the underlying ListHITsForQualificationTypeRequest.
// It will increment the count of requests made to ListHITsForQualificationType.
func (c *MTurk) ListHITsForQualificationTypeRequest(input *mturk.ListHITsForQualificationTypeInput) (req *request.Request, output *mturk.ListHITsForQualificationTypeOutput) {
	c.inc("ListHITsForQualificationType")
	return c.svc.ListHITsForQualificationTypeRequest(input)
}

// ListHITsForQualificationType is a passthrough to the underlying ListHITsForQualificationType method.
// It will increment the count of requests made to ListHITsForQualificationType.
func (c *MTurk) ListHITsForQualificationType(input *mturk.ListHITsForQualificationTypeInput) (*mturk.ListHITsForQualificationTypeOutput, error) {
	c.inc("ListHITsForQualificationType")
	return c.svc.ListHITsForQualificationType(input)
}

// ListHITsForQualificationTypeWithContext is a passthrough to the underlying ListHITsForQualificationTypeWithContext method.
// It will increment the count of requests made to ListHITsForQualificationType.
func (c *MTurk) ListHITsForQualificationTypeWithContext(ctx aws.Context, input *mturk.ListHITsForQualificationTypeInput, opts ...request.Option) (*mturk.ListHITsForQualificationTypeOutput, error) {
	c.inc("ListHITsForQualificationType")
	return c.svc.ListHITsForQualificationTypeWithContext(ctx, input, opts...)
}

// ListHITsForQualificationTypePages is a passthrough to the underlying ListHITsForQualificationTypePages method.
// It will increment the count of requests made to ListHITsForQualificationType on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListHITsForQualificationTypePagesWithContext to avoid this.
func (c *MTurk) ListHITsForQualificationTypePages(input *mturk.ListHITsForQualificationTypeInput, fn func(*mturk.ListHITsForQualificationTypeOutput, bool) bool) error {
	wrappedFn := func(page *mturk.ListHITsForQualificationTypeOutput, lastPage bool) bool {
		c.inc("ListHITsForQualificationType")
		return fn(page, lastPage)
	}
	return c.svc.ListHITsForQualificationTypePages(input, wrappedFn)
}

// ListHITsForQualificationTypePagesWithContext is a passthrough to the underlying ListHITsForQualificationTypePagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListHITsForQualificationType when applied to the request.
func (c *MTurk) ListHITsForQualificationTypePagesWithContext(ctx aws.Context, input *mturk.ListHITsForQualificationTypeInput, fn func(*mturk.ListHITsForQualificationTypeOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListHITsForQualificationType"))
	return c.svc.ListHITsForQualificationTypePagesWithContext(ctx, input, fn, opts...)
}

// ListQualificationRequestsRequest is a passthrough to the underlying ListQualificationRequestsRequest.
// It will increment the count of requests made to ListQualificationRequests.
func (c *MTurk) ListQualificationRequestsRequest(input *mturk.ListQualificationRequestsInput) (req *request.Request, output *mturk.ListQualificationRequestsOutput) {
	c.inc("ListQualificationRequests")
	return c.svc.ListQualificationRequestsRequest(input)
}

// ListQualificationRequests is a passthrough to the underlying ListQualificationRequests method.
// It will increment the count of requests made to ListQualificationRequests.
func (c *MTurk) ListQualificationRequests(input *mturk.ListQualificationRequestsInput) (*mturk.ListQualificationRequestsOutput, error) {
	c.inc("ListQualificationRequests")
	return c.svc.ListQualificationRequests(input)
}

// ListQualificationRequestsWithContext is a passthrough to the underlying ListQualificationRequestsWithContext method.
// It will increment the count of requests made to ListQualificationRequests.
func (c *MTurk) ListQualificationRequestsWithContext(ctx aws.Context, input *mturk.ListQualificationRequestsInput, opts ...request.Option) (*mturk.ListQualificationRequestsOutput, error) {
	c.inc("ListQualificationRequests")
	return c.svc.ListQualificationRequestsWithContext(ctx, input, opts...)
}

// ListQualificationRequestsPages is a passthrough to the underlying ListQualificationRequestsPages method.
// It will increment the count of requests made to ListQualificationRequests on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListQualificationRequestsPagesWithContext to avoid this.
func (c *MTurk) ListQualificationRequestsPages(input *mturk.ListQualificationRequestsInput, fn func(*mturk.ListQualificationRequestsOutput, bool) bool) error {
	wrappedFn := func(page *mturk.ListQualificationRequestsOutput, lastPage bool) bool {
		c.inc("ListQualificationRequests")
		return fn(page, lastPage)
	}
	return c.svc.ListQualificationRequestsPages(input, wrappedFn)
}

// ListQualificationRequestsPagesWithContext is a passthrough to the underlying ListQualificationRequestsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListQualificationRequests when applied to the request.
func (c *MTurk) ListQualificationRequestsPagesWithContext(ctx aws.Context, input *mturk.ListQualificationRequestsInput, fn func(*mturk.ListQualificationRequestsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListQualificationRequests"))
	return c.svc.ListQualificationRequestsPagesWithContext(ctx, input, fn, opts...)
}

// ListQualificationTypesRequest is a passthrough to the underlying ListQualificationTypesRequest.
// It will increment the count of requests made to ListQualificationTypes.
func (c *MTurk) ListQualificationTypesRequest(input *mturk.ListQualificationTypesInput) (req *request.Request, output *mturk.ListQualificationTypesOutput) {
	c.inc("ListQualificationTypes")
	return c.svc.ListQualificationTypesRequest(input)
}

// ListQualificationTypes is a passthrough to the underlying ListQualificationTypes method.
// It will increment the count of requests made to ListQualificationTypes.
func (c *MTurk) ListQualificationTypes(input *mturk.ListQualificationTypesInput) (*mturk.ListQualificationTypesOutput, error) {
	c.inc("ListQualificationTypes")
	return c.svc.ListQualificationTypes(input)
}

// ListQualificationTypesWithContext is a passthrough to the underlying ListQualificationTypesWithContext method.
// It will increment the count of requests made to ListQualificationTypes.
func (c *MTurk) ListQualificationTypesWithContext(ctx aws.Context, input *mturk.ListQualificationTypesInput, opts ...request.Option) (*mturk.ListQualificationTypesOutput, error) {
	c.inc("ListQualificationTypes")
	return c.svc.ListQualificationTypesWithContext(ctx, input, opts...)
}

// ListQualificationTypesPages is a passthrough to the underlying ListQualificationTypesPages method.
// It will increment the count of requests made to ListQualificationTypes on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListQualificationTypesPagesWithContext to avoid this.
func (c *MTurk) ListQualificationTypesPages(input *mturk.ListQualificationTypesInput, fn func(*mturk.ListQualificationTypesOutput, bool) bool) error {
	wrappedFn := func(page *mturk.ListQualificationTypesOutput, lastPage bool) bool {
		c.inc("ListQualificationTypes")
		return fn(page, lastPage)
	}
	return c.svc.ListQualificationTypesPages(input, wrappedFn)
}

// ListQualificationTypesPagesWithContext is a passthrough to the underlying ListQualificationTypesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListQualificationTypes when applied to the request.
func (c *MTurk) ListQualificationTypesPagesWithContext(ctx aws.Context, input *mturk.ListQualificationTypesInput, fn func(*mturk.ListQualificationTypesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListQualificationTypes"))
	return c.svc.ListQualificationTypesPagesWithContext(ctx, input, fn, opts...)
}

// ListReviewPolicyResultsForHITRequest is a passthrough to the underlying ListReviewPolicyResultsForHITRequest.
// It will increment the count of requests made to ListReviewPolicyResultsForHIT.
func (c *MTurk) ListReviewPolicyResultsForHITRequest(input *mturk.ListReviewPolicyResultsForHITInput) (req *request.Request, output *mturk.ListReviewPolicyResultsForHITOutput) {
	c.inc("ListReviewPolicyResultsForHIT")
	return c.svc.ListReviewPolicyResultsForHITRequest(input)
}

// ListReviewPolicyResultsForHIT is a passthrough to the underlying ListReviewPolicyResultsForHIT method.
// It will increment the count of requests made to ListReviewPolicyResultsForHIT.
func (c *MTurk) ListReviewPolicyResultsForHIT(input *mturk.ListReviewPolicyResultsForHITInput) (*mturk.ListReviewPolicyResultsForHITOutput, error) {
	c.inc("ListReviewPolicyResultsForHIT")
	return c.svc.ListReviewPolicyResultsForHIT(input)
}

// ListReviewPolicyResultsForHITWithContext is a passthrough to the underlying ListReviewPolicyResultsForHITWithContext method.
// It will increment the count of requests made to ListReviewPolicyResultsForHIT.
func (c *MTurk) ListReviewPolicyResultsForHITWithContext(ctx aws.Context, input *mturk.ListReviewPolicyResultsForHITInput, opts ...request.Option) (*mturk.ListReviewPolicyResultsForHITOutput, error) {
	c.inc("ListReviewPolicyResultsForHIT")
	return c.svc.ListReviewPolicyResultsForHITWithContext(ctx, input, opts...)
}

// ListReviewPolicyResultsForHITPages is a passthrough to the underlying ListReviewPolicyResultsForHITPages method.
// It will increment the count of requests made to ListReviewPolicyResultsForHIT on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListReviewPolicyResultsForHITPagesWithContext to avoid this.
func (c *MTurk) ListReviewPolicyResultsForHITPages(input *mturk.ListReviewPolicyResultsForHITInput, fn func(*mturk.ListReviewPolicyResultsForHITOutput, bool) bool) error {
	wrappedFn := func(page *mturk.ListReviewPolicyResultsForHITOutput, lastPage bool) bool {
		c.inc("ListReviewPolicyResultsForHIT")
		return fn(page, lastPage)
	}
	return c.svc.ListReviewPolicyResultsForHITPages(input, wrappedFn)
}

// ListReviewPolicyResultsForHITPagesWithContext is a passthrough to the underlying ListReviewPolicyResultsForHITPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListReviewPolicyResultsForHIT when applied to the request.
func (c *MTurk) ListReviewPolicyResultsForHITPagesWithContext(ctx aws.Context, input *mturk.ListReviewPolicyResultsForHITInput, fn func(*mturk.ListReviewPolicyResultsForHITOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListReviewPolicyResultsForHIT"))
	return c.svc.ListReviewPolicyResultsForHITPagesWithContext(ctx, input, fn, opts...)
}

// ListReviewableHITsRequest is a passthrough to the underlying ListReviewableHITsRequest.
// It will increment the count of requests made to ListReviewableHITs.
func (c *MTurk) ListReviewableHITsRequest(input *mturk.ListReviewableHITsInput) (req *request.Request, output *mturk.ListReviewableHITsOutput) {
	c.inc("ListReviewableHITs")
	return c.svc.ListReviewableHITsRequest(input)
}

// ListReviewableHITs is a passthrough to the underlying ListReviewableHITs method.
// It will increment the count of requests made to ListReviewableHITs.
func (c *MTurk) ListReviewableHITs(input *mturk.ListReviewableHITsInput) (*mturk.ListReviewableHITsOutput, error) {
	c.inc("ListReviewableHITs")
	return c.svc.ListReviewableHITs(input)
}

// ListReviewableHITsWithContext is a passthrough to the underlying ListReviewableHITsWithContext method.
// It will increment the count of requests made to ListReviewableHITs.
func (c *MTurk) ListReviewableHITsWithContext(ctx aws.Context, input *mturk.ListReviewableHITsInput, opts ...request.Option) (*mturk.ListReviewableHITsOutput, error) {
	c.inc("ListReviewableHITs")
	return c.svc.ListReviewableHITsWithContext(ctx, input, opts...)
}

// ListReviewableHITsPages is a passthrough to the underlying ListReviewableHITsPages method.
// It will increment the count of requests made to ListReviewableHITs on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListReviewableHITsPagesWithContext to avoid this.
func (c *MTurk) ListReviewableHITsPages(input *mturk.ListReviewableHITsInput, fn func(*mturk.ListReviewableHITsOutput, bool) bool) error {
	wrappedFn := func(page *mturk.ListReviewableHITsOutput, lastPage bool) bool {
		c.inc("ListReviewableHITs")
		return fn(page, lastPage)
	}
	return c.svc.ListReviewableHITsPages(input, wrappedFn)
}

// ListReviewableHITsPagesWithContext is a passthrough to the underlying ListReviewableHITsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListReviewableHITs when applied to the request.
func (c *MTurk) ListReviewableHITsPagesWithContext(ctx aws.Context, input *mturk.ListReviewableHITsInput, fn func(*mturk.ListReviewableHITsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListReviewableHITs"))
	return c.svc.ListReviewableHITsPagesWithContext(ctx, input, fn, opts...)
}

// ListWorkerBlocksRequest is a passthrough to the underlying ListWorkerBlocksRequest.
// It will increment the count of requests made to ListWorkerBlocks.
func (c *MTurk) ListWorkerBlocksRequest(input *mturk.ListWorkerBlocksInput) (req *request.Request, output *mturk.ListWorkerBlocksOutput) {
	c.inc("ListWorkerBlocks")
	return c.svc.ListWorkerBlocksRequest(input)
}

// ListWorkerBlocks is a passthrough to the underlying ListWorkerBlocks method.
// It will increment the count of requests made to ListWorkerBlocks.
func (c *MTurk) ListWorkerBlocks(input *mturk.ListWorkerBlocksInput) (*mturk.ListWorkerBlocksOutput, error) {
	c.inc("ListWorkerBlocks")
	return c.svc.ListWorkerBlocks(input)
}

// ListWorkerBlocksWithContext is a passthrough to the underlying ListWorkerBlocksWithContext method.
// It will increment the count of requests made to ListWorkerBlocks.
func (c *MTurk) ListWorkerBlocksWithContext(ctx aws.Context, input *mturk.ListWorkerBlocksInput, opts ...request.Option) (*mturk.ListWorkerBlocksOutput, error) {
	c.inc("ListWorkerBlocks")
	return c.svc.ListWorkerBlocksWithContext(ctx, input, opts...)
}

// ListWorkerBlocksPages is a passthrough to the underlying ListWorkerBlocksPages method.
// It will increment the count of requests made to ListWorkerBlocks on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListWorkerBlocksPagesWithContext to avoid this.
func (c *MTurk) ListWorkerBlocksPages(input *mturk.ListWorkerBlocksInput, fn func(*mturk.ListWorkerBlocksOutput, bool) bool) error {
	wrappedFn := func(page *mturk.ListWorkerBlocksOutput, lastPage bool) bool {
		c.inc("ListWorkerBlocks")
		return fn(page, lastPage)
	}
	return c.svc.ListWorkerBlocksPages(input, wrappedFn)
}

// ListWorkerBlocksPagesWithContext is a passthrough to the underlying ListWorkerBlocksPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListWorkerBlocks when applied to the request.
func (c *MTurk) ListWorkerBlocksPagesWithContext(ctx aws.Context, input *mturk.ListWorkerBlocksInput, fn func(*mturk.ListWorkerBlocksOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListWorkerBlocks"))
	return c.svc.ListWorkerBlocksPagesWithContext(ctx, input, fn, opts...)
}

// ListWorkersWithQualificationTypeRequest is a passthrough to the underlying ListWorkersWithQualificationTypeRequest.
// It will increment the count of requests made to ListWorkersWithQualificationType.
func (c *MTurk) ListWorkersWithQualificationTypeRequest(input *mturk.ListWorkersWithQualificationTypeInput) (req *request.Request, output *mturk.ListWorkersWithQualificationTypeOutput) {
	c.inc("ListWorkersWithQualificationType")
	return c.svc.ListWorkersWithQualificationTypeRequest(input)
}

// ListWorkersWithQualificationType is a passthrough to the underlying ListWorkersWithQualificationType method.
// It will increment the count of requests made to ListWorkersWithQualificationType.
func (c *MTurk) ListWorkersWithQualificationType(input *mturk.ListWorkersWithQualificationTypeInput) (*mturk.ListWorkersWithQualificationTypeOutput, error) {
	c.inc("ListWorkersWithQualificationType")
	return c.svc.ListWorkersWithQualificationType(input)
}

// ListWorkersWithQualificationTypeWithContext is a passthrough to the underlying ListWorkersWithQualificationTypeWithContext method.
// It will increment the count of requests made to ListWorkersWithQualificationType.
func (c *MTurk) ListWorkersWithQualificationTypeWithContext(ctx aws.Context, input *mturk.ListWorkersWithQualificationTypeInput, opts ...request.Option) (*mturk.ListWorkersWithQualificationTypeOutput, error) {
	c.inc("ListWorkersWithQualificationType")
	return c.svc.ListWorkersWithQualificationTypeWithContext(ctx, input, opts...)
}

// ListWorkersWithQualificationTypePages is a passthrough to the underlying ListWorkersWithQualificationTypePages method.
// It will increment the count of requests made to ListWorkersWithQualificationType on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListWorkersWithQualificationTypePagesWithContext to avoid this.
func (c *MTurk) ListWorkersWithQualificationTypePages(input *mturk.ListWorkersWithQualificationTypeInput, fn func(*mturk.ListWorkersWithQualificationTypeOutput, bool) bool) error {
	wrappedFn := func(page *mturk.ListWorkersWithQualificationTypeOutput, lastPage bool) bool {
		c.inc("ListWorkersWithQualificationType")
		return fn(page, lastPage)
	}
	return c.svc.ListWorkersWithQualificationTypePages(input, wrappedFn)
}

// ListWorkersWithQualificationTypePagesWithContext is a passthrough to the underlying ListWorkersWithQualificationTypePagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListWorkersWithQualificationType when applied to the request.
func (c *MTurk) ListWorkersWithQualificationTypePagesWithContext(ctx aws.Context, input *mturk.ListWorkersWithQualificationTypeInput, fn func(*mturk.ListWorkersWithQualificationTypeOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListWorkersWithQualificationType"))
	return c.svc.ListWorkersWithQualificationTypePagesWithContext(ctx, input, fn, opts...)
}

// NotifyWorkersRequest is a passthrough to the underlying NotifyWorkersRequest.
// It will increment the count of requests made to NotifyWorkers.
func (c *MTurk) NotifyWorkersRequest(input *mturk.NotifyWorkersInput) (req *request.Request, output *mturk.NotifyWorkersOutput) {
	c.inc("NotifyWorkers")
	return c.svc.NotifyWorkersRequest(input)
}

// NotifyWorkers is a passthrough to the underlying NotifyWorkers method.
// It will increment the count of requests made to NotifyWorkers.
func (c *MTurk) NotifyWorkers(input *mturk.NotifyWorkersInput) (*mturk.NotifyWorkersOutput, error) {
	c.inc("NotifyWorkers")
	return c.svc.NotifyWorkers(input)
}

// NotifyWorkersWithContext is a passthrough to the underlying NotifyWorkersWithContext method.
// It will increment the count of requests made to NotifyWorkers.
func (c *MTurk) NotifyWorkersWithContext(ctx aws.Context, input *mturk.NotifyWorkersInput, opts ...request.Option) (*mturk.NotifyWorkersOutput, error) {
	c.inc("NotifyWorkers")
	return c.svc.NotifyWorkersWithContext(ctx, input, opts...)
}

// RejectAssignmentRequest is a passthrough to the underlying RejectAssignmentRequest.
// It will increment the count of requests made to RejectAssignment.
func (c *MTurk) RejectAssignmentRequest(input *mturk.RejectAssignmentInput) (req *request.Request, output *mturk.RejectAssignmentOutput) {
	c.inc("RejectAssignment")
	return c.svc.RejectAssignmentRequest(input)
}

// RejectAssignment is a passthrough to the underlying RejectAssignment method.
// It will increment the count of requests made to RejectAssignment.
func (c *MTurk) RejectAssignment(input *mturk.RejectAssignmentInput) (*mturk.RejectAssignmentOutput, error) {
	c.inc("RejectAssignment")
	return c.svc.RejectAssignment(input)
}

// RejectAssignmentWithContext is a passthrough to the underlying RejectAssignmentWithContext method.
// It will increment the count of requests made to RejectAssignment.
func (c *MTurk) RejectAssignmentWithContext(ctx aws.Context, input *mturk.RejectAssignmentInput, opts ...request.Option) (*mturk.RejectAssignmentOutput, error) {
	c.inc("RejectAssignment")
	return c.svc.RejectAssignmentWithContext(ctx, input, opts...)
}

// RejectQualificationRequestRequest is a passthrough to the underlying RejectQualificationRequestRequest.
// It will increment the count of requests made to RejectQualificationRequest.
func (c *MTurk) RejectQualificationRequestRequest(input *mturk.RejectQualificationRequestInput) (req *request.Request, output *mturk.RejectQualificationRequestOutput) {
	c.inc("RejectQualificationRequest")
	return c.svc.RejectQualificationRequestRequest(input)
}

// RejectQualificationRequest is a passthrough to the underlying RejectQualificationRequest method.
// It will increment the count of requests made to RejectQualificationRequest.
func (c *MTurk) RejectQualificationRequest(input *mturk.RejectQualificationRequestInput) (*mturk.RejectQualificationRequestOutput, error) {
	c.inc("RejectQualificationRequest")
	return c.svc.RejectQualificationRequest(input)
}

// RejectQualificationRequestWithContext is a passthrough to the underlying RejectQualificationRequestWithContext method.
// It will increment the count of requests made to RejectQualificationRequest.
func (c *MTurk) RejectQualificationRequestWithContext(ctx aws.Context, input *mturk.RejectQualificationRequestInput, opts ...request.Option) (*mturk.RejectQualificationRequestOutput, error) {
	c.inc("RejectQualificationRequest")
	return c.svc.RejectQualificationRequestWithContext(ctx, input, opts...)
}

// SendBonusRequest is a passthrough to the underlying SendBonusRequest.
// It will increment the count of requests made to SendBonus.
func (c *MTurk) SendBonusRequest(input *mturk.SendBonusInput) (req *request.Request, output *mturk.SendBonusOutput) {
	c.inc("SendBonus")
	return c.svc.SendBonusRequest(input)
}

// SendBonus is a passthrough to the underlying SendBonus method.
// It will increment the count of requests made to SendBonus.
func (c *MTurk) SendBonus(input *mturk.SendBonusInput) (*mturk.SendBonusOutput, error) {
	c.inc("SendBonus")
	return c.svc.SendBonus(input)
}

// SendBonusWithContext is a passthrough to the underlying SendBonusWithContext method.
// It will increment the count of requests made to SendBonus.
func (c *MTurk) SendBonusWithContext(ctx aws.Context, input *mturk.SendBonusInput, opts ...request.Option) (*mturk.SendBonusOutput, error) {
	c.inc("SendBonus")
	return c.svc.SendBonusWithContext(ctx, input, opts...)
}

// SendTestEventNotificationRequest is a passthrough to the underlying SendTestEventNotificationRequest.
// It will increment the count of requests made to SendTestEventNotification.
func (c *MTurk) SendTestEventNotificationRequest(input *mturk.SendTestEventNotificationInput) (req *request.Request, output *mturk.SendTestEventNotificationOutput) {
	c.inc("SendTestEventNotification")
	return c.svc.SendTestEventNotificationRequest(input)
}

// SendTestEventNotification is a passthrough to the underlying SendTestEventNotification method.
// It will increment the count of requests made to SendTestEventNotification.
func (c *MTurk) SendTestEventNotification(input *mturk.SendTestEventNotificationInput) (*mturk.SendTestEventNotificationOutput, error) {
	c.inc("SendTestEventNotification")
	return c.svc.SendTestEventNotification(input)
}

// SendTestEventNotificationWithContext is a passthrough to the underlying SendTestEventNotificationWithContext method.
// It will increment the count of requests made to SendTestEventNotification.
func (c *MTurk) SendTestEventNotificationWithContext(ctx aws.Context, input *mturk.SendTestEventNotificationInput, opts ...request.Option) (*mturk.SendTestEventNotificationOutput, error) {
	c.inc("SendTestEventNotification")
	return c.svc.SendTestEventNotificationWithContext(ctx, input, opts...)
}

// UpdateExpirationForHITRequest is a passthrough to the underlying UpdateExpirationForHITRequest.
// It will increment the count of requests made to UpdateExpirationForHIT.
func (c *MTurk) UpdateExpirationForHITRequest(input *mturk.UpdateExpirationForHITInput) (req *request.Request, output *mturk.UpdateExpirationForHITOutput) {
	c.inc("UpdateExpirationForHIT")
	return c.svc.UpdateExpirationForHITRequest(input)
}

// UpdateExpirationForHIT is a passthrough to the underlying UpdateExpirationForHIT method.
// It will increment the count of requests made to UpdateExpirationForHIT.
func (c *MTurk) UpdateExpirationForHIT(input *mturk.UpdateExpirationForHITInput) (*mturk.UpdateExpirationForHITOutput, error) {
	c.inc("UpdateExpirationForHIT")
	return c.svc.UpdateExpirationForHIT(input)
}

// UpdateExpirationForHITWithContext is a passthrough to the underlying UpdateExpirationForHITWithContext method.
// It will increment the count of requests made to UpdateExpirationForHIT.
func (c *MTurk) UpdateExpirationForHITWithContext(ctx aws.Context, input *mturk.UpdateExpirationForHITInput, opts ...request.Option) (*mturk.UpdateExpirationForHITOutput, error) {
	c.inc("UpdateExpirationForHIT")
	return c.svc.UpdateExpirationForHITWithContext(ctx, input, opts...)
}

// UpdateHITReviewStatusRequest is a passthrough to the underlying UpdateHITReviewStatusRequest.
// It will increment the count of requests made to UpdateHITReviewStatus.
func (c *MTurk) UpdateHITReviewStatusRequest(input *mturk.UpdateHITReviewStatusInput) (req *request.Request, output *mturk.UpdateHITReviewStatusOutput) {
	c.inc("UpdateHITReviewStatus")
	return c.svc.UpdateHITReviewStatusRequest(input)
}

// UpdateHITReviewStatus is a passthrough to the underlying UpdateHITReviewStatus method.
// It will increment the count of requests made to UpdateHITReviewStatus.
func (c *MTurk) UpdateHITReviewStatus(input *mturk.UpdateHITReviewStatusInput) (*mturk.UpdateHITReviewStatusOutput, error) {
	c.inc("UpdateHITReviewStatus")
	return c.svc.UpdateHITReviewStatus(input)
}

// UpdateHITReviewStatusWithContext is a passthrough to the underlying UpdateHITReviewStatusWithContext method.
// It will increment the count of requests made to UpdateHITReviewStatus.
func (c *MTurk) UpdateHITReviewStatusWithContext(ctx aws.Context, input *mturk.UpdateHITReviewStatusInput, opts ...request.Option) (*mturk.UpdateHITReviewStatusOutput, error) {
	c.inc("UpdateHITReviewStatus")
	return c.svc.UpdateHITReviewStatusWithContext(ctx, input, opts...)
}

// UpdateHITTypeOfHITRequest is a passthrough to the underlying UpdateHITTypeOfHITRequest.
// It will increment the count of requests made to UpdateHITTypeOfHIT.
func (c *MTurk) UpdateHITTypeOfHITRequest(input *mturk.UpdateHITTypeOfHITInput) (req *request.Request, output *mturk.UpdateHITTypeOfHITOutput) {
	c.inc("UpdateHITTypeOfHIT")
	return c.svc.UpdateHITTypeOfHITRequest(input)
}

// UpdateHITTypeOfHIT is a passthrough to the underlying UpdateHITTypeOfHIT method.
// It will increment the count of requests made to UpdateHITTypeOfHIT.
func (c *MTurk) UpdateHITTypeOfHIT(input *mturk.UpdateHITTypeOfHITInput) (*mturk.UpdateHITTypeOfHITOutput, error) {
	c.inc("UpdateHITTypeOfHIT")
	return c.svc.UpdateHITTypeOfHIT(input)
}

// UpdateHITTypeOfHITWithContext is a passthrough to the underlying UpdateHITTypeOfHITWithContext method.
// It will increment the count of requests made to UpdateHITTypeOfHIT.
func (c *MTurk) UpdateHITTypeOfHITWithContext(ctx aws.Context, input *mturk.UpdateHITTypeOfHITInput, opts ...request.Option) (*mturk.UpdateHITTypeOfHITOutput, error) {
	c.inc("UpdateHITTypeOfHIT")
	return c.svc.UpdateHITTypeOfHITWithContext(ctx, input, opts...)
}

// UpdateNotificationSettingsRequest is a passthrough to the underlying UpdateNotificationSettingsRequest.
// It will increment the count of requests made to UpdateNotificationSettings.
func (c *MTurk) UpdateNotificationSettingsRequest(input *mturk.UpdateNotificationSettingsInput) (req *request.Request, output *mturk.UpdateNotificationSettingsOutput) {
	c.inc("UpdateNotificationSettings")
	return c.svc.UpdateNotificationSettingsRequest(input)
}

// UpdateNotificationSettings is a passthrough to the underlying UpdateNotificationSettings method.
// It will increment the count of requests made to UpdateNotificationSettings.
func (c *MTurk) UpdateNotificationSettings(input *mturk.UpdateNotificationSettingsInput) (*mturk.UpdateNotificationSettingsOutput, error) {
	c.inc("UpdateNotificationSettings")
	return c.svc.UpdateNotificationSettings(input)
}

// UpdateNotificationSettingsWithContext is a passthrough to the underlying UpdateNotificationSettingsWithContext method.
// It will increment the count of requests made to UpdateNotificationSettings.
func (c *MTurk) UpdateNotificationSettingsWithContext(ctx aws.Context, input *mturk.UpdateNotificationSettingsInput, opts ...request.Option) (*mturk.UpdateNotificationSettingsOutput, error) {
	c.inc("UpdateNotificationSettings")
	return c.svc.UpdateNotificationSettingsWithContext(ctx, input, opts...)
}

// UpdateQualificationTypeRequest is a passthrough to the underlying UpdateQualificationTypeRequest.
// It will increment the count of requests made to UpdateQualificationType.
func (c *MTurk) UpdateQualificationTypeRequest(input *mturk.UpdateQualificationTypeInput) (req *request.Request, output *mturk.UpdateQualificationTypeOutput) {
	c.inc("UpdateQualificationType")
	return c.svc.UpdateQualificationTypeRequest(input)
}

// UpdateQualificationType is a passthrough to the underlying UpdateQualificationType method.
// It will increment the count of requests made to UpdateQualificationType.
func (c *MTurk) UpdateQualificationType(input *mturk.UpdateQualificationTypeInput) (*mturk.UpdateQualificationTypeOutput, error) {
	c.inc("UpdateQualificationType")
	return c.svc.UpdateQualificationType(input)
}

// UpdateQualificationTypeWithContext is a passthrough to the underlying UpdateQualificationTypeWithContext method.
// It will increment the count of requests made to UpdateQualificationType.
func (c *MTurk) UpdateQualificationTypeWithContext(ctx aws.Context, input *mturk.UpdateQualificationTypeInput, opts ...request.Option) (*mturk.UpdateQualificationTypeOutput, error) {
	c.inc("UpdateQualificationType")
	return c.svc.UpdateQualificationTypeWithContext(ctx, input, opts...)
}
