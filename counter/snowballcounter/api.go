// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package snowballcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/snowball"
)

// CancelClusterRequest is a passthrough to the underlying CancelClusterRequest.
// It will increment the count of requests made to CancelCluster.
func (c *Snowball) CancelClusterRequest(input *snowball.CancelClusterInput) (req *request.Request, output *snowball.CancelClusterOutput) {
	c.inc("CancelCluster")
	return c.svc.CancelClusterRequest(input)
}

// CancelCluster is a passthrough to the underlying CancelCluster method.
// It will increment the count of requests made to CancelCluster.
func (c *Snowball) CancelCluster(input *snowball.CancelClusterInput) (*snowball.CancelClusterOutput, error) {
	c.inc("CancelCluster")
	return c.svc.CancelCluster(input)
}

// CancelClusterWithContext is a passthrough to the underlying CancelClusterWithContext method.
// It will increment the count of requests made to CancelCluster.
func (c *Snowball) CancelClusterWithContext(ctx aws.Context, input *snowball.CancelClusterInput, opts ...request.Option) (*snowball.CancelClusterOutput, error) {
	c.inc("CancelCluster")
	return c.svc.CancelClusterWithContext(ctx, input, opts...)
}

// CancelJobRequest is a passthrough to the underlying CancelJobRequest.
// It will increment the count of requests made to CancelJob.
func (c *Snowball) CancelJobRequest(input *snowball.CancelJobInput) (req *request.Request, output *snowball.CancelJobOutput) {
	c.inc("CancelJob")
	return c.svc.CancelJobRequest(input)
}

// CancelJob is a passthrough to the underlying CancelJob method.
// It will increment the count of requests made to CancelJob.
func (c *Snowball) CancelJob(input *snowball.CancelJobInput) (*snowball.CancelJobOutput, error) {
	c.inc("CancelJob")
	return c.svc.CancelJob(input)
}

// CancelJobWithContext is a passthrough to the underlying CancelJobWithContext method.
// It will increment the count of requests made to CancelJob.
func (c *Snowball) CancelJobWithContext(ctx aws.Context, input *snowball.CancelJobInput, opts ...request.Option) (*snowball.CancelJobOutput, error) {
	c.inc("CancelJob")
	return c.svc.CancelJobWithContext(ctx, input, opts...)
}

// CreateAddressRequest is a passthrough to the underlying CreateAddressRequest.
// It will increment the count of requests made to CreateAddress.
func (c *Snowball) CreateAddressRequest(input *snowball.CreateAddressInput) (req *request.Request, output *snowball.CreateAddressOutput) {
	c.inc("CreateAddress")
	return c.svc.CreateAddressRequest(input)
}

// CreateAddress is a passthrough to the underlying CreateAddress method.
// It will increment the count of requests made to CreateAddress.
func (c *Snowball) CreateAddress(input *snowball.CreateAddressInput) (*snowball.CreateAddressOutput, error) {
	c.inc("CreateAddress")
	return c.svc.CreateAddress(input)
}

// CreateAddressWithContext is a passthrough to the underlying CreateAddressWithContext method.
// It will increment the count of requests made to CreateAddress.
func (c *Snowball) CreateAddressWithContext(ctx aws.Context, input *snowball.CreateAddressInput, opts ...request.Option) (*snowball.CreateAddressOutput, error) {
	c.inc("CreateAddress")
	return c.svc.CreateAddressWithContext(ctx, input, opts...)
}

// CreateClusterRequest is a passthrough to the underlying CreateClusterRequest.
// It will increment the count of requests made to CreateCluster.
func (c *Snowball) CreateClusterRequest(input *snowball.CreateClusterInput) (req *request.Request, output *snowball.CreateClusterOutput) {
	c.inc("CreateCluster")
	return c.svc.CreateClusterRequest(input)
}

// CreateCluster is a passthrough to the underlying CreateCluster method.
// It will increment the count of requests made to CreateCluster.
func (c *Snowball) CreateCluster(input *snowball.CreateClusterInput) (*snowball.CreateClusterOutput, error) {
	c.inc("CreateCluster")
	return c.svc.CreateCluster(input)
}

// CreateClusterWithContext is a passthrough to the underlying CreateClusterWithContext method.
// It will increment the count of requests made to CreateCluster.
func (c *Snowball) CreateClusterWithContext(ctx aws.Context, input *snowball.CreateClusterInput, opts ...request.Option) (*snowball.CreateClusterOutput, error) {
	c.inc("CreateCluster")
	return c.svc.CreateClusterWithContext(ctx, input, opts...)
}

// CreateJobRequest is a passthrough to the underlying CreateJobRequest.
// It will increment the count of requests made to CreateJob.
func (c *Snowball) CreateJobRequest(input *snowball.CreateJobInput) (req *request.Request, output *snowball.CreateJobOutput) {
	c.inc("CreateJob")
	return c.svc.CreateJobRequest(input)
}

// CreateJob is a passthrough to the underlying CreateJob method.
// It will increment the count of requests made to CreateJob.
func (c *Snowball) CreateJob(input *snowball.CreateJobInput) (*snowball.CreateJobOutput, error) {
	c.inc("CreateJob")
	return c.svc.CreateJob(input)
}

// CreateJobWithContext is a passthrough to the underlying CreateJobWithContext method.
// It will increment the count of requests made to CreateJob.
func (c *Snowball) CreateJobWithContext(ctx aws.Context, input *snowball.CreateJobInput, opts ...request.Option) (*snowball.CreateJobOutput, error) {
	c.inc("CreateJob")
	return c.svc.CreateJobWithContext(ctx, input, opts...)
}

// DescribeAddressRequest is a passthrough to the underlying DescribeAddressRequest.
// It will increment the count of requests made to DescribeAddress.
func (c *Snowball) DescribeAddressRequest(input *snowball.DescribeAddressInput) (req *request.Request, output *snowball.DescribeAddressOutput) {
	c.inc("DescribeAddress")
	return c.svc.DescribeAddressRequest(input)
}

// DescribeAddress is a passthrough to the underlying DescribeAddress method.
// It will increment the count of requests made to DescribeAddress.
func (c *Snowball) DescribeAddress(input *snowball.DescribeAddressInput) (*snowball.DescribeAddressOutput, error) {
	c.inc("DescribeAddress")
	return c.svc.DescribeAddress(input)
}

// DescribeAddressWithContext is a passthrough to the underlying DescribeAddressWithContext method.
// It will increment the count of requests made to DescribeAddress.
func (c *Snowball) DescribeAddressWithContext(ctx aws.Context, input *snowball.DescribeAddressInput, opts ...request.Option) (*snowball.DescribeAddressOutput, error) {
	c.inc("DescribeAddress")
	return c.svc.DescribeAddressWithContext(ctx, input, opts...)
}

// DescribeAddressesRequest is a passthrough to the underlying DescribeAddressesRequest.
// It will increment the count of requests made to DescribeAddresses.
func (c *Snowball) DescribeAddressesRequest(input *snowball.DescribeAddressesInput) (req *request.Request, output *snowball.DescribeAddressesOutput) {
	c.inc("DescribeAddresses")
	return c.svc.DescribeAddressesRequest(input)
}

// DescribeAddresses is a passthrough to the underlying DescribeAddresses method.
// It will increment the count of requests made to DescribeAddresses.
func (c *Snowball) DescribeAddresses(input *snowball.DescribeAddressesInput) (*snowball.DescribeAddressesOutput, error) {
	c.inc("DescribeAddresses")
	return c.svc.DescribeAddresses(input)
}

// DescribeAddressesWithContext is a passthrough to the underlying DescribeAddressesWithContext method.
// It will increment the count of requests made to DescribeAddresses.
func (c *Snowball) DescribeAddressesWithContext(ctx aws.Context, input *snowball.DescribeAddressesInput, opts ...request.Option) (*snowball.DescribeAddressesOutput, error) {
	c.inc("DescribeAddresses")
	return c.svc.DescribeAddressesWithContext(ctx, input, opts...)
}

// DescribeAddressesPages is a passthrough to the underlying DescribeAddressesPages method.
// It will increment the count of requests made to DescribeAddresses on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeAddressesPagesWithContext to avoid this.
func (c *Snowball) DescribeAddressesPages(input *snowball.DescribeAddressesInput, fn func(*snowball.DescribeAddressesOutput, bool) bool) error {
	wrappedFn := func(page *snowball.DescribeAddressesOutput, lastPage bool) bool {
		c.inc("DescribeAddresses")
		return fn(page, lastPage)
	}
	return c.svc.DescribeAddressesPages(input, wrappedFn)
}

// DescribeAddressesPagesWithContext is a passthrough to the underlying DescribeAddressesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeAddresses when applied to the request.
func (c *Snowball) DescribeAddressesPagesWithContext(ctx aws.Context, input *snowball.DescribeAddressesInput, fn func(*snowball.DescribeAddressesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeAddresses"))
	return c.svc.DescribeAddressesPagesWithContext(ctx, input, fn, opts...)
}

// DescribeClusterRequest is a passthrough to the underlying DescribeClusterRequest.
// It will increment the count of requests made to DescribeCluster.
func (c *Snowball) DescribeClusterRequest(input *snowball.DescribeClusterInput) (req *request.Request, output *snowball.DescribeClusterOutput) {
	c.inc("DescribeCluster")
	return c.svc.DescribeClusterRequest(input)
}

// DescribeCluster is a passthrough to the underlying DescribeCluster method.
// It will increment the count of requests made to DescribeCluster.
func (c *Snowball) DescribeCluster(input *snowball.DescribeClusterInput) (*snowball.DescribeClusterOutput, error) {
	c.inc("DescribeCluster")
	return c.svc.DescribeCluster(input)
}

// DescribeClusterWithContext is a passthrough to the underlying DescribeClusterWithContext method.
// It will increment the count of requests made to DescribeCluster.
func (c *Snowball) DescribeClusterWithContext(ctx aws.Context, input *snowball.DescribeClusterInput, opts ...request.Option) (*snowball.DescribeClusterOutput, error) {
	c.inc("DescribeCluster")
	return c.svc.DescribeClusterWithContext(ctx, input, opts...)
}

// DescribeJobRequest is a passthrough to the underlying DescribeJobRequest.
// It will increment the count of requests made to DescribeJob.
func (c *Snowball) DescribeJobRequest(input *snowball.DescribeJobInput) (req *request.Request, output *snowball.DescribeJobOutput) {
	c.inc("DescribeJob")
	return c.svc.DescribeJobRequest(input)
}

// DescribeJob is a passthrough to the underlying DescribeJob method.
// It will increment the count of requests made to DescribeJob.
func (c *Snowball) DescribeJob(input *snowball.DescribeJobInput) (*snowball.DescribeJobOutput, error) {
	c.inc("DescribeJob")
	return c.svc.DescribeJob(input)
}

// DescribeJobWithContext is a passthrough to the underlying DescribeJobWithContext method.
// It will increment the count of requests made to DescribeJob.
func (c *Snowball) DescribeJobWithContext(ctx aws.Context, input *snowball.DescribeJobInput, opts ...request.Option) (*snowball.DescribeJobOutput, error) {
	c.inc("DescribeJob")
	return c.svc.DescribeJobWithContext(ctx, input, opts...)
}

// GetJobManifestRequest is a passthrough to the underlying GetJobManifestRequest.
// It will increment the count of requests made to GetJobManifest.
func (c *Snowball) GetJobManifestRequest(input *snowball.GetJobManifestInput) (req *request.Request, output *snowball.GetJobManifestOutput) {
	c.inc("GetJobManifest")
	return c.svc.GetJobManifestRequest(input)
}

// GetJobManifest is a passthrough to the underlying GetJobManifest method.
// It will increment the count of requests made to GetJobManifest.
func (c *Snowball) GetJobManifest(input *snowball.GetJobManifestInput) (*snowball.GetJobManifestOutput, error) {
	c.inc("GetJobManifest")
	return c.svc.GetJobManifest(input)
}

// GetJobManifestWithContext is a passthrough to the underlying GetJobManifestWithContext method.
// It will increment the count of requests made to GetJobManifest.
func (c *Snowball) GetJobManifestWithContext(ctx aws.Context, input *snowball.GetJobManifestInput, opts ...request.Option) (*snowball.GetJobManifestOutput, error) {
	c.inc("GetJobManifest")
	return c.svc.GetJobManifestWithContext(ctx, input, opts...)
}

// GetJobUnlockCodeRequest is a passthrough to the underlying GetJobUnlockCodeRequest.
// It will increment the count of requests made to GetJobUnlockCode.
func (c *Snowball) GetJobUnlockCodeRequest(input *snowball.GetJobUnlockCodeInput) (req *request.Request, output *snowball.GetJobUnlockCodeOutput) {
	c.inc("GetJobUnlockCode")
	return c.svc.GetJobUnlockCodeRequest(input)
}

// GetJobUnlockCode is a passthrough to the underlying GetJobUnlockCode method.
// It will increment the count of requests made to GetJobUnlockCode.
func (c *Snowball) GetJobUnlockCode(input *snowball.GetJobUnlockCodeInput) (*snowball.GetJobUnlockCodeOutput, error) {
	c.inc("GetJobUnlockCode")
	return c.svc.GetJobUnlockCode(input)
}

// GetJobUnlockCodeWithContext is a passthrough to the underlying GetJobUnlockCodeWithContext method.
// It will increment the count of requests made to GetJobUnlockCode.
func (c *Snowball) GetJobUnlockCodeWithContext(ctx aws.Context, input *snowball.GetJobUnlockCodeInput, opts ...request.Option) (*snowball.GetJobUnlockCodeOutput, error) {
	c.inc("GetJobUnlockCode")
	return c.svc.GetJobUnlockCodeWithContext(ctx, input, opts...)
}

// GetSnowballUsageRequest is a passthrough to the underlying GetSnowballUsageRequest.
// It will increment the count of requests made to GetSnowballUsage.
func (c *Snowball) GetSnowballUsageRequest(input *snowball.GetSnowballUsageInput) (req *request.Request, output *snowball.GetSnowballUsageOutput) {
	c.inc("GetSnowballUsage")
	return c.svc.GetSnowballUsageRequest(input)
}

// GetSnowballUsage is a passthrough to the underlying GetSnowballUsage method.
// It will increment the count of requests made to GetSnowballUsage.
func (c *Snowball) GetSnowballUsage(input *snowball.GetSnowballUsageInput) (*snowball.GetSnowballUsageOutput, error) {
	c.inc("GetSnowballUsage")
	return c.svc.GetSnowballUsage(input)
}

// GetSnowballUsageWithContext is a passthrough to the underlying GetSnowballUsageWithContext method.
// It will increment the count of requests made to GetSnowballUsage.
func (c *Snowball) GetSnowballUsageWithContext(ctx aws.Context, input *snowball.GetSnowballUsageInput, opts ...request.Option) (*snowball.GetSnowballUsageOutput, error) {
	c.inc("GetSnowballUsage")
	return c.svc.GetSnowballUsageWithContext(ctx, input, opts...)
}

// ListClusterJobsRequest is a passthrough to the underlying ListClusterJobsRequest.
// It will increment the count of requests made to ListClusterJobs.
func (c *Snowball) ListClusterJobsRequest(input *snowball.ListClusterJobsInput) (req *request.Request, output *snowball.ListClusterJobsOutput) {
	c.inc("ListClusterJobs")
	return c.svc.ListClusterJobsRequest(input)
}

// ListClusterJobs is a passthrough to the underlying ListClusterJobs method.
// It will increment the count of requests made to ListClusterJobs.
func (c *Snowball) ListClusterJobs(input *snowball.ListClusterJobsInput) (*snowball.ListClusterJobsOutput, error) {
	c.inc("ListClusterJobs")
	return c.svc.ListClusterJobs(input)
}

// ListClusterJobsWithContext is a passthrough to the underlying ListClusterJobsWithContext method.
// It will increment the count of requests made to ListClusterJobs.
func (c *Snowball) ListClusterJobsWithContext(ctx aws.Context, input *snowball.ListClusterJobsInput, opts ...request.Option) (*snowball.ListClusterJobsOutput, error) {
	c.inc("ListClusterJobs")
	return c.svc.ListClusterJobsWithContext(ctx, input, opts...)
}

// ListClustersRequest is a passthrough to the underlying ListClustersRequest.
// It will increment the count of requests made to ListClusters.
func (c *Snowball) ListClustersRequest(input *snowball.ListClustersInput) (req *request.Request, output *snowball.ListClustersOutput) {
	c.inc("ListClusters")
	return c.svc.ListClustersRequest(input)
}

// ListClusters is a passthrough to the underlying ListClusters method.
// It will increment the count of requests made to ListClusters.
func (c *Snowball) ListClusters(input *snowball.ListClustersInput) (*snowball.ListClustersOutput, error) {
	c.inc("ListClusters")
	return c.svc.ListClusters(input)
}

// ListClustersWithContext is a passthrough to the underlying ListClustersWithContext method.
// It will increment the count of requests made to ListClusters.
func (c *Snowball) ListClustersWithContext(ctx aws.Context, input *snowball.ListClustersInput, opts ...request.Option) (*snowball.ListClustersOutput, error) {
	c.inc("ListClusters")
	return c.svc.ListClustersWithContext(ctx, input, opts...)
}

// ListJobsRequest is a passthrough to the underlying ListJobsRequest.
// It will increment the count of requests made to ListJobs.
func (c *Snowball) ListJobsRequest(input *snowball.ListJobsInput) (req *request.Request, output *snowball.ListJobsOutput) {
	c.inc("ListJobs")
	return c.svc.ListJobsRequest(input)
}

// ListJobs is a passthrough to the underlying ListJobs method.
// It will increment the count of requests made to ListJobs.
func (c *Snowball) ListJobs(input *snowball.ListJobsInput) (*snowball.ListJobsOutput, error) {
	c.inc("ListJobs")
	return c.svc.ListJobs(input)
}

// ListJobsWithContext is a passthrough to the underlying ListJobsWithContext method.
// It will increment the count of requests made to ListJobs.
func (c *Snowball) ListJobsWithContext(ctx aws.Context, input *snowball.ListJobsInput, opts ...request.Option) (*snowball.ListJobsOutput, error) {
	c.inc("ListJobs")
	return c.svc.ListJobsWithContext(ctx, input, opts...)
}

// ListJobsPages is a passthrough to the underlying ListJobsPages method.
// It will increment the count of requests made to ListJobs on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListJobsPagesWithContext to avoid this.
func (c *Snowball) ListJobsPages(input *snowball.ListJobsInput, fn func(*snowball.ListJobsOutput, bool) bool) error {
	wrappedFn := func(page *snowball.ListJobsOutput, lastPage bool) bool {
		c.inc("ListJobs")
		return fn(page, lastPage)
	}
	return c.svc.ListJobsPages(input, wrappedFn)
}

// ListJobsPagesWithContext is a passthrough to the underlying ListJobsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListJobs when applied to the request.
func (c *Snowball) ListJobsPagesWithContext(ctx aws.Context, input *snowball.ListJobsInput, fn func(*snowball.ListJobsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListJobs"))
	return c.svc.ListJobsPagesWithContext(ctx, input, fn, opts...)
}

// UpdateClusterRequest is a passthrough to the underlying UpdateClusterRequest.
// It will increment the count of requests made to UpdateCluster.
func (c *Snowball) UpdateClusterRequest(input *snowball.UpdateClusterInput) (req *request.Request, output *snowball.UpdateClusterOutput) {
	c.inc("UpdateCluster")
	return c.svc.UpdateClusterRequest(input)
}

// UpdateCluster is a passthrough to the underlying UpdateCluster method.
// It will increment the count of requests made to UpdateCluster.
func (c *Snowball) UpdateCluster(input *snowball.UpdateClusterInput) (*snowball.UpdateClusterOutput, error) {
	c.inc("UpdateCluster")
	return c.svc.UpdateCluster(input)
}

// UpdateClusterWithContext is a passthrough to the underlying UpdateClusterWithContext method.
// It will increment the count of requests made to UpdateCluster.
func (c *Snowball) UpdateClusterWithContext(ctx aws.Context, input *snowball.UpdateClusterInput, opts ...request.Option) (*snowball.UpdateClusterOutput, error) {
	c.inc("UpdateCluster")
	return c.svc.UpdateClusterWithContext(ctx, input, opts...)
}

// UpdateJobRequest is a passthrough to the underlying UpdateJobRequest.
// It will increment the count of requests made to UpdateJob.
func (c *Snowball) UpdateJobRequest(input *snowball.UpdateJobInput) (req *request.Request, output *snowball.UpdateJobOutput) {
	c.inc("UpdateJob")
	return c.svc.UpdateJobRequest(input)
}

// UpdateJob is a passthrough to the underlying UpdateJob method.
// It will increment the count of requests made to UpdateJob.
func (c *Snowball) UpdateJob(input *snowball.UpdateJobInput) (*snowball.UpdateJobOutput, error) {
	c.inc("UpdateJob")
	return c.svc.UpdateJob(input)
}

// UpdateJobWithContext is a passthrough to the underlying UpdateJobWithContext method.
// It will increment the count of requests made to UpdateJob.
func (c *Snowball) UpdateJobWithContext(ctx aws.Context, input *snowball.UpdateJobInput, opts ...request.Option) (*snowball.UpdateJobOutput, error) {
	c.inc("UpdateJob")
	return c.svc.UpdateJobWithContext(ctx, input, opts...)
}
