// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package devicefarmcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/devicefarm"
)

// CreateDevicePoolRequest is a passthrough to the underlying CreateDevicePoolRequest.
// It will increment the count of requests made to CreateDevicePool.
func (c *DeviceFarm) CreateDevicePoolRequest(input *devicefarm.CreateDevicePoolInput) (req *request.Request, output *devicefarm.CreateDevicePoolOutput) {
	c.inc("CreateDevicePool")
	return c.svc.CreateDevicePoolRequest(input)
}

// CreateDevicePool is a passthrough to the underlying CreateDevicePool method.
// It will increment the count of requests made to CreateDevicePool.
func (c *DeviceFarm) CreateDevicePool(input *devicefarm.CreateDevicePoolInput) (*devicefarm.CreateDevicePoolOutput, error) {
	c.inc("CreateDevicePool")
	return c.svc.CreateDevicePool(input)
}

// CreateDevicePoolWithContext is a passthrough to the underlying CreateDevicePoolWithContext method.
// It will increment the count of requests made to CreateDevicePool.
func (c *DeviceFarm) CreateDevicePoolWithContext(ctx aws.Context, input *devicefarm.CreateDevicePoolInput, opts ...request.Option) (*devicefarm.CreateDevicePoolOutput, error) {
	c.inc("CreateDevicePool")
	return c.svc.CreateDevicePoolWithContext(ctx, input, opts...)
}

// CreateNetworkProfileRequest is a passthrough to the underlying CreateNetworkProfileRequest.
// It will increment the count of requests made to CreateNetworkProfile.
func (c *DeviceFarm) CreateNetworkProfileRequest(input *devicefarm.CreateNetworkProfileInput) (req *request.Request, output *devicefarm.CreateNetworkProfileOutput) {
	c.inc("CreateNetworkProfile")
	return c.svc.CreateNetworkProfileRequest(input)
}

// CreateNetworkProfile is a passthrough to the underlying CreateNetworkProfile method.
// It will increment the count of requests made to CreateNetworkProfile.
func (c *DeviceFarm) CreateNetworkProfile(input *devicefarm.CreateNetworkProfileInput) (*devicefarm.CreateNetworkProfileOutput, error) {
	c.inc("CreateNetworkProfile")
	return c.svc.CreateNetworkProfile(input)
}

// CreateNetworkProfileWithContext is a passthrough to the underlying CreateNetworkProfileWithContext method.
// It will increment the count of requests made to CreateNetworkProfile.
func (c *DeviceFarm) CreateNetworkProfileWithContext(ctx aws.Context, input *devicefarm.CreateNetworkProfileInput, opts ...request.Option) (*devicefarm.CreateNetworkProfileOutput, error) {
	c.inc("CreateNetworkProfile")
	return c.svc.CreateNetworkProfileWithContext(ctx, input, opts...)
}

// CreateProjectRequest is a passthrough to the underlying CreateProjectRequest.
// It will increment the count of requests made to CreateProject.
func (c *DeviceFarm) CreateProjectRequest(input *devicefarm.CreateProjectInput) (req *request.Request, output *devicefarm.CreateProjectOutput) {
	c.inc("CreateProject")
	return c.svc.CreateProjectRequest(input)
}

// CreateProject is a passthrough to the underlying CreateProject method.
// It will increment the count of requests made to CreateProject.
func (c *DeviceFarm) CreateProject(input *devicefarm.CreateProjectInput) (*devicefarm.CreateProjectOutput, error) {
	c.inc("CreateProject")
	return c.svc.CreateProject(input)
}

// CreateProjectWithContext is a passthrough to the underlying CreateProjectWithContext method.
// It will increment the count of requests made to CreateProject.
func (c *DeviceFarm) CreateProjectWithContext(ctx aws.Context, input *devicefarm.CreateProjectInput, opts ...request.Option) (*devicefarm.CreateProjectOutput, error) {
	c.inc("CreateProject")
	return c.svc.CreateProjectWithContext(ctx, input, opts...)
}

// CreateRemoteAccessSessionRequest is a passthrough to the underlying CreateRemoteAccessSessionRequest.
// It will increment the count of requests made to CreateRemoteAccessSession.
func (c *DeviceFarm) CreateRemoteAccessSessionRequest(input *devicefarm.CreateRemoteAccessSessionInput) (req *request.Request, output *devicefarm.CreateRemoteAccessSessionOutput) {
	c.inc("CreateRemoteAccessSession")
	return c.svc.CreateRemoteAccessSessionRequest(input)
}

// CreateRemoteAccessSession is a passthrough to the underlying CreateRemoteAccessSession method.
// It will increment the count of requests made to CreateRemoteAccessSession.
func (c *DeviceFarm) CreateRemoteAccessSession(input *devicefarm.CreateRemoteAccessSessionInput) (*devicefarm.CreateRemoteAccessSessionOutput, error) {
	c.inc("CreateRemoteAccessSession")
	return c.svc.CreateRemoteAccessSession(input)
}

// CreateRemoteAccessSessionWithContext is a passthrough to the underlying CreateRemoteAccessSessionWithContext method.
// It will increment the count of requests made to CreateRemoteAccessSession.
func (c *DeviceFarm) CreateRemoteAccessSessionWithContext(ctx aws.Context, input *devicefarm.CreateRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.CreateRemoteAccessSessionOutput, error) {
	c.inc("CreateRemoteAccessSession")
	return c.svc.CreateRemoteAccessSessionWithContext(ctx, input, opts...)
}

// CreateUploadRequest is a passthrough to the underlying CreateUploadRequest.
// It will increment the count of requests made to CreateUpload.
func (c *DeviceFarm) CreateUploadRequest(input *devicefarm.CreateUploadInput) (req *request.Request, output *devicefarm.CreateUploadOutput) {
	c.inc("CreateUpload")
	return c.svc.CreateUploadRequest(input)
}

// CreateUpload is a passthrough to the underlying CreateUpload method.
// It will increment the count of requests made to CreateUpload.
func (c *DeviceFarm) CreateUpload(input *devicefarm.CreateUploadInput) (*devicefarm.CreateUploadOutput, error) {
	c.inc("CreateUpload")
	return c.svc.CreateUpload(input)
}

// CreateUploadWithContext is a passthrough to the underlying CreateUploadWithContext method.
// It will increment the count of requests made to CreateUpload.
func (c *DeviceFarm) CreateUploadWithContext(ctx aws.Context, input *devicefarm.CreateUploadInput, opts ...request.Option) (*devicefarm.CreateUploadOutput, error) {
	c.inc("CreateUpload")
	return c.svc.CreateUploadWithContext(ctx, input, opts...)
}

// DeleteDevicePoolRequest is a passthrough to the underlying DeleteDevicePoolRequest.
// It will increment the count of requests made to DeleteDevicePool.
func (c *DeviceFarm) DeleteDevicePoolRequest(input *devicefarm.DeleteDevicePoolInput) (req *request.Request, output *devicefarm.DeleteDevicePoolOutput) {
	c.inc("DeleteDevicePool")
	return c.svc.DeleteDevicePoolRequest(input)
}

// DeleteDevicePool is a passthrough to the underlying DeleteDevicePool method.
// It will increment the count of requests made to DeleteDevicePool.
func (c *DeviceFarm) DeleteDevicePool(input *devicefarm.DeleteDevicePoolInput) (*devicefarm.DeleteDevicePoolOutput, error) {
	c.inc("DeleteDevicePool")
	return c.svc.DeleteDevicePool(input)
}

// DeleteDevicePoolWithContext is a passthrough to the underlying DeleteDevicePoolWithContext method.
// It will increment the count of requests made to DeleteDevicePool.
func (c *DeviceFarm) DeleteDevicePoolWithContext(ctx aws.Context, input *devicefarm.DeleteDevicePoolInput, opts ...request.Option) (*devicefarm.DeleteDevicePoolOutput, error) {
	c.inc("DeleteDevicePool")
	return c.svc.DeleteDevicePoolWithContext(ctx, input, opts...)
}

// DeleteNetworkProfileRequest is a passthrough to the underlying DeleteNetworkProfileRequest.
// It will increment the count of requests made to DeleteNetworkProfile.
func (c *DeviceFarm) DeleteNetworkProfileRequest(input *devicefarm.DeleteNetworkProfileInput) (req *request.Request, output *devicefarm.DeleteNetworkProfileOutput) {
	c.inc("DeleteNetworkProfile")
	return c.svc.DeleteNetworkProfileRequest(input)
}

// DeleteNetworkProfile is a passthrough to the underlying DeleteNetworkProfile method.
// It will increment the count of requests made to DeleteNetworkProfile.
func (c *DeviceFarm) DeleteNetworkProfile(input *devicefarm.DeleteNetworkProfileInput) (*devicefarm.DeleteNetworkProfileOutput, error) {
	c.inc("DeleteNetworkProfile")
	return c.svc.DeleteNetworkProfile(input)
}

// DeleteNetworkProfileWithContext is a passthrough to the underlying DeleteNetworkProfileWithContext method.
// It will increment the count of requests made to DeleteNetworkProfile.
func (c *DeviceFarm) DeleteNetworkProfileWithContext(ctx aws.Context, input *devicefarm.DeleteNetworkProfileInput, opts ...request.Option) (*devicefarm.DeleteNetworkProfileOutput, error) {
	c.inc("DeleteNetworkProfile")
	return c.svc.DeleteNetworkProfileWithContext(ctx, input, opts...)
}

// DeleteProjectRequest is a passthrough to the underlying DeleteProjectRequest.
// It will increment the count of requests made to DeleteProject.
func (c *DeviceFarm) DeleteProjectRequest(input *devicefarm.DeleteProjectInput) (req *request.Request, output *devicefarm.DeleteProjectOutput) {
	c.inc("DeleteProject")
	return c.svc.DeleteProjectRequest(input)
}

// DeleteProject is a passthrough to the underlying DeleteProject method.
// It will increment the count of requests made to DeleteProject.
func (c *DeviceFarm) DeleteProject(input *devicefarm.DeleteProjectInput) (*devicefarm.DeleteProjectOutput, error) {
	c.inc("DeleteProject")
	return c.svc.DeleteProject(input)
}

// DeleteProjectWithContext is a passthrough to the underlying DeleteProjectWithContext method.
// It will increment the count of requests made to DeleteProject.
func (c *DeviceFarm) DeleteProjectWithContext(ctx aws.Context, input *devicefarm.DeleteProjectInput, opts ...request.Option) (*devicefarm.DeleteProjectOutput, error) {
	c.inc("DeleteProject")
	return c.svc.DeleteProjectWithContext(ctx, input, opts...)
}

// DeleteRemoteAccessSessionRequest is a passthrough to the underlying DeleteRemoteAccessSessionRequest.
// It will increment the count of requests made to DeleteRemoteAccessSession.
func (c *DeviceFarm) DeleteRemoteAccessSessionRequest(input *devicefarm.DeleteRemoteAccessSessionInput) (req *request.Request, output *devicefarm.DeleteRemoteAccessSessionOutput) {
	c.inc("DeleteRemoteAccessSession")
	return c.svc.DeleteRemoteAccessSessionRequest(input)
}

// DeleteRemoteAccessSession is a passthrough to the underlying DeleteRemoteAccessSession method.
// It will increment the count of requests made to DeleteRemoteAccessSession.
func (c *DeviceFarm) DeleteRemoteAccessSession(input *devicefarm.DeleteRemoteAccessSessionInput) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {
	c.inc("DeleteRemoteAccessSession")
	return c.svc.DeleteRemoteAccessSession(input)
}

// DeleteRemoteAccessSessionWithContext is a passthrough to the underlying DeleteRemoteAccessSessionWithContext method.
// It will increment the count of requests made to DeleteRemoteAccessSession.
func (c *DeviceFarm) DeleteRemoteAccessSessionWithContext(ctx aws.Context, input *devicefarm.DeleteRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {
	c.inc("DeleteRemoteAccessSession")
	return c.svc.DeleteRemoteAccessSessionWithContext(ctx, input, opts...)
}

// DeleteRunRequest is a passthrough to the underlying DeleteRunRequest.
// It will increment the count of requests made to DeleteRun.
func (c *DeviceFarm) DeleteRunRequest(input *devicefarm.DeleteRunInput) (req *request.Request, output *devicefarm.DeleteRunOutput) {
	c.inc("DeleteRun")
	return c.svc.DeleteRunRequest(input)
}

// DeleteRun is a passthrough to the underlying DeleteRun method.
// It will increment the count of requests made to DeleteRun.
func (c *DeviceFarm) DeleteRun(input *devicefarm.DeleteRunInput) (*devicefarm.DeleteRunOutput, error) {
	c.inc("DeleteRun")
	return c.svc.DeleteRun(input)
}

// DeleteRunWithContext is a passthrough to the underlying DeleteRunWithContext method.
// It will increment the count of requests made to DeleteRun.
func (c *DeviceFarm) DeleteRunWithContext(ctx aws.Context, input *devicefarm.DeleteRunInput, opts ...request.Option) (*devicefarm.DeleteRunOutput, error) {
	c.inc("DeleteRun")
	return c.svc.DeleteRunWithContext(ctx, input, opts...)
}

// DeleteUploadRequest is a passthrough to the underlying DeleteUploadRequest.
// It will increment the count of requests made to DeleteUpload.
func (c *DeviceFarm) DeleteUploadRequest(input *devicefarm.DeleteUploadInput) (req *request.Request, output *devicefarm.DeleteUploadOutput) {
	c.inc("DeleteUpload")
	return c.svc.DeleteUploadRequest(input)
}

// DeleteUpload is a passthrough to the underlying DeleteUpload method.
// It will increment the count of requests made to DeleteUpload.
func (c *DeviceFarm) DeleteUpload(input *devicefarm.DeleteUploadInput) (*devicefarm.DeleteUploadOutput, error) {
	c.inc("DeleteUpload")
	return c.svc.DeleteUpload(input)
}

// DeleteUploadWithContext is a passthrough to the underlying DeleteUploadWithContext method.
// It will increment the count of requests made to DeleteUpload.
func (c *DeviceFarm) DeleteUploadWithContext(ctx aws.Context, input *devicefarm.DeleteUploadInput, opts ...request.Option) (*devicefarm.DeleteUploadOutput, error) {
	c.inc("DeleteUpload")
	return c.svc.DeleteUploadWithContext(ctx, input, opts...)
}

// GetAccountSettingsRequest is a passthrough to the underlying GetAccountSettingsRequest.
// It will increment the count of requests made to GetAccountSettings.
func (c *DeviceFarm) GetAccountSettingsRequest(input *devicefarm.GetAccountSettingsInput) (req *request.Request, output *devicefarm.GetAccountSettingsOutput) {
	c.inc("GetAccountSettings")
	return c.svc.GetAccountSettingsRequest(input)
}

// GetAccountSettings is a passthrough to the underlying GetAccountSettings method.
// It will increment the count of requests made to GetAccountSettings.
func (c *DeviceFarm) GetAccountSettings(input *devicefarm.GetAccountSettingsInput) (*devicefarm.GetAccountSettingsOutput, error) {
	c.inc("GetAccountSettings")
	return c.svc.GetAccountSettings(input)
}

// GetAccountSettingsWithContext is a passthrough to the underlying GetAccountSettingsWithContext method.
// It will increment the count of requests made to GetAccountSettings.
func (c *DeviceFarm) GetAccountSettingsWithContext(ctx aws.Context, input *devicefarm.GetAccountSettingsInput, opts ...request.Option) (*devicefarm.GetAccountSettingsOutput, error) {
	c.inc("GetAccountSettings")
	return c.svc.GetAccountSettingsWithContext(ctx, input, opts...)
}

// GetDeviceRequest is a passthrough to the underlying GetDeviceRequest.
// It will increment the count of requests made to GetDevice.
func (c *DeviceFarm) GetDeviceRequest(input *devicefarm.GetDeviceInput) (req *request.Request, output *devicefarm.GetDeviceOutput) {
	c.inc("GetDevice")
	return c.svc.GetDeviceRequest(input)
}

// GetDevice is a passthrough to the underlying GetDevice method.
// It will increment the count of requests made to GetDevice.
func (c *DeviceFarm) GetDevice(input *devicefarm.GetDeviceInput) (*devicefarm.GetDeviceOutput, error) {
	c.inc("GetDevice")
	return c.svc.GetDevice(input)
}

// GetDeviceWithContext is a passthrough to the underlying GetDeviceWithContext method.
// It will increment the count of requests made to GetDevice.
func (c *DeviceFarm) GetDeviceWithContext(ctx aws.Context, input *devicefarm.GetDeviceInput, opts ...request.Option) (*devicefarm.GetDeviceOutput, error) {
	c.inc("GetDevice")
	return c.svc.GetDeviceWithContext(ctx, input, opts...)
}

// GetDevicePoolRequest is a passthrough to the underlying GetDevicePoolRequest.
// It will increment the count of requests made to GetDevicePool.
func (c *DeviceFarm) GetDevicePoolRequest(input *devicefarm.GetDevicePoolInput) (req *request.Request, output *devicefarm.GetDevicePoolOutput) {
	c.inc("GetDevicePool")
	return c.svc.GetDevicePoolRequest(input)
}

// GetDevicePool is a passthrough to the underlying GetDevicePool method.
// It will increment the count of requests made to GetDevicePool.
func (c *DeviceFarm) GetDevicePool(input *devicefarm.GetDevicePoolInput) (*devicefarm.GetDevicePoolOutput, error) {
	c.inc("GetDevicePool")
	return c.svc.GetDevicePool(input)
}

// GetDevicePoolWithContext is a passthrough to the underlying GetDevicePoolWithContext method.
// It will increment the count of requests made to GetDevicePool.
func (c *DeviceFarm) GetDevicePoolWithContext(ctx aws.Context, input *devicefarm.GetDevicePoolInput, opts ...request.Option) (*devicefarm.GetDevicePoolOutput, error) {
	c.inc("GetDevicePool")
	return c.svc.GetDevicePoolWithContext(ctx, input, opts...)
}

// GetDevicePoolCompatibilityRequest is a passthrough to the underlying GetDevicePoolCompatibilityRequest.
// It will increment the count of requests made to GetDevicePoolCompatibility.
func (c *DeviceFarm) GetDevicePoolCompatibilityRequest(input *devicefarm.GetDevicePoolCompatibilityInput) (req *request.Request, output *devicefarm.GetDevicePoolCompatibilityOutput) {
	c.inc("GetDevicePoolCompatibility")
	return c.svc.GetDevicePoolCompatibilityRequest(input)
}

// GetDevicePoolCompatibility is a passthrough to the underlying GetDevicePoolCompatibility method.
// It will increment the count of requests made to GetDevicePoolCompatibility.
func (c *DeviceFarm) GetDevicePoolCompatibility(input *devicefarm.GetDevicePoolCompatibilityInput) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {
	c.inc("GetDevicePoolCompatibility")
	return c.svc.GetDevicePoolCompatibility(input)
}

// GetDevicePoolCompatibilityWithContext is a passthrough to the underlying GetDevicePoolCompatibilityWithContext method.
// It will increment the count of requests made to GetDevicePoolCompatibility.
func (c *DeviceFarm) GetDevicePoolCompatibilityWithContext(ctx aws.Context, input *devicefarm.GetDevicePoolCompatibilityInput, opts ...request.Option) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {
	c.inc("GetDevicePoolCompatibility")
	return c.svc.GetDevicePoolCompatibilityWithContext(ctx, input, opts...)
}

// GetJobRequest is a passthrough to the underlying GetJobRequest.
// It will increment the count of requests made to GetJob.
func (c *DeviceFarm) GetJobRequest(input *devicefarm.GetJobInput) (req *request.Request, output *devicefarm.GetJobOutput) {
	c.inc("GetJob")
	return c.svc.GetJobRequest(input)
}

// GetJob is a passthrough to the underlying GetJob method.
// It will increment the count of requests made to GetJob.
func (c *DeviceFarm) GetJob(input *devicefarm.GetJobInput) (*devicefarm.GetJobOutput, error) {
	c.inc("GetJob")
	return c.svc.GetJob(input)
}

// GetJobWithContext is a passthrough to the underlying GetJobWithContext method.
// It will increment the count of requests made to GetJob.
func (c *DeviceFarm) GetJobWithContext(ctx aws.Context, input *devicefarm.GetJobInput, opts ...request.Option) (*devicefarm.GetJobOutput, error) {
	c.inc("GetJob")
	return c.svc.GetJobWithContext(ctx, input, opts...)
}

// GetNetworkProfileRequest is a passthrough to the underlying GetNetworkProfileRequest.
// It will increment the count of requests made to GetNetworkProfile.
func (c *DeviceFarm) GetNetworkProfileRequest(input *devicefarm.GetNetworkProfileInput) (req *request.Request, output *devicefarm.GetNetworkProfileOutput) {
	c.inc("GetNetworkProfile")
	return c.svc.GetNetworkProfileRequest(input)
}

// GetNetworkProfile is a passthrough to the underlying GetNetworkProfile method.
// It will increment the count of requests made to GetNetworkProfile.
func (c *DeviceFarm) GetNetworkProfile(input *devicefarm.GetNetworkProfileInput) (*devicefarm.GetNetworkProfileOutput, error) {
	c.inc("GetNetworkProfile")
	return c.svc.GetNetworkProfile(input)
}

// GetNetworkProfileWithContext is a passthrough to the underlying GetNetworkProfileWithContext method.
// It will increment the count of requests made to GetNetworkProfile.
func (c *DeviceFarm) GetNetworkProfileWithContext(ctx aws.Context, input *devicefarm.GetNetworkProfileInput, opts ...request.Option) (*devicefarm.GetNetworkProfileOutput, error) {
	c.inc("GetNetworkProfile")
	return c.svc.GetNetworkProfileWithContext(ctx, input, opts...)
}

// GetOfferingStatusRequest is a passthrough to the underlying GetOfferingStatusRequest.
// It will increment the count of requests made to GetOfferingStatus.
func (c *DeviceFarm) GetOfferingStatusRequest(input *devicefarm.GetOfferingStatusInput) (req *request.Request, output *devicefarm.GetOfferingStatusOutput) {
	c.inc("GetOfferingStatus")
	return c.svc.GetOfferingStatusRequest(input)
}

// GetOfferingStatus is a passthrough to the underlying GetOfferingStatus method.
// It will increment the count of requests made to GetOfferingStatus.
func (c *DeviceFarm) GetOfferingStatus(input *devicefarm.GetOfferingStatusInput) (*devicefarm.GetOfferingStatusOutput, error) {
	c.inc("GetOfferingStatus")
	return c.svc.GetOfferingStatus(input)
}

// GetOfferingStatusWithContext is a passthrough to the underlying GetOfferingStatusWithContext method.
// It will increment the count of requests made to GetOfferingStatus.
func (c *DeviceFarm) GetOfferingStatusWithContext(ctx aws.Context, input *devicefarm.GetOfferingStatusInput, opts ...request.Option) (*devicefarm.GetOfferingStatusOutput, error) {
	c.inc("GetOfferingStatus")
	return c.svc.GetOfferingStatusWithContext(ctx, input, opts...)
}

// GetOfferingStatusPages is a passthrough to the underlying GetOfferingStatusPages method.
// It will increment the count of requests made to GetOfferingStatus on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetOfferingStatusPagesWithContext to avoid this.
func (c *DeviceFarm) GetOfferingStatusPages(input *devicefarm.GetOfferingStatusInput, fn func(*devicefarm.GetOfferingStatusOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.GetOfferingStatusOutput, lastPage bool) bool {
		c.inc("GetOfferingStatus")
		return fn(page, lastPage)
	}
	return c.GetOfferingStatusPages(input, wrappedFn)
}

// GetOfferingStatusPagesWithContext is a passthrough to the underlying GetOfferingStatusPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetOfferingStatus when applied to the request.
func (c *DeviceFarm) GetOfferingStatusPagesWithContext(ctx aws.Context, input *devicefarm.GetOfferingStatusInput, fn func(*devicefarm.GetOfferingStatusOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetOfferingStatus"))
	return c.GetOfferingStatusPagesWithContext(ctx, input, fn, opts...)
}

// GetProjectRequest is a passthrough to the underlying GetProjectRequest.
// It will increment the count of requests made to GetProject.
func (c *DeviceFarm) GetProjectRequest(input *devicefarm.GetProjectInput) (req *request.Request, output *devicefarm.GetProjectOutput) {
	c.inc("GetProject")
	return c.svc.GetProjectRequest(input)
}

// GetProject is a passthrough to the underlying GetProject method.
// It will increment the count of requests made to GetProject.
func (c *DeviceFarm) GetProject(input *devicefarm.GetProjectInput) (*devicefarm.GetProjectOutput, error) {
	c.inc("GetProject")
	return c.svc.GetProject(input)
}

// GetProjectWithContext is a passthrough to the underlying GetProjectWithContext method.
// It will increment the count of requests made to GetProject.
func (c *DeviceFarm) GetProjectWithContext(ctx aws.Context, input *devicefarm.GetProjectInput, opts ...request.Option) (*devicefarm.GetProjectOutput, error) {
	c.inc("GetProject")
	return c.svc.GetProjectWithContext(ctx, input, opts...)
}

// GetRemoteAccessSessionRequest is a passthrough to the underlying GetRemoteAccessSessionRequest.
// It will increment the count of requests made to GetRemoteAccessSession.
func (c *DeviceFarm) GetRemoteAccessSessionRequest(input *devicefarm.GetRemoteAccessSessionInput) (req *request.Request, output *devicefarm.GetRemoteAccessSessionOutput) {
	c.inc("GetRemoteAccessSession")
	return c.svc.GetRemoteAccessSessionRequest(input)
}

// GetRemoteAccessSession is a passthrough to the underlying GetRemoteAccessSession method.
// It will increment the count of requests made to GetRemoteAccessSession.
func (c *DeviceFarm) GetRemoteAccessSession(input *devicefarm.GetRemoteAccessSessionInput) (*devicefarm.GetRemoteAccessSessionOutput, error) {
	c.inc("GetRemoteAccessSession")
	return c.svc.GetRemoteAccessSession(input)
}

// GetRemoteAccessSessionWithContext is a passthrough to the underlying GetRemoteAccessSessionWithContext method.
// It will increment the count of requests made to GetRemoteAccessSession.
func (c *DeviceFarm) GetRemoteAccessSessionWithContext(ctx aws.Context, input *devicefarm.GetRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.GetRemoteAccessSessionOutput, error) {
	c.inc("GetRemoteAccessSession")
	return c.svc.GetRemoteAccessSessionWithContext(ctx, input, opts...)
}

// GetRunRequest is a passthrough to the underlying GetRunRequest.
// It will increment the count of requests made to GetRun.
func (c *DeviceFarm) GetRunRequest(input *devicefarm.GetRunInput) (req *request.Request, output *devicefarm.GetRunOutput) {
	c.inc("GetRun")
	return c.svc.GetRunRequest(input)
}

// GetRun is a passthrough to the underlying GetRun method.
// It will increment the count of requests made to GetRun.
func (c *DeviceFarm) GetRun(input *devicefarm.GetRunInput) (*devicefarm.GetRunOutput, error) {
	c.inc("GetRun")
	return c.svc.GetRun(input)
}

// GetRunWithContext is a passthrough to the underlying GetRunWithContext method.
// It will increment the count of requests made to GetRun.
func (c *DeviceFarm) GetRunWithContext(ctx aws.Context, input *devicefarm.GetRunInput, opts ...request.Option) (*devicefarm.GetRunOutput, error) {
	c.inc("GetRun")
	return c.svc.GetRunWithContext(ctx, input, opts...)
}

// GetSuiteRequest is a passthrough to the underlying GetSuiteRequest.
// It will increment the count of requests made to GetSuite.
func (c *DeviceFarm) GetSuiteRequest(input *devicefarm.GetSuiteInput) (req *request.Request, output *devicefarm.GetSuiteOutput) {
	c.inc("GetSuite")
	return c.svc.GetSuiteRequest(input)
}

// GetSuite is a passthrough to the underlying GetSuite method.
// It will increment the count of requests made to GetSuite.
func (c *DeviceFarm) GetSuite(input *devicefarm.GetSuiteInput) (*devicefarm.GetSuiteOutput, error) {
	c.inc("GetSuite")
	return c.svc.GetSuite(input)
}

// GetSuiteWithContext is a passthrough to the underlying GetSuiteWithContext method.
// It will increment the count of requests made to GetSuite.
func (c *DeviceFarm) GetSuiteWithContext(ctx aws.Context, input *devicefarm.GetSuiteInput, opts ...request.Option) (*devicefarm.GetSuiteOutput, error) {
	c.inc("GetSuite")
	return c.svc.GetSuiteWithContext(ctx, input, opts...)
}

// GetTestRequest is a passthrough to the underlying GetTestRequest.
// It will increment the count of requests made to GetTest.
func (c *DeviceFarm) GetTestRequest(input *devicefarm.GetTestInput) (req *request.Request, output *devicefarm.GetTestOutput) {
	c.inc("GetTest")
	return c.svc.GetTestRequest(input)
}

// GetTest is a passthrough to the underlying GetTest method.
// It will increment the count of requests made to GetTest.
func (c *DeviceFarm) GetTest(input *devicefarm.GetTestInput) (*devicefarm.GetTestOutput, error) {
	c.inc("GetTest")
	return c.svc.GetTest(input)
}

// GetTestWithContext is a passthrough to the underlying GetTestWithContext method.
// It will increment the count of requests made to GetTest.
func (c *DeviceFarm) GetTestWithContext(ctx aws.Context, input *devicefarm.GetTestInput, opts ...request.Option) (*devicefarm.GetTestOutput, error) {
	c.inc("GetTest")
	return c.svc.GetTestWithContext(ctx, input, opts...)
}

// GetUploadRequest is a passthrough to the underlying GetUploadRequest.
// It will increment the count of requests made to GetUpload.
func (c *DeviceFarm) GetUploadRequest(input *devicefarm.GetUploadInput) (req *request.Request, output *devicefarm.GetUploadOutput) {
	c.inc("GetUpload")
	return c.svc.GetUploadRequest(input)
}

// GetUpload is a passthrough to the underlying GetUpload method.
// It will increment the count of requests made to GetUpload.
func (c *DeviceFarm) GetUpload(input *devicefarm.GetUploadInput) (*devicefarm.GetUploadOutput, error) {
	c.inc("GetUpload")
	return c.svc.GetUpload(input)
}

// GetUploadWithContext is a passthrough to the underlying GetUploadWithContext method.
// It will increment the count of requests made to GetUpload.
func (c *DeviceFarm) GetUploadWithContext(ctx aws.Context, input *devicefarm.GetUploadInput, opts ...request.Option) (*devicefarm.GetUploadOutput, error) {
	c.inc("GetUpload")
	return c.svc.GetUploadWithContext(ctx, input, opts...)
}

// InstallToRemoteAccessSessionRequest is a passthrough to the underlying InstallToRemoteAccessSessionRequest.
// It will increment the count of requests made to InstallToRemoteAccessSession.
func (c *DeviceFarm) InstallToRemoteAccessSessionRequest(input *devicefarm.InstallToRemoteAccessSessionInput) (req *request.Request, output *devicefarm.InstallToRemoteAccessSessionOutput) {
	c.inc("InstallToRemoteAccessSession")
	return c.svc.InstallToRemoteAccessSessionRequest(input)
}

// InstallToRemoteAccessSession is a passthrough to the underlying InstallToRemoteAccessSession method.
// It will increment the count of requests made to InstallToRemoteAccessSession.
func (c *DeviceFarm) InstallToRemoteAccessSession(input *devicefarm.InstallToRemoteAccessSessionInput) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {
	c.inc("InstallToRemoteAccessSession")
	return c.svc.InstallToRemoteAccessSession(input)
}

// InstallToRemoteAccessSessionWithContext is a passthrough to the underlying InstallToRemoteAccessSessionWithContext method.
// It will increment the count of requests made to InstallToRemoteAccessSession.
func (c *DeviceFarm) InstallToRemoteAccessSessionWithContext(ctx aws.Context, input *devicefarm.InstallToRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {
	c.inc("InstallToRemoteAccessSession")
	return c.svc.InstallToRemoteAccessSessionWithContext(ctx, input, opts...)
}

// ListArtifactsRequest is a passthrough to the underlying ListArtifactsRequest.
// It will increment the count of requests made to ListArtifacts.
func (c *DeviceFarm) ListArtifactsRequest(input *devicefarm.ListArtifactsInput) (req *request.Request, output *devicefarm.ListArtifactsOutput) {
	c.inc("ListArtifacts")
	return c.svc.ListArtifactsRequest(input)
}

// ListArtifacts is a passthrough to the underlying ListArtifacts method.
// It will increment the count of requests made to ListArtifacts.
func (c *DeviceFarm) ListArtifacts(input *devicefarm.ListArtifactsInput) (*devicefarm.ListArtifactsOutput, error) {
	c.inc("ListArtifacts")
	return c.svc.ListArtifacts(input)
}

// ListArtifactsWithContext is a passthrough to the underlying ListArtifactsWithContext method.
// It will increment the count of requests made to ListArtifacts.
func (c *DeviceFarm) ListArtifactsWithContext(ctx aws.Context, input *devicefarm.ListArtifactsInput, opts ...request.Option) (*devicefarm.ListArtifactsOutput, error) {
	c.inc("ListArtifacts")
	return c.svc.ListArtifactsWithContext(ctx, input, opts...)
}

// ListArtifactsPages is a passthrough to the underlying ListArtifactsPages method.
// It will increment the count of requests made to ListArtifacts on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListArtifactsPagesWithContext to avoid this.
func (c *DeviceFarm) ListArtifactsPages(input *devicefarm.ListArtifactsInput, fn func(*devicefarm.ListArtifactsOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListArtifactsOutput, lastPage bool) bool {
		c.inc("ListArtifacts")
		return fn(page, lastPage)
	}
	return c.ListArtifactsPages(input, wrappedFn)
}

// ListArtifactsPagesWithContext is a passthrough to the underlying ListArtifactsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListArtifacts when applied to the request.
func (c *DeviceFarm) ListArtifactsPagesWithContext(ctx aws.Context, input *devicefarm.ListArtifactsInput, fn func(*devicefarm.ListArtifactsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListArtifacts"))
	return c.ListArtifactsPagesWithContext(ctx, input, fn, opts...)
}

// ListDevicePoolsRequest is a passthrough to the underlying ListDevicePoolsRequest.
// It will increment the count of requests made to ListDevicePools.
func (c *DeviceFarm) ListDevicePoolsRequest(input *devicefarm.ListDevicePoolsInput) (req *request.Request, output *devicefarm.ListDevicePoolsOutput) {
	c.inc("ListDevicePools")
	return c.svc.ListDevicePoolsRequest(input)
}

// ListDevicePools is a passthrough to the underlying ListDevicePools method.
// It will increment the count of requests made to ListDevicePools.
func (c *DeviceFarm) ListDevicePools(input *devicefarm.ListDevicePoolsInput) (*devicefarm.ListDevicePoolsOutput, error) {
	c.inc("ListDevicePools")
	return c.svc.ListDevicePools(input)
}

// ListDevicePoolsWithContext is a passthrough to the underlying ListDevicePoolsWithContext method.
// It will increment the count of requests made to ListDevicePools.
func (c *DeviceFarm) ListDevicePoolsWithContext(ctx aws.Context, input *devicefarm.ListDevicePoolsInput, opts ...request.Option) (*devicefarm.ListDevicePoolsOutput, error) {
	c.inc("ListDevicePools")
	return c.svc.ListDevicePoolsWithContext(ctx, input, opts...)
}

// ListDevicePoolsPages is a passthrough to the underlying ListDevicePoolsPages method.
// It will increment the count of requests made to ListDevicePools on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListDevicePoolsPagesWithContext to avoid this.
func (c *DeviceFarm) ListDevicePoolsPages(input *devicefarm.ListDevicePoolsInput, fn func(*devicefarm.ListDevicePoolsOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListDevicePoolsOutput, lastPage bool) bool {
		c.inc("ListDevicePools")
		return fn(page, lastPage)
	}
	return c.ListDevicePoolsPages(input, wrappedFn)
}

// ListDevicePoolsPagesWithContext is a passthrough to the underlying ListDevicePoolsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListDevicePools when applied to the request.
func (c *DeviceFarm) ListDevicePoolsPagesWithContext(ctx aws.Context, input *devicefarm.ListDevicePoolsInput, fn func(*devicefarm.ListDevicePoolsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListDevicePools"))
	return c.ListDevicePoolsPagesWithContext(ctx, input, fn, opts...)
}

// ListDevicesRequest is a passthrough to the underlying ListDevicesRequest.
// It will increment the count of requests made to ListDevices.
func (c *DeviceFarm) ListDevicesRequest(input *devicefarm.ListDevicesInput) (req *request.Request, output *devicefarm.ListDevicesOutput) {
	c.inc("ListDevices")
	return c.svc.ListDevicesRequest(input)
}

// ListDevices is a passthrough to the underlying ListDevices method.
// It will increment the count of requests made to ListDevices.
func (c *DeviceFarm) ListDevices(input *devicefarm.ListDevicesInput) (*devicefarm.ListDevicesOutput, error) {
	c.inc("ListDevices")
	return c.svc.ListDevices(input)
}

// ListDevicesWithContext is a passthrough to the underlying ListDevicesWithContext method.
// It will increment the count of requests made to ListDevices.
func (c *DeviceFarm) ListDevicesWithContext(ctx aws.Context, input *devicefarm.ListDevicesInput, opts ...request.Option) (*devicefarm.ListDevicesOutput, error) {
	c.inc("ListDevices")
	return c.svc.ListDevicesWithContext(ctx, input, opts...)
}

// ListDevicesPages is a passthrough to the underlying ListDevicesPages method.
// It will increment the count of requests made to ListDevices on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListDevicesPagesWithContext to avoid this.
func (c *DeviceFarm) ListDevicesPages(input *devicefarm.ListDevicesInput, fn func(*devicefarm.ListDevicesOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListDevicesOutput, lastPage bool) bool {
		c.inc("ListDevices")
		return fn(page, lastPage)
	}
	return c.ListDevicesPages(input, wrappedFn)
}

// ListDevicesPagesWithContext is a passthrough to the underlying ListDevicesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListDevices when applied to the request.
func (c *DeviceFarm) ListDevicesPagesWithContext(ctx aws.Context, input *devicefarm.ListDevicesInput, fn func(*devicefarm.ListDevicesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListDevices"))
	return c.ListDevicesPagesWithContext(ctx, input, fn, opts...)
}

// ListJobsRequest is a passthrough to the underlying ListJobsRequest.
// It will increment the count of requests made to ListJobs.
func (c *DeviceFarm) ListJobsRequest(input *devicefarm.ListJobsInput) (req *request.Request, output *devicefarm.ListJobsOutput) {
	c.inc("ListJobs")
	return c.svc.ListJobsRequest(input)
}

// ListJobs is a passthrough to the underlying ListJobs method.
// It will increment the count of requests made to ListJobs.
func (c *DeviceFarm) ListJobs(input *devicefarm.ListJobsInput) (*devicefarm.ListJobsOutput, error) {
	c.inc("ListJobs")
	return c.svc.ListJobs(input)
}

// ListJobsWithContext is a passthrough to the underlying ListJobsWithContext method.
// It will increment the count of requests made to ListJobs.
func (c *DeviceFarm) ListJobsWithContext(ctx aws.Context, input *devicefarm.ListJobsInput, opts ...request.Option) (*devicefarm.ListJobsOutput, error) {
	c.inc("ListJobs")
	return c.svc.ListJobsWithContext(ctx, input, opts...)
}

// ListJobsPages is a passthrough to the underlying ListJobsPages method.
// It will increment the count of requests made to ListJobs on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListJobsPagesWithContext to avoid this.
func (c *DeviceFarm) ListJobsPages(input *devicefarm.ListJobsInput, fn func(*devicefarm.ListJobsOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListJobsOutput, lastPage bool) bool {
		c.inc("ListJobs")
		return fn(page, lastPage)
	}
	return c.ListJobsPages(input, wrappedFn)
}

// ListJobsPagesWithContext is a passthrough to the underlying ListJobsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListJobs when applied to the request.
func (c *DeviceFarm) ListJobsPagesWithContext(ctx aws.Context, input *devicefarm.ListJobsInput, fn func(*devicefarm.ListJobsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListJobs"))
	return c.ListJobsPagesWithContext(ctx, input, fn, opts...)
}

// ListNetworkProfilesRequest is a passthrough to the underlying ListNetworkProfilesRequest.
// It will increment the count of requests made to ListNetworkProfiles.
func (c *DeviceFarm) ListNetworkProfilesRequest(input *devicefarm.ListNetworkProfilesInput) (req *request.Request, output *devicefarm.ListNetworkProfilesOutput) {
	c.inc("ListNetworkProfiles")
	return c.svc.ListNetworkProfilesRequest(input)
}

// ListNetworkProfiles is a passthrough to the underlying ListNetworkProfiles method.
// It will increment the count of requests made to ListNetworkProfiles.
func (c *DeviceFarm) ListNetworkProfiles(input *devicefarm.ListNetworkProfilesInput) (*devicefarm.ListNetworkProfilesOutput, error) {
	c.inc("ListNetworkProfiles")
	return c.svc.ListNetworkProfiles(input)
}

// ListNetworkProfilesWithContext is a passthrough to the underlying ListNetworkProfilesWithContext method.
// It will increment the count of requests made to ListNetworkProfiles.
func (c *DeviceFarm) ListNetworkProfilesWithContext(ctx aws.Context, input *devicefarm.ListNetworkProfilesInput, opts ...request.Option) (*devicefarm.ListNetworkProfilesOutput, error) {
	c.inc("ListNetworkProfiles")
	return c.svc.ListNetworkProfilesWithContext(ctx, input, opts...)
}

// ListOfferingPromotionsRequest is a passthrough to the underlying ListOfferingPromotionsRequest.
// It will increment the count of requests made to ListOfferingPromotions.
func (c *DeviceFarm) ListOfferingPromotionsRequest(input *devicefarm.ListOfferingPromotionsInput) (req *request.Request, output *devicefarm.ListOfferingPromotionsOutput) {
	c.inc("ListOfferingPromotions")
	return c.svc.ListOfferingPromotionsRequest(input)
}

// ListOfferingPromotions is a passthrough to the underlying ListOfferingPromotions method.
// It will increment the count of requests made to ListOfferingPromotions.
func (c *DeviceFarm) ListOfferingPromotions(input *devicefarm.ListOfferingPromotionsInput) (*devicefarm.ListOfferingPromotionsOutput, error) {
	c.inc("ListOfferingPromotions")
	return c.svc.ListOfferingPromotions(input)
}

// ListOfferingPromotionsWithContext is a passthrough to the underlying ListOfferingPromotionsWithContext method.
// It will increment the count of requests made to ListOfferingPromotions.
func (c *DeviceFarm) ListOfferingPromotionsWithContext(ctx aws.Context, input *devicefarm.ListOfferingPromotionsInput, opts ...request.Option) (*devicefarm.ListOfferingPromotionsOutput, error) {
	c.inc("ListOfferingPromotions")
	return c.svc.ListOfferingPromotionsWithContext(ctx, input, opts...)
}

// ListOfferingTransactionsRequest is a passthrough to the underlying ListOfferingTransactionsRequest.
// It will increment the count of requests made to ListOfferingTransactions.
func (c *DeviceFarm) ListOfferingTransactionsRequest(input *devicefarm.ListOfferingTransactionsInput) (req *request.Request, output *devicefarm.ListOfferingTransactionsOutput) {
	c.inc("ListOfferingTransactions")
	return c.svc.ListOfferingTransactionsRequest(input)
}

// ListOfferingTransactions is a passthrough to the underlying ListOfferingTransactions method.
// It will increment the count of requests made to ListOfferingTransactions.
func (c *DeviceFarm) ListOfferingTransactions(input *devicefarm.ListOfferingTransactionsInput) (*devicefarm.ListOfferingTransactionsOutput, error) {
	c.inc("ListOfferingTransactions")
	return c.svc.ListOfferingTransactions(input)
}

// ListOfferingTransactionsWithContext is a passthrough to the underlying ListOfferingTransactionsWithContext method.
// It will increment the count of requests made to ListOfferingTransactions.
func (c *DeviceFarm) ListOfferingTransactionsWithContext(ctx aws.Context, input *devicefarm.ListOfferingTransactionsInput, opts ...request.Option) (*devicefarm.ListOfferingTransactionsOutput, error) {
	c.inc("ListOfferingTransactions")
	return c.svc.ListOfferingTransactionsWithContext(ctx, input, opts...)
}

// ListOfferingTransactionsPages is a passthrough to the underlying ListOfferingTransactionsPages method.
// It will increment the count of requests made to ListOfferingTransactions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListOfferingTransactionsPagesWithContext to avoid this.
func (c *DeviceFarm) ListOfferingTransactionsPages(input *devicefarm.ListOfferingTransactionsInput, fn func(*devicefarm.ListOfferingTransactionsOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListOfferingTransactionsOutput, lastPage bool) bool {
		c.inc("ListOfferingTransactions")
		return fn(page, lastPage)
	}
	return c.ListOfferingTransactionsPages(input, wrappedFn)
}

// ListOfferingTransactionsPagesWithContext is a passthrough to the underlying ListOfferingTransactionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListOfferingTransactions when applied to the request.
func (c *DeviceFarm) ListOfferingTransactionsPagesWithContext(ctx aws.Context, input *devicefarm.ListOfferingTransactionsInput, fn func(*devicefarm.ListOfferingTransactionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListOfferingTransactions"))
	return c.ListOfferingTransactionsPagesWithContext(ctx, input, fn, opts...)
}

// ListOfferingsRequest is a passthrough to the underlying ListOfferingsRequest.
// It will increment the count of requests made to ListOfferings.
func (c *DeviceFarm) ListOfferingsRequest(input *devicefarm.ListOfferingsInput) (req *request.Request, output *devicefarm.ListOfferingsOutput) {
	c.inc("ListOfferings")
	return c.svc.ListOfferingsRequest(input)
}

// ListOfferings is a passthrough to the underlying ListOfferings method.
// It will increment the count of requests made to ListOfferings.
func (c *DeviceFarm) ListOfferings(input *devicefarm.ListOfferingsInput) (*devicefarm.ListOfferingsOutput, error) {
	c.inc("ListOfferings")
	return c.svc.ListOfferings(input)
}

// ListOfferingsWithContext is a passthrough to the underlying ListOfferingsWithContext method.
// It will increment the count of requests made to ListOfferings.
func (c *DeviceFarm) ListOfferingsWithContext(ctx aws.Context, input *devicefarm.ListOfferingsInput, opts ...request.Option) (*devicefarm.ListOfferingsOutput, error) {
	c.inc("ListOfferings")
	return c.svc.ListOfferingsWithContext(ctx, input, opts...)
}

// ListOfferingsPages is a passthrough to the underlying ListOfferingsPages method.
// It will increment the count of requests made to ListOfferings on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListOfferingsPagesWithContext to avoid this.
func (c *DeviceFarm) ListOfferingsPages(input *devicefarm.ListOfferingsInput, fn func(*devicefarm.ListOfferingsOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListOfferingsOutput, lastPage bool) bool {
		c.inc("ListOfferings")
		return fn(page, lastPage)
	}
	return c.ListOfferingsPages(input, wrappedFn)
}

// ListOfferingsPagesWithContext is a passthrough to the underlying ListOfferingsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListOfferings when applied to the request.
func (c *DeviceFarm) ListOfferingsPagesWithContext(ctx aws.Context, input *devicefarm.ListOfferingsInput, fn func(*devicefarm.ListOfferingsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListOfferings"))
	return c.ListOfferingsPagesWithContext(ctx, input, fn, opts...)
}

// ListProjectsRequest is a passthrough to the underlying ListProjectsRequest.
// It will increment the count of requests made to ListProjects.
func (c *DeviceFarm) ListProjectsRequest(input *devicefarm.ListProjectsInput) (req *request.Request, output *devicefarm.ListProjectsOutput) {
	c.inc("ListProjects")
	return c.svc.ListProjectsRequest(input)
}

// ListProjects is a passthrough to the underlying ListProjects method.
// It will increment the count of requests made to ListProjects.
func (c *DeviceFarm) ListProjects(input *devicefarm.ListProjectsInput) (*devicefarm.ListProjectsOutput, error) {
	c.inc("ListProjects")
	return c.svc.ListProjects(input)
}

// ListProjectsWithContext is a passthrough to the underlying ListProjectsWithContext method.
// It will increment the count of requests made to ListProjects.
func (c *DeviceFarm) ListProjectsWithContext(ctx aws.Context, input *devicefarm.ListProjectsInput, opts ...request.Option) (*devicefarm.ListProjectsOutput, error) {
	c.inc("ListProjects")
	return c.svc.ListProjectsWithContext(ctx, input, opts...)
}

// ListProjectsPages is a passthrough to the underlying ListProjectsPages method.
// It will increment the count of requests made to ListProjects on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListProjectsPagesWithContext to avoid this.
func (c *DeviceFarm) ListProjectsPages(input *devicefarm.ListProjectsInput, fn func(*devicefarm.ListProjectsOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListProjectsOutput, lastPage bool) bool {
		c.inc("ListProjects")
		return fn(page, lastPage)
	}
	return c.ListProjectsPages(input, wrappedFn)
}

// ListProjectsPagesWithContext is a passthrough to the underlying ListProjectsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListProjects when applied to the request.
func (c *DeviceFarm) ListProjectsPagesWithContext(ctx aws.Context, input *devicefarm.ListProjectsInput, fn func(*devicefarm.ListProjectsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListProjects"))
	return c.ListProjectsPagesWithContext(ctx, input, fn, opts...)
}

// ListRemoteAccessSessionsRequest is a passthrough to the underlying ListRemoteAccessSessionsRequest.
// It will increment the count of requests made to ListRemoteAccessSessions.
func (c *DeviceFarm) ListRemoteAccessSessionsRequest(input *devicefarm.ListRemoteAccessSessionsInput) (req *request.Request, output *devicefarm.ListRemoteAccessSessionsOutput) {
	c.inc("ListRemoteAccessSessions")
	return c.svc.ListRemoteAccessSessionsRequest(input)
}

// ListRemoteAccessSessions is a passthrough to the underlying ListRemoteAccessSessions method.
// It will increment the count of requests made to ListRemoteAccessSessions.
func (c *DeviceFarm) ListRemoteAccessSessions(input *devicefarm.ListRemoteAccessSessionsInput) (*devicefarm.ListRemoteAccessSessionsOutput, error) {
	c.inc("ListRemoteAccessSessions")
	return c.svc.ListRemoteAccessSessions(input)
}

// ListRemoteAccessSessionsWithContext is a passthrough to the underlying ListRemoteAccessSessionsWithContext method.
// It will increment the count of requests made to ListRemoteAccessSessions.
func (c *DeviceFarm) ListRemoteAccessSessionsWithContext(ctx aws.Context, input *devicefarm.ListRemoteAccessSessionsInput, opts ...request.Option) (*devicefarm.ListRemoteAccessSessionsOutput, error) {
	c.inc("ListRemoteAccessSessions")
	return c.svc.ListRemoteAccessSessionsWithContext(ctx, input, opts...)
}

// ListRunsRequest is a passthrough to the underlying ListRunsRequest.
// It will increment the count of requests made to ListRuns.
func (c *DeviceFarm) ListRunsRequest(input *devicefarm.ListRunsInput) (req *request.Request, output *devicefarm.ListRunsOutput) {
	c.inc("ListRuns")
	return c.svc.ListRunsRequest(input)
}

// ListRuns is a passthrough to the underlying ListRuns method.
// It will increment the count of requests made to ListRuns.
func (c *DeviceFarm) ListRuns(input *devicefarm.ListRunsInput) (*devicefarm.ListRunsOutput, error) {
	c.inc("ListRuns")
	return c.svc.ListRuns(input)
}

// ListRunsWithContext is a passthrough to the underlying ListRunsWithContext method.
// It will increment the count of requests made to ListRuns.
func (c *DeviceFarm) ListRunsWithContext(ctx aws.Context, input *devicefarm.ListRunsInput, opts ...request.Option) (*devicefarm.ListRunsOutput, error) {
	c.inc("ListRuns")
	return c.svc.ListRunsWithContext(ctx, input, opts...)
}

// ListRunsPages is a passthrough to the underlying ListRunsPages method.
// It will increment the count of requests made to ListRuns on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListRunsPagesWithContext to avoid this.
func (c *DeviceFarm) ListRunsPages(input *devicefarm.ListRunsInput, fn func(*devicefarm.ListRunsOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListRunsOutput, lastPage bool) bool {
		c.inc("ListRuns")
		return fn(page, lastPage)
	}
	return c.ListRunsPages(input, wrappedFn)
}

// ListRunsPagesWithContext is a passthrough to the underlying ListRunsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListRuns when applied to the request.
func (c *DeviceFarm) ListRunsPagesWithContext(ctx aws.Context, input *devicefarm.ListRunsInput, fn func(*devicefarm.ListRunsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListRuns"))
	return c.ListRunsPagesWithContext(ctx, input, fn, opts...)
}

// ListSamplesRequest is a passthrough to the underlying ListSamplesRequest.
// It will increment the count of requests made to ListSamples.
func (c *DeviceFarm) ListSamplesRequest(input *devicefarm.ListSamplesInput) (req *request.Request, output *devicefarm.ListSamplesOutput) {
	c.inc("ListSamples")
	return c.svc.ListSamplesRequest(input)
}

// ListSamples is a passthrough to the underlying ListSamples method.
// It will increment the count of requests made to ListSamples.
func (c *DeviceFarm) ListSamples(input *devicefarm.ListSamplesInput) (*devicefarm.ListSamplesOutput, error) {
	c.inc("ListSamples")
	return c.svc.ListSamples(input)
}

// ListSamplesWithContext is a passthrough to the underlying ListSamplesWithContext method.
// It will increment the count of requests made to ListSamples.
func (c *DeviceFarm) ListSamplesWithContext(ctx aws.Context, input *devicefarm.ListSamplesInput, opts ...request.Option) (*devicefarm.ListSamplesOutput, error) {
	c.inc("ListSamples")
	return c.svc.ListSamplesWithContext(ctx, input, opts...)
}

// ListSamplesPages is a passthrough to the underlying ListSamplesPages method.
// It will increment the count of requests made to ListSamples on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListSamplesPagesWithContext to avoid this.
func (c *DeviceFarm) ListSamplesPages(input *devicefarm.ListSamplesInput, fn func(*devicefarm.ListSamplesOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListSamplesOutput, lastPage bool) bool {
		c.inc("ListSamples")
		return fn(page, lastPage)
	}
	return c.ListSamplesPages(input, wrappedFn)
}

// ListSamplesPagesWithContext is a passthrough to the underlying ListSamplesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListSamples when applied to the request.
func (c *DeviceFarm) ListSamplesPagesWithContext(ctx aws.Context, input *devicefarm.ListSamplesInput, fn func(*devicefarm.ListSamplesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListSamples"))
	return c.ListSamplesPagesWithContext(ctx, input, fn, opts...)
}

// ListSuitesRequest is a passthrough to the underlying ListSuitesRequest.
// It will increment the count of requests made to ListSuites.
func (c *DeviceFarm) ListSuitesRequest(input *devicefarm.ListSuitesInput) (req *request.Request, output *devicefarm.ListSuitesOutput) {
	c.inc("ListSuites")
	return c.svc.ListSuitesRequest(input)
}

// ListSuites is a passthrough to the underlying ListSuites method.
// It will increment the count of requests made to ListSuites.
func (c *DeviceFarm) ListSuites(input *devicefarm.ListSuitesInput) (*devicefarm.ListSuitesOutput, error) {
	c.inc("ListSuites")
	return c.svc.ListSuites(input)
}

// ListSuitesWithContext is a passthrough to the underlying ListSuitesWithContext method.
// It will increment the count of requests made to ListSuites.
func (c *DeviceFarm) ListSuitesWithContext(ctx aws.Context, input *devicefarm.ListSuitesInput, opts ...request.Option) (*devicefarm.ListSuitesOutput, error) {
	c.inc("ListSuites")
	return c.svc.ListSuitesWithContext(ctx, input, opts...)
}

// ListSuitesPages is a passthrough to the underlying ListSuitesPages method.
// It will increment the count of requests made to ListSuites on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListSuitesPagesWithContext to avoid this.
func (c *DeviceFarm) ListSuitesPages(input *devicefarm.ListSuitesInput, fn func(*devicefarm.ListSuitesOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListSuitesOutput, lastPage bool) bool {
		c.inc("ListSuites")
		return fn(page, lastPage)
	}
	return c.ListSuitesPages(input, wrappedFn)
}

// ListSuitesPagesWithContext is a passthrough to the underlying ListSuitesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListSuites when applied to the request.
func (c *DeviceFarm) ListSuitesPagesWithContext(ctx aws.Context, input *devicefarm.ListSuitesInput, fn func(*devicefarm.ListSuitesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListSuites"))
	return c.ListSuitesPagesWithContext(ctx, input, fn, opts...)
}

// ListTestsRequest is a passthrough to the underlying ListTestsRequest.
// It will increment the count of requests made to ListTests.
func (c *DeviceFarm) ListTestsRequest(input *devicefarm.ListTestsInput) (req *request.Request, output *devicefarm.ListTestsOutput) {
	c.inc("ListTests")
	return c.svc.ListTestsRequest(input)
}

// ListTests is a passthrough to the underlying ListTests method.
// It will increment the count of requests made to ListTests.
func (c *DeviceFarm) ListTests(input *devicefarm.ListTestsInput) (*devicefarm.ListTestsOutput, error) {
	c.inc("ListTests")
	return c.svc.ListTests(input)
}

// ListTestsWithContext is a passthrough to the underlying ListTestsWithContext method.
// It will increment the count of requests made to ListTests.
func (c *DeviceFarm) ListTestsWithContext(ctx aws.Context, input *devicefarm.ListTestsInput, opts ...request.Option) (*devicefarm.ListTestsOutput, error) {
	c.inc("ListTests")
	return c.svc.ListTestsWithContext(ctx, input, opts...)
}

// ListTestsPages is a passthrough to the underlying ListTestsPages method.
// It will increment the count of requests made to ListTests on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListTestsPagesWithContext to avoid this.
func (c *DeviceFarm) ListTestsPages(input *devicefarm.ListTestsInput, fn func(*devicefarm.ListTestsOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListTestsOutput, lastPage bool) bool {
		c.inc("ListTests")
		return fn(page, lastPage)
	}
	return c.ListTestsPages(input, wrappedFn)
}

// ListTestsPagesWithContext is a passthrough to the underlying ListTestsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListTests when applied to the request.
func (c *DeviceFarm) ListTestsPagesWithContext(ctx aws.Context, input *devicefarm.ListTestsInput, fn func(*devicefarm.ListTestsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListTests"))
	return c.ListTestsPagesWithContext(ctx, input, fn, opts...)
}

// ListUniqueProblemsRequest is a passthrough to the underlying ListUniqueProblemsRequest.
// It will increment the count of requests made to ListUniqueProblems.
func (c *DeviceFarm) ListUniqueProblemsRequest(input *devicefarm.ListUniqueProblemsInput) (req *request.Request, output *devicefarm.ListUniqueProblemsOutput) {
	c.inc("ListUniqueProblems")
	return c.svc.ListUniqueProblemsRequest(input)
}

// ListUniqueProblems is a passthrough to the underlying ListUniqueProblems method.
// It will increment the count of requests made to ListUniqueProblems.
func (c *DeviceFarm) ListUniqueProblems(input *devicefarm.ListUniqueProblemsInput) (*devicefarm.ListUniqueProblemsOutput, error) {
	c.inc("ListUniqueProblems")
	return c.svc.ListUniqueProblems(input)
}

// ListUniqueProblemsWithContext is a passthrough to the underlying ListUniqueProblemsWithContext method.
// It will increment the count of requests made to ListUniqueProblems.
func (c *DeviceFarm) ListUniqueProblemsWithContext(ctx aws.Context, input *devicefarm.ListUniqueProblemsInput, opts ...request.Option) (*devicefarm.ListUniqueProblemsOutput, error) {
	c.inc("ListUniqueProblems")
	return c.svc.ListUniqueProblemsWithContext(ctx, input, opts...)
}

// ListUniqueProblemsPages is a passthrough to the underlying ListUniqueProblemsPages method.
// It will increment the count of requests made to ListUniqueProblems on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListUniqueProblemsPagesWithContext to avoid this.
func (c *DeviceFarm) ListUniqueProblemsPages(input *devicefarm.ListUniqueProblemsInput, fn func(*devicefarm.ListUniqueProblemsOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListUniqueProblemsOutput, lastPage bool) bool {
		c.inc("ListUniqueProblems")
		return fn(page, lastPage)
	}
	return c.ListUniqueProblemsPages(input, wrappedFn)
}

// ListUniqueProblemsPagesWithContext is a passthrough to the underlying ListUniqueProblemsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListUniqueProblems when applied to the request.
func (c *DeviceFarm) ListUniqueProblemsPagesWithContext(ctx aws.Context, input *devicefarm.ListUniqueProblemsInput, fn func(*devicefarm.ListUniqueProblemsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListUniqueProblems"))
	return c.ListUniqueProblemsPagesWithContext(ctx, input, fn, opts...)
}

// ListUploadsRequest is a passthrough to the underlying ListUploadsRequest.
// It will increment the count of requests made to ListUploads.
func (c *DeviceFarm) ListUploadsRequest(input *devicefarm.ListUploadsInput) (req *request.Request, output *devicefarm.ListUploadsOutput) {
	c.inc("ListUploads")
	return c.svc.ListUploadsRequest(input)
}

// ListUploads is a passthrough to the underlying ListUploads method.
// It will increment the count of requests made to ListUploads.
func (c *DeviceFarm) ListUploads(input *devicefarm.ListUploadsInput) (*devicefarm.ListUploadsOutput, error) {
	c.inc("ListUploads")
	return c.svc.ListUploads(input)
}

// ListUploadsWithContext is a passthrough to the underlying ListUploadsWithContext method.
// It will increment the count of requests made to ListUploads.
func (c *DeviceFarm) ListUploadsWithContext(ctx aws.Context, input *devicefarm.ListUploadsInput, opts ...request.Option) (*devicefarm.ListUploadsOutput, error) {
	c.inc("ListUploads")
	return c.svc.ListUploadsWithContext(ctx, input, opts...)
}

// ListUploadsPages is a passthrough to the underlying ListUploadsPages method.
// It will increment the count of requests made to ListUploads on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListUploadsPagesWithContext to avoid this.
func (c *DeviceFarm) ListUploadsPages(input *devicefarm.ListUploadsInput, fn func(*devicefarm.ListUploadsOutput, bool) bool) error {
	wrappedFn := func(page *devicefarm.ListUploadsOutput, lastPage bool) bool {
		c.inc("ListUploads")
		return fn(page, lastPage)
	}
	return c.ListUploadsPages(input, wrappedFn)
}

// ListUploadsPagesWithContext is a passthrough to the underlying ListUploadsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListUploads when applied to the request.
func (c *DeviceFarm) ListUploadsPagesWithContext(ctx aws.Context, input *devicefarm.ListUploadsInput, fn func(*devicefarm.ListUploadsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListUploads"))
	return c.ListUploadsPagesWithContext(ctx, input, fn, opts...)
}

// PurchaseOfferingRequest is a passthrough to the underlying PurchaseOfferingRequest.
// It will increment the count of requests made to PurchaseOffering.
func (c *DeviceFarm) PurchaseOfferingRequest(input *devicefarm.PurchaseOfferingInput) (req *request.Request, output *devicefarm.PurchaseOfferingOutput) {
	c.inc("PurchaseOffering")
	return c.svc.PurchaseOfferingRequest(input)
}

// PurchaseOffering is a passthrough to the underlying PurchaseOffering method.
// It will increment the count of requests made to PurchaseOffering.
func (c *DeviceFarm) PurchaseOffering(input *devicefarm.PurchaseOfferingInput) (*devicefarm.PurchaseOfferingOutput, error) {
	c.inc("PurchaseOffering")
	return c.svc.PurchaseOffering(input)
}

// PurchaseOfferingWithContext is a passthrough to the underlying PurchaseOfferingWithContext method.
// It will increment the count of requests made to PurchaseOffering.
func (c *DeviceFarm) PurchaseOfferingWithContext(ctx aws.Context, input *devicefarm.PurchaseOfferingInput, opts ...request.Option) (*devicefarm.PurchaseOfferingOutput, error) {
	c.inc("PurchaseOffering")
	return c.svc.PurchaseOfferingWithContext(ctx, input, opts...)
}

// RenewOfferingRequest is a passthrough to the underlying RenewOfferingRequest.
// It will increment the count of requests made to RenewOffering.
func (c *DeviceFarm) RenewOfferingRequest(input *devicefarm.RenewOfferingInput) (req *request.Request, output *devicefarm.RenewOfferingOutput) {
	c.inc("RenewOffering")
	return c.svc.RenewOfferingRequest(input)
}

// RenewOffering is a passthrough to the underlying RenewOffering method.
// It will increment the count of requests made to RenewOffering.
func (c *DeviceFarm) RenewOffering(input *devicefarm.RenewOfferingInput) (*devicefarm.RenewOfferingOutput, error) {
	c.inc("RenewOffering")
	return c.svc.RenewOffering(input)
}

// RenewOfferingWithContext is a passthrough to the underlying RenewOfferingWithContext method.
// It will increment the count of requests made to RenewOffering.
func (c *DeviceFarm) RenewOfferingWithContext(ctx aws.Context, input *devicefarm.RenewOfferingInput, opts ...request.Option) (*devicefarm.RenewOfferingOutput, error) {
	c.inc("RenewOffering")
	return c.svc.RenewOfferingWithContext(ctx, input, opts...)
}

// ScheduleRunRequest is a passthrough to the underlying ScheduleRunRequest.
// It will increment the count of requests made to ScheduleRun.
func (c *DeviceFarm) ScheduleRunRequest(input *devicefarm.ScheduleRunInput) (req *request.Request, output *devicefarm.ScheduleRunOutput) {
	c.inc("ScheduleRun")
	return c.svc.ScheduleRunRequest(input)
}

// ScheduleRun is a passthrough to the underlying ScheduleRun method.
// It will increment the count of requests made to ScheduleRun.
func (c *DeviceFarm) ScheduleRun(input *devicefarm.ScheduleRunInput) (*devicefarm.ScheduleRunOutput, error) {
	c.inc("ScheduleRun")
	return c.svc.ScheduleRun(input)
}

// ScheduleRunWithContext is a passthrough to the underlying ScheduleRunWithContext method.
// It will increment the count of requests made to ScheduleRun.
func (c *DeviceFarm) ScheduleRunWithContext(ctx aws.Context, input *devicefarm.ScheduleRunInput, opts ...request.Option) (*devicefarm.ScheduleRunOutput, error) {
	c.inc("ScheduleRun")
	return c.svc.ScheduleRunWithContext(ctx, input, opts...)
}

// StopRemoteAccessSessionRequest is a passthrough to the underlying StopRemoteAccessSessionRequest.
// It will increment the count of requests made to StopRemoteAccessSession.
func (c *DeviceFarm) StopRemoteAccessSessionRequest(input *devicefarm.StopRemoteAccessSessionInput) (req *request.Request, output *devicefarm.StopRemoteAccessSessionOutput) {
	c.inc("StopRemoteAccessSession")
	return c.svc.StopRemoteAccessSessionRequest(input)
}

// StopRemoteAccessSession is a passthrough to the underlying StopRemoteAccessSession method.
// It will increment the count of requests made to StopRemoteAccessSession.
func (c *DeviceFarm) StopRemoteAccessSession(input *devicefarm.StopRemoteAccessSessionInput) (*devicefarm.StopRemoteAccessSessionOutput, error) {
	c.inc("StopRemoteAccessSession")
	return c.svc.StopRemoteAccessSession(input)
}

// StopRemoteAccessSessionWithContext is a passthrough to the underlying StopRemoteAccessSessionWithContext method.
// It will increment the count of requests made to StopRemoteAccessSession.
func (c *DeviceFarm) StopRemoteAccessSessionWithContext(ctx aws.Context, input *devicefarm.StopRemoteAccessSessionInput, opts ...request.Option) (*devicefarm.StopRemoteAccessSessionOutput, error) {
	c.inc("StopRemoteAccessSession")
	return c.svc.StopRemoteAccessSessionWithContext(ctx, input, opts...)
}

// StopRunRequest is a passthrough to the underlying StopRunRequest.
// It will increment the count of requests made to StopRun.
func (c *DeviceFarm) StopRunRequest(input *devicefarm.StopRunInput) (req *request.Request, output *devicefarm.StopRunOutput) {
	c.inc("StopRun")
	return c.svc.StopRunRequest(input)
}

// StopRun is a passthrough to the underlying StopRun method.
// It will increment the count of requests made to StopRun.
func (c *DeviceFarm) StopRun(input *devicefarm.StopRunInput) (*devicefarm.StopRunOutput, error) {
	c.inc("StopRun")
	return c.svc.StopRun(input)
}

// StopRunWithContext is a passthrough to the underlying StopRunWithContext method.
// It will increment the count of requests made to StopRun.
func (c *DeviceFarm) StopRunWithContext(ctx aws.Context, input *devicefarm.StopRunInput, opts ...request.Option) (*devicefarm.StopRunOutput, error) {
	c.inc("StopRun")
	return c.svc.StopRunWithContext(ctx, input, opts...)
}

// UpdateDevicePoolRequest is a passthrough to the underlying UpdateDevicePoolRequest.
// It will increment the count of requests made to UpdateDevicePool.
func (c *DeviceFarm) UpdateDevicePoolRequest(input *devicefarm.UpdateDevicePoolInput) (req *request.Request, output *devicefarm.UpdateDevicePoolOutput) {
	c.inc("UpdateDevicePool")
	return c.svc.UpdateDevicePoolRequest(input)
}

// UpdateDevicePool is a passthrough to the underlying UpdateDevicePool method.
// It will increment the count of requests made to UpdateDevicePool.
func (c *DeviceFarm) UpdateDevicePool(input *devicefarm.UpdateDevicePoolInput) (*devicefarm.UpdateDevicePoolOutput, error) {
	c.inc("UpdateDevicePool")
	return c.svc.UpdateDevicePool(input)
}

// UpdateDevicePoolWithContext is a passthrough to the underlying UpdateDevicePoolWithContext method.
// It will increment the count of requests made to UpdateDevicePool.
func (c *DeviceFarm) UpdateDevicePoolWithContext(ctx aws.Context, input *devicefarm.UpdateDevicePoolInput, opts ...request.Option) (*devicefarm.UpdateDevicePoolOutput, error) {
	c.inc("UpdateDevicePool")
	return c.svc.UpdateDevicePoolWithContext(ctx, input, opts...)
}

// UpdateNetworkProfileRequest is a passthrough to the underlying UpdateNetworkProfileRequest.
// It will increment the count of requests made to UpdateNetworkProfile.
func (c *DeviceFarm) UpdateNetworkProfileRequest(input *devicefarm.UpdateNetworkProfileInput) (req *request.Request, output *devicefarm.UpdateNetworkProfileOutput) {
	c.inc("UpdateNetworkProfile")
	return c.svc.UpdateNetworkProfileRequest(input)
}

// UpdateNetworkProfile is a passthrough to the underlying UpdateNetworkProfile method.
// It will increment the count of requests made to UpdateNetworkProfile.
func (c *DeviceFarm) UpdateNetworkProfile(input *devicefarm.UpdateNetworkProfileInput) (*devicefarm.UpdateNetworkProfileOutput, error) {
	c.inc("UpdateNetworkProfile")
	return c.svc.UpdateNetworkProfile(input)
}

// UpdateNetworkProfileWithContext is a passthrough to the underlying UpdateNetworkProfileWithContext method.
// It will increment the count of requests made to UpdateNetworkProfile.
func (c *DeviceFarm) UpdateNetworkProfileWithContext(ctx aws.Context, input *devicefarm.UpdateNetworkProfileInput, opts ...request.Option) (*devicefarm.UpdateNetworkProfileOutput, error) {
	c.inc("UpdateNetworkProfile")
	return c.svc.UpdateNetworkProfileWithContext(ctx, input, opts...)
}

// UpdateProjectRequest is a passthrough to the underlying UpdateProjectRequest.
// It will increment the count of requests made to UpdateProject.
func (c *DeviceFarm) UpdateProjectRequest(input *devicefarm.UpdateProjectInput) (req *request.Request, output *devicefarm.UpdateProjectOutput) {
	c.inc("UpdateProject")
	return c.svc.UpdateProjectRequest(input)
}

// UpdateProject is a passthrough to the underlying UpdateProject method.
// It will increment the count of requests made to UpdateProject.
func (c *DeviceFarm) UpdateProject(input *devicefarm.UpdateProjectInput) (*devicefarm.UpdateProjectOutput, error) {
	c.inc("UpdateProject")
	return c.svc.UpdateProject(input)
}

// UpdateProjectWithContext is a passthrough to the underlying UpdateProjectWithContext method.
// It will increment the count of requests made to UpdateProject.
func (c *DeviceFarm) UpdateProjectWithContext(ctx aws.Context, input *devicefarm.UpdateProjectInput, opts ...request.Option) (*devicefarm.UpdateProjectOutput, error) {
	c.inc("UpdateProject")
	return c.svc.UpdateProjectWithContext(ctx, input, opts...)
}
