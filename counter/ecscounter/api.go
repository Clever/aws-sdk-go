// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecscounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ecs"
)

// CreateClusterRequest is a passthrough to the underlying CreateClusterRequest.
// It will increment the count of requests made to CreateCluster.
func (c *ECS) CreateClusterRequest(input *ecs.CreateClusterInput) (req *request.Request, output *ecs.CreateClusterOutput) {
	c.inc("CreateCluster")
	return c.svc.CreateClusterRequest(input)
}

// CreateCluster is a passthrough to the underlying CreateCluster method.
// It will increment the count of requests made to CreateCluster.
func (c *ECS) CreateCluster(input *ecs.CreateClusterInput) (*ecs.CreateClusterOutput, error) {
	c.inc("CreateCluster")
	return c.svc.CreateCluster(input)
}

// CreateClusterWithContext is a passthrough to the underlying CreateClusterWithContext method.
// It will increment the count of requests made to CreateCluster.
func (c *ECS) CreateClusterWithContext(ctx aws.Context, input *ecs.CreateClusterInput, opts ...request.Option) (*ecs.CreateClusterOutput, error) {
	c.inc("CreateCluster")
	return c.svc.CreateClusterWithContext(ctx, input, opts...)
}

// CreateServiceRequest is a passthrough to the underlying CreateServiceRequest.
// It will increment the count of requests made to CreateService.
func (c *ECS) CreateServiceRequest(input *ecs.CreateServiceInput) (req *request.Request, output *ecs.CreateServiceOutput) {
	c.inc("CreateService")
	return c.svc.CreateServiceRequest(input)
}

// CreateService is a passthrough to the underlying CreateService method.
// It will increment the count of requests made to CreateService.
func (c *ECS) CreateService(input *ecs.CreateServiceInput) (*ecs.CreateServiceOutput, error) {
	c.inc("CreateService")
	return c.svc.CreateService(input)
}

// CreateServiceWithContext is a passthrough to the underlying CreateServiceWithContext method.
// It will increment the count of requests made to CreateService.
func (c *ECS) CreateServiceWithContext(ctx aws.Context, input *ecs.CreateServiceInput, opts ...request.Option) (*ecs.CreateServiceOutput, error) {
	c.inc("CreateService")
	return c.svc.CreateServiceWithContext(ctx, input, opts...)
}

// DeleteAttributesRequest is a passthrough to the underlying DeleteAttributesRequest.
// It will increment the count of requests made to DeleteAttributes.
func (c *ECS) DeleteAttributesRequest(input *ecs.DeleteAttributesInput) (req *request.Request, output *ecs.DeleteAttributesOutput) {
	c.inc("DeleteAttributes")
	return c.svc.DeleteAttributesRequest(input)
}

// DeleteAttributes is a passthrough to the underlying DeleteAttributes method.
// It will increment the count of requests made to DeleteAttributes.
func (c *ECS) DeleteAttributes(input *ecs.DeleteAttributesInput) (*ecs.DeleteAttributesOutput, error) {
	c.inc("DeleteAttributes")
	return c.svc.DeleteAttributes(input)
}

// DeleteAttributesWithContext is a passthrough to the underlying DeleteAttributesWithContext method.
// It will increment the count of requests made to DeleteAttributes.
func (c *ECS) DeleteAttributesWithContext(ctx aws.Context, input *ecs.DeleteAttributesInput, opts ...request.Option) (*ecs.DeleteAttributesOutput, error) {
	c.inc("DeleteAttributes")
	return c.svc.DeleteAttributesWithContext(ctx, input, opts...)
}

// DeleteClusterRequest is a passthrough to the underlying DeleteClusterRequest.
// It will increment the count of requests made to DeleteCluster.
func (c *ECS) DeleteClusterRequest(input *ecs.DeleteClusterInput) (req *request.Request, output *ecs.DeleteClusterOutput) {
	c.inc("DeleteCluster")
	return c.svc.DeleteClusterRequest(input)
}

// DeleteCluster is a passthrough to the underlying DeleteCluster method.
// It will increment the count of requests made to DeleteCluster.
func (c *ECS) DeleteCluster(input *ecs.DeleteClusterInput) (*ecs.DeleteClusterOutput, error) {
	c.inc("DeleteCluster")
	return c.svc.DeleteCluster(input)
}

// DeleteClusterWithContext is a passthrough to the underlying DeleteClusterWithContext method.
// It will increment the count of requests made to DeleteCluster.
func (c *ECS) DeleteClusterWithContext(ctx aws.Context, input *ecs.DeleteClusterInput, opts ...request.Option) (*ecs.DeleteClusterOutput, error) {
	c.inc("DeleteCluster")
	return c.svc.DeleteClusterWithContext(ctx, input, opts...)
}

// DeleteServiceRequest is a passthrough to the underlying DeleteServiceRequest.
// It will increment the count of requests made to DeleteService.
func (c *ECS) DeleteServiceRequest(input *ecs.DeleteServiceInput) (req *request.Request, output *ecs.DeleteServiceOutput) {
	c.inc("DeleteService")
	return c.svc.DeleteServiceRequest(input)
}

// DeleteService is a passthrough to the underlying DeleteService method.
// It will increment the count of requests made to DeleteService.
func (c *ECS) DeleteService(input *ecs.DeleteServiceInput) (*ecs.DeleteServiceOutput, error) {
	c.inc("DeleteService")
	return c.svc.DeleteService(input)
}

// DeleteServiceWithContext is a passthrough to the underlying DeleteServiceWithContext method.
// It will increment the count of requests made to DeleteService.
func (c *ECS) DeleteServiceWithContext(ctx aws.Context, input *ecs.DeleteServiceInput, opts ...request.Option) (*ecs.DeleteServiceOutput, error) {
	c.inc("DeleteService")
	return c.svc.DeleteServiceWithContext(ctx, input, opts...)
}

// DeregisterContainerInstanceRequest is a passthrough to the underlying DeregisterContainerInstanceRequest.
// It will increment the count of requests made to DeregisterContainerInstance.
func (c *ECS) DeregisterContainerInstanceRequest(input *ecs.DeregisterContainerInstanceInput) (req *request.Request, output *ecs.DeregisterContainerInstanceOutput) {
	c.inc("DeregisterContainerInstance")
	return c.svc.DeregisterContainerInstanceRequest(input)
}

// DeregisterContainerInstance is a passthrough to the underlying DeregisterContainerInstance method.
// It will increment the count of requests made to DeregisterContainerInstance.
func (c *ECS) DeregisterContainerInstance(input *ecs.DeregisterContainerInstanceInput) (*ecs.DeregisterContainerInstanceOutput, error) {
	c.inc("DeregisterContainerInstance")
	return c.svc.DeregisterContainerInstance(input)
}

// DeregisterContainerInstanceWithContext is a passthrough to the underlying DeregisterContainerInstanceWithContext method.
// It will increment the count of requests made to DeregisterContainerInstance.
func (c *ECS) DeregisterContainerInstanceWithContext(ctx aws.Context, input *ecs.DeregisterContainerInstanceInput, opts ...request.Option) (*ecs.DeregisterContainerInstanceOutput, error) {
	c.inc("DeregisterContainerInstance")
	return c.svc.DeregisterContainerInstanceWithContext(ctx, input, opts...)
}

// DeregisterTaskDefinitionRequest is a passthrough to the underlying DeregisterTaskDefinitionRequest.
// It will increment the count of requests made to DeregisterTaskDefinition.
func (c *ECS) DeregisterTaskDefinitionRequest(input *ecs.DeregisterTaskDefinitionInput) (req *request.Request, output *ecs.DeregisterTaskDefinitionOutput) {
	c.inc("DeregisterTaskDefinition")
	return c.svc.DeregisterTaskDefinitionRequest(input)
}

// DeregisterTaskDefinition is a passthrough to the underlying DeregisterTaskDefinition method.
// It will increment the count of requests made to DeregisterTaskDefinition.
func (c *ECS) DeregisterTaskDefinition(input *ecs.DeregisterTaskDefinitionInput) (*ecs.DeregisterTaskDefinitionOutput, error) {
	c.inc("DeregisterTaskDefinition")
	return c.svc.DeregisterTaskDefinition(input)
}

// DeregisterTaskDefinitionWithContext is a passthrough to the underlying DeregisterTaskDefinitionWithContext method.
// It will increment the count of requests made to DeregisterTaskDefinition.
func (c *ECS) DeregisterTaskDefinitionWithContext(ctx aws.Context, input *ecs.DeregisterTaskDefinitionInput, opts ...request.Option) (*ecs.DeregisterTaskDefinitionOutput, error) {
	c.inc("DeregisterTaskDefinition")
	return c.svc.DeregisterTaskDefinitionWithContext(ctx, input, opts...)
}

// DescribeClustersRequest is a passthrough to the underlying DescribeClustersRequest.
// It will increment the count of requests made to DescribeClusters.
func (c *ECS) DescribeClustersRequest(input *ecs.DescribeClustersInput) (req *request.Request, output *ecs.DescribeClustersOutput) {
	c.inc("DescribeClusters")
	return c.svc.DescribeClustersRequest(input)
}

// DescribeClusters is a passthrough to the underlying DescribeClusters method.
// It will increment the count of requests made to DescribeClusters.
func (c *ECS) DescribeClusters(input *ecs.DescribeClustersInput) (*ecs.DescribeClustersOutput, error) {
	c.inc("DescribeClusters")
	return c.svc.DescribeClusters(input)
}

// DescribeClustersWithContext is a passthrough to the underlying DescribeClustersWithContext method.
// It will increment the count of requests made to DescribeClusters.
func (c *ECS) DescribeClustersWithContext(ctx aws.Context, input *ecs.DescribeClustersInput, opts ...request.Option) (*ecs.DescribeClustersOutput, error) {
	c.inc("DescribeClusters")
	return c.svc.DescribeClustersWithContext(ctx, input, opts...)
}

// DescribeContainerInstancesRequest is a passthrough to the underlying DescribeContainerInstancesRequest.
// It will increment the count of requests made to DescribeContainerInstances.
func (c *ECS) DescribeContainerInstancesRequest(input *ecs.DescribeContainerInstancesInput) (req *request.Request, output *ecs.DescribeContainerInstancesOutput) {
	c.inc("DescribeContainerInstances")
	return c.svc.DescribeContainerInstancesRequest(input)
}

// DescribeContainerInstances is a passthrough to the underlying DescribeContainerInstances method.
// It will increment the count of requests made to DescribeContainerInstances.
func (c *ECS) DescribeContainerInstances(input *ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error) {
	c.inc("DescribeContainerInstances")
	return c.svc.DescribeContainerInstances(input)
}

// DescribeContainerInstancesWithContext is a passthrough to the underlying DescribeContainerInstancesWithContext method.
// It will increment the count of requests made to DescribeContainerInstances.
func (c *ECS) DescribeContainerInstancesWithContext(ctx aws.Context, input *ecs.DescribeContainerInstancesInput, opts ...request.Option) (*ecs.DescribeContainerInstancesOutput, error) {
	c.inc("DescribeContainerInstances")
	return c.svc.DescribeContainerInstancesWithContext(ctx, input, opts...)
}

// DescribeServicesRequest is a passthrough to the underlying DescribeServicesRequest.
// It will increment the count of requests made to DescribeServices.
func (c *ECS) DescribeServicesRequest(input *ecs.DescribeServicesInput) (req *request.Request, output *ecs.DescribeServicesOutput) {
	c.inc("DescribeServices")
	return c.svc.DescribeServicesRequest(input)
}

// DescribeServices is a passthrough to the underlying DescribeServices method.
// It will increment the count of requests made to DescribeServices.
func (c *ECS) DescribeServices(input *ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error) {
	c.inc("DescribeServices")
	return c.svc.DescribeServices(input)
}

// DescribeServicesWithContext is a passthrough to the underlying DescribeServicesWithContext method.
// It will increment the count of requests made to DescribeServices.
func (c *ECS) DescribeServicesWithContext(ctx aws.Context, input *ecs.DescribeServicesInput, opts ...request.Option) (*ecs.DescribeServicesOutput, error) {
	c.inc("DescribeServices")
	return c.svc.DescribeServicesWithContext(ctx, input, opts...)
}

// DescribeTaskDefinitionRequest is a passthrough to the underlying DescribeTaskDefinitionRequest.
// It will increment the count of requests made to DescribeTaskDefinition.
func (c *ECS) DescribeTaskDefinitionRequest(input *ecs.DescribeTaskDefinitionInput) (req *request.Request, output *ecs.DescribeTaskDefinitionOutput) {
	c.inc("DescribeTaskDefinition")
	return c.svc.DescribeTaskDefinitionRequest(input)
}

// DescribeTaskDefinition is a passthrough to the underlying DescribeTaskDefinition method.
// It will increment the count of requests made to DescribeTaskDefinition.
func (c *ECS) DescribeTaskDefinition(input *ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error) {
	c.inc("DescribeTaskDefinition")
	return c.svc.DescribeTaskDefinition(input)
}

// DescribeTaskDefinitionWithContext is a passthrough to the underlying DescribeTaskDefinitionWithContext method.
// It will increment the count of requests made to DescribeTaskDefinition.
func (c *ECS) DescribeTaskDefinitionWithContext(ctx aws.Context, input *ecs.DescribeTaskDefinitionInput, opts ...request.Option) (*ecs.DescribeTaskDefinitionOutput, error) {
	c.inc("DescribeTaskDefinition")
	return c.svc.DescribeTaskDefinitionWithContext(ctx, input, opts...)
}

// DescribeTasksRequest is a passthrough to the underlying DescribeTasksRequest.
// It will increment the count of requests made to DescribeTasks.
func (c *ECS) DescribeTasksRequest(input *ecs.DescribeTasksInput) (req *request.Request, output *ecs.DescribeTasksOutput) {
	c.inc("DescribeTasks")
	return c.svc.DescribeTasksRequest(input)
}

// DescribeTasks is a passthrough to the underlying DescribeTasks method.
// It will increment the count of requests made to DescribeTasks.
func (c *ECS) DescribeTasks(input *ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error) {
	c.inc("DescribeTasks")
	return c.svc.DescribeTasks(input)
}

// DescribeTasksWithContext is a passthrough to the underlying DescribeTasksWithContext method.
// It will increment the count of requests made to DescribeTasks.
func (c *ECS) DescribeTasksWithContext(ctx aws.Context, input *ecs.DescribeTasksInput, opts ...request.Option) (*ecs.DescribeTasksOutput, error) {
	c.inc("DescribeTasks")
	return c.svc.DescribeTasksWithContext(ctx, input, opts...)
}

// DiscoverPollEndpointRequest is a passthrough to the underlying DiscoverPollEndpointRequest.
// It will increment the count of requests made to DiscoverPollEndpoint.
func (c *ECS) DiscoverPollEndpointRequest(input *ecs.DiscoverPollEndpointInput) (req *request.Request, output *ecs.DiscoverPollEndpointOutput) {
	c.inc("DiscoverPollEndpoint")
	return c.svc.DiscoverPollEndpointRequest(input)
}

// DiscoverPollEndpoint is a passthrough to the underlying DiscoverPollEndpoint method.
// It will increment the count of requests made to DiscoverPollEndpoint.
func (c *ECS) DiscoverPollEndpoint(input *ecs.DiscoverPollEndpointInput) (*ecs.DiscoverPollEndpointOutput, error) {
	c.inc("DiscoverPollEndpoint")
	return c.svc.DiscoverPollEndpoint(input)
}

// DiscoverPollEndpointWithContext is a passthrough to the underlying DiscoverPollEndpointWithContext method.
// It will increment the count of requests made to DiscoverPollEndpoint.
func (c *ECS) DiscoverPollEndpointWithContext(ctx aws.Context, input *ecs.DiscoverPollEndpointInput, opts ...request.Option) (*ecs.DiscoverPollEndpointOutput, error) {
	c.inc("DiscoverPollEndpoint")
	return c.svc.DiscoverPollEndpointWithContext(ctx, input, opts...)
}

// ListAttributesRequest is a passthrough to the underlying ListAttributesRequest.
// It will increment the count of requests made to ListAttributes.
func (c *ECS) ListAttributesRequest(input *ecs.ListAttributesInput) (req *request.Request, output *ecs.ListAttributesOutput) {
	c.inc("ListAttributes")
	return c.svc.ListAttributesRequest(input)
}

// ListAttributes is a passthrough to the underlying ListAttributes method.
// It will increment the count of requests made to ListAttributes.
func (c *ECS) ListAttributes(input *ecs.ListAttributesInput) (*ecs.ListAttributesOutput, error) {
	c.inc("ListAttributes")
	return c.svc.ListAttributes(input)
}

// ListAttributesWithContext is a passthrough to the underlying ListAttributesWithContext method.
// It will increment the count of requests made to ListAttributes.
func (c *ECS) ListAttributesWithContext(ctx aws.Context, input *ecs.ListAttributesInput, opts ...request.Option) (*ecs.ListAttributesOutput, error) {
	c.inc("ListAttributes")
	return c.svc.ListAttributesWithContext(ctx, input, opts...)
}

// ListClustersRequest is a passthrough to the underlying ListClustersRequest.
// It will increment the count of requests made to ListClusters.
func (c *ECS) ListClustersRequest(input *ecs.ListClustersInput) (req *request.Request, output *ecs.ListClustersOutput) {
	c.inc("ListClusters")
	return c.svc.ListClustersRequest(input)
}

// ListClusters is a passthrough to the underlying ListClusters method.
// It will increment the count of requests made to ListClusters.
func (c *ECS) ListClusters(input *ecs.ListClustersInput) (*ecs.ListClustersOutput, error) {
	c.inc("ListClusters")
	return c.svc.ListClusters(input)
}

// ListClustersWithContext is a passthrough to the underlying ListClustersWithContext method.
// It will increment the count of requests made to ListClusters.
func (c *ECS) ListClustersWithContext(ctx aws.Context, input *ecs.ListClustersInput, opts ...request.Option) (*ecs.ListClustersOutput, error) {
	c.inc("ListClusters")
	return c.svc.ListClustersWithContext(ctx, input, opts...)
}

// ListClustersPages is a passthrough to the underlying ListClustersPages method.
// It will increment the count of requests made to ListClusters on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListClustersPagesWithContext to avoid this.
func (c *ECS) ListClustersPages(input *ecs.ListClustersInput, fn func(*ecs.ListClustersOutput, bool) bool) error {
	wrappedFn := func(page *ecs.ListClustersOutput, lastPage bool) bool {
		c.inc("ListClusters")
		return fn(page, lastPage)
	}
	return c.ListClustersPages(input, wrappedFn)
}

// ListClustersPagesWithContext is a passthrough to the underlying ListClustersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListClusters when applied to the request.
func (c *ECS) ListClustersPagesWithContext(ctx aws.Context, input *ecs.ListClustersInput, fn func(*ecs.ListClustersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListClusters"))
	return c.ListClustersPagesWithContext(ctx, input, fn, opts...)
}

// ListContainerInstancesRequest is a passthrough to the underlying ListContainerInstancesRequest.
// It will increment the count of requests made to ListContainerInstances.
func (c *ECS) ListContainerInstancesRequest(input *ecs.ListContainerInstancesInput) (req *request.Request, output *ecs.ListContainerInstancesOutput) {
	c.inc("ListContainerInstances")
	return c.svc.ListContainerInstancesRequest(input)
}

// ListContainerInstances is a passthrough to the underlying ListContainerInstances method.
// It will increment the count of requests made to ListContainerInstances.
func (c *ECS) ListContainerInstances(input *ecs.ListContainerInstancesInput) (*ecs.ListContainerInstancesOutput, error) {
	c.inc("ListContainerInstances")
	return c.svc.ListContainerInstances(input)
}

// ListContainerInstancesWithContext is a passthrough to the underlying ListContainerInstancesWithContext method.
// It will increment the count of requests made to ListContainerInstances.
func (c *ECS) ListContainerInstancesWithContext(ctx aws.Context, input *ecs.ListContainerInstancesInput, opts ...request.Option) (*ecs.ListContainerInstancesOutput, error) {
	c.inc("ListContainerInstances")
	return c.svc.ListContainerInstancesWithContext(ctx, input, opts...)
}

// ListContainerInstancesPages is a passthrough to the underlying ListContainerInstancesPages method.
// It will increment the count of requests made to ListContainerInstances on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListContainerInstancesPagesWithContext to avoid this.
func (c *ECS) ListContainerInstancesPages(input *ecs.ListContainerInstancesInput, fn func(*ecs.ListContainerInstancesOutput, bool) bool) error {
	wrappedFn := func(page *ecs.ListContainerInstancesOutput, lastPage bool) bool {
		c.inc("ListContainerInstances")
		return fn(page, lastPage)
	}
	return c.ListContainerInstancesPages(input, wrappedFn)
}

// ListContainerInstancesPagesWithContext is a passthrough to the underlying ListContainerInstancesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListContainerInstances when applied to the request.
func (c *ECS) ListContainerInstancesPagesWithContext(ctx aws.Context, input *ecs.ListContainerInstancesInput, fn func(*ecs.ListContainerInstancesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListContainerInstances"))
	return c.ListContainerInstancesPagesWithContext(ctx, input, fn, opts...)
}

// ListServicesRequest is a passthrough to the underlying ListServicesRequest.
// It will increment the count of requests made to ListServices.
func (c *ECS) ListServicesRequest(input *ecs.ListServicesInput) (req *request.Request, output *ecs.ListServicesOutput) {
	c.inc("ListServices")
	return c.svc.ListServicesRequest(input)
}

// ListServices is a passthrough to the underlying ListServices method.
// It will increment the count of requests made to ListServices.
func (c *ECS) ListServices(input *ecs.ListServicesInput) (*ecs.ListServicesOutput, error) {
	c.inc("ListServices")
	return c.svc.ListServices(input)
}

// ListServicesWithContext is a passthrough to the underlying ListServicesWithContext method.
// It will increment the count of requests made to ListServices.
func (c *ECS) ListServicesWithContext(ctx aws.Context, input *ecs.ListServicesInput, opts ...request.Option) (*ecs.ListServicesOutput, error) {
	c.inc("ListServices")
	return c.svc.ListServicesWithContext(ctx, input, opts...)
}

// ListServicesPages is a passthrough to the underlying ListServicesPages method.
// It will increment the count of requests made to ListServices on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListServicesPagesWithContext to avoid this.
func (c *ECS) ListServicesPages(input *ecs.ListServicesInput, fn func(*ecs.ListServicesOutput, bool) bool) error {
	wrappedFn := func(page *ecs.ListServicesOutput, lastPage bool) bool {
		c.inc("ListServices")
		return fn(page, lastPage)
	}
	return c.ListServicesPages(input, wrappedFn)
}

// ListServicesPagesWithContext is a passthrough to the underlying ListServicesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListServices when applied to the request.
func (c *ECS) ListServicesPagesWithContext(ctx aws.Context, input *ecs.ListServicesInput, fn func(*ecs.ListServicesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListServices"))
	return c.ListServicesPagesWithContext(ctx, input, fn, opts...)
}

// ListTaskDefinitionFamiliesRequest is a passthrough to the underlying ListTaskDefinitionFamiliesRequest.
// It will increment the count of requests made to ListTaskDefinitionFamilies.
func (c *ECS) ListTaskDefinitionFamiliesRequest(input *ecs.ListTaskDefinitionFamiliesInput) (req *request.Request, output *ecs.ListTaskDefinitionFamiliesOutput) {
	c.inc("ListTaskDefinitionFamilies")
	return c.svc.ListTaskDefinitionFamiliesRequest(input)
}

// ListTaskDefinitionFamilies is a passthrough to the underlying ListTaskDefinitionFamilies method.
// It will increment the count of requests made to ListTaskDefinitionFamilies.
func (c *ECS) ListTaskDefinitionFamilies(input *ecs.ListTaskDefinitionFamiliesInput) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	c.inc("ListTaskDefinitionFamilies")
	return c.svc.ListTaskDefinitionFamilies(input)
}

// ListTaskDefinitionFamiliesWithContext is a passthrough to the underlying ListTaskDefinitionFamiliesWithContext method.
// It will increment the count of requests made to ListTaskDefinitionFamilies.
func (c *ECS) ListTaskDefinitionFamiliesWithContext(ctx aws.Context, input *ecs.ListTaskDefinitionFamiliesInput, opts ...request.Option) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	c.inc("ListTaskDefinitionFamilies")
	return c.svc.ListTaskDefinitionFamiliesWithContext(ctx, input, opts...)
}

// ListTaskDefinitionFamiliesPages is a passthrough to the underlying ListTaskDefinitionFamiliesPages method.
// It will increment the count of requests made to ListTaskDefinitionFamilies on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListTaskDefinitionFamiliesPagesWithContext to avoid this.
func (c *ECS) ListTaskDefinitionFamiliesPages(input *ecs.ListTaskDefinitionFamiliesInput, fn func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool) error {
	wrappedFn := func(page *ecs.ListTaskDefinitionFamiliesOutput, lastPage bool) bool {
		c.inc("ListTaskDefinitionFamilies")
		return fn(page, lastPage)
	}
	return c.ListTaskDefinitionFamiliesPages(input, wrappedFn)
}

// ListTaskDefinitionFamiliesPagesWithContext is a passthrough to the underlying ListTaskDefinitionFamiliesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListTaskDefinitionFamilies when applied to the request.
func (c *ECS) ListTaskDefinitionFamiliesPagesWithContext(ctx aws.Context, input *ecs.ListTaskDefinitionFamiliesInput, fn func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListTaskDefinitionFamilies"))
	return c.ListTaskDefinitionFamiliesPagesWithContext(ctx, input, fn, opts...)
}

// ListTaskDefinitionsRequest is a passthrough to the underlying ListTaskDefinitionsRequest.
// It will increment the count of requests made to ListTaskDefinitions.
func (c *ECS) ListTaskDefinitionsRequest(input *ecs.ListTaskDefinitionsInput) (req *request.Request, output *ecs.ListTaskDefinitionsOutput) {
	c.inc("ListTaskDefinitions")
	return c.svc.ListTaskDefinitionsRequest(input)
}

// ListTaskDefinitions is a passthrough to the underlying ListTaskDefinitions method.
// It will increment the count of requests made to ListTaskDefinitions.
func (c *ECS) ListTaskDefinitions(input *ecs.ListTaskDefinitionsInput) (*ecs.ListTaskDefinitionsOutput, error) {
	c.inc("ListTaskDefinitions")
	return c.svc.ListTaskDefinitions(input)
}

// ListTaskDefinitionsWithContext is a passthrough to the underlying ListTaskDefinitionsWithContext method.
// It will increment the count of requests made to ListTaskDefinitions.
func (c *ECS) ListTaskDefinitionsWithContext(ctx aws.Context, input *ecs.ListTaskDefinitionsInput, opts ...request.Option) (*ecs.ListTaskDefinitionsOutput, error) {
	c.inc("ListTaskDefinitions")
	return c.svc.ListTaskDefinitionsWithContext(ctx, input, opts...)
}

// ListTaskDefinitionsPages is a passthrough to the underlying ListTaskDefinitionsPages method.
// It will increment the count of requests made to ListTaskDefinitions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListTaskDefinitionsPagesWithContext to avoid this.
func (c *ECS) ListTaskDefinitionsPages(input *ecs.ListTaskDefinitionsInput, fn func(*ecs.ListTaskDefinitionsOutput, bool) bool) error {
	wrappedFn := func(page *ecs.ListTaskDefinitionsOutput, lastPage bool) bool {
		c.inc("ListTaskDefinitions")
		return fn(page, lastPage)
	}
	return c.ListTaskDefinitionsPages(input, wrappedFn)
}

// ListTaskDefinitionsPagesWithContext is a passthrough to the underlying ListTaskDefinitionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListTaskDefinitions when applied to the request.
func (c *ECS) ListTaskDefinitionsPagesWithContext(ctx aws.Context, input *ecs.ListTaskDefinitionsInput, fn func(*ecs.ListTaskDefinitionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListTaskDefinitions"))
	return c.ListTaskDefinitionsPagesWithContext(ctx, input, fn, opts...)
}

// ListTasksRequest is a passthrough to the underlying ListTasksRequest.
// It will increment the count of requests made to ListTasks.
func (c *ECS) ListTasksRequest(input *ecs.ListTasksInput) (req *request.Request, output *ecs.ListTasksOutput) {
	c.inc("ListTasks")
	return c.svc.ListTasksRequest(input)
}

// ListTasks is a passthrough to the underlying ListTasks method.
// It will increment the count of requests made to ListTasks.
func (c *ECS) ListTasks(input *ecs.ListTasksInput) (*ecs.ListTasksOutput, error) {
	c.inc("ListTasks")
	return c.svc.ListTasks(input)
}

// ListTasksWithContext is a passthrough to the underlying ListTasksWithContext method.
// It will increment the count of requests made to ListTasks.
func (c *ECS) ListTasksWithContext(ctx aws.Context, input *ecs.ListTasksInput, opts ...request.Option) (*ecs.ListTasksOutput, error) {
	c.inc("ListTasks")
	return c.svc.ListTasksWithContext(ctx, input, opts...)
}

// ListTasksPages is a passthrough to the underlying ListTasksPages method.
// It will increment the count of requests made to ListTasks on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListTasksPagesWithContext to avoid this.
func (c *ECS) ListTasksPages(input *ecs.ListTasksInput, fn func(*ecs.ListTasksOutput, bool) bool) error {
	wrappedFn := func(page *ecs.ListTasksOutput, lastPage bool) bool {
		c.inc("ListTasks")
		return fn(page, lastPage)
	}
	return c.ListTasksPages(input, wrappedFn)
}

// ListTasksPagesWithContext is a passthrough to the underlying ListTasksPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListTasks when applied to the request.
func (c *ECS) ListTasksPagesWithContext(ctx aws.Context, input *ecs.ListTasksInput, fn func(*ecs.ListTasksOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListTasks"))
	return c.ListTasksPagesWithContext(ctx, input, fn, opts...)
}

// PutAttributesRequest is a passthrough to the underlying PutAttributesRequest.
// It will increment the count of requests made to PutAttributes.
func (c *ECS) PutAttributesRequest(input *ecs.PutAttributesInput) (req *request.Request, output *ecs.PutAttributesOutput) {
	c.inc("PutAttributes")
	return c.svc.PutAttributesRequest(input)
}

// PutAttributes is a passthrough to the underlying PutAttributes method.
// It will increment the count of requests made to PutAttributes.
func (c *ECS) PutAttributes(input *ecs.PutAttributesInput) (*ecs.PutAttributesOutput, error) {
	c.inc("PutAttributes")
	return c.svc.PutAttributes(input)
}

// PutAttributesWithContext is a passthrough to the underlying PutAttributesWithContext method.
// It will increment the count of requests made to PutAttributes.
func (c *ECS) PutAttributesWithContext(ctx aws.Context, input *ecs.PutAttributesInput, opts ...request.Option) (*ecs.PutAttributesOutput, error) {
	c.inc("PutAttributes")
	return c.svc.PutAttributesWithContext(ctx, input, opts...)
}

// RegisterContainerInstanceRequest is a passthrough to the underlying RegisterContainerInstanceRequest.
// It will increment the count of requests made to RegisterContainerInstance.
func (c *ECS) RegisterContainerInstanceRequest(input *ecs.RegisterContainerInstanceInput) (req *request.Request, output *ecs.RegisterContainerInstanceOutput) {
	c.inc("RegisterContainerInstance")
	return c.svc.RegisterContainerInstanceRequest(input)
}

// RegisterContainerInstance is a passthrough to the underlying RegisterContainerInstance method.
// It will increment the count of requests made to RegisterContainerInstance.
func (c *ECS) RegisterContainerInstance(input *ecs.RegisterContainerInstanceInput) (*ecs.RegisterContainerInstanceOutput, error) {
	c.inc("RegisterContainerInstance")
	return c.svc.RegisterContainerInstance(input)
}

// RegisterContainerInstanceWithContext is a passthrough to the underlying RegisterContainerInstanceWithContext method.
// It will increment the count of requests made to RegisterContainerInstance.
func (c *ECS) RegisterContainerInstanceWithContext(ctx aws.Context, input *ecs.RegisterContainerInstanceInput, opts ...request.Option) (*ecs.RegisterContainerInstanceOutput, error) {
	c.inc("RegisterContainerInstance")
	return c.svc.RegisterContainerInstanceWithContext(ctx, input, opts...)
}

// RegisterTaskDefinitionRequest is a passthrough to the underlying RegisterTaskDefinitionRequest.
// It will increment the count of requests made to RegisterTaskDefinition.
func (c *ECS) RegisterTaskDefinitionRequest(input *ecs.RegisterTaskDefinitionInput) (req *request.Request, output *ecs.RegisterTaskDefinitionOutput) {
	c.inc("RegisterTaskDefinition")
	return c.svc.RegisterTaskDefinitionRequest(input)
}

// RegisterTaskDefinition is a passthrough to the underlying RegisterTaskDefinition method.
// It will increment the count of requests made to RegisterTaskDefinition.
func (c *ECS) RegisterTaskDefinition(input *ecs.RegisterTaskDefinitionInput) (*ecs.RegisterTaskDefinitionOutput, error) {
	c.inc("RegisterTaskDefinition")
	return c.svc.RegisterTaskDefinition(input)
}

// RegisterTaskDefinitionWithContext is a passthrough to the underlying RegisterTaskDefinitionWithContext method.
// It will increment the count of requests made to RegisterTaskDefinition.
func (c *ECS) RegisterTaskDefinitionWithContext(ctx aws.Context, input *ecs.RegisterTaskDefinitionInput, opts ...request.Option) (*ecs.RegisterTaskDefinitionOutput, error) {
	c.inc("RegisterTaskDefinition")
	return c.svc.RegisterTaskDefinitionWithContext(ctx, input, opts...)
}

// RunTaskRequest is a passthrough to the underlying RunTaskRequest.
// It will increment the count of requests made to RunTask.
func (c *ECS) RunTaskRequest(input *ecs.RunTaskInput) (req *request.Request, output *ecs.RunTaskOutput) {
	c.inc("RunTask")
	return c.svc.RunTaskRequest(input)
}

// RunTask is a passthrough to the underlying RunTask method.
// It will increment the count of requests made to RunTask.
func (c *ECS) RunTask(input *ecs.RunTaskInput) (*ecs.RunTaskOutput, error) {
	c.inc("RunTask")
	return c.svc.RunTask(input)
}

// RunTaskWithContext is a passthrough to the underlying RunTaskWithContext method.
// It will increment the count of requests made to RunTask.
func (c *ECS) RunTaskWithContext(ctx aws.Context, input *ecs.RunTaskInput, opts ...request.Option) (*ecs.RunTaskOutput, error) {
	c.inc("RunTask")
	return c.svc.RunTaskWithContext(ctx, input, opts...)
}

// StartTaskRequest is a passthrough to the underlying StartTaskRequest.
// It will increment the count of requests made to StartTask.
func (c *ECS) StartTaskRequest(input *ecs.StartTaskInput) (req *request.Request, output *ecs.StartTaskOutput) {
	c.inc("StartTask")
	return c.svc.StartTaskRequest(input)
}

// StartTask is a passthrough to the underlying StartTask method.
// It will increment the count of requests made to StartTask.
func (c *ECS) StartTask(input *ecs.StartTaskInput) (*ecs.StartTaskOutput, error) {
	c.inc("StartTask")
	return c.svc.StartTask(input)
}

// StartTaskWithContext is a passthrough to the underlying StartTaskWithContext method.
// It will increment the count of requests made to StartTask.
func (c *ECS) StartTaskWithContext(ctx aws.Context, input *ecs.StartTaskInput, opts ...request.Option) (*ecs.StartTaskOutput, error) {
	c.inc("StartTask")
	return c.svc.StartTaskWithContext(ctx, input, opts...)
}

// StopTaskRequest is a passthrough to the underlying StopTaskRequest.
// It will increment the count of requests made to StopTask.
func (c *ECS) StopTaskRequest(input *ecs.StopTaskInput) (req *request.Request, output *ecs.StopTaskOutput) {
	c.inc("StopTask")
	return c.svc.StopTaskRequest(input)
}

// StopTask is a passthrough to the underlying StopTask method.
// It will increment the count of requests made to StopTask.
func (c *ECS) StopTask(input *ecs.StopTaskInput) (*ecs.StopTaskOutput, error) {
	c.inc("StopTask")
	return c.svc.StopTask(input)
}

// StopTaskWithContext is a passthrough to the underlying StopTaskWithContext method.
// It will increment the count of requests made to StopTask.
func (c *ECS) StopTaskWithContext(ctx aws.Context, input *ecs.StopTaskInput, opts ...request.Option) (*ecs.StopTaskOutput, error) {
	c.inc("StopTask")
	return c.svc.StopTaskWithContext(ctx, input, opts...)
}

// SubmitContainerStateChangeRequest is a passthrough to the underlying SubmitContainerStateChangeRequest.
// It will increment the count of requests made to SubmitContainerStateChange.
func (c *ECS) SubmitContainerStateChangeRequest(input *ecs.SubmitContainerStateChangeInput) (req *request.Request, output *ecs.SubmitContainerStateChangeOutput) {
	c.inc("SubmitContainerStateChange")
	return c.svc.SubmitContainerStateChangeRequest(input)
}

// SubmitContainerStateChange is a passthrough to the underlying SubmitContainerStateChange method.
// It will increment the count of requests made to SubmitContainerStateChange.
func (c *ECS) SubmitContainerStateChange(input *ecs.SubmitContainerStateChangeInput) (*ecs.SubmitContainerStateChangeOutput, error) {
	c.inc("SubmitContainerStateChange")
	return c.svc.SubmitContainerStateChange(input)
}

// SubmitContainerStateChangeWithContext is a passthrough to the underlying SubmitContainerStateChangeWithContext method.
// It will increment the count of requests made to SubmitContainerStateChange.
func (c *ECS) SubmitContainerStateChangeWithContext(ctx aws.Context, input *ecs.SubmitContainerStateChangeInput, opts ...request.Option) (*ecs.SubmitContainerStateChangeOutput, error) {
	c.inc("SubmitContainerStateChange")
	return c.svc.SubmitContainerStateChangeWithContext(ctx, input, opts...)
}

// SubmitTaskStateChangeRequest is a passthrough to the underlying SubmitTaskStateChangeRequest.
// It will increment the count of requests made to SubmitTaskStateChange.
func (c *ECS) SubmitTaskStateChangeRequest(input *ecs.SubmitTaskStateChangeInput) (req *request.Request, output *ecs.SubmitTaskStateChangeOutput) {
	c.inc("SubmitTaskStateChange")
	return c.svc.SubmitTaskStateChangeRequest(input)
}

// SubmitTaskStateChange is a passthrough to the underlying SubmitTaskStateChange method.
// It will increment the count of requests made to SubmitTaskStateChange.
func (c *ECS) SubmitTaskStateChange(input *ecs.SubmitTaskStateChangeInput) (*ecs.SubmitTaskStateChangeOutput, error) {
	c.inc("SubmitTaskStateChange")
	return c.svc.SubmitTaskStateChange(input)
}

// SubmitTaskStateChangeWithContext is a passthrough to the underlying SubmitTaskStateChangeWithContext method.
// It will increment the count of requests made to SubmitTaskStateChange.
func (c *ECS) SubmitTaskStateChangeWithContext(ctx aws.Context, input *ecs.SubmitTaskStateChangeInput, opts ...request.Option) (*ecs.SubmitTaskStateChangeOutput, error) {
	c.inc("SubmitTaskStateChange")
	return c.svc.SubmitTaskStateChangeWithContext(ctx, input, opts...)
}

// UpdateContainerAgentRequest is a passthrough to the underlying UpdateContainerAgentRequest.
// It will increment the count of requests made to UpdateContainerAgent.
func (c *ECS) UpdateContainerAgentRequest(input *ecs.UpdateContainerAgentInput) (req *request.Request, output *ecs.UpdateContainerAgentOutput) {
	c.inc("UpdateContainerAgent")
	return c.svc.UpdateContainerAgentRequest(input)
}

// UpdateContainerAgent is a passthrough to the underlying UpdateContainerAgent method.
// It will increment the count of requests made to UpdateContainerAgent.
func (c *ECS) UpdateContainerAgent(input *ecs.UpdateContainerAgentInput) (*ecs.UpdateContainerAgentOutput, error) {
	c.inc("UpdateContainerAgent")
	return c.svc.UpdateContainerAgent(input)
}

// UpdateContainerAgentWithContext is a passthrough to the underlying UpdateContainerAgentWithContext method.
// It will increment the count of requests made to UpdateContainerAgent.
func (c *ECS) UpdateContainerAgentWithContext(ctx aws.Context, input *ecs.UpdateContainerAgentInput, opts ...request.Option) (*ecs.UpdateContainerAgentOutput, error) {
	c.inc("UpdateContainerAgent")
	return c.svc.UpdateContainerAgentWithContext(ctx, input, opts...)
}

// UpdateContainerInstancesStateRequest is a passthrough to the underlying UpdateContainerInstancesStateRequest.
// It will increment the count of requests made to UpdateContainerInstancesState.
func (c *ECS) UpdateContainerInstancesStateRequest(input *ecs.UpdateContainerInstancesStateInput) (req *request.Request, output *ecs.UpdateContainerInstancesStateOutput) {
	c.inc("UpdateContainerInstancesState")
	return c.svc.UpdateContainerInstancesStateRequest(input)
}

// UpdateContainerInstancesState is a passthrough to the underlying UpdateContainerInstancesState method.
// It will increment the count of requests made to UpdateContainerInstancesState.
func (c *ECS) UpdateContainerInstancesState(input *ecs.UpdateContainerInstancesStateInput) (*ecs.UpdateContainerInstancesStateOutput, error) {
	c.inc("UpdateContainerInstancesState")
	return c.svc.UpdateContainerInstancesState(input)
}

// UpdateContainerInstancesStateWithContext is a passthrough to the underlying UpdateContainerInstancesStateWithContext method.
// It will increment the count of requests made to UpdateContainerInstancesState.
func (c *ECS) UpdateContainerInstancesStateWithContext(ctx aws.Context, input *ecs.UpdateContainerInstancesStateInput, opts ...request.Option) (*ecs.UpdateContainerInstancesStateOutput, error) {
	c.inc("UpdateContainerInstancesState")
	return c.svc.UpdateContainerInstancesStateWithContext(ctx, input, opts...)
}

// UpdateServiceRequest is a passthrough to the underlying UpdateServiceRequest.
// It will increment the count of requests made to UpdateService.
func (c *ECS) UpdateServiceRequest(input *ecs.UpdateServiceInput) (req *request.Request, output *ecs.UpdateServiceOutput) {
	c.inc("UpdateService")
	return c.svc.UpdateServiceRequest(input)
}

// UpdateService is a passthrough to the underlying UpdateService method.
// It will increment the count of requests made to UpdateService.
func (c *ECS) UpdateService(input *ecs.UpdateServiceInput) (*ecs.UpdateServiceOutput, error) {
	c.inc("UpdateService")
	return c.svc.UpdateService(input)
}

// UpdateServiceWithContext is a passthrough to the underlying UpdateServiceWithContext method.
// It will increment the count of requests made to UpdateService.
func (c *ECS) UpdateServiceWithContext(ctx aws.Context, input *ecs.UpdateServiceInput, opts ...request.Option) (*ecs.UpdateServiceOutput, error) {
	c.inc("UpdateService")
	return c.svc.UpdateServiceWithContext(ctx, input, opts...)
}
