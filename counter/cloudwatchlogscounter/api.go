// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatchlogscounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudwatchlogs"
)

// AssociateKmsKeyRequest is a passthrough to the underlying AssociateKmsKeyRequest.
// It will increment the count of requests made to AssociateKmsKey.
func (c *CloudWatchLogs) AssociateKmsKeyRequest(input *cloudwatchlogs.AssociateKmsKeyInput) (req *request.Request, output *cloudwatchlogs.AssociateKmsKeyOutput) {
	c.inc("AssociateKmsKey")
	return c.svc.AssociateKmsKeyRequest(input)
}

// AssociateKmsKey is a passthrough to the underlying AssociateKmsKey method.
// It will increment the count of requests made to AssociateKmsKey.
func (c *CloudWatchLogs) AssociateKmsKey(input *cloudwatchlogs.AssociateKmsKeyInput) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	c.inc("AssociateKmsKey")
	return c.svc.AssociateKmsKey(input)
}

// AssociateKmsKeyWithContext is a passthrough to the underlying AssociateKmsKeyWithContext method.
// It will increment the count of requests made to AssociateKmsKey.
func (c *CloudWatchLogs) AssociateKmsKeyWithContext(ctx aws.Context, input *cloudwatchlogs.AssociateKmsKeyInput, opts ...request.Option) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	c.inc("AssociateKmsKey")
	return c.svc.AssociateKmsKeyWithContext(ctx, input, opts...)
}

// CancelExportTaskRequest is a passthrough to the underlying CancelExportTaskRequest.
// It will increment the count of requests made to CancelExportTask.
func (c *CloudWatchLogs) CancelExportTaskRequest(input *cloudwatchlogs.CancelExportTaskInput) (req *request.Request, output *cloudwatchlogs.CancelExportTaskOutput) {
	c.inc("CancelExportTask")
	return c.svc.CancelExportTaskRequest(input)
}

// CancelExportTask is a passthrough to the underlying CancelExportTask method.
// It will increment the count of requests made to CancelExportTask.
func (c *CloudWatchLogs) CancelExportTask(input *cloudwatchlogs.CancelExportTaskInput) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	c.inc("CancelExportTask")
	return c.svc.CancelExportTask(input)
}

// CancelExportTaskWithContext is a passthrough to the underlying CancelExportTaskWithContext method.
// It will increment the count of requests made to CancelExportTask.
func (c *CloudWatchLogs) CancelExportTaskWithContext(ctx aws.Context, input *cloudwatchlogs.CancelExportTaskInput, opts ...request.Option) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	c.inc("CancelExportTask")
	return c.svc.CancelExportTaskWithContext(ctx, input, opts...)
}

// CreateExportTaskRequest is a passthrough to the underlying CreateExportTaskRequest.
// It will increment the count of requests made to CreateExportTask.
func (c *CloudWatchLogs) CreateExportTaskRequest(input *cloudwatchlogs.CreateExportTaskInput) (req *request.Request, output *cloudwatchlogs.CreateExportTaskOutput) {
	c.inc("CreateExportTask")
	return c.svc.CreateExportTaskRequest(input)
}

// CreateExportTask is a passthrough to the underlying CreateExportTask method.
// It will increment the count of requests made to CreateExportTask.
func (c *CloudWatchLogs) CreateExportTask(input *cloudwatchlogs.CreateExportTaskInput) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	c.inc("CreateExportTask")
	return c.svc.CreateExportTask(input)
}

// CreateExportTaskWithContext is a passthrough to the underlying CreateExportTaskWithContext method.
// It will increment the count of requests made to CreateExportTask.
func (c *CloudWatchLogs) CreateExportTaskWithContext(ctx aws.Context, input *cloudwatchlogs.CreateExportTaskInput, opts ...request.Option) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	c.inc("CreateExportTask")
	return c.svc.CreateExportTaskWithContext(ctx, input, opts...)
}

// CreateLogGroupRequest is a passthrough to the underlying CreateLogGroupRequest.
// It will increment the count of requests made to CreateLogGroup.
func (c *CloudWatchLogs) CreateLogGroupRequest(input *cloudwatchlogs.CreateLogGroupInput) (req *request.Request, output *cloudwatchlogs.CreateLogGroupOutput) {
	c.inc("CreateLogGroup")
	return c.svc.CreateLogGroupRequest(input)
}

// CreateLogGroup is a passthrough to the underlying CreateLogGroup method.
// It will increment the count of requests made to CreateLogGroup.
func (c *CloudWatchLogs) CreateLogGroup(input *cloudwatchlogs.CreateLogGroupInput) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	c.inc("CreateLogGroup")
	return c.svc.CreateLogGroup(input)
}

// CreateLogGroupWithContext is a passthrough to the underlying CreateLogGroupWithContext method.
// It will increment the count of requests made to CreateLogGroup.
func (c *CloudWatchLogs) CreateLogGroupWithContext(ctx aws.Context, input *cloudwatchlogs.CreateLogGroupInput, opts ...request.Option) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	c.inc("CreateLogGroup")
	return c.svc.CreateLogGroupWithContext(ctx, input, opts...)
}

// CreateLogStreamRequest is a passthrough to the underlying CreateLogStreamRequest.
// It will increment the count of requests made to CreateLogStream.
func (c *CloudWatchLogs) CreateLogStreamRequest(input *cloudwatchlogs.CreateLogStreamInput) (req *request.Request, output *cloudwatchlogs.CreateLogStreamOutput) {
	c.inc("CreateLogStream")
	return c.svc.CreateLogStreamRequest(input)
}

// CreateLogStream is a passthrough to the underlying CreateLogStream method.
// It will increment the count of requests made to CreateLogStream.
func (c *CloudWatchLogs) CreateLogStream(input *cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	c.inc("CreateLogStream")
	return c.svc.CreateLogStream(input)
}

// CreateLogStreamWithContext is a passthrough to the underlying CreateLogStreamWithContext method.
// It will increment the count of requests made to CreateLogStream.
func (c *CloudWatchLogs) CreateLogStreamWithContext(ctx aws.Context, input *cloudwatchlogs.CreateLogStreamInput, opts ...request.Option) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	c.inc("CreateLogStream")
	return c.svc.CreateLogStreamWithContext(ctx, input, opts...)
}

// DeleteDestinationRequest is a passthrough to the underlying DeleteDestinationRequest.
// It will increment the count of requests made to DeleteDestination.
func (c *CloudWatchLogs) DeleteDestinationRequest(input *cloudwatchlogs.DeleteDestinationInput) (req *request.Request, output *cloudwatchlogs.DeleteDestinationOutput) {
	c.inc("DeleteDestination")
	return c.svc.DeleteDestinationRequest(input)
}

// DeleteDestination is a passthrough to the underlying DeleteDestination method.
// It will increment the count of requests made to DeleteDestination.
func (c *CloudWatchLogs) DeleteDestination(input *cloudwatchlogs.DeleteDestinationInput) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	c.inc("DeleteDestination")
	return c.svc.DeleteDestination(input)
}

// DeleteDestinationWithContext is a passthrough to the underlying DeleteDestinationWithContext method.
// It will increment the count of requests made to DeleteDestination.
func (c *CloudWatchLogs) DeleteDestinationWithContext(ctx aws.Context, input *cloudwatchlogs.DeleteDestinationInput, opts ...request.Option) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	c.inc("DeleteDestination")
	return c.svc.DeleteDestinationWithContext(ctx, input, opts...)
}

// DeleteLogGroupRequest is a passthrough to the underlying DeleteLogGroupRequest.
// It will increment the count of requests made to DeleteLogGroup.
func (c *CloudWatchLogs) DeleteLogGroupRequest(input *cloudwatchlogs.DeleteLogGroupInput) (req *request.Request, output *cloudwatchlogs.DeleteLogGroupOutput) {
	c.inc("DeleteLogGroup")
	return c.svc.DeleteLogGroupRequest(input)
}

// DeleteLogGroup is a passthrough to the underlying DeleteLogGroup method.
// It will increment the count of requests made to DeleteLogGroup.
func (c *CloudWatchLogs) DeleteLogGroup(input *cloudwatchlogs.DeleteLogGroupInput) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	c.inc("DeleteLogGroup")
	return c.svc.DeleteLogGroup(input)
}

// DeleteLogGroupWithContext is a passthrough to the underlying DeleteLogGroupWithContext method.
// It will increment the count of requests made to DeleteLogGroup.
func (c *CloudWatchLogs) DeleteLogGroupWithContext(ctx aws.Context, input *cloudwatchlogs.DeleteLogGroupInput, opts ...request.Option) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	c.inc("DeleteLogGroup")
	return c.svc.DeleteLogGroupWithContext(ctx, input, opts...)
}

// DeleteLogStreamRequest is a passthrough to the underlying DeleteLogStreamRequest.
// It will increment the count of requests made to DeleteLogStream.
func (c *CloudWatchLogs) DeleteLogStreamRequest(input *cloudwatchlogs.DeleteLogStreamInput) (req *request.Request, output *cloudwatchlogs.DeleteLogStreamOutput) {
	c.inc("DeleteLogStream")
	return c.svc.DeleteLogStreamRequest(input)
}

// DeleteLogStream is a passthrough to the underlying DeleteLogStream method.
// It will increment the count of requests made to DeleteLogStream.
func (c *CloudWatchLogs) DeleteLogStream(input *cloudwatchlogs.DeleteLogStreamInput) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	c.inc("DeleteLogStream")
	return c.svc.DeleteLogStream(input)
}

// DeleteLogStreamWithContext is a passthrough to the underlying DeleteLogStreamWithContext method.
// It will increment the count of requests made to DeleteLogStream.
func (c *CloudWatchLogs) DeleteLogStreamWithContext(ctx aws.Context, input *cloudwatchlogs.DeleteLogStreamInput, opts ...request.Option) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	c.inc("DeleteLogStream")
	return c.svc.DeleteLogStreamWithContext(ctx, input, opts...)
}

// DeleteMetricFilterRequest is a passthrough to the underlying DeleteMetricFilterRequest.
// It will increment the count of requests made to DeleteMetricFilter.
func (c *CloudWatchLogs) DeleteMetricFilterRequest(input *cloudwatchlogs.DeleteMetricFilterInput) (req *request.Request, output *cloudwatchlogs.DeleteMetricFilterOutput) {
	c.inc("DeleteMetricFilter")
	return c.svc.DeleteMetricFilterRequest(input)
}

// DeleteMetricFilter is a passthrough to the underlying DeleteMetricFilter method.
// It will increment the count of requests made to DeleteMetricFilter.
func (c *CloudWatchLogs) DeleteMetricFilter(input *cloudwatchlogs.DeleteMetricFilterInput) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	c.inc("DeleteMetricFilter")
	return c.svc.DeleteMetricFilter(input)
}

// DeleteMetricFilterWithContext is a passthrough to the underlying DeleteMetricFilterWithContext method.
// It will increment the count of requests made to DeleteMetricFilter.
func (c *CloudWatchLogs) DeleteMetricFilterWithContext(ctx aws.Context, input *cloudwatchlogs.DeleteMetricFilterInput, opts ...request.Option) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	c.inc("DeleteMetricFilter")
	return c.svc.DeleteMetricFilterWithContext(ctx, input, opts...)
}

// DeleteResourcePolicyRequest is a passthrough to the underlying DeleteResourcePolicyRequest.
// It will increment the count of requests made to DeleteResourcePolicy.
func (c *CloudWatchLogs) DeleteResourcePolicyRequest(input *cloudwatchlogs.DeleteResourcePolicyInput) (req *request.Request, output *cloudwatchlogs.DeleteResourcePolicyOutput) {
	c.inc("DeleteResourcePolicy")
	return c.svc.DeleteResourcePolicyRequest(input)
}

// DeleteResourcePolicy is a passthrough to the underlying DeleteResourcePolicy method.
// It will increment the count of requests made to DeleteResourcePolicy.
func (c *CloudWatchLogs) DeleteResourcePolicy(input *cloudwatchlogs.DeleteResourcePolicyInput) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	c.inc("DeleteResourcePolicy")
	return c.svc.DeleteResourcePolicy(input)
}

// DeleteResourcePolicyWithContext is a passthrough to the underlying DeleteResourcePolicyWithContext method.
// It will increment the count of requests made to DeleteResourcePolicy.
func (c *CloudWatchLogs) DeleteResourcePolicyWithContext(ctx aws.Context, input *cloudwatchlogs.DeleteResourcePolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	c.inc("DeleteResourcePolicy")
	return c.svc.DeleteResourcePolicyWithContext(ctx, input, opts...)
}

// DeleteRetentionPolicyRequest is a passthrough to the underlying DeleteRetentionPolicyRequest.
// It will increment the count of requests made to DeleteRetentionPolicy.
func (c *CloudWatchLogs) DeleteRetentionPolicyRequest(input *cloudwatchlogs.DeleteRetentionPolicyInput) (req *request.Request, output *cloudwatchlogs.DeleteRetentionPolicyOutput) {
	c.inc("DeleteRetentionPolicy")
	return c.svc.DeleteRetentionPolicyRequest(input)
}

// DeleteRetentionPolicy is a passthrough to the underlying DeleteRetentionPolicy method.
// It will increment the count of requests made to DeleteRetentionPolicy.
func (c *CloudWatchLogs) DeleteRetentionPolicy(input *cloudwatchlogs.DeleteRetentionPolicyInput) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	c.inc("DeleteRetentionPolicy")
	return c.svc.DeleteRetentionPolicy(input)
}

// DeleteRetentionPolicyWithContext is a passthrough to the underlying DeleteRetentionPolicyWithContext method.
// It will increment the count of requests made to DeleteRetentionPolicy.
func (c *CloudWatchLogs) DeleteRetentionPolicyWithContext(ctx aws.Context, input *cloudwatchlogs.DeleteRetentionPolicyInput, opts ...request.Option) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	c.inc("DeleteRetentionPolicy")
	return c.svc.DeleteRetentionPolicyWithContext(ctx, input, opts...)
}

// DeleteSubscriptionFilterRequest is a passthrough to the underlying DeleteSubscriptionFilterRequest.
// It will increment the count of requests made to DeleteSubscriptionFilter.
func (c *CloudWatchLogs) DeleteSubscriptionFilterRequest(input *cloudwatchlogs.DeleteSubscriptionFilterInput) (req *request.Request, output *cloudwatchlogs.DeleteSubscriptionFilterOutput) {
	c.inc("DeleteSubscriptionFilter")
	return c.svc.DeleteSubscriptionFilterRequest(input)
}

// DeleteSubscriptionFilter is a passthrough to the underlying DeleteSubscriptionFilter method.
// It will increment the count of requests made to DeleteSubscriptionFilter.
func (c *CloudWatchLogs) DeleteSubscriptionFilter(input *cloudwatchlogs.DeleteSubscriptionFilterInput) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	c.inc("DeleteSubscriptionFilter")
	return c.svc.DeleteSubscriptionFilter(input)
}

// DeleteSubscriptionFilterWithContext is a passthrough to the underlying DeleteSubscriptionFilterWithContext method.
// It will increment the count of requests made to DeleteSubscriptionFilter.
func (c *CloudWatchLogs) DeleteSubscriptionFilterWithContext(ctx aws.Context, input *cloudwatchlogs.DeleteSubscriptionFilterInput, opts ...request.Option) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	c.inc("DeleteSubscriptionFilter")
	return c.svc.DeleteSubscriptionFilterWithContext(ctx, input, opts...)
}

// DescribeDestinationsRequest is a passthrough to the underlying DescribeDestinationsRequest.
// It will increment the count of requests made to DescribeDestinations.
func (c *CloudWatchLogs) DescribeDestinationsRequest(input *cloudwatchlogs.DescribeDestinationsInput) (req *request.Request, output *cloudwatchlogs.DescribeDestinationsOutput) {
	c.inc("DescribeDestinations")
	return c.svc.DescribeDestinationsRequest(input)
}

// DescribeDestinations is a passthrough to the underlying DescribeDestinations method.
// It will increment the count of requests made to DescribeDestinations.
func (c *CloudWatchLogs) DescribeDestinations(input *cloudwatchlogs.DescribeDestinationsInput) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	c.inc("DescribeDestinations")
	return c.svc.DescribeDestinations(input)
}

// DescribeDestinationsWithContext is a passthrough to the underlying DescribeDestinationsWithContext method.
// It will increment the count of requests made to DescribeDestinations.
func (c *CloudWatchLogs) DescribeDestinationsWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeDestinationsInput, opts ...request.Option) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	c.inc("DescribeDestinations")
	return c.svc.DescribeDestinationsWithContext(ctx, input, opts...)
}

// DescribeDestinationsPages is a passthrough to the underlying DescribeDestinationsPages method.
// It will increment the count of requests made to DescribeDestinations on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeDestinationsPagesWithContext to avoid this.
func (c *CloudWatchLogs) DescribeDestinationsPages(input *cloudwatchlogs.DescribeDestinationsInput, fn func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool) error {
	wrappedFn := func(page *cloudwatchlogs.DescribeDestinationsOutput, lastPage bool) bool {
		c.inc("DescribeDestinations")
		return fn(page, lastPage)
	}
	return c.DescribeDestinationsPages(input, wrappedFn)
}

// DescribeDestinationsPagesWithContext is a passthrough to the underlying DescribeDestinationsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeDestinations when applied to the request.
func (c *CloudWatchLogs) DescribeDestinationsPagesWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeDestinationsInput, fn func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeDestinations"))
	return c.DescribeDestinationsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeExportTasksRequest is a passthrough to the underlying DescribeExportTasksRequest.
// It will increment the count of requests made to DescribeExportTasks.
func (c *CloudWatchLogs) DescribeExportTasksRequest(input *cloudwatchlogs.DescribeExportTasksInput) (req *request.Request, output *cloudwatchlogs.DescribeExportTasksOutput) {
	c.inc("DescribeExportTasks")
	return c.svc.DescribeExportTasksRequest(input)
}

// DescribeExportTasks is a passthrough to the underlying DescribeExportTasks method.
// It will increment the count of requests made to DescribeExportTasks.
func (c *CloudWatchLogs) DescribeExportTasks(input *cloudwatchlogs.DescribeExportTasksInput) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	c.inc("DescribeExportTasks")
	return c.svc.DescribeExportTasks(input)
}

// DescribeExportTasksWithContext is a passthrough to the underlying DescribeExportTasksWithContext method.
// It will increment the count of requests made to DescribeExportTasks.
func (c *CloudWatchLogs) DescribeExportTasksWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeExportTasksInput, opts ...request.Option) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	c.inc("DescribeExportTasks")
	return c.svc.DescribeExportTasksWithContext(ctx, input, opts...)
}

// DescribeLogGroupsRequest is a passthrough to the underlying DescribeLogGroupsRequest.
// It will increment the count of requests made to DescribeLogGroups.
func (c *CloudWatchLogs) DescribeLogGroupsRequest(input *cloudwatchlogs.DescribeLogGroupsInput) (req *request.Request, output *cloudwatchlogs.DescribeLogGroupsOutput) {
	c.inc("DescribeLogGroups")
	return c.svc.DescribeLogGroupsRequest(input)
}

// DescribeLogGroups is a passthrough to the underlying DescribeLogGroups method.
// It will increment the count of requests made to DescribeLogGroups.
func (c *CloudWatchLogs) DescribeLogGroups(input *cloudwatchlogs.DescribeLogGroupsInput) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	c.inc("DescribeLogGroups")
	return c.svc.DescribeLogGroups(input)
}

// DescribeLogGroupsWithContext is a passthrough to the underlying DescribeLogGroupsWithContext method.
// It will increment the count of requests made to DescribeLogGroups.
func (c *CloudWatchLogs) DescribeLogGroupsWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeLogGroupsInput, opts ...request.Option) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	c.inc("DescribeLogGroups")
	return c.svc.DescribeLogGroupsWithContext(ctx, input, opts...)
}

// DescribeLogGroupsPages is a passthrough to the underlying DescribeLogGroupsPages method.
// It will increment the count of requests made to DescribeLogGroups on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeLogGroupsPagesWithContext to avoid this.
func (c *CloudWatchLogs) DescribeLogGroupsPages(input *cloudwatchlogs.DescribeLogGroupsInput, fn func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool) error {
	wrappedFn := func(page *cloudwatchlogs.DescribeLogGroupsOutput, lastPage bool) bool {
		c.inc("DescribeLogGroups")
		return fn(page, lastPage)
	}
	return c.DescribeLogGroupsPages(input, wrappedFn)
}

// DescribeLogGroupsPagesWithContext is a passthrough to the underlying DescribeLogGroupsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeLogGroups when applied to the request.
func (c *CloudWatchLogs) DescribeLogGroupsPagesWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeLogGroupsInput, fn func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeLogGroups"))
	return c.DescribeLogGroupsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeLogStreamsRequest is a passthrough to the underlying DescribeLogStreamsRequest.
// It will increment the count of requests made to DescribeLogStreams.
func (c *CloudWatchLogs) DescribeLogStreamsRequest(input *cloudwatchlogs.DescribeLogStreamsInput) (req *request.Request, output *cloudwatchlogs.DescribeLogStreamsOutput) {
	c.inc("DescribeLogStreams")
	return c.svc.DescribeLogStreamsRequest(input)
}

// DescribeLogStreams is a passthrough to the underlying DescribeLogStreams method.
// It will increment the count of requests made to DescribeLogStreams.
func (c *CloudWatchLogs) DescribeLogStreams(input *cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	c.inc("DescribeLogStreams")
	return c.svc.DescribeLogStreams(input)
}

// DescribeLogStreamsWithContext is a passthrough to the underlying DescribeLogStreamsWithContext method.
// It will increment the count of requests made to DescribeLogStreams.
func (c *CloudWatchLogs) DescribeLogStreamsWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeLogStreamsInput, opts ...request.Option) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	c.inc("DescribeLogStreams")
	return c.svc.DescribeLogStreamsWithContext(ctx, input, opts...)
}

// DescribeLogStreamsPages is a passthrough to the underlying DescribeLogStreamsPages method.
// It will increment the count of requests made to DescribeLogStreams on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeLogStreamsPagesWithContext to avoid this.
func (c *CloudWatchLogs) DescribeLogStreamsPages(input *cloudwatchlogs.DescribeLogStreamsInput, fn func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool) error {
	wrappedFn := func(page *cloudwatchlogs.DescribeLogStreamsOutput, lastPage bool) bool {
		c.inc("DescribeLogStreams")
		return fn(page, lastPage)
	}
	return c.DescribeLogStreamsPages(input, wrappedFn)
}

// DescribeLogStreamsPagesWithContext is a passthrough to the underlying DescribeLogStreamsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeLogStreams when applied to the request.
func (c *CloudWatchLogs) DescribeLogStreamsPagesWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeLogStreamsInput, fn func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeLogStreams"))
	return c.DescribeLogStreamsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeMetricFiltersRequest is a passthrough to the underlying DescribeMetricFiltersRequest.
// It will increment the count of requests made to DescribeMetricFilters.
func (c *CloudWatchLogs) DescribeMetricFiltersRequest(input *cloudwatchlogs.DescribeMetricFiltersInput) (req *request.Request, output *cloudwatchlogs.DescribeMetricFiltersOutput) {
	c.inc("DescribeMetricFilters")
	return c.svc.DescribeMetricFiltersRequest(input)
}

// DescribeMetricFilters is a passthrough to the underlying DescribeMetricFilters method.
// It will increment the count of requests made to DescribeMetricFilters.
func (c *CloudWatchLogs) DescribeMetricFilters(input *cloudwatchlogs.DescribeMetricFiltersInput) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	c.inc("DescribeMetricFilters")
	return c.svc.DescribeMetricFilters(input)
}

// DescribeMetricFiltersWithContext is a passthrough to the underlying DescribeMetricFiltersWithContext method.
// It will increment the count of requests made to DescribeMetricFilters.
func (c *CloudWatchLogs) DescribeMetricFiltersWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeMetricFiltersInput, opts ...request.Option) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	c.inc("DescribeMetricFilters")
	return c.svc.DescribeMetricFiltersWithContext(ctx, input, opts...)
}

// DescribeMetricFiltersPages is a passthrough to the underlying DescribeMetricFiltersPages method.
// It will increment the count of requests made to DescribeMetricFilters on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeMetricFiltersPagesWithContext to avoid this.
func (c *CloudWatchLogs) DescribeMetricFiltersPages(input *cloudwatchlogs.DescribeMetricFiltersInput, fn func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool) error {
	wrappedFn := func(page *cloudwatchlogs.DescribeMetricFiltersOutput, lastPage bool) bool {
		c.inc("DescribeMetricFilters")
		return fn(page, lastPage)
	}
	return c.DescribeMetricFiltersPages(input, wrappedFn)
}

// DescribeMetricFiltersPagesWithContext is a passthrough to the underlying DescribeMetricFiltersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeMetricFilters when applied to the request.
func (c *CloudWatchLogs) DescribeMetricFiltersPagesWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeMetricFiltersInput, fn func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeMetricFilters"))
	return c.DescribeMetricFiltersPagesWithContext(ctx, input, fn, opts...)
}

// DescribeResourcePoliciesRequest is a passthrough to the underlying DescribeResourcePoliciesRequest.
// It will increment the count of requests made to DescribeResourcePolicies.
func (c *CloudWatchLogs) DescribeResourcePoliciesRequest(input *cloudwatchlogs.DescribeResourcePoliciesInput) (req *request.Request, output *cloudwatchlogs.DescribeResourcePoliciesOutput) {
	c.inc("DescribeResourcePolicies")
	return c.svc.DescribeResourcePoliciesRequest(input)
}

// DescribeResourcePolicies is a passthrough to the underlying DescribeResourcePolicies method.
// It will increment the count of requests made to DescribeResourcePolicies.
func (c *CloudWatchLogs) DescribeResourcePolicies(input *cloudwatchlogs.DescribeResourcePoliciesInput) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	c.inc("DescribeResourcePolicies")
	return c.svc.DescribeResourcePolicies(input)
}

// DescribeResourcePoliciesWithContext is a passthrough to the underlying DescribeResourcePoliciesWithContext method.
// It will increment the count of requests made to DescribeResourcePolicies.
func (c *CloudWatchLogs) DescribeResourcePoliciesWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeResourcePoliciesInput, opts ...request.Option) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	c.inc("DescribeResourcePolicies")
	return c.svc.DescribeResourcePoliciesWithContext(ctx, input, opts...)
}

// DescribeSubscriptionFiltersRequest is a passthrough to the underlying DescribeSubscriptionFiltersRequest.
// It will increment the count of requests made to DescribeSubscriptionFilters.
func (c *CloudWatchLogs) DescribeSubscriptionFiltersRequest(input *cloudwatchlogs.DescribeSubscriptionFiltersInput) (req *request.Request, output *cloudwatchlogs.DescribeSubscriptionFiltersOutput) {
	c.inc("DescribeSubscriptionFilters")
	return c.svc.DescribeSubscriptionFiltersRequest(input)
}

// DescribeSubscriptionFilters is a passthrough to the underlying DescribeSubscriptionFilters method.
// It will increment the count of requests made to DescribeSubscriptionFilters.
func (c *CloudWatchLogs) DescribeSubscriptionFilters(input *cloudwatchlogs.DescribeSubscriptionFiltersInput) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	c.inc("DescribeSubscriptionFilters")
	return c.svc.DescribeSubscriptionFilters(input)
}

// DescribeSubscriptionFiltersWithContext is a passthrough to the underlying DescribeSubscriptionFiltersWithContext method.
// It will increment the count of requests made to DescribeSubscriptionFilters.
func (c *CloudWatchLogs) DescribeSubscriptionFiltersWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput, opts ...request.Option) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	c.inc("DescribeSubscriptionFilters")
	return c.svc.DescribeSubscriptionFiltersWithContext(ctx, input, opts...)
}

// DescribeSubscriptionFiltersPages is a passthrough to the underlying DescribeSubscriptionFiltersPages method.
// It will increment the count of requests made to DescribeSubscriptionFilters on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeSubscriptionFiltersPagesWithContext to avoid this.
func (c *CloudWatchLogs) DescribeSubscriptionFiltersPages(input *cloudwatchlogs.DescribeSubscriptionFiltersInput, fn func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool) error {
	wrappedFn := func(page *cloudwatchlogs.DescribeSubscriptionFiltersOutput, lastPage bool) bool {
		c.inc("DescribeSubscriptionFilters")
		return fn(page, lastPage)
	}
	return c.DescribeSubscriptionFiltersPages(input, wrappedFn)
}

// DescribeSubscriptionFiltersPagesWithContext is a passthrough to the underlying DescribeSubscriptionFiltersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeSubscriptionFilters when applied to the request.
func (c *CloudWatchLogs) DescribeSubscriptionFiltersPagesWithContext(ctx aws.Context, input *cloudwatchlogs.DescribeSubscriptionFiltersInput, fn func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeSubscriptionFilters"))
	return c.DescribeSubscriptionFiltersPagesWithContext(ctx, input, fn, opts...)
}

// DisassociateKmsKeyRequest is a passthrough to the underlying DisassociateKmsKeyRequest.
// It will increment the count of requests made to DisassociateKmsKey.
func (c *CloudWatchLogs) DisassociateKmsKeyRequest(input *cloudwatchlogs.DisassociateKmsKeyInput) (req *request.Request, output *cloudwatchlogs.DisassociateKmsKeyOutput) {
	c.inc("DisassociateKmsKey")
	return c.svc.DisassociateKmsKeyRequest(input)
}

// DisassociateKmsKey is a passthrough to the underlying DisassociateKmsKey method.
// It will increment the count of requests made to DisassociateKmsKey.
func (c *CloudWatchLogs) DisassociateKmsKey(input *cloudwatchlogs.DisassociateKmsKeyInput) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	c.inc("DisassociateKmsKey")
	return c.svc.DisassociateKmsKey(input)
}

// DisassociateKmsKeyWithContext is a passthrough to the underlying DisassociateKmsKeyWithContext method.
// It will increment the count of requests made to DisassociateKmsKey.
func (c *CloudWatchLogs) DisassociateKmsKeyWithContext(ctx aws.Context, input *cloudwatchlogs.DisassociateKmsKeyInput, opts ...request.Option) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	c.inc("DisassociateKmsKey")
	return c.svc.DisassociateKmsKeyWithContext(ctx, input, opts...)
}

// FilterLogEventsRequest is a passthrough to the underlying FilterLogEventsRequest.
// It will increment the count of requests made to FilterLogEvents.
func (c *CloudWatchLogs) FilterLogEventsRequest(input *cloudwatchlogs.FilterLogEventsInput) (req *request.Request, output *cloudwatchlogs.FilterLogEventsOutput) {
	c.inc("FilterLogEvents")
	return c.svc.FilterLogEventsRequest(input)
}

// FilterLogEvents is a passthrough to the underlying FilterLogEvents method.
// It will increment the count of requests made to FilterLogEvents.
func (c *CloudWatchLogs) FilterLogEvents(input *cloudwatchlogs.FilterLogEventsInput) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	c.inc("FilterLogEvents")
	return c.svc.FilterLogEvents(input)
}

// FilterLogEventsWithContext is a passthrough to the underlying FilterLogEventsWithContext method.
// It will increment the count of requests made to FilterLogEvents.
func (c *CloudWatchLogs) FilterLogEventsWithContext(ctx aws.Context, input *cloudwatchlogs.FilterLogEventsInput, opts ...request.Option) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	c.inc("FilterLogEvents")
	return c.svc.FilterLogEventsWithContext(ctx, input, opts...)
}

// FilterLogEventsPages is a passthrough to the underlying FilterLogEventsPages method.
// It will increment the count of requests made to FilterLogEvents on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use FilterLogEventsPagesWithContext to avoid this.
func (c *CloudWatchLogs) FilterLogEventsPages(input *cloudwatchlogs.FilterLogEventsInput, fn func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool) error {
	wrappedFn := func(page *cloudwatchlogs.FilterLogEventsOutput, lastPage bool) bool {
		c.inc("FilterLogEvents")
		return fn(page, lastPage)
	}
	return c.FilterLogEventsPages(input, wrappedFn)
}

// FilterLogEventsPagesWithContext is a passthrough to the underlying FilterLogEventsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to FilterLogEvents when applied to the request.
func (c *CloudWatchLogs) FilterLogEventsPagesWithContext(ctx aws.Context, input *cloudwatchlogs.FilterLogEventsInput, fn func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("FilterLogEvents"))
	return c.FilterLogEventsPagesWithContext(ctx, input, fn, opts...)
}

// GetLogEventsRequest is a passthrough to the underlying GetLogEventsRequest.
// It will increment the count of requests made to GetLogEvents.
func (c *CloudWatchLogs) GetLogEventsRequest(input *cloudwatchlogs.GetLogEventsInput) (req *request.Request, output *cloudwatchlogs.GetLogEventsOutput) {
	c.inc("GetLogEvents")
	return c.svc.GetLogEventsRequest(input)
}

// GetLogEvents is a passthrough to the underlying GetLogEvents method.
// It will increment the count of requests made to GetLogEvents.
func (c *CloudWatchLogs) GetLogEvents(input *cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error) {
	c.inc("GetLogEvents")
	return c.svc.GetLogEvents(input)
}

// GetLogEventsWithContext is a passthrough to the underlying GetLogEventsWithContext method.
// It will increment the count of requests made to GetLogEvents.
func (c *CloudWatchLogs) GetLogEventsWithContext(ctx aws.Context, input *cloudwatchlogs.GetLogEventsInput, opts ...request.Option) (*cloudwatchlogs.GetLogEventsOutput, error) {
	c.inc("GetLogEvents")
	return c.svc.GetLogEventsWithContext(ctx, input, opts...)
}

// GetLogEventsPages is a passthrough to the underlying GetLogEventsPages method.
// It will increment the count of requests made to GetLogEvents on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use GetLogEventsPagesWithContext to avoid this.
func (c *CloudWatchLogs) GetLogEventsPages(input *cloudwatchlogs.GetLogEventsInput, fn func(*cloudwatchlogs.GetLogEventsOutput, bool) bool) error {
	wrappedFn := func(page *cloudwatchlogs.GetLogEventsOutput, lastPage bool) bool {
		c.inc("GetLogEvents")
		return fn(page, lastPage)
	}
	return c.GetLogEventsPages(input, wrappedFn)
}

// GetLogEventsPagesWithContext is a passthrough to the underlying GetLogEventsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to GetLogEvents when applied to the request.
func (c *CloudWatchLogs) GetLogEventsPagesWithContext(ctx aws.Context, input *cloudwatchlogs.GetLogEventsInput, fn func(*cloudwatchlogs.GetLogEventsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("GetLogEvents"))
	return c.GetLogEventsPagesWithContext(ctx, input, fn, opts...)
}

// ListTagsLogGroupRequest is a passthrough to the underlying ListTagsLogGroupRequest.
// It will increment the count of requests made to ListTagsLogGroup.
func (c *CloudWatchLogs) ListTagsLogGroupRequest(input *cloudwatchlogs.ListTagsLogGroupInput) (req *request.Request, output *cloudwatchlogs.ListTagsLogGroupOutput) {
	c.inc("ListTagsLogGroup")
	return c.svc.ListTagsLogGroupRequest(input)
}

// ListTagsLogGroup is a passthrough to the underlying ListTagsLogGroup method.
// It will increment the count of requests made to ListTagsLogGroup.
func (c *CloudWatchLogs) ListTagsLogGroup(input *cloudwatchlogs.ListTagsLogGroupInput) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	c.inc("ListTagsLogGroup")
	return c.svc.ListTagsLogGroup(input)
}

// ListTagsLogGroupWithContext is a passthrough to the underlying ListTagsLogGroupWithContext method.
// It will increment the count of requests made to ListTagsLogGroup.
func (c *CloudWatchLogs) ListTagsLogGroupWithContext(ctx aws.Context, input *cloudwatchlogs.ListTagsLogGroupInput, opts ...request.Option) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	c.inc("ListTagsLogGroup")
	return c.svc.ListTagsLogGroupWithContext(ctx, input, opts...)
}

// PutDestinationRequest is a passthrough to the underlying PutDestinationRequest.
// It will increment the count of requests made to PutDestination.
func (c *CloudWatchLogs) PutDestinationRequest(input *cloudwatchlogs.PutDestinationInput) (req *request.Request, output *cloudwatchlogs.PutDestinationOutput) {
	c.inc("PutDestination")
	return c.svc.PutDestinationRequest(input)
}

// PutDestination is a passthrough to the underlying PutDestination method.
// It will increment the count of requests made to PutDestination.
func (c *CloudWatchLogs) PutDestination(input *cloudwatchlogs.PutDestinationInput) (*cloudwatchlogs.PutDestinationOutput, error) {
	c.inc("PutDestination")
	return c.svc.PutDestination(input)
}

// PutDestinationWithContext is a passthrough to the underlying PutDestinationWithContext method.
// It will increment the count of requests made to PutDestination.
func (c *CloudWatchLogs) PutDestinationWithContext(ctx aws.Context, input *cloudwatchlogs.PutDestinationInput, opts ...request.Option) (*cloudwatchlogs.PutDestinationOutput, error) {
	c.inc("PutDestination")
	return c.svc.PutDestinationWithContext(ctx, input, opts...)
}

// PutDestinationPolicyRequest is a passthrough to the underlying PutDestinationPolicyRequest.
// It will increment the count of requests made to PutDestinationPolicy.
func (c *CloudWatchLogs) PutDestinationPolicyRequest(input *cloudwatchlogs.PutDestinationPolicyInput) (req *request.Request, output *cloudwatchlogs.PutDestinationPolicyOutput) {
	c.inc("PutDestinationPolicy")
	return c.svc.PutDestinationPolicyRequest(input)
}

// PutDestinationPolicy is a passthrough to the underlying PutDestinationPolicy method.
// It will increment the count of requests made to PutDestinationPolicy.
func (c *CloudWatchLogs) PutDestinationPolicy(input *cloudwatchlogs.PutDestinationPolicyInput) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	c.inc("PutDestinationPolicy")
	return c.svc.PutDestinationPolicy(input)
}

// PutDestinationPolicyWithContext is a passthrough to the underlying PutDestinationPolicyWithContext method.
// It will increment the count of requests made to PutDestinationPolicy.
func (c *CloudWatchLogs) PutDestinationPolicyWithContext(ctx aws.Context, input *cloudwatchlogs.PutDestinationPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	c.inc("PutDestinationPolicy")
	return c.svc.PutDestinationPolicyWithContext(ctx, input, opts...)
}

// PutLogEventsRequest is a passthrough to the underlying PutLogEventsRequest.
// It will increment the count of requests made to PutLogEvents.
func (c *CloudWatchLogs) PutLogEventsRequest(input *cloudwatchlogs.PutLogEventsInput) (req *request.Request, output *cloudwatchlogs.PutLogEventsOutput) {
	c.inc("PutLogEvents")
	return c.svc.PutLogEventsRequest(input)
}

// PutLogEvents is a passthrough to the underlying PutLogEvents method.
// It will increment the count of requests made to PutLogEvents.
func (c *CloudWatchLogs) PutLogEvents(input *cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error) {
	c.inc("PutLogEvents")
	return c.svc.PutLogEvents(input)
}

// PutLogEventsWithContext is a passthrough to the underlying PutLogEventsWithContext method.
// It will increment the count of requests made to PutLogEvents.
func (c *CloudWatchLogs) PutLogEventsWithContext(ctx aws.Context, input *cloudwatchlogs.PutLogEventsInput, opts ...request.Option) (*cloudwatchlogs.PutLogEventsOutput, error) {
	c.inc("PutLogEvents")
	return c.svc.PutLogEventsWithContext(ctx, input, opts...)
}

// PutMetricFilterRequest is a passthrough to the underlying PutMetricFilterRequest.
// It will increment the count of requests made to PutMetricFilter.
func (c *CloudWatchLogs) PutMetricFilterRequest(input *cloudwatchlogs.PutMetricFilterInput) (req *request.Request, output *cloudwatchlogs.PutMetricFilterOutput) {
	c.inc("PutMetricFilter")
	return c.svc.PutMetricFilterRequest(input)
}

// PutMetricFilter is a passthrough to the underlying PutMetricFilter method.
// It will increment the count of requests made to PutMetricFilter.
func (c *CloudWatchLogs) PutMetricFilter(input *cloudwatchlogs.PutMetricFilterInput) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	c.inc("PutMetricFilter")
	return c.svc.PutMetricFilter(input)
}

// PutMetricFilterWithContext is a passthrough to the underlying PutMetricFilterWithContext method.
// It will increment the count of requests made to PutMetricFilter.
func (c *CloudWatchLogs) PutMetricFilterWithContext(ctx aws.Context, input *cloudwatchlogs.PutMetricFilterInput, opts ...request.Option) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	c.inc("PutMetricFilter")
	return c.svc.PutMetricFilterWithContext(ctx, input, opts...)
}

// PutResourcePolicyRequest is a passthrough to the underlying PutResourcePolicyRequest.
// It will increment the count of requests made to PutResourcePolicy.
func (c *CloudWatchLogs) PutResourcePolicyRequest(input *cloudwatchlogs.PutResourcePolicyInput) (req *request.Request, output *cloudwatchlogs.PutResourcePolicyOutput) {
	c.inc("PutResourcePolicy")
	return c.svc.PutResourcePolicyRequest(input)
}

// PutResourcePolicy is a passthrough to the underlying PutResourcePolicy method.
// It will increment the count of requests made to PutResourcePolicy.
func (c *CloudWatchLogs) PutResourcePolicy(input *cloudwatchlogs.PutResourcePolicyInput) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	c.inc("PutResourcePolicy")
	return c.svc.PutResourcePolicy(input)
}

// PutResourcePolicyWithContext is a passthrough to the underlying PutResourcePolicyWithContext method.
// It will increment the count of requests made to PutResourcePolicy.
func (c *CloudWatchLogs) PutResourcePolicyWithContext(ctx aws.Context, input *cloudwatchlogs.PutResourcePolicyInput, opts ...request.Option) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	c.inc("PutResourcePolicy")
	return c.svc.PutResourcePolicyWithContext(ctx, input, opts...)
}

// PutRetentionPolicyRequest is a passthrough to the underlying PutRetentionPolicyRequest.
// It will increment the count of requests made to PutRetentionPolicy.
func (c *CloudWatchLogs) PutRetentionPolicyRequest(input *cloudwatchlogs.PutRetentionPolicyInput) (req *request.Request, output *cloudwatchlogs.PutRetentionPolicyOutput) {
	c.inc("PutRetentionPolicy")
	return c.svc.PutRetentionPolicyRequest(input)
}

// PutRetentionPolicy is a passthrough to the underlying PutRetentionPolicy method.
// It will increment the count of requests made to PutRetentionPolicy.
func (c *CloudWatchLogs) PutRetentionPolicy(input *cloudwatchlogs.PutRetentionPolicyInput) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	c.inc("PutRetentionPolicy")
	return c.svc.PutRetentionPolicy(input)
}

// PutRetentionPolicyWithContext is a passthrough to the underlying PutRetentionPolicyWithContext method.
// It will increment the count of requests made to PutRetentionPolicy.
func (c *CloudWatchLogs) PutRetentionPolicyWithContext(ctx aws.Context, input *cloudwatchlogs.PutRetentionPolicyInput, opts ...request.Option) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	c.inc("PutRetentionPolicy")
	return c.svc.PutRetentionPolicyWithContext(ctx, input, opts...)
}

// PutSubscriptionFilterRequest is a passthrough to the underlying PutSubscriptionFilterRequest.
// It will increment the count of requests made to PutSubscriptionFilter.
func (c *CloudWatchLogs) PutSubscriptionFilterRequest(input *cloudwatchlogs.PutSubscriptionFilterInput) (req *request.Request, output *cloudwatchlogs.PutSubscriptionFilterOutput) {
	c.inc("PutSubscriptionFilter")
	return c.svc.PutSubscriptionFilterRequest(input)
}

// PutSubscriptionFilter is a passthrough to the underlying PutSubscriptionFilter method.
// It will increment the count of requests made to PutSubscriptionFilter.
func (c *CloudWatchLogs) PutSubscriptionFilter(input *cloudwatchlogs.PutSubscriptionFilterInput) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	c.inc("PutSubscriptionFilter")
	return c.svc.PutSubscriptionFilter(input)
}

// PutSubscriptionFilterWithContext is a passthrough to the underlying PutSubscriptionFilterWithContext method.
// It will increment the count of requests made to PutSubscriptionFilter.
func (c *CloudWatchLogs) PutSubscriptionFilterWithContext(ctx aws.Context, input *cloudwatchlogs.PutSubscriptionFilterInput, opts ...request.Option) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	c.inc("PutSubscriptionFilter")
	return c.svc.PutSubscriptionFilterWithContext(ctx, input, opts...)
}

// TagLogGroupRequest is a passthrough to the underlying TagLogGroupRequest.
// It will increment the count of requests made to TagLogGroup.
func (c *CloudWatchLogs) TagLogGroupRequest(input *cloudwatchlogs.TagLogGroupInput) (req *request.Request, output *cloudwatchlogs.TagLogGroupOutput) {
	c.inc("TagLogGroup")
	return c.svc.TagLogGroupRequest(input)
}

// TagLogGroup is a passthrough to the underlying TagLogGroup method.
// It will increment the count of requests made to TagLogGroup.
func (c *CloudWatchLogs) TagLogGroup(input *cloudwatchlogs.TagLogGroupInput) (*cloudwatchlogs.TagLogGroupOutput, error) {
	c.inc("TagLogGroup")
	return c.svc.TagLogGroup(input)
}

// TagLogGroupWithContext is a passthrough to the underlying TagLogGroupWithContext method.
// It will increment the count of requests made to TagLogGroup.
func (c *CloudWatchLogs) TagLogGroupWithContext(ctx aws.Context, input *cloudwatchlogs.TagLogGroupInput, opts ...request.Option) (*cloudwatchlogs.TagLogGroupOutput, error) {
	c.inc("TagLogGroup")
	return c.svc.TagLogGroupWithContext(ctx, input, opts...)
}

// TestMetricFilterRequest is a passthrough to the underlying TestMetricFilterRequest.
// It will increment the count of requests made to TestMetricFilter.
func (c *CloudWatchLogs) TestMetricFilterRequest(input *cloudwatchlogs.TestMetricFilterInput) (req *request.Request, output *cloudwatchlogs.TestMetricFilterOutput) {
	c.inc("TestMetricFilter")
	return c.svc.TestMetricFilterRequest(input)
}

// TestMetricFilter is a passthrough to the underlying TestMetricFilter method.
// It will increment the count of requests made to TestMetricFilter.
func (c *CloudWatchLogs) TestMetricFilter(input *cloudwatchlogs.TestMetricFilterInput) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	c.inc("TestMetricFilter")
	return c.svc.TestMetricFilter(input)
}

// TestMetricFilterWithContext is a passthrough to the underlying TestMetricFilterWithContext method.
// It will increment the count of requests made to TestMetricFilter.
func (c *CloudWatchLogs) TestMetricFilterWithContext(ctx aws.Context, input *cloudwatchlogs.TestMetricFilterInput, opts ...request.Option) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	c.inc("TestMetricFilter")
	return c.svc.TestMetricFilterWithContext(ctx, input, opts...)
}

// UntagLogGroupRequest is a passthrough to the underlying UntagLogGroupRequest.
// It will increment the count of requests made to UntagLogGroup.
func (c *CloudWatchLogs) UntagLogGroupRequest(input *cloudwatchlogs.UntagLogGroupInput) (req *request.Request, output *cloudwatchlogs.UntagLogGroupOutput) {
	c.inc("UntagLogGroup")
	return c.svc.UntagLogGroupRequest(input)
}

// UntagLogGroup is a passthrough to the underlying UntagLogGroup method.
// It will increment the count of requests made to UntagLogGroup.
func (c *CloudWatchLogs) UntagLogGroup(input *cloudwatchlogs.UntagLogGroupInput) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	c.inc("UntagLogGroup")
	return c.svc.UntagLogGroup(input)
}

// UntagLogGroupWithContext is a passthrough to the underlying UntagLogGroupWithContext method.
// It will increment the count of requests made to UntagLogGroup.
func (c *CloudWatchLogs) UntagLogGroupWithContext(ctx aws.Context, input *cloudwatchlogs.UntagLogGroupInput, opts ...request.Option) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	c.inc("UntagLogGroup")
	return c.svc.UntagLogGroupWithContext(ctx, input, opts...)
}
