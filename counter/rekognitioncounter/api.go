// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rekognitioncounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/rekognition"
)

// CompareFacesRequest is a passthrough to the underlying CompareFacesRequest.
// It will increment the count of requests made to CompareFaces.
func (c *Rekognition) CompareFacesRequest(input *rekognition.CompareFacesInput) (req *request.Request, output *rekognition.CompareFacesOutput) {
	c.inc("CompareFaces")
	return c.svc.CompareFacesRequest(input)
}

// CompareFaces is a passthrough to the underlying CompareFaces method.
// It will increment the count of requests made to CompareFaces.
func (c *Rekognition) CompareFaces(input *rekognition.CompareFacesInput) (*rekognition.CompareFacesOutput, error) {
	c.inc("CompareFaces")
	return c.svc.CompareFaces(input)
}

// CompareFacesWithContext is a passthrough to the underlying CompareFacesWithContext method.
// It will increment the count of requests made to CompareFaces.
func (c *Rekognition) CompareFacesWithContext(ctx aws.Context, input *rekognition.CompareFacesInput, opts ...request.Option) (*rekognition.CompareFacesOutput, error) {
	c.inc("CompareFaces")
	return c.svc.CompareFacesWithContext(ctx, input, opts...)
}

// CreateCollectionRequest is a passthrough to the underlying CreateCollectionRequest.
// It will increment the count of requests made to CreateCollection.
func (c *Rekognition) CreateCollectionRequest(input *rekognition.CreateCollectionInput) (req *request.Request, output *rekognition.CreateCollectionOutput) {
	c.inc("CreateCollection")
	return c.svc.CreateCollectionRequest(input)
}

// CreateCollection is a passthrough to the underlying CreateCollection method.
// It will increment the count of requests made to CreateCollection.
func (c *Rekognition) CreateCollection(input *rekognition.CreateCollectionInput) (*rekognition.CreateCollectionOutput, error) {
	c.inc("CreateCollection")
	return c.svc.CreateCollection(input)
}

// CreateCollectionWithContext is a passthrough to the underlying CreateCollectionWithContext method.
// It will increment the count of requests made to CreateCollection.
func (c *Rekognition) CreateCollectionWithContext(ctx aws.Context, input *rekognition.CreateCollectionInput, opts ...request.Option) (*rekognition.CreateCollectionOutput, error) {
	c.inc("CreateCollection")
	return c.svc.CreateCollectionWithContext(ctx, input, opts...)
}

// DeleteCollectionRequest is a passthrough to the underlying DeleteCollectionRequest.
// It will increment the count of requests made to DeleteCollection.
func (c *Rekognition) DeleteCollectionRequest(input *rekognition.DeleteCollectionInput) (req *request.Request, output *rekognition.DeleteCollectionOutput) {
	c.inc("DeleteCollection")
	return c.svc.DeleteCollectionRequest(input)
}

// DeleteCollection is a passthrough to the underlying DeleteCollection method.
// It will increment the count of requests made to DeleteCollection.
func (c *Rekognition) DeleteCollection(input *rekognition.DeleteCollectionInput) (*rekognition.DeleteCollectionOutput, error) {
	c.inc("DeleteCollection")
	return c.svc.DeleteCollection(input)
}

// DeleteCollectionWithContext is a passthrough to the underlying DeleteCollectionWithContext method.
// It will increment the count of requests made to DeleteCollection.
func (c *Rekognition) DeleteCollectionWithContext(ctx aws.Context, input *rekognition.DeleteCollectionInput, opts ...request.Option) (*rekognition.DeleteCollectionOutput, error) {
	c.inc("DeleteCollection")
	return c.svc.DeleteCollectionWithContext(ctx, input, opts...)
}

// DeleteFacesRequest is a passthrough to the underlying DeleteFacesRequest.
// It will increment the count of requests made to DeleteFaces.
func (c *Rekognition) DeleteFacesRequest(input *rekognition.DeleteFacesInput) (req *request.Request, output *rekognition.DeleteFacesOutput) {
	c.inc("DeleteFaces")
	return c.svc.DeleteFacesRequest(input)
}

// DeleteFaces is a passthrough to the underlying DeleteFaces method.
// It will increment the count of requests made to DeleteFaces.
func (c *Rekognition) DeleteFaces(input *rekognition.DeleteFacesInput) (*rekognition.DeleteFacesOutput, error) {
	c.inc("DeleteFaces")
	return c.svc.DeleteFaces(input)
}

// DeleteFacesWithContext is a passthrough to the underlying DeleteFacesWithContext method.
// It will increment the count of requests made to DeleteFaces.
func (c *Rekognition) DeleteFacesWithContext(ctx aws.Context, input *rekognition.DeleteFacesInput, opts ...request.Option) (*rekognition.DeleteFacesOutput, error) {
	c.inc("DeleteFaces")
	return c.svc.DeleteFacesWithContext(ctx, input, opts...)
}

// DetectFacesRequest is a passthrough to the underlying DetectFacesRequest.
// It will increment the count of requests made to DetectFaces.
func (c *Rekognition) DetectFacesRequest(input *rekognition.DetectFacesInput) (req *request.Request, output *rekognition.DetectFacesOutput) {
	c.inc("DetectFaces")
	return c.svc.DetectFacesRequest(input)
}

// DetectFaces is a passthrough to the underlying DetectFaces method.
// It will increment the count of requests made to DetectFaces.
func (c *Rekognition) DetectFaces(input *rekognition.DetectFacesInput) (*rekognition.DetectFacesOutput, error) {
	c.inc("DetectFaces")
	return c.svc.DetectFaces(input)
}

// DetectFacesWithContext is a passthrough to the underlying DetectFacesWithContext method.
// It will increment the count of requests made to DetectFaces.
func (c *Rekognition) DetectFacesWithContext(ctx aws.Context, input *rekognition.DetectFacesInput, opts ...request.Option) (*rekognition.DetectFacesOutput, error) {
	c.inc("DetectFaces")
	return c.svc.DetectFacesWithContext(ctx, input, opts...)
}

// DetectLabelsRequest is a passthrough to the underlying DetectLabelsRequest.
// It will increment the count of requests made to DetectLabels.
func (c *Rekognition) DetectLabelsRequest(input *rekognition.DetectLabelsInput) (req *request.Request, output *rekognition.DetectLabelsOutput) {
	c.inc("DetectLabels")
	return c.svc.DetectLabelsRequest(input)
}

// DetectLabels is a passthrough to the underlying DetectLabels method.
// It will increment the count of requests made to DetectLabels.
func (c *Rekognition) DetectLabels(input *rekognition.DetectLabelsInput) (*rekognition.DetectLabelsOutput, error) {
	c.inc("DetectLabels")
	return c.svc.DetectLabels(input)
}

// DetectLabelsWithContext is a passthrough to the underlying DetectLabelsWithContext method.
// It will increment the count of requests made to DetectLabels.
func (c *Rekognition) DetectLabelsWithContext(ctx aws.Context, input *rekognition.DetectLabelsInput, opts ...request.Option) (*rekognition.DetectLabelsOutput, error) {
	c.inc("DetectLabels")
	return c.svc.DetectLabelsWithContext(ctx, input, opts...)
}

// DetectModerationLabelsRequest is a passthrough to the underlying DetectModerationLabelsRequest.
// It will increment the count of requests made to DetectModerationLabels.
func (c *Rekognition) DetectModerationLabelsRequest(input *rekognition.DetectModerationLabelsInput) (req *request.Request, output *rekognition.DetectModerationLabelsOutput) {
	c.inc("DetectModerationLabels")
	return c.svc.DetectModerationLabelsRequest(input)
}

// DetectModerationLabels is a passthrough to the underlying DetectModerationLabels method.
// It will increment the count of requests made to DetectModerationLabels.
func (c *Rekognition) DetectModerationLabels(input *rekognition.DetectModerationLabelsInput) (*rekognition.DetectModerationLabelsOutput, error) {
	c.inc("DetectModerationLabels")
	return c.svc.DetectModerationLabels(input)
}

// DetectModerationLabelsWithContext is a passthrough to the underlying DetectModerationLabelsWithContext method.
// It will increment the count of requests made to DetectModerationLabels.
func (c *Rekognition) DetectModerationLabelsWithContext(ctx aws.Context, input *rekognition.DetectModerationLabelsInput, opts ...request.Option) (*rekognition.DetectModerationLabelsOutput, error) {
	c.inc("DetectModerationLabels")
	return c.svc.DetectModerationLabelsWithContext(ctx, input, opts...)
}

// GetCelebrityInfoRequest is a passthrough to the underlying GetCelebrityInfoRequest.
// It will increment the count of requests made to GetCelebrityInfo.
func (c *Rekognition) GetCelebrityInfoRequest(input *rekognition.GetCelebrityInfoInput) (req *request.Request, output *rekognition.GetCelebrityInfoOutput) {
	c.inc("GetCelebrityInfo")
	return c.svc.GetCelebrityInfoRequest(input)
}

// GetCelebrityInfo is a passthrough to the underlying GetCelebrityInfo method.
// It will increment the count of requests made to GetCelebrityInfo.
func (c *Rekognition) GetCelebrityInfo(input *rekognition.GetCelebrityInfoInput) (*rekognition.GetCelebrityInfoOutput, error) {
	c.inc("GetCelebrityInfo")
	return c.svc.GetCelebrityInfo(input)
}

// GetCelebrityInfoWithContext is a passthrough to the underlying GetCelebrityInfoWithContext method.
// It will increment the count of requests made to GetCelebrityInfo.
func (c *Rekognition) GetCelebrityInfoWithContext(ctx aws.Context, input *rekognition.GetCelebrityInfoInput, opts ...request.Option) (*rekognition.GetCelebrityInfoOutput, error) {
	c.inc("GetCelebrityInfo")
	return c.svc.GetCelebrityInfoWithContext(ctx, input, opts...)
}

// IndexFacesRequest is a passthrough to the underlying IndexFacesRequest.
// It will increment the count of requests made to IndexFaces.
func (c *Rekognition) IndexFacesRequest(input *rekognition.IndexFacesInput) (req *request.Request, output *rekognition.IndexFacesOutput) {
	c.inc("IndexFaces")
	return c.svc.IndexFacesRequest(input)
}

// IndexFaces is a passthrough to the underlying IndexFaces method.
// It will increment the count of requests made to IndexFaces.
func (c *Rekognition) IndexFaces(input *rekognition.IndexFacesInput) (*rekognition.IndexFacesOutput, error) {
	c.inc("IndexFaces")
	return c.svc.IndexFaces(input)
}

// IndexFacesWithContext is a passthrough to the underlying IndexFacesWithContext method.
// It will increment the count of requests made to IndexFaces.
func (c *Rekognition) IndexFacesWithContext(ctx aws.Context, input *rekognition.IndexFacesInput, opts ...request.Option) (*rekognition.IndexFacesOutput, error) {
	c.inc("IndexFaces")
	return c.svc.IndexFacesWithContext(ctx, input, opts...)
}

// ListCollectionsRequest is a passthrough to the underlying ListCollectionsRequest.
// It will increment the count of requests made to ListCollections.
func (c *Rekognition) ListCollectionsRequest(input *rekognition.ListCollectionsInput) (req *request.Request, output *rekognition.ListCollectionsOutput) {
	c.inc("ListCollections")
	return c.svc.ListCollectionsRequest(input)
}

// ListCollections is a passthrough to the underlying ListCollections method.
// It will increment the count of requests made to ListCollections.
func (c *Rekognition) ListCollections(input *rekognition.ListCollectionsInput) (*rekognition.ListCollectionsOutput, error) {
	c.inc("ListCollections")
	return c.svc.ListCollections(input)
}

// ListCollectionsWithContext is a passthrough to the underlying ListCollectionsWithContext method.
// It will increment the count of requests made to ListCollections.
func (c *Rekognition) ListCollectionsWithContext(ctx aws.Context, input *rekognition.ListCollectionsInput, opts ...request.Option) (*rekognition.ListCollectionsOutput, error) {
	c.inc("ListCollections")
	return c.svc.ListCollectionsWithContext(ctx, input, opts...)
}

// ListCollectionsPages is a passthrough to the underlying ListCollectionsPages method.
// It will increment the count of requests made to ListCollections on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListCollectionsPagesWithContext to avoid this.
func (c *Rekognition) ListCollectionsPages(input *rekognition.ListCollectionsInput, fn func(*rekognition.ListCollectionsOutput, bool) bool) error {
	wrappedFn := func(page *rekognition.ListCollectionsOutput, lastPage bool) bool {
		c.inc("ListCollections")
		return fn(page, lastPage)
	}
	return c.svc.ListCollectionsPages(input, wrappedFn)
}

// ListCollectionsPagesWithContext is a passthrough to the underlying ListCollectionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListCollections when applied to the request.
func (c *Rekognition) ListCollectionsPagesWithContext(ctx aws.Context, input *rekognition.ListCollectionsInput, fn func(*rekognition.ListCollectionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListCollections"))
	return c.svc.ListCollectionsPagesWithContext(ctx, input, fn, opts...)
}

// ListFacesRequest is a passthrough to the underlying ListFacesRequest.
// It will increment the count of requests made to ListFaces.
func (c *Rekognition) ListFacesRequest(input *rekognition.ListFacesInput) (req *request.Request, output *rekognition.ListFacesOutput) {
	c.inc("ListFaces")
	return c.svc.ListFacesRequest(input)
}

// ListFaces is a passthrough to the underlying ListFaces method.
// It will increment the count of requests made to ListFaces.
func (c *Rekognition) ListFaces(input *rekognition.ListFacesInput) (*rekognition.ListFacesOutput, error) {
	c.inc("ListFaces")
	return c.svc.ListFaces(input)
}

// ListFacesWithContext is a passthrough to the underlying ListFacesWithContext method.
// It will increment the count of requests made to ListFaces.
func (c *Rekognition) ListFacesWithContext(ctx aws.Context, input *rekognition.ListFacesInput, opts ...request.Option) (*rekognition.ListFacesOutput, error) {
	c.inc("ListFaces")
	return c.svc.ListFacesWithContext(ctx, input, opts...)
}

// ListFacesPages is a passthrough to the underlying ListFacesPages method.
// It will increment the count of requests made to ListFaces on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListFacesPagesWithContext to avoid this.
func (c *Rekognition) ListFacesPages(input *rekognition.ListFacesInput, fn func(*rekognition.ListFacesOutput, bool) bool) error {
	wrappedFn := func(page *rekognition.ListFacesOutput, lastPage bool) bool {
		c.inc("ListFaces")
		return fn(page, lastPage)
	}
	return c.svc.ListFacesPages(input, wrappedFn)
}

// ListFacesPagesWithContext is a passthrough to the underlying ListFacesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListFaces when applied to the request.
func (c *Rekognition) ListFacesPagesWithContext(ctx aws.Context, input *rekognition.ListFacesInput, fn func(*rekognition.ListFacesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListFaces"))
	return c.svc.ListFacesPagesWithContext(ctx, input, fn, opts...)
}

// RecognizeCelebritiesRequest is a passthrough to the underlying RecognizeCelebritiesRequest.
// It will increment the count of requests made to RecognizeCelebrities.
func (c *Rekognition) RecognizeCelebritiesRequest(input *rekognition.RecognizeCelebritiesInput) (req *request.Request, output *rekognition.RecognizeCelebritiesOutput) {
	c.inc("RecognizeCelebrities")
	return c.svc.RecognizeCelebritiesRequest(input)
}

// RecognizeCelebrities is a passthrough to the underlying RecognizeCelebrities method.
// It will increment the count of requests made to RecognizeCelebrities.
func (c *Rekognition) RecognizeCelebrities(input *rekognition.RecognizeCelebritiesInput) (*rekognition.RecognizeCelebritiesOutput, error) {
	c.inc("RecognizeCelebrities")
	return c.svc.RecognizeCelebrities(input)
}

// RecognizeCelebritiesWithContext is a passthrough to the underlying RecognizeCelebritiesWithContext method.
// It will increment the count of requests made to RecognizeCelebrities.
func (c *Rekognition) RecognizeCelebritiesWithContext(ctx aws.Context, input *rekognition.RecognizeCelebritiesInput, opts ...request.Option) (*rekognition.RecognizeCelebritiesOutput, error) {
	c.inc("RecognizeCelebrities")
	return c.svc.RecognizeCelebritiesWithContext(ctx, input, opts...)
}

// SearchFacesRequest is a passthrough to the underlying SearchFacesRequest.
// It will increment the count of requests made to SearchFaces.
func (c *Rekognition) SearchFacesRequest(input *rekognition.SearchFacesInput) (req *request.Request, output *rekognition.SearchFacesOutput) {
	c.inc("SearchFaces")
	return c.svc.SearchFacesRequest(input)
}

// SearchFaces is a passthrough to the underlying SearchFaces method.
// It will increment the count of requests made to SearchFaces.
func (c *Rekognition) SearchFaces(input *rekognition.SearchFacesInput) (*rekognition.SearchFacesOutput, error) {
	c.inc("SearchFaces")
	return c.svc.SearchFaces(input)
}

// SearchFacesWithContext is a passthrough to the underlying SearchFacesWithContext method.
// It will increment the count of requests made to SearchFaces.
func (c *Rekognition) SearchFacesWithContext(ctx aws.Context, input *rekognition.SearchFacesInput, opts ...request.Option) (*rekognition.SearchFacesOutput, error) {
	c.inc("SearchFaces")
	return c.svc.SearchFacesWithContext(ctx, input, opts...)
}

// SearchFacesByImageRequest is a passthrough to the underlying SearchFacesByImageRequest.
// It will increment the count of requests made to SearchFacesByImage.
func (c *Rekognition) SearchFacesByImageRequest(input *rekognition.SearchFacesByImageInput) (req *request.Request, output *rekognition.SearchFacesByImageOutput) {
	c.inc("SearchFacesByImage")
	return c.svc.SearchFacesByImageRequest(input)
}

// SearchFacesByImage is a passthrough to the underlying SearchFacesByImage method.
// It will increment the count of requests made to SearchFacesByImage.
func (c *Rekognition) SearchFacesByImage(input *rekognition.SearchFacesByImageInput) (*rekognition.SearchFacesByImageOutput, error) {
	c.inc("SearchFacesByImage")
	return c.svc.SearchFacesByImage(input)
}

// SearchFacesByImageWithContext is a passthrough to the underlying SearchFacesByImageWithContext method.
// It will increment the count of requests made to SearchFacesByImage.
func (c *Rekognition) SearchFacesByImageWithContext(ctx aws.Context, input *rekognition.SearchFacesByImageInput, opts ...request.Option) (*rekognition.SearchFacesByImageOutput, error) {
	c.inc("SearchFacesByImage")
	return c.svc.SearchFacesByImageWithContext(ctx, input, opts...)
}
