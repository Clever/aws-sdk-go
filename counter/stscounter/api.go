// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package stscounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/sts"
)

// AssumeRoleRequest is a passthrough to the underlying AssumeRoleRequest.
// It will increment the count of requests made to AssumeRole.
func (c *STS) AssumeRoleRequest(input *sts.AssumeRoleInput) (req *request.Request, output *sts.AssumeRoleOutput) {
	c.inc("AssumeRole")
	return c.svc.AssumeRoleRequest(input)
}

// AssumeRole is a passthrough to the underlying AssumeRole method.
// It will increment the count of requests made to AssumeRole.
func (c *STS) AssumeRole(input *sts.AssumeRoleInput) (*sts.AssumeRoleOutput, error) {
	c.inc("AssumeRole")
	return c.svc.AssumeRole(input)
}

// AssumeRoleWithContext is a passthrough to the underlying AssumeRoleWithContext method.
// It will increment the count of requests made to AssumeRole.
func (c *STS) AssumeRoleWithContext(ctx aws.Context, input *sts.AssumeRoleInput, opts ...request.Option) (*sts.AssumeRoleOutput, error) {
	c.inc("AssumeRole")
	return c.svc.AssumeRoleWithContext(ctx, input, opts...)
}

// AssumeRoleWithSAMLRequest is a passthrough to the underlying AssumeRoleWithSAMLRequest.
// It will increment the count of requests made to AssumeRoleWithSAML.
func (c *STS) AssumeRoleWithSAMLRequest(input *sts.AssumeRoleWithSAMLInput) (req *request.Request, output *sts.AssumeRoleWithSAMLOutput) {
	c.inc("AssumeRoleWithSAML")
	return c.svc.AssumeRoleWithSAMLRequest(input)
}

// AssumeRoleWithSAML is a passthrough to the underlying AssumeRoleWithSAML method.
// It will increment the count of requests made to AssumeRoleWithSAML.
func (c *STS) AssumeRoleWithSAML(input *sts.AssumeRoleWithSAMLInput) (*sts.AssumeRoleWithSAMLOutput, error) {
	c.inc("AssumeRoleWithSAML")
	return c.svc.AssumeRoleWithSAML(input)
}

// AssumeRoleWithSAMLWithContext is a passthrough to the underlying AssumeRoleWithSAMLWithContext method.
// It will increment the count of requests made to AssumeRoleWithSAML.
func (c *STS) AssumeRoleWithSAMLWithContext(ctx aws.Context, input *sts.AssumeRoleWithSAMLInput, opts ...request.Option) (*sts.AssumeRoleWithSAMLOutput, error) {
	c.inc("AssumeRoleWithSAML")
	return c.svc.AssumeRoleWithSAMLWithContext(ctx, input, opts...)
}

// AssumeRoleWithWebIdentityRequest is a passthrough to the underlying AssumeRoleWithWebIdentityRequest.
// It will increment the count of requests made to AssumeRoleWithWebIdentity.
func (c *STS) AssumeRoleWithWebIdentityRequest(input *sts.AssumeRoleWithWebIdentityInput) (req *request.Request, output *sts.AssumeRoleWithWebIdentityOutput) {
	c.inc("AssumeRoleWithWebIdentity")
	return c.svc.AssumeRoleWithWebIdentityRequest(input)
}

// AssumeRoleWithWebIdentity is a passthrough to the underlying AssumeRoleWithWebIdentity method.
// It will increment the count of requests made to AssumeRoleWithWebIdentity.
func (c *STS) AssumeRoleWithWebIdentity(input *sts.AssumeRoleWithWebIdentityInput) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	c.inc("AssumeRoleWithWebIdentity")
	return c.svc.AssumeRoleWithWebIdentity(input)
}

// AssumeRoleWithWebIdentityWithContext is a passthrough to the underlying AssumeRoleWithWebIdentityWithContext method.
// It will increment the count of requests made to AssumeRoleWithWebIdentity.
func (c *STS) AssumeRoleWithWebIdentityWithContext(ctx aws.Context, input *sts.AssumeRoleWithWebIdentityInput, opts ...request.Option) (*sts.AssumeRoleWithWebIdentityOutput, error) {
	c.inc("AssumeRoleWithWebIdentity")
	return c.svc.AssumeRoleWithWebIdentityWithContext(ctx, input, opts...)
}

// DecodeAuthorizationMessageRequest is a passthrough to the underlying DecodeAuthorizationMessageRequest.
// It will increment the count of requests made to DecodeAuthorizationMessage.
func (c *STS) DecodeAuthorizationMessageRequest(input *sts.DecodeAuthorizationMessageInput) (req *request.Request, output *sts.DecodeAuthorizationMessageOutput) {
	c.inc("DecodeAuthorizationMessage")
	return c.svc.DecodeAuthorizationMessageRequest(input)
}

// DecodeAuthorizationMessage is a passthrough to the underlying DecodeAuthorizationMessage method.
// It will increment the count of requests made to DecodeAuthorizationMessage.
func (c *STS) DecodeAuthorizationMessage(input *sts.DecodeAuthorizationMessageInput) (*sts.DecodeAuthorizationMessageOutput, error) {
	c.inc("DecodeAuthorizationMessage")
	return c.svc.DecodeAuthorizationMessage(input)
}

// DecodeAuthorizationMessageWithContext is a passthrough to the underlying DecodeAuthorizationMessageWithContext method.
// It will increment the count of requests made to DecodeAuthorizationMessage.
func (c *STS) DecodeAuthorizationMessageWithContext(ctx aws.Context, input *sts.DecodeAuthorizationMessageInput, opts ...request.Option) (*sts.DecodeAuthorizationMessageOutput, error) {
	c.inc("DecodeAuthorizationMessage")
	return c.svc.DecodeAuthorizationMessageWithContext(ctx, input, opts...)
}

// GetCallerIdentityRequest is a passthrough to the underlying GetCallerIdentityRequest.
// It will increment the count of requests made to GetCallerIdentity.
func (c *STS) GetCallerIdentityRequest(input *sts.GetCallerIdentityInput) (req *request.Request, output *sts.GetCallerIdentityOutput) {
	c.inc("GetCallerIdentity")
	return c.svc.GetCallerIdentityRequest(input)
}

// GetCallerIdentity is a passthrough to the underlying GetCallerIdentity method.
// It will increment the count of requests made to GetCallerIdentity.
func (c *STS) GetCallerIdentity(input *sts.GetCallerIdentityInput) (*sts.GetCallerIdentityOutput, error) {
	c.inc("GetCallerIdentity")
	return c.svc.GetCallerIdentity(input)
}

// GetCallerIdentityWithContext is a passthrough to the underlying GetCallerIdentityWithContext method.
// It will increment the count of requests made to GetCallerIdentity.
func (c *STS) GetCallerIdentityWithContext(ctx aws.Context, input *sts.GetCallerIdentityInput, opts ...request.Option) (*sts.GetCallerIdentityOutput, error) {
	c.inc("GetCallerIdentity")
	return c.svc.GetCallerIdentityWithContext(ctx, input, opts...)
}

// GetFederationTokenRequest is a passthrough to the underlying GetFederationTokenRequest.
// It will increment the count of requests made to GetFederationToken.
func (c *STS) GetFederationTokenRequest(input *sts.GetFederationTokenInput) (req *request.Request, output *sts.GetFederationTokenOutput) {
	c.inc("GetFederationToken")
	return c.svc.GetFederationTokenRequest(input)
}

// GetFederationToken is a passthrough to the underlying GetFederationToken method.
// It will increment the count of requests made to GetFederationToken.
func (c *STS) GetFederationToken(input *sts.GetFederationTokenInput) (*sts.GetFederationTokenOutput, error) {
	c.inc("GetFederationToken")
	return c.svc.GetFederationToken(input)
}

// GetFederationTokenWithContext is a passthrough to the underlying GetFederationTokenWithContext method.
// It will increment the count of requests made to GetFederationToken.
func (c *STS) GetFederationTokenWithContext(ctx aws.Context, input *sts.GetFederationTokenInput, opts ...request.Option) (*sts.GetFederationTokenOutput, error) {
	c.inc("GetFederationToken")
	return c.svc.GetFederationTokenWithContext(ctx, input, opts...)
}

// GetSessionTokenRequest is a passthrough to the underlying GetSessionTokenRequest.
// It will increment the count of requests made to GetSessionToken.
func (c *STS) GetSessionTokenRequest(input *sts.GetSessionTokenInput) (req *request.Request, output *sts.GetSessionTokenOutput) {
	c.inc("GetSessionToken")
	return c.svc.GetSessionTokenRequest(input)
}

// GetSessionToken is a passthrough to the underlying GetSessionToken method.
// It will increment the count of requests made to GetSessionToken.
func (c *STS) GetSessionToken(input *sts.GetSessionTokenInput) (*sts.GetSessionTokenOutput, error) {
	c.inc("GetSessionToken")
	return c.svc.GetSessionToken(input)
}

// GetSessionTokenWithContext is a passthrough to the underlying GetSessionTokenWithContext method.
// It will increment the count of requests made to GetSessionToken.
func (c *STS) GetSessionTokenWithContext(ctx aws.Context, input *sts.GetSessionTokenInput, opts ...request.Option) (*sts.GetSessionTokenOutput, error) {
	c.inc("GetSessionToken")
	return c.svc.GetSessionTokenWithContext(ctx, input, opts...)
}
