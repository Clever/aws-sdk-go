// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package cloudwatchcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudwatch"
)

// DeleteAlarmsRequest is a passthrough to the underlying DeleteAlarmsRequest.
// It will increment the count of requests made to DeleteAlarms.
func (c *CloudWatch) DeleteAlarmsRequest(input *cloudwatch.DeleteAlarmsInput) (req *request.Request, output *cloudwatch.DeleteAlarmsOutput) {
	c.inc("DeleteAlarms")
	return c.svc.DeleteAlarmsRequest(input)
}

// DeleteAlarms is a passthrough to the underlying DeleteAlarms method.
// It will increment the count of requests made to DeleteAlarms.
func (c *CloudWatch) DeleteAlarms(input *cloudwatch.DeleteAlarmsInput) (*cloudwatch.DeleteAlarmsOutput, error) {
	c.inc("DeleteAlarms")
	return c.svc.DeleteAlarms(input)
}

// DeleteAlarmsWithContext is a passthrough to the underlying DeleteAlarmsWithContext method.
// It will increment the count of requests made to DeleteAlarms.
func (c *CloudWatch) DeleteAlarmsWithContext(ctx aws.Context, input *cloudwatch.DeleteAlarmsInput, opts ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error) {
	c.inc("DeleteAlarms")
	return c.svc.DeleteAlarmsWithContext(ctx, input, opts...)
}

// DeleteDashboardsRequest is a passthrough to the underlying DeleteDashboardsRequest.
// It will increment the count of requests made to DeleteDashboards.
func (c *CloudWatch) DeleteDashboardsRequest(input *cloudwatch.DeleteDashboardsInput) (req *request.Request, output *cloudwatch.DeleteDashboardsOutput) {
	c.inc("DeleteDashboards")
	return c.svc.DeleteDashboardsRequest(input)
}

// DeleteDashboards is a passthrough to the underlying DeleteDashboards method.
// It will increment the count of requests made to DeleteDashboards.
func (c *CloudWatch) DeleteDashboards(input *cloudwatch.DeleteDashboardsInput) (*cloudwatch.DeleteDashboardsOutput, error) {
	c.inc("DeleteDashboards")
	return c.svc.DeleteDashboards(input)
}

// DeleteDashboardsWithContext is a passthrough to the underlying DeleteDashboardsWithContext method.
// It will increment the count of requests made to DeleteDashboards.
func (c *CloudWatch) DeleteDashboardsWithContext(ctx aws.Context, input *cloudwatch.DeleteDashboardsInput, opts ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error) {
	c.inc("DeleteDashboards")
	return c.svc.DeleteDashboardsWithContext(ctx, input, opts...)
}

// DescribeAlarmHistoryRequest is a passthrough to the underlying DescribeAlarmHistoryRequest.
// It will increment the count of requests made to DescribeAlarmHistory.
func (c *CloudWatch) DescribeAlarmHistoryRequest(input *cloudwatch.DescribeAlarmHistoryInput) (req *request.Request, output *cloudwatch.DescribeAlarmHistoryOutput) {
	c.inc("DescribeAlarmHistory")
	return c.svc.DescribeAlarmHistoryRequest(input)
}

// DescribeAlarmHistory is a passthrough to the underlying DescribeAlarmHistory method.
// It will increment the count of requests made to DescribeAlarmHistory.
func (c *CloudWatch) DescribeAlarmHistory(input *cloudwatch.DescribeAlarmHistoryInput) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	c.inc("DescribeAlarmHistory")
	return c.svc.DescribeAlarmHistory(input)
}

// DescribeAlarmHistoryWithContext is a passthrough to the underlying DescribeAlarmHistoryWithContext method.
// It will increment the count of requests made to DescribeAlarmHistory.
func (c *CloudWatch) DescribeAlarmHistoryWithContext(ctx aws.Context, input *cloudwatch.DescribeAlarmHistoryInput, opts ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	c.inc("DescribeAlarmHistory")
	return c.svc.DescribeAlarmHistoryWithContext(ctx, input, opts...)
}

// DescribeAlarmHistoryPages is a passthrough to the underlying DescribeAlarmHistoryPages method.
// It will increment the count of requests made to DescribeAlarmHistory on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeAlarmHistoryPagesWithContext to avoid this.
func (c *CloudWatch) DescribeAlarmHistoryPages(input *cloudwatch.DescribeAlarmHistoryInput, fn func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) error {
	wrappedFn := func(page *cloudwatch.DescribeAlarmHistoryOutput, lastPage bool) bool {
		c.inc("DescribeAlarmHistory")
		return fn(page, lastPage)
	}
	return c.svc.DescribeAlarmHistoryPages(input, wrappedFn)
}

// DescribeAlarmHistoryPagesWithContext is a passthrough to the underlying DescribeAlarmHistoryPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeAlarmHistory when applied to the request.
func (c *CloudWatch) DescribeAlarmHistoryPagesWithContext(ctx aws.Context, input *cloudwatch.DescribeAlarmHistoryInput, fn func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeAlarmHistory"))
	return c.svc.DescribeAlarmHistoryPagesWithContext(ctx, input, fn, opts...)
}

// DescribeAlarmsRequest is a passthrough to the underlying DescribeAlarmsRequest.
// It will increment the count of requests made to DescribeAlarms.
func (c *CloudWatch) DescribeAlarmsRequest(input *cloudwatch.DescribeAlarmsInput) (req *request.Request, output *cloudwatch.DescribeAlarmsOutput) {
	c.inc("DescribeAlarms")
	return c.svc.DescribeAlarmsRequest(input)
}

// DescribeAlarms is a passthrough to the underlying DescribeAlarms method.
// It will increment the count of requests made to DescribeAlarms.
func (c *CloudWatch) DescribeAlarms(input *cloudwatch.DescribeAlarmsInput) (*cloudwatch.DescribeAlarmsOutput, error) {
	c.inc("DescribeAlarms")
	return c.svc.DescribeAlarms(input)
}

// DescribeAlarmsWithContext is a passthrough to the underlying DescribeAlarmsWithContext method.
// It will increment the count of requests made to DescribeAlarms.
func (c *CloudWatch) DescribeAlarmsWithContext(ctx aws.Context, input *cloudwatch.DescribeAlarmsInput, opts ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error) {
	c.inc("DescribeAlarms")
	return c.svc.DescribeAlarmsWithContext(ctx, input, opts...)
}

// DescribeAlarmsPages is a passthrough to the underlying DescribeAlarmsPages method.
// It will increment the count of requests made to DescribeAlarms on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeAlarmsPagesWithContext to avoid this.
func (c *CloudWatch) DescribeAlarmsPages(input *cloudwatch.DescribeAlarmsInput, fn func(*cloudwatch.DescribeAlarmsOutput, bool) bool) error {
	wrappedFn := func(page *cloudwatch.DescribeAlarmsOutput, lastPage bool) bool {
		c.inc("DescribeAlarms")
		return fn(page, lastPage)
	}
	return c.svc.DescribeAlarmsPages(input, wrappedFn)
}

// DescribeAlarmsPagesWithContext is a passthrough to the underlying DescribeAlarmsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeAlarms when applied to the request.
func (c *CloudWatch) DescribeAlarmsPagesWithContext(ctx aws.Context, input *cloudwatch.DescribeAlarmsInput, fn func(*cloudwatch.DescribeAlarmsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeAlarms"))
	return c.svc.DescribeAlarmsPagesWithContext(ctx, input, fn, opts...)
}

// DescribeAlarmsForMetricRequest is a passthrough to the underlying DescribeAlarmsForMetricRequest.
// It will increment the count of requests made to DescribeAlarmsForMetric.
func (c *CloudWatch) DescribeAlarmsForMetricRequest(input *cloudwatch.DescribeAlarmsForMetricInput) (req *request.Request, output *cloudwatch.DescribeAlarmsForMetricOutput) {
	c.inc("DescribeAlarmsForMetric")
	return c.svc.DescribeAlarmsForMetricRequest(input)
}

// DescribeAlarmsForMetric is a passthrough to the underlying DescribeAlarmsForMetric method.
// It will increment the count of requests made to DescribeAlarmsForMetric.
func (c *CloudWatch) DescribeAlarmsForMetric(input *cloudwatch.DescribeAlarmsForMetricInput) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	c.inc("DescribeAlarmsForMetric")
	return c.svc.DescribeAlarmsForMetric(input)
}

// DescribeAlarmsForMetricWithContext is a passthrough to the underlying DescribeAlarmsForMetricWithContext method.
// It will increment the count of requests made to DescribeAlarmsForMetric.
func (c *CloudWatch) DescribeAlarmsForMetricWithContext(ctx aws.Context, input *cloudwatch.DescribeAlarmsForMetricInput, opts ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	c.inc("DescribeAlarmsForMetric")
	return c.svc.DescribeAlarmsForMetricWithContext(ctx, input, opts...)
}

// DisableAlarmActionsRequest is a passthrough to the underlying DisableAlarmActionsRequest.
// It will increment the count of requests made to DisableAlarmActions.
func (c *CloudWatch) DisableAlarmActionsRequest(input *cloudwatch.DisableAlarmActionsInput) (req *request.Request, output *cloudwatch.DisableAlarmActionsOutput) {
	c.inc("DisableAlarmActions")
	return c.svc.DisableAlarmActionsRequest(input)
}

// DisableAlarmActions is a passthrough to the underlying DisableAlarmActions method.
// It will increment the count of requests made to DisableAlarmActions.
func (c *CloudWatch) DisableAlarmActions(input *cloudwatch.DisableAlarmActionsInput) (*cloudwatch.DisableAlarmActionsOutput, error) {
	c.inc("DisableAlarmActions")
	return c.svc.DisableAlarmActions(input)
}

// DisableAlarmActionsWithContext is a passthrough to the underlying DisableAlarmActionsWithContext method.
// It will increment the count of requests made to DisableAlarmActions.
func (c *CloudWatch) DisableAlarmActionsWithContext(ctx aws.Context, input *cloudwatch.DisableAlarmActionsInput, opts ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error) {
	c.inc("DisableAlarmActions")
	return c.svc.DisableAlarmActionsWithContext(ctx, input, opts...)
}

// EnableAlarmActionsRequest is a passthrough to the underlying EnableAlarmActionsRequest.
// It will increment the count of requests made to EnableAlarmActions.
func (c *CloudWatch) EnableAlarmActionsRequest(input *cloudwatch.EnableAlarmActionsInput) (req *request.Request, output *cloudwatch.EnableAlarmActionsOutput) {
	c.inc("EnableAlarmActions")
	return c.svc.EnableAlarmActionsRequest(input)
}

// EnableAlarmActions is a passthrough to the underlying EnableAlarmActions method.
// It will increment the count of requests made to EnableAlarmActions.
func (c *CloudWatch) EnableAlarmActions(input *cloudwatch.EnableAlarmActionsInput) (*cloudwatch.EnableAlarmActionsOutput, error) {
	c.inc("EnableAlarmActions")
	return c.svc.EnableAlarmActions(input)
}

// EnableAlarmActionsWithContext is a passthrough to the underlying EnableAlarmActionsWithContext method.
// It will increment the count of requests made to EnableAlarmActions.
func (c *CloudWatch) EnableAlarmActionsWithContext(ctx aws.Context, input *cloudwatch.EnableAlarmActionsInput, opts ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error) {
	c.inc("EnableAlarmActions")
	return c.svc.EnableAlarmActionsWithContext(ctx, input, opts...)
}

// GetDashboardRequest is a passthrough to the underlying GetDashboardRequest.
// It will increment the count of requests made to GetDashboard.
func (c *CloudWatch) GetDashboardRequest(input *cloudwatch.GetDashboardInput) (req *request.Request, output *cloudwatch.GetDashboardOutput) {
	c.inc("GetDashboard")
	return c.svc.GetDashboardRequest(input)
}

// GetDashboard is a passthrough to the underlying GetDashboard method.
// It will increment the count of requests made to GetDashboard.
func (c *CloudWatch) GetDashboard(input *cloudwatch.GetDashboardInput) (*cloudwatch.GetDashboardOutput, error) {
	c.inc("GetDashboard")
	return c.svc.GetDashboard(input)
}

// GetDashboardWithContext is a passthrough to the underlying GetDashboardWithContext method.
// It will increment the count of requests made to GetDashboard.
func (c *CloudWatch) GetDashboardWithContext(ctx aws.Context, input *cloudwatch.GetDashboardInput, opts ...request.Option) (*cloudwatch.GetDashboardOutput, error) {
	c.inc("GetDashboard")
	return c.svc.GetDashboardWithContext(ctx, input, opts...)
}

// GetMetricStatisticsRequest is a passthrough to the underlying GetMetricStatisticsRequest.
// It will increment the count of requests made to GetMetricStatistics.
func (c *CloudWatch) GetMetricStatisticsRequest(input *cloudwatch.GetMetricStatisticsInput) (req *request.Request, output *cloudwatch.GetMetricStatisticsOutput) {
	c.inc("GetMetricStatistics")
	return c.svc.GetMetricStatisticsRequest(input)
}

// GetMetricStatistics is a passthrough to the underlying GetMetricStatistics method.
// It will increment the count of requests made to GetMetricStatistics.
func (c *CloudWatch) GetMetricStatistics(input *cloudwatch.GetMetricStatisticsInput) (*cloudwatch.GetMetricStatisticsOutput, error) {
	c.inc("GetMetricStatistics")
	return c.svc.GetMetricStatistics(input)
}

// GetMetricStatisticsWithContext is a passthrough to the underlying GetMetricStatisticsWithContext method.
// It will increment the count of requests made to GetMetricStatistics.
func (c *CloudWatch) GetMetricStatisticsWithContext(ctx aws.Context, input *cloudwatch.GetMetricStatisticsInput, opts ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error) {
	c.inc("GetMetricStatistics")
	return c.svc.GetMetricStatisticsWithContext(ctx, input, opts...)
}

// ListDashboardsRequest is a passthrough to the underlying ListDashboardsRequest.
// It will increment the count of requests made to ListDashboards.
func (c *CloudWatch) ListDashboardsRequest(input *cloudwatch.ListDashboardsInput) (req *request.Request, output *cloudwatch.ListDashboardsOutput) {
	c.inc("ListDashboards")
	return c.svc.ListDashboardsRequest(input)
}

// ListDashboards is a passthrough to the underlying ListDashboards method.
// It will increment the count of requests made to ListDashboards.
func (c *CloudWatch) ListDashboards(input *cloudwatch.ListDashboardsInput) (*cloudwatch.ListDashboardsOutput, error) {
	c.inc("ListDashboards")
	return c.svc.ListDashboards(input)
}

// ListDashboardsWithContext is a passthrough to the underlying ListDashboardsWithContext method.
// It will increment the count of requests made to ListDashboards.
func (c *CloudWatch) ListDashboardsWithContext(ctx aws.Context, input *cloudwatch.ListDashboardsInput, opts ...request.Option) (*cloudwatch.ListDashboardsOutput, error) {
	c.inc("ListDashboards")
	return c.svc.ListDashboardsWithContext(ctx, input, opts...)
}

// ListMetricsRequest is a passthrough to the underlying ListMetricsRequest.
// It will increment the count of requests made to ListMetrics.
func (c *CloudWatch) ListMetricsRequest(input *cloudwatch.ListMetricsInput) (req *request.Request, output *cloudwatch.ListMetricsOutput) {
	c.inc("ListMetrics")
	return c.svc.ListMetricsRequest(input)
}

// ListMetrics is a passthrough to the underlying ListMetrics method.
// It will increment the count of requests made to ListMetrics.
func (c *CloudWatch) ListMetrics(input *cloudwatch.ListMetricsInput) (*cloudwatch.ListMetricsOutput, error) {
	c.inc("ListMetrics")
	return c.svc.ListMetrics(input)
}

// ListMetricsWithContext is a passthrough to the underlying ListMetricsWithContext method.
// It will increment the count of requests made to ListMetrics.
func (c *CloudWatch) ListMetricsWithContext(ctx aws.Context, input *cloudwatch.ListMetricsInput, opts ...request.Option) (*cloudwatch.ListMetricsOutput, error) {
	c.inc("ListMetrics")
	return c.svc.ListMetricsWithContext(ctx, input, opts...)
}

// ListMetricsPages is a passthrough to the underlying ListMetricsPages method.
// It will increment the count of requests made to ListMetrics on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListMetricsPagesWithContext to avoid this.
func (c *CloudWatch) ListMetricsPages(input *cloudwatch.ListMetricsInput, fn func(*cloudwatch.ListMetricsOutput, bool) bool) error {
	wrappedFn := func(page *cloudwatch.ListMetricsOutput, lastPage bool) bool {
		c.inc("ListMetrics")
		return fn(page, lastPage)
	}
	return c.svc.ListMetricsPages(input, wrappedFn)
}

// ListMetricsPagesWithContext is a passthrough to the underlying ListMetricsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListMetrics when applied to the request.
func (c *CloudWatch) ListMetricsPagesWithContext(ctx aws.Context, input *cloudwatch.ListMetricsInput, fn func(*cloudwatch.ListMetricsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListMetrics"))
	return c.svc.ListMetricsPagesWithContext(ctx, input, fn, opts...)
}

// PutDashboardRequest is a passthrough to the underlying PutDashboardRequest.
// It will increment the count of requests made to PutDashboard.
func (c *CloudWatch) PutDashboardRequest(input *cloudwatch.PutDashboardInput) (req *request.Request, output *cloudwatch.PutDashboardOutput) {
	c.inc("PutDashboard")
	return c.svc.PutDashboardRequest(input)
}

// PutDashboard is a passthrough to the underlying PutDashboard method.
// It will increment the count of requests made to PutDashboard.
func (c *CloudWatch) PutDashboard(input *cloudwatch.PutDashboardInput) (*cloudwatch.PutDashboardOutput, error) {
	c.inc("PutDashboard")
	return c.svc.PutDashboard(input)
}

// PutDashboardWithContext is a passthrough to the underlying PutDashboardWithContext method.
// It will increment the count of requests made to PutDashboard.
func (c *CloudWatch) PutDashboardWithContext(ctx aws.Context, input *cloudwatch.PutDashboardInput, opts ...request.Option) (*cloudwatch.PutDashboardOutput, error) {
	c.inc("PutDashboard")
	return c.svc.PutDashboardWithContext(ctx, input, opts...)
}

// PutMetricAlarmRequest is a passthrough to the underlying PutMetricAlarmRequest.
// It will increment the count of requests made to PutMetricAlarm.
func (c *CloudWatch) PutMetricAlarmRequest(input *cloudwatch.PutMetricAlarmInput) (req *request.Request, output *cloudwatch.PutMetricAlarmOutput) {
	c.inc("PutMetricAlarm")
	return c.svc.PutMetricAlarmRequest(input)
}

// PutMetricAlarm is a passthrough to the underlying PutMetricAlarm method.
// It will increment the count of requests made to PutMetricAlarm.
func (c *CloudWatch) PutMetricAlarm(input *cloudwatch.PutMetricAlarmInput) (*cloudwatch.PutMetricAlarmOutput, error) {
	c.inc("PutMetricAlarm")
	return c.svc.PutMetricAlarm(input)
}

// PutMetricAlarmWithContext is a passthrough to the underlying PutMetricAlarmWithContext method.
// It will increment the count of requests made to PutMetricAlarm.
func (c *CloudWatch) PutMetricAlarmWithContext(ctx aws.Context, input *cloudwatch.PutMetricAlarmInput, opts ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error) {
	c.inc("PutMetricAlarm")
	return c.svc.PutMetricAlarmWithContext(ctx, input, opts...)
}

// PutMetricDataRequest is a passthrough to the underlying PutMetricDataRequest.
// It will increment the count of requests made to PutMetricData.
func (c *CloudWatch) PutMetricDataRequest(input *cloudwatch.PutMetricDataInput) (req *request.Request, output *cloudwatch.PutMetricDataOutput) {
	c.inc("PutMetricData")
	return c.svc.PutMetricDataRequest(input)
}

// PutMetricData is a passthrough to the underlying PutMetricData method.
// It will increment the count of requests made to PutMetricData.
func (c *CloudWatch) PutMetricData(input *cloudwatch.PutMetricDataInput) (*cloudwatch.PutMetricDataOutput, error) {
	c.inc("PutMetricData")
	return c.svc.PutMetricData(input)
}

// PutMetricDataWithContext is a passthrough to the underlying PutMetricDataWithContext method.
// It will increment the count of requests made to PutMetricData.
func (c *CloudWatch) PutMetricDataWithContext(ctx aws.Context, input *cloudwatch.PutMetricDataInput, opts ...request.Option) (*cloudwatch.PutMetricDataOutput, error) {
	c.inc("PutMetricData")
	return c.svc.PutMetricDataWithContext(ctx, input, opts...)
}

// SetAlarmStateRequest is a passthrough to the underlying SetAlarmStateRequest.
// It will increment the count of requests made to SetAlarmState.
func (c *CloudWatch) SetAlarmStateRequest(input *cloudwatch.SetAlarmStateInput) (req *request.Request, output *cloudwatch.SetAlarmStateOutput) {
	c.inc("SetAlarmState")
	return c.svc.SetAlarmStateRequest(input)
}

// SetAlarmState is a passthrough to the underlying SetAlarmState method.
// It will increment the count of requests made to SetAlarmState.
func (c *CloudWatch) SetAlarmState(input *cloudwatch.SetAlarmStateInput) (*cloudwatch.SetAlarmStateOutput, error) {
	c.inc("SetAlarmState")
	return c.svc.SetAlarmState(input)
}

// SetAlarmStateWithContext is a passthrough to the underlying SetAlarmStateWithContext method.
// It will increment the count of requests made to SetAlarmState.
func (c *CloudWatch) SetAlarmStateWithContext(ctx aws.Context, input *cloudwatch.SetAlarmStateInput, opts ...request.Option) (*cloudwatch.SetAlarmStateOutput, error) {
	c.inc("SetAlarmState")
	return c.svc.SetAlarmStateWithContext(ctx, input, opts...)
}
