// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package lightsailcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/lightsail"
)

// AllocateStaticIpRequest is a passthrough to the underlying AllocateStaticIpRequest.
// It will increment the count of requests made to AllocateStaticIp.
func (c *Lightsail) AllocateStaticIpRequest(input *lightsail.AllocateStaticIpInput) (req *request.Request, output *lightsail.AllocateStaticIpOutput) {
	c.inc("AllocateStaticIp")
	return c.svc.AllocateStaticIpRequest(input)
}

// AllocateStaticIp is a passthrough to the underlying AllocateStaticIp method.
// It will increment the count of requests made to AllocateStaticIp.
func (c *Lightsail) AllocateStaticIp(input *lightsail.AllocateStaticIpInput) (*lightsail.AllocateStaticIpOutput, error) {
	c.inc("AllocateStaticIp")
	return c.svc.AllocateStaticIp(input)
}

// AllocateStaticIpWithContext is a passthrough to the underlying AllocateStaticIpWithContext method.
// It will increment the count of requests made to AllocateStaticIp.
func (c *Lightsail) AllocateStaticIpWithContext(ctx aws.Context, input *lightsail.AllocateStaticIpInput, opts ...request.Option) (*lightsail.AllocateStaticIpOutput, error) {
	c.inc("AllocateStaticIp")
	return c.svc.AllocateStaticIpWithContext(ctx, input, opts...)
}

// AttachDiskRequest is a passthrough to the underlying AttachDiskRequest.
// It will increment the count of requests made to AttachDisk.
func (c *Lightsail) AttachDiskRequest(input *lightsail.AttachDiskInput) (req *request.Request, output *lightsail.AttachDiskOutput) {
	c.inc("AttachDisk")
	return c.svc.AttachDiskRequest(input)
}

// AttachDisk is a passthrough to the underlying AttachDisk method.
// It will increment the count of requests made to AttachDisk.
func (c *Lightsail) AttachDisk(input *lightsail.AttachDiskInput) (*lightsail.AttachDiskOutput, error) {
	c.inc("AttachDisk")
	return c.svc.AttachDisk(input)
}

// AttachDiskWithContext is a passthrough to the underlying AttachDiskWithContext method.
// It will increment the count of requests made to AttachDisk.
func (c *Lightsail) AttachDiskWithContext(ctx aws.Context, input *lightsail.AttachDiskInput, opts ...request.Option) (*lightsail.AttachDiskOutput, error) {
	c.inc("AttachDisk")
	return c.svc.AttachDiskWithContext(ctx, input, opts...)
}

// AttachInstancesToLoadBalancerRequest is a passthrough to the underlying AttachInstancesToLoadBalancerRequest.
// It will increment the count of requests made to AttachInstancesToLoadBalancer.
func (c *Lightsail) AttachInstancesToLoadBalancerRequest(input *lightsail.AttachInstancesToLoadBalancerInput) (req *request.Request, output *lightsail.AttachInstancesToLoadBalancerOutput) {
	c.inc("AttachInstancesToLoadBalancer")
	return c.svc.AttachInstancesToLoadBalancerRequest(input)
}

// AttachInstancesToLoadBalancer is a passthrough to the underlying AttachInstancesToLoadBalancer method.
// It will increment the count of requests made to AttachInstancesToLoadBalancer.
func (c *Lightsail) AttachInstancesToLoadBalancer(input *lightsail.AttachInstancesToLoadBalancerInput) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	c.inc("AttachInstancesToLoadBalancer")
	return c.svc.AttachInstancesToLoadBalancer(input)
}

// AttachInstancesToLoadBalancerWithContext is a passthrough to the underlying AttachInstancesToLoadBalancerWithContext method.
// It will increment the count of requests made to AttachInstancesToLoadBalancer.
func (c *Lightsail) AttachInstancesToLoadBalancerWithContext(ctx aws.Context, input *lightsail.AttachInstancesToLoadBalancerInput, opts ...request.Option) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	c.inc("AttachInstancesToLoadBalancer")
	return c.svc.AttachInstancesToLoadBalancerWithContext(ctx, input, opts...)
}

// AttachLoadBalancerTlsCertificateRequest is a passthrough to the underlying AttachLoadBalancerTlsCertificateRequest.
// It will increment the count of requests made to AttachLoadBalancerTlsCertificate.
func (c *Lightsail) AttachLoadBalancerTlsCertificateRequest(input *lightsail.AttachLoadBalancerTlsCertificateInput) (req *request.Request, output *lightsail.AttachLoadBalancerTlsCertificateOutput) {
	c.inc("AttachLoadBalancerTlsCertificate")
	return c.svc.AttachLoadBalancerTlsCertificateRequest(input)
}

// AttachLoadBalancerTlsCertificate is a passthrough to the underlying AttachLoadBalancerTlsCertificate method.
// It will increment the count of requests made to AttachLoadBalancerTlsCertificate.
func (c *Lightsail) AttachLoadBalancerTlsCertificate(input *lightsail.AttachLoadBalancerTlsCertificateInput) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	c.inc("AttachLoadBalancerTlsCertificate")
	return c.svc.AttachLoadBalancerTlsCertificate(input)
}

// AttachLoadBalancerTlsCertificateWithContext is a passthrough to the underlying AttachLoadBalancerTlsCertificateWithContext method.
// It will increment the count of requests made to AttachLoadBalancerTlsCertificate.
func (c *Lightsail) AttachLoadBalancerTlsCertificateWithContext(ctx aws.Context, input *lightsail.AttachLoadBalancerTlsCertificateInput, opts ...request.Option) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	c.inc("AttachLoadBalancerTlsCertificate")
	return c.svc.AttachLoadBalancerTlsCertificateWithContext(ctx, input, opts...)
}

// AttachStaticIpRequest is a passthrough to the underlying AttachStaticIpRequest.
// It will increment the count of requests made to AttachStaticIp.
func (c *Lightsail) AttachStaticIpRequest(input *lightsail.AttachStaticIpInput) (req *request.Request, output *lightsail.AttachStaticIpOutput) {
	c.inc("AttachStaticIp")
	return c.svc.AttachStaticIpRequest(input)
}

// AttachStaticIp is a passthrough to the underlying AttachStaticIp method.
// It will increment the count of requests made to AttachStaticIp.
func (c *Lightsail) AttachStaticIp(input *lightsail.AttachStaticIpInput) (*lightsail.AttachStaticIpOutput, error) {
	c.inc("AttachStaticIp")
	return c.svc.AttachStaticIp(input)
}

// AttachStaticIpWithContext is a passthrough to the underlying AttachStaticIpWithContext method.
// It will increment the count of requests made to AttachStaticIp.
func (c *Lightsail) AttachStaticIpWithContext(ctx aws.Context, input *lightsail.AttachStaticIpInput, opts ...request.Option) (*lightsail.AttachStaticIpOutput, error) {
	c.inc("AttachStaticIp")
	return c.svc.AttachStaticIpWithContext(ctx, input, opts...)
}

// CloseInstancePublicPortsRequest is a passthrough to the underlying CloseInstancePublicPortsRequest.
// It will increment the count of requests made to CloseInstancePublicPorts.
func (c *Lightsail) CloseInstancePublicPortsRequest(input *lightsail.CloseInstancePublicPortsInput) (req *request.Request, output *lightsail.CloseInstancePublicPortsOutput) {
	c.inc("CloseInstancePublicPorts")
	return c.svc.CloseInstancePublicPortsRequest(input)
}

// CloseInstancePublicPorts is a passthrough to the underlying CloseInstancePublicPorts method.
// It will increment the count of requests made to CloseInstancePublicPorts.
func (c *Lightsail) CloseInstancePublicPorts(input *lightsail.CloseInstancePublicPortsInput) (*lightsail.CloseInstancePublicPortsOutput, error) {
	c.inc("CloseInstancePublicPorts")
	return c.svc.CloseInstancePublicPorts(input)
}

// CloseInstancePublicPortsWithContext is a passthrough to the underlying CloseInstancePublicPortsWithContext method.
// It will increment the count of requests made to CloseInstancePublicPorts.
func (c *Lightsail) CloseInstancePublicPortsWithContext(ctx aws.Context, input *lightsail.CloseInstancePublicPortsInput, opts ...request.Option) (*lightsail.CloseInstancePublicPortsOutput, error) {
	c.inc("CloseInstancePublicPorts")
	return c.svc.CloseInstancePublicPortsWithContext(ctx, input, opts...)
}

// CreateDiskRequest is a passthrough to the underlying CreateDiskRequest.
// It will increment the count of requests made to CreateDisk.
func (c *Lightsail) CreateDiskRequest(input *lightsail.CreateDiskInput) (req *request.Request, output *lightsail.CreateDiskOutput) {
	c.inc("CreateDisk")
	return c.svc.CreateDiskRequest(input)
}

// CreateDisk is a passthrough to the underlying CreateDisk method.
// It will increment the count of requests made to CreateDisk.
func (c *Lightsail) CreateDisk(input *lightsail.CreateDiskInput) (*lightsail.CreateDiskOutput, error) {
	c.inc("CreateDisk")
	return c.svc.CreateDisk(input)
}

// CreateDiskWithContext is a passthrough to the underlying CreateDiskWithContext method.
// It will increment the count of requests made to CreateDisk.
func (c *Lightsail) CreateDiskWithContext(ctx aws.Context, input *lightsail.CreateDiskInput, opts ...request.Option) (*lightsail.CreateDiskOutput, error) {
	c.inc("CreateDisk")
	return c.svc.CreateDiskWithContext(ctx, input, opts...)
}

// CreateDiskFromSnapshotRequest is a passthrough to the underlying CreateDiskFromSnapshotRequest.
// It will increment the count of requests made to CreateDiskFromSnapshot.
func (c *Lightsail) CreateDiskFromSnapshotRequest(input *lightsail.CreateDiskFromSnapshotInput) (req *request.Request, output *lightsail.CreateDiskFromSnapshotOutput) {
	c.inc("CreateDiskFromSnapshot")
	return c.svc.CreateDiskFromSnapshotRequest(input)
}

// CreateDiskFromSnapshot is a passthrough to the underlying CreateDiskFromSnapshot method.
// It will increment the count of requests made to CreateDiskFromSnapshot.
func (c *Lightsail) CreateDiskFromSnapshot(input *lightsail.CreateDiskFromSnapshotInput) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	c.inc("CreateDiskFromSnapshot")
	return c.svc.CreateDiskFromSnapshot(input)
}

// CreateDiskFromSnapshotWithContext is a passthrough to the underlying CreateDiskFromSnapshotWithContext method.
// It will increment the count of requests made to CreateDiskFromSnapshot.
func (c *Lightsail) CreateDiskFromSnapshotWithContext(ctx aws.Context, input *lightsail.CreateDiskFromSnapshotInput, opts ...request.Option) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	c.inc("CreateDiskFromSnapshot")
	return c.svc.CreateDiskFromSnapshotWithContext(ctx, input, opts...)
}

// CreateDiskSnapshotRequest is a passthrough to the underlying CreateDiskSnapshotRequest.
// It will increment the count of requests made to CreateDiskSnapshot.
func (c *Lightsail) CreateDiskSnapshotRequest(input *lightsail.CreateDiskSnapshotInput) (req *request.Request, output *lightsail.CreateDiskSnapshotOutput) {
	c.inc("CreateDiskSnapshot")
	return c.svc.CreateDiskSnapshotRequest(input)
}

// CreateDiskSnapshot is a passthrough to the underlying CreateDiskSnapshot method.
// It will increment the count of requests made to CreateDiskSnapshot.
func (c *Lightsail) CreateDiskSnapshot(input *lightsail.CreateDiskSnapshotInput) (*lightsail.CreateDiskSnapshotOutput, error) {
	c.inc("CreateDiskSnapshot")
	return c.svc.CreateDiskSnapshot(input)
}

// CreateDiskSnapshotWithContext is a passthrough to the underlying CreateDiskSnapshotWithContext method.
// It will increment the count of requests made to CreateDiskSnapshot.
func (c *Lightsail) CreateDiskSnapshotWithContext(ctx aws.Context, input *lightsail.CreateDiskSnapshotInput, opts ...request.Option) (*lightsail.CreateDiskSnapshotOutput, error) {
	c.inc("CreateDiskSnapshot")
	return c.svc.CreateDiskSnapshotWithContext(ctx, input, opts...)
}

// CreateDomainRequest is a passthrough to the underlying CreateDomainRequest.
// It will increment the count of requests made to CreateDomain.
func (c *Lightsail) CreateDomainRequest(input *lightsail.CreateDomainInput) (req *request.Request, output *lightsail.CreateDomainOutput) {
	c.inc("CreateDomain")
	return c.svc.CreateDomainRequest(input)
}

// CreateDomain is a passthrough to the underlying CreateDomain method.
// It will increment the count of requests made to CreateDomain.
func (c *Lightsail) CreateDomain(input *lightsail.CreateDomainInput) (*lightsail.CreateDomainOutput, error) {
	c.inc("CreateDomain")
	return c.svc.CreateDomain(input)
}

// CreateDomainWithContext is a passthrough to the underlying CreateDomainWithContext method.
// It will increment the count of requests made to CreateDomain.
func (c *Lightsail) CreateDomainWithContext(ctx aws.Context, input *lightsail.CreateDomainInput, opts ...request.Option) (*lightsail.CreateDomainOutput, error) {
	c.inc("CreateDomain")
	return c.svc.CreateDomainWithContext(ctx, input, opts...)
}

// CreateDomainEntryRequest is a passthrough to the underlying CreateDomainEntryRequest.
// It will increment the count of requests made to CreateDomainEntry.
func (c *Lightsail) CreateDomainEntryRequest(input *lightsail.CreateDomainEntryInput) (req *request.Request, output *lightsail.CreateDomainEntryOutput) {
	c.inc("CreateDomainEntry")
	return c.svc.CreateDomainEntryRequest(input)
}

// CreateDomainEntry is a passthrough to the underlying CreateDomainEntry method.
// It will increment the count of requests made to CreateDomainEntry.
func (c *Lightsail) CreateDomainEntry(input *lightsail.CreateDomainEntryInput) (*lightsail.CreateDomainEntryOutput, error) {
	c.inc("CreateDomainEntry")
	return c.svc.CreateDomainEntry(input)
}

// CreateDomainEntryWithContext is a passthrough to the underlying CreateDomainEntryWithContext method.
// It will increment the count of requests made to CreateDomainEntry.
func (c *Lightsail) CreateDomainEntryWithContext(ctx aws.Context, input *lightsail.CreateDomainEntryInput, opts ...request.Option) (*lightsail.CreateDomainEntryOutput, error) {
	c.inc("CreateDomainEntry")
	return c.svc.CreateDomainEntryWithContext(ctx, input, opts...)
}

// CreateInstanceSnapshotRequest is a passthrough to the underlying CreateInstanceSnapshotRequest.
// It will increment the count of requests made to CreateInstanceSnapshot.
func (c *Lightsail) CreateInstanceSnapshotRequest(input *lightsail.CreateInstanceSnapshotInput) (req *request.Request, output *lightsail.CreateInstanceSnapshotOutput) {
	c.inc("CreateInstanceSnapshot")
	return c.svc.CreateInstanceSnapshotRequest(input)
}

// CreateInstanceSnapshot is a passthrough to the underlying CreateInstanceSnapshot method.
// It will increment the count of requests made to CreateInstanceSnapshot.
func (c *Lightsail) CreateInstanceSnapshot(input *lightsail.CreateInstanceSnapshotInput) (*lightsail.CreateInstanceSnapshotOutput, error) {
	c.inc("CreateInstanceSnapshot")
	return c.svc.CreateInstanceSnapshot(input)
}

// CreateInstanceSnapshotWithContext is a passthrough to the underlying CreateInstanceSnapshotWithContext method.
// It will increment the count of requests made to CreateInstanceSnapshot.
func (c *Lightsail) CreateInstanceSnapshotWithContext(ctx aws.Context, input *lightsail.CreateInstanceSnapshotInput, opts ...request.Option) (*lightsail.CreateInstanceSnapshotOutput, error) {
	c.inc("CreateInstanceSnapshot")
	return c.svc.CreateInstanceSnapshotWithContext(ctx, input, opts...)
}

// CreateInstancesRequest is a passthrough to the underlying CreateInstancesRequest.
// It will increment the count of requests made to CreateInstances.
func (c *Lightsail) CreateInstancesRequest(input *lightsail.CreateInstancesInput) (req *request.Request, output *lightsail.CreateInstancesOutput) {
	c.inc("CreateInstances")
	return c.svc.CreateInstancesRequest(input)
}

// CreateInstances is a passthrough to the underlying CreateInstances method.
// It will increment the count of requests made to CreateInstances.
func (c *Lightsail) CreateInstances(input *lightsail.CreateInstancesInput) (*lightsail.CreateInstancesOutput, error) {
	c.inc("CreateInstances")
	return c.svc.CreateInstances(input)
}

// CreateInstancesWithContext is a passthrough to the underlying CreateInstancesWithContext method.
// It will increment the count of requests made to CreateInstances.
func (c *Lightsail) CreateInstancesWithContext(ctx aws.Context, input *lightsail.CreateInstancesInput, opts ...request.Option) (*lightsail.CreateInstancesOutput, error) {
	c.inc("CreateInstances")
	return c.svc.CreateInstancesWithContext(ctx, input, opts...)
}

// CreateInstancesFromSnapshotRequest is a passthrough to the underlying CreateInstancesFromSnapshotRequest.
// It will increment the count of requests made to CreateInstancesFromSnapshot.
func (c *Lightsail) CreateInstancesFromSnapshotRequest(input *lightsail.CreateInstancesFromSnapshotInput) (req *request.Request, output *lightsail.CreateInstancesFromSnapshotOutput) {
	c.inc("CreateInstancesFromSnapshot")
	return c.svc.CreateInstancesFromSnapshotRequest(input)
}

// CreateInstancesFromSnapshot is a passthrough to the underlying CreateInstancesFromSnapshot method.
// It will increment the count of requests made to CreateInstancesFromSnapshot.
func (c *Lightsail) CreateInstancesFromSnapshot(input *lightsail.CreateInstancesFromSnapshotInput) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	c.inc("CreateInstancesFromSnapshot")
	return c.svc.CreateInstancesFromSnapshot(input)
}

// CreateInstancesFromSnapshotWithContext is a passthrough to the underlying CreateInstancesFromSnapshotWithContext method.
// It will increment the count of requests made to CreateInstancesFromSnapshot.
func (c *Lightsail) CreateInstancesFromSnapshotWithContext(ctx aws.Context, input *lightsail.CreateInstancesFromSnapshotInput, opts ...request.Option) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	c.inc("CreateInstancesFromSnapshot")
	return c.svc.CreateInstancesFromSnapshotWithContext(ctx, input, opts...)
}

// CreateKeyPairRequest is a passthrough to the underlying CreateKeyPairRequest.
// It will increment the count of requests made to CreateKeyPair.
func (c *Lightsail) CreateKeyPairRequest(input *lightsail.CreateKeyPairInput) (req *request.Request, output *lightsail.CreateKeyPairOutput) {
	c.inc("CreateKeyPair")
	return c.svc.CreateKeyPairRequest(input)
}

// CreateKeyPair is a passthrough to the underlying CreateKeyPair method.
// It will increment the count of requests made to CreateKeyPair.
func (c *Lightsail) CreateKeyPair(input *lightsail.CreateKeyPairInput) (*lightsail.CreateKeyPairOutput, error) {
	c.inc("CreateKeyPair")
	return c.svc.CreateKeyPair(input)
}

// CreateKeyPairWithContext is a passthrough to the underlying CreateKeyPairWithContext method.
// It will increment the count of requests made to CreateKeyPair.
func (c *Lightsail) CreateKeyPairWithContext(ctx aws.Context, input *lightsail.CreateKeyPairInput, opts ...request.Option) (*lightsail.CreateKeyPairOutput, error) {
	c.inc("CreateKeyPair")
	return c.svc.CreateKeyPairWithContext(ctx, input, opts...)
}

// CreateLoadBalancerRequest is a passthrough to the underlying CreateLoadBalancerRequest.
// It will increment the count of requests made to CreateLoadBalancer.
func (c *Lightsail) CreateLoadBalancerRequest(input *lightsail.CreateLoadBalancerInput) (req *request.Request, output *lightsail.CreateLoadBalancerOutput) {
	c.inc("CreateLoadBalancer")
	return c.svc.CreateLoadBalancerRequest(input)
}

// CreateLoadBalancer is a passthrough to the underlying CreateLoadBalancer method.
// It will increment the count of requests made to CreateLoadBalancer.
func (c *Lightsail) CreateLoadBalancer(input *lightsail.CreateLoadBalancerInput) (*lightsail.CreateLoadBalancerOutput, error) {
	c.inc("CreateLoadBalancer")
	return c.svc.CreateLoadBalancer(input)
}

// CreateLoadBalancerWithContext is a passthrough to the underlying CreateLoadBalancerWithContext method.
// It will increment the count of requests made to CreateLoadBalancer.
func (c *Lightsail) CreateLoadBalancerWithContext(ctx aws.Context, input *lightsail.CreateLoadBalancerInput, opts ...request.Option) (*lightsail.CreateLoadBalancerOutput, error) {
	c.inc("CreateLoadBalancer")
	return c.svc.CreateLoadBalancerWithContext(ctx, input, opts...)
}

// CreateLoadBalancerTlsCertificateRequest is a passthrough to the underlying CreateLoadBalancerTlsCertificateRequest.
// It will increment the count of requests made to CreateLoadBalancerTlsCertificate.
func (c *Lightsail) CreateLoadBalancerTlsCertificateRequest(input *lightsail.CreateLoadBalancerTlsCertificateInput) (req *request.Request, output *lightsail.CreateLoadBalancerTlsCertificateOutput) {
	c.inc("CreateLoadBalancerTlsCertificate")
	return c.svc.CreateLoadBalancerTlsCertificateRequest(input)
}

// CreateLoadBalancerTlsCertificate is a passthrough to the underlying CreateLoadBalancerTlsCertificate method.
// It will increment the count of requests made to CreateLoadBalancerTlsCertificate.
func (c *Lightsail) CreateLoadBalancerTlsCertificate(input *lightsail.CreateLoadBalancerTlsCertificateInput) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	c.inc("CreateLoadBalancerTlsCertificate")
	return c.svc.CreateLoadBalancerTlsCertificate(input)
}

// CreateLoadBalancerTlsCertificateWithContext is a passthrough to the underlying CreateLoadBalancerTlsCertificateWithContext method.
// It will increment the count of requests made to CreateLoadBalancerTlsCertificate.
func (c *Lightsail) CreateLoadBalancerTlsCertificateWithContext(ctx aws.Context, input *lightsail.CreateLoadBalancerTlsCertificateInput, opts ...request.Option) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	c.inc("CreateLoadBalancerTlsCertificate")
	return c.svc.CreateLoadBalancerTlsCertificateWithContext(ctx, input, opts...)
}

// DeleteDiskRequest is a passthrough to the underlying DeleteDiskRequest.
// It will increment the count of requests made to DeleteDisk.
func (c *Lightsail) DeleteDiskRequest(input *lightsail.DeleteDiskInput) (req *request.Request, output *lightsail.DeleteDiskOutput) {
	c.inc("DeleteDisk")
	return c.svc.DeleteDiskRequest(input)
}

// DeleteDisk is a passthrough to the underlying DeleteDisk method.
// It will increment the count of requests made to DeleteDisk.
func (c *Lightsail) DeleteDisk(input *lightsail.DeleteDiskInput) (*lightsail.DeleteDiskOutput, error) {
	c.inc("DeleteDisk")
	return c.svc.DeleteDisk(input)
}

// DeleteDiskWithContext is a passthrough to the underlying DeleteDiskWithContext method.
// It will increment the count of requests made to DeleteDisk.
func (c *Lightsail) DeleteDiskWithContext(ctx aws.Context, input *lightsail.DeleteDiskInput, opts ...request.Option) (*lightsail.DeleteDiskOutput, error) {
	c.inc("DeleteDisk")
	return c.svc.DeleteDiskWithContext(ctx, input, opts...)
}

// DeleteDiskSnapshotRequest is a passthrough to the underlying DeleteDiskSnapshotRequest.
// It will increment the count of requests made to DeleteDiskSnapshot.
func (c *Lightsail) DeleteDiskSnapshotRequest(input *lightsail.DeleteDiskSnapshotInput) (req *request.Request, output *lightsail.DeleteDiskSnapshotOutput) {
	c.inc("DeleteDiskSnapshot")
	return c.svc.DeleteDiskSnapshotRequest(input)
}

// DeleteDiskSnapshot is a passthrough to the underlying DeleteDiskSnapshot method.
// It will increment the count of requests made to DeleteDiskSnapshot.
func (c *Lightsail) DeleteDiskSnapshot(input *lightsail.DeleteDiskSnapshotInput) (*lightsail.DeleteDiskSnapshotOutput, error) {
	c.inc("DeleteDiskSnapshot")
	return c.svc.DeleteDiskSnapshot(input)
}

// DeleteDiskSnapshotWithContext is a passthrough to the underlying DeleteDiskSnapshotWithContext method.
// It will increment the count of requests made to DeleteDiskSnapshot.
func (c *Lightsail) DeleteDiskSnapshotWithContext(ctx aws.Context, input *lightsail.DeleteDiskSnapshotInput, opts ...request.Option) (*lightsail.DeleteDiskSnapshotOutput, error) {
	c.inc("DeleteDiskSnapshot")
	return c.svc.DeleteDiskSnapshotWithContext(ctx, input, opts...)
}

// DeleteDomainRequest is a passthrough to the underlying DeleteDomainRequest.
// It will increment the count of requests made to DeleteDomain.
func (c *Lightsail) DeleteDomainRequest(input *lightsail.DeleteDomainInput) (req *request.Request, output *lightsail.DeleteDomainOutput) {
	c.inc("DeleteDomain")
	return c.svc.DeleteDomainRequest(input)
}

// DeleteDomain is a passthrough to the underlying DeleteDomain method.
// It will increment the count of requests made to DeleteDomain.
func (c *Lightsail) DeleteDomain(input *lightsail.DeleteDomainInput) (*lightsail.DeleteDomainOutput, error) {
	c.inc("DeleteDomain")
	return c.svc.DeleteDomain(input)
}

// DeleteDomainWithContext is a passthrough to the underlying DeleteDomainWithContext method.
// It will increment the count of requests made to DeleteDomain.
func (c *Lightsail) DeleteDomainWithContext(ctx aws.Context, input *lightsail.DeleteDomainInput, opts ...request.Option) (*lightsail.DeleteDomainOutput, error) {
	c.inc("DeleteDomain")
	return c.svc.DeleteDomainWithContext(ctx, input, opts...)
}

// DeleteDomainEntryRequest is a passthrough to the underlying DeleteDomainEntryRequest.
// It will increment the count of requests made to DeleteDomainEntry.
func (c *Lightsail) DeleteDomainEntryRequest(input *lightsail.DeleteDomainEntryInput) (req *request.Request, output *lightsail.DeleteDomainEntryOutput) {
	c.inc("DeleteDomainEntry")
	return c.svc.DeleteDomainEntryRequest(input)
}

// DeleteDomainEntry is a passthrough to the underlying DeleteDomainEntry method.
// It will increment the count of requests made to DeleteDomainEntry.
func (c *Lightsail) DeleteDomainEntry(input *lightsail.DeleteDomainEntryInput) (*lightsail.DeleteDomainEntryOutput, error) {
	c.inc("DeleteDomainEntry")
	return c.svc.DeleteDomainEntry(input)
}

// DeleteDomainEntryWithContext is a passthrough to the underlying DeleteDomainEntryWithContext method.
// It will increment the count of requests made to DeleteDomainEntry.
func (c *Lightsail) DeleteDomainEntryWithContext(ctx aws.Context, input *lightsail.DeleteDomainEntryInput, opts ...request.Option) (*lightsail.DeleteDomainEntryOutput, error) {
	c.inc("DeleteDomainEntry")
	return c.svc.DeleteDomainEntryWithContext(ctx, input, opts...)
}

// DeleteInstanceRequest is a passthrough to the underlying DeleteInstanceRequest.
// It will increment the count of requests made to DeleteInstance.
func (c *Lightsail) DeleteInstanceRequest(input *lightsail.DeleteInstanceInput) (req *request.Request, output *lightsail.DeleteInstanceOutput) {
	c.inc("DeleteInstance")
	return c.svc.DeleteInstanceRequest(input)
}

// DeleteInstance is a passthrough to the underlying DeleteInstance method.
// It will increment the count of requests made to DeleteInstance.
func (c *Lightsail) DeleteInstance(input *lightsail.DeleteInstanceInput) (*lightsail.DeleteInstanceOutput, error) {
	c.inc("DeleteInstance")
	return c.svc.DeleteInstance(input)
}

// DeleteInstanceWithContext is a passthrough to the underlying DeleteInstanceWithContext method.
// It will increment the count of requests made to DeleteInstance.
func (c *Lightsail) DeleteInstanceWithContext(ctx aws.Context, input *lightsail.DeleteInstanceInput, opts ...request.Option) (*lightsail.DeleteInstanceOutput, error) {
	c.inc("DeleteInstance")
	return c.svc.DeleteInstanceWithContext(ctx, input, opts...)
}

// DeleteInstanceSnapshotRequest is a passthrough to the underlying DeleteInstanceSnapshotRequest.
// It will increment the count of requests made to DeleteInstanceSnapshot.
func (c *Lightsail) DeleteInstanceSnapshotRequest(input *lightsail.DeleteInstanceSnapshotInput) (req *request.Request, output *lightsail.DeleteInstanceSnapshotOutput) {
	c.inc("DeleteInstanceSnapshot")
	return c.svc.DeleteInstanceSnapshotRequest(input)
}

// DeleteInstanceSnapshot is a passthrough to the underlying DeleteInstanceSnapshot method.
// It will increment the count of requests made to DeleteInstanceSnapshot.
func (c *Lightsail) DeleteInstanceSnapshot(input *lightsail.DeleteInstanceSnapshotInput) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	c.inc("DeleteInstanceSnapshot")
	return c.svc.DeleteInstanceSnapshot(input)
}

// DeleteInstanceSnapshotWithContext is a passthrough to the underlying DeleteInstanceSnapshotWithContext method.
// It will increment the count of requests made to DeleteInstanceSnapshot.
func (c *Lightsail) DeleteInstanceSnapshotWithContext(ctx aws.Context, input *lightsail.DeleteInstanceSnapshotInput, opts ...request.Option) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	c.inc("DeleteInstanceSnapshot")
	return c.svc.DeleteInstanceSnapshotWithContext(ctx, input, opts...)
}

// DeleteKeyPairRequest is a passthrough to the underlying DeleteKeyPairRequest.
// It will increment the count of requests made to DeleteKeyPair.
func (c *Lightsail) DeleteKeyPairRequest(input *lightsail.DeleteKeyPairInput) (req *request.Request, output *lightsail.DeleteKeyPairOutput) {
	c.inc("DeleteKeyPair")
	return c.svc.DeleteKeyPairRequest(input)
}

// DeleteKeyPair is a passthrough to the underlying DeleteKeyPair method.
// It will increment the count of requests made to DeleteKeyPair.
func (c *Lightsail) DeleteKeyPair(input *lightsail.DeleteKeyPairInput) (*lightsail.DeleteKeyPairOutput, error) {
	c.inc("DeleteKeyPair")
	return c.svc.DeleteKeyPair(input)
}

// DeleteKeyPairWithContext is a passthrough to the underlying DeleteKeyPairWithContext method.
// It will increment the count of requests made to DeleteKeyPair.
func (c *Lightsail) DeleteKeyPairWithContext(ctx aws.Context, input *lightsail.DeleteKeyPairInput, opts ...request.Option) (*lightsail.DeleteKeyPairOutput, error) {
	c.inc("DeleteKeyPair")
	return c.svc.DeleteKeyPairWithContext(ctx, input, opts...)
}

// DeleteLoadBalancerRequest is a passthrough to the underlying DeleteLoadBalancerRequest.
// It will increment the count of requests made to DeleteLoadBalancer.
func (c *Lightsail) DeleteLoadBalancerRequest(input *lightsail.DeleteLoadBalancerInput) (req *request.Request, output *lightsail.DeleteLoadBalancerOutput) {
	c.inc("DeleteLoadBalancer")
	return c.svc.DeleteLoadBalancerRequest(input)
}

// DeleteLoadBalancer is a passthrough to the underlying DeleteLoadBalancer method.
// It will increment the count of requests made to DeleteLoadBalancer.
func (c *Lightsail) DeleteLoadBalancer(input *lightsail.DeleteLoadBalancerInput) (*lightsail.DeleteLoadBalancerOutput, error) {
	c.inc("DeleteLoadBalancer")
	return c.svc.DeleteLoadBalancer(input)
}

// DeleteLoadBalancerWithContext is a passthrough to the underlying DeleteLoadBalancerWithContext method.
// It will increment the count of requests made to DeleteLoadBalancer.
func (c *Lightsail) DeleteLoadBalancerWithContext(ctx aws.Context, input *lightsail.DeleteLoadBalancerInput, opts ...request.Option) (*lightsail.DeleteLoadBalancerOutput, error) {
	c.inc("DeleteLoadBalancer")
	return c.svc.DeleteLoadBalancerWithContext(ctx, input, opts...)
}

// DeleteLoadBalancerTlsCertificateRequest is a passthrough to the underlying DeleteLoadBalancerTlsCertificateRequest.
// It will increment the count of requests made to DeleteLoadBalancerTlsCertificate.
func (c *Lightsail) DeleteLoadBalancerTlsCertificateRequest(input *lightsail.DeleteLoadBalancerTlsCertificateInput) (req *request.Request, output *lightsail.DeleteLoadBalancerTlsCertificateOutput) {
	c.inc("DeleteLoadBalancerTlsCertificate")
	return c.svc.DeleteLoadBalancerTlsCertificateRequest(input)
}

// DeleteLoadBalancerTlsCertificate is a passthrough to the underlying DeleteLoadBalancerTlsCertificate method.
// It will increment the count of requests made to DeleteLoadBalancerTlsCertificate.
func (c *Lightsail) DeleteLoadBalancerTlsCertificate(input *lightsail.DeleteLoadBalancerTlsCertificateInput) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	c.inc("DeleteLoadBalancerTlsCertificate")
	return c.svc.DeleteLoadBalancerTlsCertificate(input)
}

// DeleteLoadBalancerTlsCertificateWithContext is a passthrough to the underlying DeleteLoadBalancerTlsCertificateWithContext method.
// It will increment the count of requests made to DeleteLoadBalancerTlsCertificate.
func (c *Lightsail) DeleteLoadBalancerTlsCertificateWithContext(ctx aws.Context, input *lightsail.DeleteLoadBalancerTlsCertificateInput, opts ...request.Option) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	c.inc("DeleteLoadBalancerTlsCertificate")
	return c.svc.DeleteLoadBalancerTlsCertificateWithContext(ctx, input, opts...)
}

// DetachDiskRequest is a passthrough to the underlying DetachDiskRequest.
// It will increment the count of requests made to DetachDisk.
func (c *Lightsail) DetachDiskRequest(input *lightsail.DetachDiskInput) (req *request.Request, output *lightsail.DetachDiskOutput) {
	c.inc("DetachDisk")
	return c.svc.DetachDiskRequest(input)
}

// DetachDisk is a passthrough to the underlying DetachDisk method.
// It will increment the count of requests made to DetachDisk.
func (c *Lightsail) DetachDisk(input *lightsail.DetachDiskInput) (*lightsail.DetachDiskOutput, error) {
	c.inc("DetachDisk")
	return c.svc.DetachDisk(input)
}

// DetachDiskWithContext is a passthrough to the underlying DetachDiskWithContext method.
// It will increment the count of requests made to DetachDisk.
func (c *Lightsail) DetachDiskWithContext(ctx aws.Context, input *lightsail.DetachDiskInput, opts ...request.Option) (*lightsail.DetachDiskOutput, error) {
	c.inc("DetachDisk")
	return c.svc.DetachDiskWithContext(ctx, input, opts...)
}

// DetachInstancesFromLoadBalancerRequest is a passthrough to the underlying DetachInstancesFromLoadBalancerRequest.
// It will increment the count of requests made to DetachInstancesFromLoadBalancer.
func (c *Lightsail) DetachInstancesFromLoadBalancerRequest(input *lightsail.DetachInstancesFromLoadBalancerInput) (req *request.Request, output *lightsail.DetachInstancesFromLoadBalancerOutput) {
	c.inc("DetachInstancesFromLoadBalancer")
	return c.svc.DetachInstancesFromLoadBalancerRequest(input)
}

// DetachInstancesFromLoadBalancer is a passthrough to the underlying DetachInstancesFromLoadBalancer method.
// It will increment the count of requests made to DetachInstancesFromLoadBalancer.
func (c *Lightsail) DetachInstancesFromLoadBalancer(input *lightsail.DetachInstancesFromLoadBalancerInput) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	c.inc("DetachInstancesFromLoadBalancer")
	return c.svc.DetachInstancesFromLoadBalancer(input)
}

// DetachInstancesFromLoadBalancerWithContext is a passthrough to the underlying DetachInstancesFromLoadBalancerWithContext method.
// It will increment the count of requests made to DetachInstancesFromLoadBalancer.
func (c *Lightsail) DetachInstancesFromLoadBalancerWithContext(ctx aws.Context, input *lightsail.DetachInstancesFromLoadBalancerInput, opts ...request.Option) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	c.inc("DetachInstancesFromLoadBalancer")
	return c.svc.DetachInstancesFromLoadBalancerWithContext(ctx, input, opts...)
}

// DetachStaticIpRequest is a passthrough to the underlying DetachStaticIpRequest.
// It will increment the count of requests made to DetachStaticIp.
func (c *Lightsail) DetachStaticIpRequest(input *lightsail.DetachStaticIpInput) (req *request.Request, output *lightsail.DetachStaticIpOutput) {
	c.inc("DetachStaticIp")
	return c.svc.DetachStaticIpRequest(input)
}

// DetachStaticIp is a passthrough to the underlying DetachStaticIp method.
// It will increment the count of requests made to DetachStaticIp.
func (c *Lightsail) DetachStaticIp(input *lightsail.DetachStaticIpInput) (*lightsail.DetachStaticIpOutput, error) {
	c.inc("DetachStaticIp")
	return c.svc.DetachStaticIp(input)
}

// DetachStaticIpWithContext is a passthrough to the underlying DetachStaticIpWithContext method.
// It will increment the count of requests made to DetachStaticIp.
func (c *Lightsail) DetachStaticIpWithContext(ctx aws.Context, input *lightsail.DetachStaticIpInput, opts ...request.Option) (*lightsail.DetachStaticIpOutput, error) {
	c.inc("DetachStaticIp")
	return c.svc.DetachStaticIpWithContext(ctx, input, opts...)
}

// DownloadDefaultKeyPairRequest is a passthrough to the underlying DownloadDefaultKeyPairRequest.
// It will increment the count of requests made to DownloadDefaultKeyPair.
func (c *Lightsail) DownloadDefaultKeyPairRequest(input *lightsail.DownloadDefaultKeyPairInput) (req *request.Request, output *lightsail.DownloadDefaultKeyPairOutput) {
	c.inc("DownloadDefaultKeyPair")
	return c.svc.DownloadDefaultKeyPairRequest(input)
}

// DownloadDefaultKeyPair is a passthrough to the underlying DownloadDefaultKeyPair method.
// It will increment the count of requests made to DownloadDefaultKeyPair.
func (c *Lightsail) DownloadDefaultKeyPair(input *lightsail.DownloadDefaultKeyPairInput) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	c.inc("DownloadDefaultKeyPair")
	return c.svc.DownloadDefaultKeyPair(input)
}

// DownloadDefaultKeyPairWithContext is a passthrough to the underlying DownloadDefaultKeyPairWithContext method.
// It will increment the count of requests made to DownloadDefaultKeyPair.
func (c *Lightsail) DownloadDefaultKeyPairWithContext(ctx aws.Context, input *lightsail.DownloadDefaultKeyPairInput, opts ...request.Option) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	c.inc("DownloadDefaultKeyPair")
	return c.svc.DownloadDefaultKeyPairWithContext(ctx, input, opts...)
}

// GetActiveNamesRequest is a passthrough to the underlying GetActiveNamesRequest.
// It will increment the count of requests made to GetActiveNames.
func (c *Lightsail) GetActiveNamesRequest(input *lightsail.GetActiveNamesInput) (req *request.Request, output *lightsail.GetActiveNamesOutput) {
	c.inc("GetActiveNames")
	return c.svc.GetActiveNamesRequest(input)
}

// GetActiveNames is a passthrough to the underlying GetActiveNames method.
// It will increment the count of requests made to GetActiveNames.
func (c *Lightsail) GetActiveNames(input *lightsail.GetActiveNamesInput) (*lightsail.GetActiveNamesOutput, error) {
	c.inc("GetActiveNames")
	return c.svc.GetActiveNames(input)
}

// GetActiveNamesWithContext is a passthrough to the underlying GetActiveNamesWithContext method.
// It will increment the count of requests made to GetActiveNames.
func (c *Lightsail) GetActiveNamesWithContext(ctx aws.Context, input *lightsail.GetActiveNamesInput, opts ...request.Option) (*lightsail.GetActiveNamesOutput, error) {
	c.inc("GetActiveNames")
	return c.svc.GetActiveNamesWithContext(ctx, input, opts...)
}

// GetBlueprintsRequest is a passthrough to the underlying GetBlueprintsRequest.
// It will increment the count of requests made to GetBlueprints.
func (c *Lightsail) GetBlueprintsRequest(input *lightsail.GetBlueprintsInput) (req *request.Request, output *lightsail.GetBlueprintsOutput) {
	c.inc("GetBlueprints")
	return c.svc.GetBlueprintsRequest(input)
}

// GetBlueprints is a passthrough to the underlying GetBlueprints method.
// It will increment the count of requests made to GetBlueprints.
func (c *Lightsail) GetBlueprints(input *lightsail.GetBlueprintsInput) (*lightsail.GetBlueprintsOutput, error) {
	c.inc("GetBlueprints")
	return c.svc.GetBlueprints(input)
}

// GetBlueprintsWithContext is a passthrough to the underlying GetBlueprintsWithContext method.
// It will increment the count of requests made to GetBlueprints.
func (c *Lightsail) GetBlueprintsWithContext(ctx aws.Context, input *lightsail.GetBlueprintsInput, opts ...request.Option) (*lightsail.GetBlueprintsOutput, error) {
	c.inc("GetBlueprints")
	return c.svc.GetBlueprintsWithContext(ctx, input, opts...)
}

// GetBundlesRequest is a passthrough to the underlying GetBundlesRequest.
// It will increment the count of requests made to GetBundles.
func (c *Lightsail) GetBundlesRequest(input *lightsail.GetBundlesInput) (req *request.Request, output *lightsail.GetBundlesOutput) {
	c.inc("GetBundles")
	return c.svc.GetBundlesRequest(input)
}

// GetBundles is a passthrough to the underlying GetBundles method.
// It will increment the count of requests made to GetBundles.
func (c *Lightsail) GetBundles(input *lightsail.GetBundlesInput) (*lightsail.GetBundlesOutput, error) {
	c.inc("GetBundles")
	return c.svc.GetBundles(input)
}

// GetBundlesWithContext is a passthrough to the underlying GetBundlesWithContext method.
// It will increment the count of requests made to GetBundles.
func (c *Lightsail) GetBundlesWithContext(ctx aws.Context, input *lightsail.GetBundlesInput, opts ...request.Option) (*lightsail.GetBundlesOutput, error) {
	c.inc("GetBundles")
	return c.svc.GetBundlesWithContext(ctx, input, opts...)
}

// GetDiskRequest is a passthrough to the underlying GetDiskRequest.
// It will increment the count of requests made to GetDisk.
func (c *Lightsail) GetDiskRequest(input *lightsail.GetDiskInput) (req *request.Request, output *lightsail.GetDiskOutput) {
	c.inc("GetDisk")
	return c.svc.GetDiskRequest(input)
}

// GetDisk is a passthrough to the underlying GetDisk method.
// It will increment the count of requests made to GetDisk.
func (c *Lightsail) GetDisk(input *lightsail.GetDiskInput) (*lightsail.GetDiskOutput, error) {
	c.inc("GetDisk")
	return c.svc.GetDisk(input)
}

// GetDiskWithContext is a passthrough to the underlying GetDiskWithContext method.
// It will increment the count of requests made to GetDisk.
func (c *Lightsail) GetDiskWithContext(ctx aws.Context, input *lightsail.GetDiskInput, opts ...request.Option) (*lightsail.GetDiskOutput, error) {
	c.inc("GetDisk")
	return c.svc.GetDiskWithContext(ctx, input, opts...)
}

// GetDiskSnapshotRequest is a passthrough to the underlying GetDiskSnapshotRequest.
// It will increment the count of requests made to GetDiskSnapshot.
func (c *Lightsail) GetDiskSnapshotRequest(input *lightsail.GetDiskSnapshotInput) (req *request.Request, output *lightsail.GetDiskSnapshotOutput) {
	c.inc("GetDiskSnapshot")
	return c.svc.GetDiskSnapshotRequest(input)
}

// GetDiskSnapshot is a passthrough to the underlying GetDiskSnapshot method.
// It will increment the count of requests made to GetDiskSnapshot.
func (c *Lightsail) GetDiskSnapshot(input *lightsail.GetDiskSnapshotInput) (*lightsail.GetDiskSnapshotOutput, error) {
	c.inc("GetDiskSnapshot")
	return c.svc.GetDiskSnapshot(input)
}

// GetDiskSnapshotWithContext is a passthrough to the underlying GetDiskSnapshotWithContext method.
// It will increment the count of requests made to GetDiskSnapshot.
func (c *Lightsail) GetDiskSnapshotWithContext(ctx aws.Context, input *lightsail.GetDiskSnapshotInput, opts ...request.Option) (*lightsail.GetDiskSnapshotOutput, error) {
	c.inc("GetDiskSnapshot")
	return c.svc.GetDiskSnapshotWithContext(ctx, input, opts...)
}

// GetDiskSnapshotsRequest is a passthrough to the underlying GetDiskSnapshotsRequest.
// It will increment the count of requests made to GetDiskSnapshots.
func (c *Lightsail) GetDiskSnapshotsRequest(input *lightsail.GetDiskSnapshotsInput) (req *request.Request, output *lightsail.GetDiskSnapshotsOutput) {
	c.inc("GetDiskSnapshots")
	return c.svc.GetDiskSnapshotsRequest(input)
}

// GetDiskSnapshots is a passthrough to the underlying GetDiskSnapshots method.
// It will increment the count of requests made to GetDiskSnapshots.
func (c *Lightsail) GetDiskSnapshots(input *lightsail.GetDiskSnapshotsInput) (*lightsail.GetDiskSnapshotsOutput, error) {
	c.inc("GetDiskSnapshots")
	return c.svc.GetDiskSnapshots(input)
}

// GetDiskSnapshotsWithContext is a passthrough to the underlying GetDiskSnapshotsWithContext method.
// It will increment the count of requests made to GetDiskSnapshots.
func (c *Lightsail) GetDiskSnapshotsWithContext(ctx aws.Context, input *lightsail.GetDiskSnapshotsInput, opts ...request.Option) (*lightsail.GetDiskSnapshotsOutput, error) {
	c.inc("GetDiskSnapshots")
	return c.svc.GetDiskSnapshotsWithContext(ctx, input, opts...)
}

// GetDisksRequest is a passthrough to the underlying GetDisksRequest.
// It will increment the count of requests made to GetDisks.
func (c *Lightsail) GetDisksRequest(input *lightsail.GetDisksInput) (req *request.Request, output *lightsail.GetDisksOutput) {
	c.inc("GetDisks")
	return c.svc.GetDisksRequest(input)
}

// GetDisks is a passthrough to the underlying GetDisks method.
// It will increment the count of requests made to GetDisks.
func (c *Lightsail) GetDisks(input *lightsail.GetDisksInput) (*lightsail.GetDisksOutput, error) {
	c.inc("GetDisks")
	return c.svc.GetDisks(input)
}

// GetDisksWithContext is a passthrough to the underlying GetDisksWithContext method.
// It will increment the count of requests made to GetDisks.
func (c *Lightsail) GetDisksWithContext(ctx aws.Context, input *lightsail.GetDisksInput, opts ...request.Option) (*lightsail.GetDisksOutput, error) {
	c.inc("GetDisks")
	return c.svc.GetDisksWithContext(ctx, input, opts...)
}

// GetDomainRequest is a passthrough to the underlying GetDomainRequest.
// It will increment the count of requests made to GetDomain.
func (c *Lightsail) GetDomainRequest(input *lightsail.GetDomainInput) (req *request.Request, output *lightsail.GetDomainOutput) {
	c.inc("GetDomain")
	return c.svc.GetDomainRequest(input)
}

// GetDomain is a passthrough to the underlying GetDomain method.
// It will increment the count of requests made to GetDomain.
func (c *Lightsail) GetDomain(input *lightsail.GetDomainInput) (*lightsail.GetDomainOutput, error) {
	c.inc("GetDomain")
	return c.svc.GetDomain(input)
}

// GetDomainWithContext is a passthrough to the underlying GetDomainWithContext method.
// It will increment the count of requests made to GetDomain.
func (c *Lightsail) GetDomainWithContext(ctx aws.Context, input *lightsail.GetDomainInput, opts ...request.Option) (*lightsail.GetDomainOutput, error) {
	c.inc("GetDomain")
	return c.svc.GetDomainWithContext(ctx, input, opts...)
}

// GetDomainsRequest is a passthrough to the underlying GetDomainsRequest.
// It will increment the count of requests made to GetDomains.
func (c *Lightsail) GetDomainsRequest(input *lightsail.GetDomainsInput) (req *request.Request, output *lightsail.GetDomainsOutput) {
	c.inc("GetDomains")
	return c.svc.GetDomainsRequest(input)
}

// GetDomains is a passthrough to the underlying GetDomains method.
// It will increment the count of requests made to GetDomains.
func (c *Lightsail) GetDomains(input *lightsail.GetDomainsInput) (*lightsail.GetDomainsOutput, error) {
	c.inc("GetDomains")
	return c.svc.GetDomains(input)
}

// GetDomainsWithContext is a passthrough to the underlying GetDomainsWithContext method.
// It will increment the count of requests made to GetDomains.
func (c *Lightsail) GetDomainsWithContext(ctx aws.Context, input *lightsail.GetDomainsInput, opts ...request.Option) (*lightsail.GetDomainsOutput, error) {
	c.inc("GetDomains")
	return c.svc.GetDomainsWithContext(ctx, input, opts...)
}

// GetInstanceRequest is a passthrough to the underlying GetInstanceRequest.
// It will increment the count of requests made to GetInstance.
func (c *Lightsail) GetInstanceRequest(input *lightsail.GetInstanceInput) (req *request.Request, output *lightsail.GetInstanceOutput) {
	c.inc("GetInstance")
	return c.svc.GetInstanceRequest(input)
}

// GetInstance is a passthrough to the underlying GetInstance method.
// It will increment the count of requests made to GetInstance.
func (c *Lightsail) GetInstance(input *lightsail.GetInstanceInput) (*lightsail.GetInstanceOutput, error) {
	c.inc("GetInstance")
	return c.svc.GetInstance(input)
}

// GetInstanceWithContext is a passthrough to the underlying GetInstanceWithContext method.
// It will increment the count of requests made to GetInstance.
func (c *Lightsail) GetInstanceWithContext(ctx aws.Context, input *lightsail.GetInstanceInput, opts ...request.Option) (*lightsail.GetInstanceOutput, error) {
	c.inc("GetInstance")
	return c.svc.GetInstanceWithContext(ctx, input, opts...)
}

// GetInstanceAccessDetailsRequest is a passthrough to the underlying GetInstanceAccessDetailsRequest.
// It will increment the count of requests made to GetInstanceAccessDetails.
func (c *Lightsail) GetInstanceAccessDetailsRequest(input *lightsail.GetInstanceAccessDetailsInput) (req *request.Request, output *lightsail.GetInstanceAccessDetailsOutput) {
	c.inc("GetInstanceAccessDetails")
	return c.svc.GetInstanceAccessDetailsRequest(input)
}

// GetInstanceAccessDetails is a passthrough to the underlying GetInstanceAccessDetails method.
// It will increment the count of requests made to GetInstanceAccessDetails.
func (c *Lightsail) GetInstanceAccessDetails(input *lightsail.GetInstanceAccessDetailsInput) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	c.inc("GetInstanceAccessDetails")
	return c.svc.GetInstanceAccessDetails(input)
}

// GetInstanceAccessDetailsWithContext is a passthrough to the underlying GetInstanceAccessDetailsWithContext method.
// It will increment the count of requests made to GetInstanceAccessDetails.
func (c *Lightsail) GetInstanceAccessDetailsWithContext(ctx aws.Context, input *lightsail.GetInstanceAccessDetailsInput, opts ...request.Option) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	c.inc("GetInstanceAccessDetails")
	return c.svc.GetInstanceAccessDetailsWithContext(ctx, input, opts...)
}

// GetInstanceMetricDataRequest is a passthrough to the underlying GetInstanceMetricDataRequest.
// It will increment the count of requests made to GetInstanceMetricData.
func (c *Lightsail) GetInstanceMetricDataRequest(input *lightsail.GetInstanceMetricDataInput) (req *request.Request, output *lightsail.GetInstanceMetricDataOutput) {
	c.inc("GetInstanceMetricData")
	return c.svc.GetInstanceMetricDataRequest(input)
}

// GetInstanceMetricData is a passthrough to the underlying GetInstanceMetricData method.
// It will increment the count of requests made to GetInstanceMetricData.
func (c *Lightsail) GetInstanceMetricData(input *lightsail.GetInstanceMetricDataInput) (*lightsail.GetInstanceMetricDataOutput, error) {
	c.inc("GetInstanceMetricData")
	return c.svc.GetInstanceMetricData(input)
}

// GetInstanceMetricDataWithContext is a passthrough to the underlying GetInstanceMetricDataWithContext method.
// It will increment the count of requests made to GetInstanceMetricData.
func (c *Lightsail) GetInstanceMetricDataWithContext(ctx aws.Context, input *lightsail.GetInstanceMetricDataInput, opts ...request.Option) (*lightsail.GetInstanceMetricDataOutput, error) {
	c.inc("GetInstanceMetricData")
	return c.svc.GetInstanceMetricDataWithContext(ctx, input, opts...)
}

// GetInstancePortStatesRequest is a passthrough to the underlying GetInstancePortStatesRequest.
// It will increment the count of requests made to GetInstancePortStates.
func (c *Lightsail) GetInstancePortStatesRequest(input *lightsail.GetInstancePortStatesInput) (req *request.Request, output *lightsail.GetInstancePortStatesOutput) {
	c.inc("GetInstancePortStates")
	return c.svc.GetInstancePortStatesRequest(input)
}

// GetInstancePortStates is a passthrough to the underlying GetInstancePortStates method.
// It will increment the count of requests made to GetInstancePortStates.
func (c *Lightsail) GetInstancePortStates(input *lightsail.GetInstancePortStatesInput) (*lightsail.GetInstancePortStatesOutput, error) {
	c.inc("GetInstancePortStates")
	return c.svc.GetInstancePortStates(input)
}

// GetInstancePortStatesWithContext is a passthrough to the underlying GetInstancePortStatesWithContext method.
// It will increment the count of requests made to GetInstancePortStates.
func (c *Lightsail) GetInstancePortStatesWithContext(ctx aws.Context, input *lightsail.GetInstancePortStatesInput, opts ...request.Option) (*lightsail.GetInstancePortStatesOutput, error) {
	c.inc("GetInstancePortStates")
	return c.svc.GetInstancePortStatesWithContext(ctx, input, opts...)
}

// GetInstanceSnapshotRequest is a passthrough to the underlying GetInstanceSnapshotRequest.
// It will increment the count of requests made to GetInstanceSnapshot.
func (c *Lightsail) GetInstanceSnapshotRequest(input *lightsail.GetInstanceSnapshotInput) (req *request.Request, output *lightsail.GetInstanceSnapshotOutput) {
	c.inc("GetInstanceSnapshot")
	return c.svc.GetInstanceSnapshotRequest(input)
}

// GetInstanceSnapshot is a passthrough to the underlying GetInstanceSnapshot method.
// It will increment the count of requests made to GetInstanceSnapshot.
func (c *Lightsail) GetInstanceSnapshot(input *lightsail.GetInstanceSnapshotInput) (*lightsail.GetInstanceSnapshotOutput, error) {
	c.inc("GetInstanceSnapshot")
	return c.svc.GetInstanceSnapshot(input)
}

// GetInstanceSnapshotWithContext is a passthrough to the underlying GetInstanceSnapshotWithContext method.
// It will increment the count of requests made to GetInstanceSnapshot.
func (c *Lightsail) GetInstanceSnapshotWithContext(ctx aws.Context, input *lightsail.GetInstanceSnapshotInput, opts ...request.Option) (*lightsail.GetInstanceSnapshotOutput, error) {
	c.inc("GetInstanceSnapshot")
	return c.svc.GetInstanceSnapshotWithContext(ctx, input, opts...)
}

// GetInstanceSnapshotsRequest is a passthrough to the underlying GetInstanceSnapshotsRequest.
// It will increment the count of requests made to GetInstanceSnapshots.
func (c *Lightsail) GetInstanceSnapshotsRequest(input *lightsail.GetInstanceSnapshotsInput) (req *request.Request, output *lightsail.GetInstanceSnapshotsOutput) {
	c.inc("GetInstanceSnapshots")
	return c.svc.GetInstanceSnapshotsRequest(input)
}

// GetInstanceSnapshots is a passthrough to the underlying GetInstanceSnapshots method.
// It will increment the count of requests made to GetInstanceSnapshots.
func (c *Lightsail) GetInstanceSnapshots(input *lightsail.GetInstanceSnapshotsInput) (*lightsail.GetInstanceSnapshotsOutput, error) {
	c.inc("GetInstanceSnapshots")
	return c.svc.GetInstanceSnapshots(input)
}

// GetInstanceSnapshotsWithContext is a passthrough to the underlying GetInstanceSnapshotsWithContext method.
// It will increment the count of requests made to GetInstanceSnapshots.
func (c *Lightsail) GetInstanceSnapshotsWithContext(ctx aws.Context, input *lightsail.GetInstanceSnapshotsInput, opts ...request.Option) (*lightsail.GetInstanceSnapshotsOutput, error) {
	c.inc("GetInstanceSnapshots")
	return c.svc.GetInstanceSnapshotsWithContext(ctx, input, opts...)
}

// GetInstanceStateRequest is a passthrough to the underlying GetInstanceStateRequest.
// It will increment the count of requests made to GetInstanceState.
func (c *Lightsail) GetInstanceStateRequest(input *lightsail.GetInstanceStateInput) (req *request.Request, output *lightsail.GetInstanceStateOutput) {
	c.inc("GetInstanceState")
	return c.svc.GetInstanceStateRequest(input)
}

// GetInstanceState is a passthrough to the underlying GetInstanceState method.
// It will increment the count of requests made to GetInstanceState.
func (c *Lightsail) GetInstanceState(input *lightsail.GetInstanceStateInput) (*lightsail.GetInstanceStateOutput, error) {
	c.inc("GetInstanceState")
	return c.svc.GetInstanceState(input)
}

// GetInstanceStateWithContext is a passthrough to the underlying GetInstanceStateWithContext method.
// It will increment the count of requests made to GetInstanceState.
func (c *Lightsail) GetInstanceStateWithContext(ctx aws.Context, input *lightsail.GetInstanceStateInput, opts ...request.Option) (*lightsail.GetInstanceStateOutput, error) {
	c.inc("GetInstanceState")
	return c.svc.GetInstanceStateWithContext(ctx, input, opts...)
}

// GetInstancesRequest is a passthrough to the underlying GetInstancesRequest.
// It will increment the count of requests made to GetInstances.
func (c *Lightsail) GetInstancesRequest(input *lightsail.GetInstancesInput) (req *request.Request, output *lightsail.GetInstancesOutput) {
	c.inc("GetInstances")
	return c.svc.GetInstancesRequest(input)
}

// GetInstances is a passthrough to the underlying GetInstances method.
// It will increment the count of requests made to GetInstances.
func (c *Lightsail) GetInstances(input *lightsail.GetInstancesInput) (*lightsail.GetInstancesOutput, error) {
	c.inc("GetInstances")
	return c.svc.GetInstances(input)
}

// GetInstancesWithContext is a passthrough to the underlying GetInstancesWithContext method.
// It will increment the count of requests made to GetInstances.
func (c *Lightsail) GetInstancesWithContext(ctx aws.Context, input *lightsail.GetInstancesInput, opts ...request.Option) (*lightsail.GetInstancesOutput, error) {
	c.inc("GetInstances")
	return c.svc.GetInstancesWithContext(ctx, input, opts...)
}

// GetKeyPairRequest is a passthrough to the underlying GetKeyPairRequest.
// It will increment the count of requests made to GetKeyPair.
func (c *Lightsail) GetKeyPairRequest(input *lightsail.GetKeyPairInput) (req *request.Request, output *lightsail.GetKeyPairOutput) {
	c.inc("GetKeyPair")
	return c.svc.GetKeyPairRequest(input)
}

// GetKeyPair is a passthrough to the underlying GetKeyPair method.
// It will increment the count of requests made to GetKeyPair.
func (c *Lightsail) GetKeyPair(input *lightsail.GetKeyPairInput) (*lightsail.GetKeyPairOutput, error) {
	c.inc("GetKeyPair")
	return c.svc.GetKeyPair(input)
}

// GetKeyPairWithContext is a passthrough to the underlying GetKeyPairWithContext method.
// It will increment the count of requests made to GetKeyPair.
func (c *Lightsail) GetKeyPairWithContext(ctx aws.Context, input *lightsail.GetKeyPairInput, opts ...request.Option) (*lightsail.GetKeyPairOutput, error) {
	c.inc("GetKeyPair")
	return c.svc.GetKeyPairWithContext(ctx, input, opts...)
}

// GetKeyPairsRequest is a passthrough to the underlying GetKeyPairsRequest.
// It will increment the count of requests made to GetKeyPairs.
func (c *Lightsail) GetKeyPairsRequest(input *lightsail.GetKeyPairsInput) (req *request.Request, output *lightsail.GetKeyPairsOutput) {
	c.inc("GetKeyPairs")
	return c.svc.GetKeyPairsRequest(input)
}

// GetKeyPairs is a passthrough to the underlying GetKeyPairs method.
// It will increment the count of requests made to GetKeyPairs.
func (c *Lightsail) GetKeyPairs(input *lightsail.GetKeyPairsInput) (*lightsail.GetKeyPairsOutput, error) {
	c.inc("GetKeyPairs")
	return c.svc.GetKeyPairs(input)
}

// GetKeyPairsWithContext is a passthrough to the underlying GetKeyPairsWithContext method.
// It will increment the count of requests made to GetKeyPairs.
func (c *Lightsail) GetKeyPairsWithContext(ctx aws.Context, input *lightsail.GetKeyPairsInput, opts ...request.Option) (*lightsail.GetKeyPairsOutput, error) {
	c.inc("GetKeyPairs")
	return c.svc.GetKeyPairsWithContext(ctx, input, opts...)
}

// GetLoadBalancerRequest is a passthrough to the underlying GetLoadBalancerRequest.
// It will increment the count of requests made to GetLoadBalancer.
func (c *Lightsail) GetLoadBalancerRequest(input *lightsail.GetLoadBalancerInput) (req *request.Request, output *lightsail.GetLoadBalancerOutput) {
	c.inc("GetLoadBalancer")
	return c.svc.GetLoadBalancerRequest(input)
}

// GetLoadBalancer is a passthrough to the underlying GetLoadBalancer method.
// It will increment the count of requests made to GetLoadBalancer.
func (c *Lightsail) GetLoadBalancer(input *lightsail.GetLoadBalancerInput) (*lightsail.GetLoadBalancerOutput, error) {
	c.inc("GetLoadBalancer")
	return c.svc.GetLoadBalancer(input)
}

// GetLoadBalancerWithContext is a passthrough to the underlying GetLoadBalancerWithContext method.
// It will increment the count of requests made to GetLoadBalancer.
func (c *Lightsail) GetLoadBalancerWithContext(ctx aws.Context, input *lightsail.GetLoadBalancerInput, opts ...request.Option) (*lightsail.GetLoadBalancerOutput, error) {
	c.inc("GetLoadBalancer")
	return c.svc.GetLoadBalancerWithContext(ctx, input, opts...)
}

// GetLoadBalancerMetricDataRequest is a passthrough to the underlying GetLoadBalancerMetricDataRequest.
// It will increment the count of requests made to GetLoadBalancerMetricData.
func (c *Lightsail) GetLoadBalancerMetricDataRequest(input *lightsail.GetLoadBalancerMetricDataInput) (req *request.Request, output *lightsail.GetLoadBalancerMetricDataOutput) {
	c.inc("GetLoadBalancerMetricData")
	return c.svc.GetLoadBalancerMetricDataRequest(input)
}

// GetLoadBalancerMetricData is a passthrough to the underlying GetLoadBalancerMetricData method.
// It will increment the count of requests made to GetLoadBalancerMetricData.
func (c *Lightsail) GetLoadBalancerMetricData(input *lightsail.GetLoadBalancerMetricDataInput) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	c.inc("GetLoadBalancerMetricData")
	return c.svc.GetLoadBalancerMetricData(input)
}

// GetLoadBalancerMetricDataWithContext is a passthrough to the underlying GetLoadBalancerMetricDataWithContext method.
// It will increment the count of requests made to GetLoadBalancerMetricData.
func (c *Lightsail) GetLoadBalancerMetricDataWithContext(ctx aws.Context, input *lightsail.GetLoadBalancerMetricDataInput, opts ...request.Option) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	c.inc("GetLoadBalancerMetricData")
	return c.svc.GetLoadBalancerMetricDataWithContext(ctx, input, opts...)
}

// GetLoadBalancerTlsCertificatesRequest is a passthrough to the underlying GetLoadBalancerTlsCertificatesRequest.
// It will increment the count of requests made to GetLoadBalancerTlsCertificates.
func (c *Lightsail) GetLoadBalancerTlsCertificatesRequest(input *lightsail.GetLoadBalancerTlsCertificatesInput) (req *request.Request, output *lightsail.GetLoadBalancerTlsCertificatesOutput) {
	c.inc("GetLoadBalancerTlsCertificates")
	return c.svc.GetLoadBalancerTlsCertificatesRequest(input)
}

// GetLoadBalancerTlsCertificates is a passthrough to the underlying GetLoadBalancerTlsCertificates method.
// It will increment the count of requests made to GetLoadBalancerTlsCertificates.
func (c *Lightsail) GetLoadBalancerTlsCertificates(input *lightsail.GetLoadBalancerTlsCertificatesInput) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	c.inc("GetLoadBalancerTlsCertificates")
	return c.svc.GetLoadBalancerTlsCertificates(input)
}

// GetLoadBalancerTlsCertificatesWithContext is a passthrough to the underlying GetLoadBalancerTlsCertificatesWithContext method.
// It will increment the count of requests made to GetLoadBalancerTlsCertificates.
func (c *Lightsail) GetLoadBalancerTlsCertificatesWithContext(ctx aws.Context, input *lightsail.GetLoadBalancerTlsCertificatesInput, opts ...request.Option) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	c.inc("GetLoadBalancerTlsCertificates")
	return c.svc.GetLoadBalancerTlsCertificatesWithContext(ctx, input, opts...)
}

// GetLoadBalancersRequest is a passthrough to the underlying GetLoadBalancersRequest.
// It will increment the count of requests made to GetLoadBalancers.
func (c *Lightsail) GetLoadBalancersRequest(input *lightsail.GetLoadBalancersInput) (req *request.Request, output *lightsail.GetLoadBalancersOutput) {
	c.inc("GetLoadBalancers")
	return c.svc.GetLoadBalancersRequest(input)
}

// GetLoadBalancers is a passthrough to the underlying GetLoadBalancers method.
// It will increment the count of requests made to GetLoadBalancers.
func (c *Lightsail) GetLoadBalancers(input *lightsail.GetLoadBalancersInput) (*lightsail.GetLoadBalancersOutput, error) {
	c.inc("GetLoadBalancers")
	return c.svc.GetLoadBalancers(input)
}

// GetLoadBalancersWithContext is a passthrough to the underlying GetLoadBalancersWithContext method.
// It will increment the count of requests made to GetLoadBalancers.
func (c *Lightsail) GetLoadBalancersWithContext(ctx aws.Context, input *lightsail.GetLoadBalancersInput, opts ...request.Option) (*lightsail.GetLoadBalancersOutput, error) {
	c.inc("GetLoadBalancers")
	return c.svc.GetLoadBalancersWithContext(ctx, input, opts...)
}

// GetOperationRequest is a passthrough to the underlying GetOperationRequest.
// It will increment the count of requests made to GetOperation.
func (c *Lightsail) GetOperationRequest(input *lightsail.GetOperationInput) (req *request.Request, output *lightsail.GetOperationOutput) {
	c.inc("GetOperation")
	return c.svc.GetOperationRequest(input)
}

// GetOperation is a passthrough to the underlying GetOperation method.
// It will increment the count of requests made to GetOperation.
func (c *Lightsail) GetOperation(input *lightsail.GetOperationInput) (*lightsail.GetOperationOutput, error) {
	c.inc("GetOperation")
	return c.svc.GetOperation(input)
}

// GetOperationWithContext is a passthrough to the underlying GetOperationWithContext method.
// It will increment the count of requests made to GetOperation.
func (c *Lightsail) GetOperationWithContext(ctx aws.Context, input *lightsail.GetOperationInput, opts ...request.Option) (*lightsail.GetOperationOutput, error) {
	c.inc("GetOperation")
	return c.svc.GetOperationWithContext(ctx, input, opts...)
}

// GetOperationsRequest is a passthrough to the underlying GetOperationsRequest.
// It will increment the count of requests made to GetOperations.
func (c *Lightsail) GetOperationsRequest(input *lightsail.GetOperationsInput) (req *request.Request, output *lightsail.GetOperationsOutput) {
	c.inc("GetOperations")
	return c.svc.GetOperationsRequest(input)
}

// GetOperations is a passthrough to the underlying GetOperations method.
// It will increment the count of requests made to GetOperations.
func (c *Lightsail) GetOperations(input *lightsail.GetOperationsInput) (*lightsail.GetOperationsOutput, error) {
	c.inc("GetOperations")
	return c.svc.GetOperations(input)
}

// GetOperationsWithContext is a passthrough to the underlying GetOperationsWithContext method.
// It will increment the count of requests made to GetOperations.
func (c *Lightsail) GetOperationsWithContext(ctx aws.Context, input *lightsail.GetOperationsInput, opts ...request.Option) (*lightsail.GetOperationsOutput, error) {
	c.inc("GetOperations")
	return c.svc.GetOperationsWithContext(ctx, input, opts...)
}

// GetOperationsForResourceRequest is a passthrough to the underlying GetOperationsForResourceRequest.
// It will increment the count of requests made to GetOperationsForResource.
func (c *Lightsail) GetOperationsForResourceRequest(input *lightsail.GetOperationsForResourceInput) (req *request.Request, output *lightsail.GetOperationsForResourceOutput) {
	c.inc("GetOperationsForResource")
	return c.svc.GetOperationsForResourceRequest(input)
}

// GetOperationsForResource is a passthrough to the underlying GetOperationsForResource method.
// It will increment the count of requests made to GetOperationsForResource.
func (c *Lightsail) GetOperationsForResource(input *lightsail.GetOperationsForResourceInput) (*lightsail.GetOperationsForResourceOutput, error) {
	c.inc("GetOperationsForResource")
	return c.svc.GetOperationsForResource(input)
}

// GetOperationsForResourceWithContext is a passthrough to the underlying GetOperationsForResourceWithContext method.
// It will increment the count of requests made to GetOperationsForResource.
func (c *Lightsail) GetOperationsForResourceWithContext(ctx aws.Context, input *lightsail.GetOperationsForResourceInput, opts ...request.Option) (*lightsail.GetOperationsForResourceOutput, error) {
	c.inc("GetOperationsForResource")
	return c.svc.GetOperationsForResourceWithContext(ctx, input, opts...)
}

// GetRegionsRequest is a passthrough to the underlying GetRegionsRequest.
// It will increment the count of requests made to GetRegions.
func (c *Lightsail) GetRegionsRequest(input *lightsail.GetRegionsInput) (req *request.Request, output *lightsail.GetRegionsOutput) {
	c.inc("GetRegions")
	return c.svc.GetRegionsRequest(input)
}

// GetRegions is a passthrough to the underlying GetRegions method.
// It will increment the count of requests made to GetRegions.
func (c *Lightsail) GetRegions(input *lightsail.GetRegionsInput) (*lightsail.GetRegionsOutput, error) {
	c.inc("GetRegions")
	return c.svc.GetRegions(input)
}

// GetRegionsWithContext is a passthrough to the underlying GetRegionsWithContext method.
// It will increment the count of requests made to GetRegions.
func (c *Lightsail) GetRegionsWithContext(ctx aws.Context, input *lightsail.GetRegionsInput, opts ...request.Option) (*lightsail.GetRegionsOutput, error) {
	c.inc("GetRegions")
	return c.svc.GetRegionsWithContext(ctx, input, opts...)
}

// GetStaticIpRequest is a passthrough to the underlying GetStaticIpRequest.
// It will increment the count of requests made to GetStaticIp.
func (c *Lightsail) GetStaticIpRequest(input *lightsail.GetStaticIpInput) (req *request.Request, output *lightsail.GetStaticIpOutput) {
	c.inc("GetStaticIp")
	return c.svc.GetStaticIpRequest(input)
}

// GetStaticIp is a passthrough to the underlying GetStaticIp method.
// It will increment the count of requests made to GetStaticIp.
func (c *Lightsail) GetStaticIp(input *lightsail.GetStaticIpInput) (*lightsail.GetStaticIpOutput, error) {
	c.inc("GetStaticIp")
	return c.svc.GetStaticIp(input)
}

// GetStaticIpWithContext is a passthrough to the underlying GetStaticIpWithContext method.
// It will increment the count of requests made to GetStaticIp.
func (c *Lightsail) GetStaticIpWithContext(ctx aws.Context, input *lightsail.GetStaticIpInput, opts ...request.Option) (*lightsail.GetStaticIpOutput, error) {
	c.inc("GetStaticIp")
	return c.svc.GetStaticIpWithContext(ctx, input, opts...)
}

// GetStaticIpsRequest is a passthrough to the underlying GetStaticIpsRequest.
// It will increment the count of requests made to GetStaticIps.
func (c *Lightsail) GetStaticIpsRequest(input *lightsail.GetStaticIpsInput) (req *request.Request, output *lightsail.GetStaticIpsOutput) {
	c.inc("GetStaticIps")
	return c.svc.GetStaticIpsRequest(input)
}

// GetStaticIps is a passthrough to the underlying GetStaticIps method.
// It will increment the count of requests made to GetStaticIps.
func (c *Lightsail) GetStaticIps(input *lightsail.GetStaticIpsInput) (*lightsail.GetStaticIpsOutput, error) {
	c.inc("GetStaticIps")
	return c.svc.GetStaticIps(input)
}

// GetStaticIpsWithContext is a passthrough to the underlying GetStaticIpsWithContext method.
// It will increment the count of requests made to GetStaticIps.
func (c *Lightsail) GetStaticIpsWithContext(ctx aws.Context, input *lightsail.GetStaticIpsInput, opts ...request.Option) (*lightsail.GetStaticIpsOutput, error) {
	c.inc("GetStaticIps")
	return c.svc.GetStaticIpsWithContext(ctx, input, opts...)
}

// ImportKeyPairRequest is a passthrough to the underlying ImportKeyPairRequest.
// It will increment the count of requests made to ImportKeyPair.
func (c *Lightsail) ImportKeyPairRequest(input *lightsail.ImportKeyPairInput) (req *request.Request, output *lightsail.ImportKeyPairOutput) {
	c.inc("ImportKeyPair")
	return c.svc.ImportKeyPairRequest(input)
}

// ImportKeyPair is a passthrough to the underlying ImportKeyPair method.
// It will increment the count of requests made to ImportKeyPair.
func (c *Lightsail) ImportKeyPair(input *lightsail.ImportKeyPairInput) (*lightsail.ImportKeyPairOutput, error) {
	c.inc("ImportKeyPair")
	return c.svc.ImportKeyPair(input)
}

// ImportKeyPairWithContext is a passthrough to the underlying ImportKeyPairWithContext method.
// It will increment the count of requests made to ImportKeyPair.
func (c *Lightsail) ImportKeyPairWithContext(ctx aws.Context, input *lightsail.ImportKeyPairInput, opts ...request.Option) (*lightsail.ImportKeyPairOutput, error) {
	c.inc("ImportKeyPair")
	return c.svc.ImportKeyPairWithContext(ctx, input, opts...)
}

// IsVpcPeeredRequest is a passthrough to the underlying IsVpcPeeredRequest.
// It will increment the count of requests made to IsVpcPeered.
func (c *Lightsail) IsVpcPeeredRequest(input *lightsail.IsVpcPeeredInput) (req *request.Request, output *lightsail.IsVpcPeeredOutput) {
	c.inc("IsVpcPeered")
	return c.svc.IsVpcPeeredRequest(input)
}

// IsVpcPeered is a passthrough to the underlying IsVpcPeered method.
// It will increment the count of requests made to IsVpcPeered.
func (c *Lightsail) IsVpcPeered(input *lightsail.IsVpcPeeredInput) (*lightsail.IsVpcPeeredOutput, error) {
	c.inc("IsVpcPeered")
	return c.svc.IsVpcPeered(input)
}

// IsVpcPeeredWithContext is a passthrough to the underlying IsVpcPeeredWithContext method.
// It will increment the count of requests made to IsVpcPeered.
func (c *Lightsail) IsVpcPeeredWithContext(ctx aws.Context, input *lightsail.IsVpcPeeredInput, opts ...request.Option) (*lightsail.IsVpcPeeredOutput, error) {
	c.inc("IsVpcPeered")
	return c.svc.IsVpcPeeredWithContext(ctx, input, opts...)
}

// OpenInstancePublicPortsRequest is a passthrough to the underlying OpenInstancePublicPortsRequest.
// It will increment the count of requests made to OpenInstancePublicPorts.
func (c *Lightsail) OpenInstancePublicPortsRequest(input *lightsail.OpenInstancePublicPortsInput) (req *request.Request, output *lightsail.OpenInstancePublicPortsOutput) {
	c.inc("OpenInstancePublicPorts")
	return c.svc.OpenInstancePublicPortsRequest(input)
}

// OpenInstancePublicPorts is a passthrough to the underlying OpenInstancePublicPorts method.
// It will increment the count of requests made to OpenInstancePublicPorts.
func (c *Lightsail) OpenInstancePublicPorts(input *lightsail.OpenInstancePublicPortsInput) (*lightsail.OpenInstancePublicPortsOutput, error) {
	c.inc("OpenInstancePublicPorts")
	return c.svc.OpenInstancePublicPorts(input)
}

// OpenInstancePublicPortsWithContext is a passthrough to the underlying OpenInstancePublicPortsWithContext method.
// It will increment the count of requests made to OpenInstancePublicPorts.
func (c *Lightsail) OpenInstancePublicPortsWithContext(ctx aws.Context, input *lightsail.OpenInstancePublicPortsInput, opts ...request.Option) (*lightsail.OpenInstancePublicPortsOutput, error) {
	c.inc("OpenInstancePublicPorts")
	return c.svc.OpenInstancePublicPortsWithContext(ctx, input, opts...)
}

// PeerVpcRequest is a passthrough to the underlying PeerVpcRequest.
// It will increment the count of requests made to PeerVpc.
func (c *Lightsail) PeerVpcRequest(input *lightsail.PeerVpcInput) (req *request.Request, output *lightsail.PeerVpcOutput) {
	c.inc("PeerVpc")
	return c.svc.PeerVpcRequest(input)
}

// PeerVpc is a passthrough to the underlying PeerVpc method.
// It will increment the count of requests made to PeerVpc.
func (c *Lightsail) PeerVpc(input *lightsail.PeerVpcInput) (*lightsail.PeerVpcOutput, error) {
	c.inc("PeerVpc")
	return c.svc.PeerVpc(input)
}

// PeerVpcWithContext is a passthrough to the underlying PeerVpcWithContext method.
// It will increment the count of requests made to PeerVpc.
func (c *Lightsail) PeerVpcWithContext(ctx aws.Context, input *lightsail.PeerVpcInput, opts ...request.Option) (*lightsail.PeerVpcOutput, error) {
	c.inc("PeerVpc")
	return c.svc.PeerVpcWithContext(ctx, input, opts...)
}

// PutInstancePublicPortsRequest is a passthrough to the underlying PutInstancePublicPortsRequest.
// It will increment the count of requests made to PutInstancePublicPorts.
func (c *Lightsail) PutInstancePublicPortsRequest(input *lightsail.PutInstancePublicPortsInput) (req *request.Request, output *lightsail.PutInstancePublicPortsOutput) {
	c.inc("PutInstancePublicPorts")
	return c.svc.PutInstancePublicPortsRequest(input)
}

// PutInstancePublicPorts is a passthrough to the underlying PutInstancePublicPorts method.
// It will increment the count of requests made to PutInstancePublicPorts.
func (c *Lightsail) PutInstancePublicPorts(input *lightsail.PutInstancePublicPortsInput) (*lightsail.PutInstancePublicPortsOutput, error) {
	c.inc("PutInstancePublicPorts")
	return c.svc.PutInstancePublicPorts(input)
}

// PutInstancePublicPortsWithContext is a passthrough to the underlying PutInstancePublicPortsWithContext method.
// It will increment the count of requests made to PutInstancePublicPorts.
func (c *Lightsail) PutInstancePublicPortsWithContext(ctx aws.Context, input *lightsail.PutInstancePublicPortsInput, opts ...request.Option) (*lightsail.PutInstancePublicPortsOutput, error) {
	c.inc("PutInstancePublicPorts")
	return c.svc.PutInstancePublicPortsWithContext(ctx, input, opts...)
}

// RebootInstanceRequest is a passthrough to the underlying RebootInstanceRequest.
// It will increment the count of requests made to RebootInstance.
func (c *Lightsail) RebootInstanceRequest(input *lightsail.RebootInstanceInput) (req *request.Request, output *lightsail.RebootInstanceOutput) {
	c.inc("RebootInstance")
	return c.svc.RebootInstanceRequest(input)
}

// RebootInstance is a passthrough to the underlying RebootInstance method.
// It will increment the count of requests made to RebootInstance.
func (c *Lightsail) RebootInstance(input *lightsail.RebootInstanceInput) (*lightsail.RebootInstanceOutput, error) {
	c.inc("RebootInstance")
	return c.svc.RebootInstance(input)
}

// RebootInstanceWithContext is a passthrough to the underlying RebootInstanceWithContext method.
// It will increment the count of requests made to RebootInstance.
func (c *Lightsail) RebootInstanceWithContext(ctx aws.Context, input *lightsail.RebootInstanceInput, opts ...request.Option) (*lightsail.RebootInstanceOutput, error) {
	c.inc("RebootInstance")
	return c.svc.RebootInstanceWithContext(ctx, input, opts...)
}

// ReleaseStaticIpRequest is a passthrough to the underlying ReleaseStaticIpRequest.
// It will increment the count of requests made to ReleaseStaticIp.
func (c *Lightsail) ReleaseStaticIpRequest(input *lightsail.ReleaseStaticIpInput) (req *request.Request, output *lightsail.ReleaseStaticIpOutput) {
	c.inc("ReleaseStaticIp")
	return c.svc.ReleaseStaticIpRequest(input)
}

// ReleaseStaticIp is a passthrough to the underlying ReleaseStaticIp method.
// It will increment the count of requests made to ReleaseStaticIp.
func (c *Lightsail) ReleaseStaticIp(input *lightsail.ReleaseStaticIpInput) (*lightsail.ReleaseStaticIpOutput, error) {
	c.inc("ReleaseStaticIp")
	return c.svc.ReleaseStaticIp(input)
}

// ReleaseStaticIpWithContext is a passthrough to the underlying ReleaseStaticIpWithContext method.
// It will increment the count of requests made to ReleaseStaticIp.
func (c *Lightsail) ReleaseStaticIpWithContext(ctx aws.Context, input *lightsail.ReleaseStaticIpInput, opts ...request.Option) (*lightsail.ReleaseStaticIpOutput, error) {
	c.inc("ReleaseStaticIp")
	return c.svc.ReleaseStaticIpWithContext(ctx, input, opts...)
}

// StartInstanceRequest is a passthrough to the underlying StartInstanceRequest.
// It will increment the count of requests made to StartInstance.
func (c *Lightsail) StartInstanceRequest(input *lightsail.StartInstanceInput) (req *request.Request, output *lightsail.StartInstanceOutput) {
	c.inc("StartInstance")
	return c.svc.StartInstanceRequest(input)
}

// StartInstance is a passthrough to the underlying StartInstance method.
// It will increment the count of requests made to StartInstance.
func (c *Lightsail) StartInstance(input *lightsail.StartInstanceInput) (*lightsail.StartInstanceOutput, error) {
	c.inc("StartInstance")
	return c.svc.StartInstance(input)
}

// StartInstanceWithContext is a passthrough to the underlying StartInstanceWithContext method.
// It will increment the count of requests made to StartInstance.
func (c *Lightsail) StartInstanceWithContext(ctx aws.Context, input *lightsail.StartInstanceInput, opts ...request.Option) (*lightsail.StartInstanceOutput, error) {
	c.inc("StartInstance")
	return c.svc.StartInstanceWithContext(ctx, input, opts...)
}

// StopInstanceRequest is a passthrough to the underlying StopInstanceRequest.
// It will increment the count of requests made to StopInstance.
func (c *Lightsail) StopInstanceRequest(input *lightsail.StopInstanceInput) (req *request.Request, output *lightsail.StopInstanceOutput) {
	c.inc("StopInstance")
	return c.svc.StopInstanceRequest(input)
}

// StopInstance is a passthrough to the underlying StopInstance method.
// It will increment the count of requests made to StopInstance.
func (c *Lightsail) StopInstance(input *lightsail.StopInstanceInput) (*lightsail.StopInstanceOutput, error) {
	c.inc("StopInstance")
	return c.svc.StopInstance(input)
}

// StopInstanceWithContext is a passthrough to the underlying StopInstanceWithContext method.
// It will increment the count of requests made to StopInstance.
func (c *Lightsail) StopInstanceWithContext(ctx aws.Context, input *lightsail.StopInstanceInput, opts ...request.Option) (*lightsail.StopInstanceOutput, error) {
	c.inc("StopInstance")
	return c.svc.StopInstanceWithContext(ctx, input, opts...)
}

// UnpeerVpcRequest is a passthrough to the underlying UnpeerVpcRequest.
// It will increment the count of requests made to UnpeerVpc.
func (c *Lightsail) UnpeerVpcRequest(input *lightsail.UnpeerVpcInput) (req *request.Request, output *lightsail.UnpeerVpcOutput) {
	c.inc("UnpeerVpc")
	return c.svc.UnpeerVpcRequest(input)
}

// UnpeerVpc is a passthrough to the underlying UnpeerVpc method.
// It will increment the count of requests made to UnpeerVpc.
func (c *Lightsail) UnpeerVpc(input *lightsail.UnpeerVpcInput) (*lightsail.UnpeerVpcOutput, error) {
	c.inc("UnpeerVpc")
	return c.svc.UnpeerVpc(input)
}

// UnpeerVpcWithContext is a passthrough to the underlying UnpeerVpcWithContext method.
// It will increment the count of requests made to UnpeerVpc.
func (c *Lightsail) UnpeerVpcWithContext(ctx aws.Context, input *lightsail.UnpeerVpcInput, opts ...request.Option) (*lightsail.UnpeerVpcOutput, error) {
	c.inc("UnpeerVpc")
	return c.svc.UnpeerVpcWithContext(ctx, input, opts...)
}

// UpdateDomainEntryRequest is a passthrough to the underlying UpdateDomainEntryRequest.
// It will increment the count of requests made to UpdateDomainEntry.
func (c *Lightsail) UpdateDomainEntryRequest(input *lightsail.UpdateDomainEntryInput) (req *request.Request, output *lightsail.UpdateDomainEntryOutput) {
	c.inc("UpdateDomainEntry")
	return c.svc.UpdateDomainEntryRequest(input)
}

// UpdateDomainEntry is a passthrough to the underlying UpdateDomainEntry method.
// It will increment the count of requests made to UpdateDomainEntry.
func (c *Lightsail) UpdateDomainEntry(input *lightsail.UpdateDomainEntryInput) (*lightsail.UpdateDomainEntryOutput, error) {
	c.inc("UpdateDomainEntry")
	return c.svc.UpdateDomainEntry(input)
}

// UpdateDomainEntryWithContext is a passthrough to the underlying UpdateDomainEntryWithContext method.
// It will increment the count of requests made to UpdateDomainEntry.
func (c *Lightsail) UpdateDomainEntryWithContext(ctx aws.Context, input *lightsail.UpdateDomainEntryInput, opts ...request.Option) (*lightsail.UpdateDomainEntryOutput, error) {
	c.inc("UpdateDomainEntry")
	return c.svc.UpdateDomainEntryWithContext(ctx, input, opts...)
}

// UpdateLoadBalancerAttributeRequest is a passthrough to the underlying UpdateLoadBalancerAttributeRequest.
// It will increment the count of requests made to UpdateLoadBalancerAttribute.
func (c *Lightsail) UpdateLoadBalancerAttributeRequest(input *lightsail.UpdateLoadBalancerAttributeInput) (req *request.Request, output *lightsail.UpdateLoadBalancerAttributeOutput) {
	c.inc("UpdateLoadBalancerAttribute")
	return c.svc.UpdateLoadBalancerAttributeRequest(input)
}

// UpdateLoadBalancerAttribute is a passthrough to the underlying UpdateLoadBalancerAttribute method.
// It will increment the count of requests made to UpdateLoadBalancerAttribute.
func (c *Lightsail) UpdateLoadBalancerAttribute(input *lightsail.UpdateLoadBalancerAttributeInput) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	c.inc("UpdateLoadBalancerAttribute")
	return c.svc.UpdateLoadBalancerAttribute(input)
}

// UpdateLoadBalancerAttributeWithContext is a passthrough to the underlying UpdateLoadBalancerAttributeWithContext method.
// It will increment the count of requests made to UpdateLoadBalancerAttribute.
func (c *Lightsail) UpdateLoadBalancerAttributeWithContext(ctx aws.Context, input *lightsail.UpdateLoadBalancerAttributeInput, opts ...request.Option) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	c.inc("UpdateLoadBalancerAttribute")
	return c.svc.UpdateLoadBalancerAttributeWithContext(ctx, input, opts...)
}
