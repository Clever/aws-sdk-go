// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package elbcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elb"
)

// AddTagsRequest is a passthrough to the underlying AddTagsRequest.
// It will increment the count of requests made to AddTags.
func (c *ELB) AddTagsRequest(input *elb.AddTagsInput) (req *request.Request, output *elb.AddTagsOutput) {
	c.inc("AddTags")
	return c.svc.AddTagsRequest(input)
}

// AddTags is a passthrough to the underlying AddTags method.
// It will increment the count of requests made to AddTags.
func (c *ELB) AddTags(input *elb.AddTagsInput) (*elb.AddTagsOutput, error) {
	c.inc("AddTags")
	return c.svc.AddTags(input)
}

// AddTagsWithContext is a passthrough to the underlying AddTagsWithContext method.
// It will increment the count of requests made to AddTags.
func (c *ELB) AddTagsWithContext(ctx aws.Context, input *elb.AddTagsInput, opts ...request.Option) (*elb.AddTagsOutput, error) {
	c.inc("AddTags")
	return c.svc.AddTagsWithContext(ctx, input, opts...)
}

// ApplySecurityGroupsToLoadBalancerRequest is a passthrough to the underlying ApplySecurityGroupsToLoadBalancerRequest.
// It will increment the count of requests made to ApplySecurityGroupsToLoadBalancer.
func (c *ELB) ApplySecurityGroupsToLoadBalancerRequest(input *elb.ApplySecurityGroupsToLoadBalancerInput) (req *request.Request, output *elb.ApplySecurityGroupsToLoadBalancerOutput) {
	c.inc("ApplySecurityGroupsToLoadBalancer")
	return c.svc.ApplySecurityGroupsToLoadBalancerRequest(input)
}

// ApplySecurityGroupsToLoadBalancer is a passthrough to the underlying ApplySecurityGroupsToLoadBalancer method.
// It will increment the count of requests made to ApplySecurityGroupsToLoadBalancer.
func (c *ELB) ApplySecurityGroupsToLoadBalancer(input *elb.ApplySecurityGroupsToLoadBalancerInput) (*elb.ApplySecurityGroupsToLoadBalancerOutput, error) {
	c.inc("ApplySecurityGroupsToLoadBalancer")
	return c.svc.ApplySecurityGroupsToLoadBalancer(input)
}

// ApplySecurityGroupsToLoadBalancerWithContext is a passthrough to the underlying ApplySecurityGroupsToLoadBalancerWithContext method.
// It will increment the count of requests made to ApplySecurityGroupsToLoadBalancer.
func (c *ELB) ApplySecurityGroupsToLoadBalancerWithContext(ctx aws.Context, input *elb.ApplySecurityGroupsToLoadBalancerInput, opts ...request.Option) (*elb.ApplySecurityGroupsToLoadBalancerOutput, error) {
	c.inc("ApplySecurityGroupsToLoadBalancer")
	return c.svc.ApplySecurityGroupsToLoadBalancerWithContext(ctx, input, opts...)
}

// AttachLoadBalancerToSubnetsRequest is a passthrough to the underlying AttachLoadBalancerToSubnetsRequest.
// It will increment the count of requests made to AttachLoadBalancerToSubnets.
func (c *ELB) AttachLoadBalancerToSubnetsRequest(input *elb.AttachLoadBalancerToSubnetsInput) (req *request.Request, output *elb.AttachLoadBalancerToSubnetsOutput) {
	c.inc("AttachLoadBalancerToSubnets")
	return c.svc.AttachLoadBalancerToSubnetsRequest(input)
}

// AttachLoadBalancerToSubnets is a passthrough to the underlying AttachLoadBalancerToSubnets method.
// It will increment the count of requests made to AttachLoadBalancerToSubnets.
func (c *ELB) AttachLoadBalancerToSubnets(input *elb.AttachLoadBalancerToSubnetsInput) (*elb.AttachLoadBalancerToSubnetsOutput, error) {
	c.inc("AttachLoadBalancerToSubnets")
	return c.svc.AttachLoadBalancerToSubnets(input)
}

// AttachLoadBalancerToSubnetsWithContext is a passthrough to the underlying AttachLoadBalancerToSubnetsWithContext method.
// It will increment the count of requests made to AttachLoadBalancerToSubnets.
func (c *ELB) AttachLoadBalancerToSubnetsWithContext(ctx aws.Context, input *elb.AttachLoadBalancerToSubnetsInput, opts ...request.Option) (*elb.AttachLoadBalancerToSubnetsOutput, error) {
	c.inc("AttachLoadBalancerToSubnets")
	return c.svc.AttachLoadBalancerToSubnetsWithContext(ctx, input, opts...)
}

// ConfigureHealthCheckRequest is a passthrough to the underlying ConfigureHealthCheckRequest.
// It will increment the count of requests made to ConfigureHealthCheck.
func (c *ELB) ConfigureHealthCheckRequest(input *elb.ConfigureHealthCheckInput) (req *request.Request, output *elb.ConfigureHealthCheckOutput) {
	c.inc("ConfigureHealthCheck")
	return c.svc.ConfigureHealthCheckRequest(input)
}

// ConfigureHealthCheck is a passthrough to the underlying ConfigureHealthCheck method.
// It will increment the count of requests made to ConfigureHealthCheck.
func (c *ELB) ConfigureHealthCheck(input *elb.ConfigureHealthCheckInput) (*elb.ConfigureHealthCheckOutput, error) {
	c.inc("ConfigureHealthCheck")
	return c.svc.ConfigureHealthCheck(input)
}

// ConfigureHealthCheckWithContext is a passthrough to the underlying ConfigureHealthCheckWithContext method.
// It will increment the count of requests made to ConfigureHealthCheck.
func (c *ELB) ConfigureHealthCheckWithContext(ctx aws.Context, input *elb.ConfigureHealthCheckInput, opts ...request.Option) (*elb.ConfigureHealthCheckOutput, error) {
	c.inc("ConfigureHealthCheck")
	return c.svc.ConfigureHealthCheckWithContext(ctx, input, opts...)
}

// CreateAppCookieStickinessPolicyRequest is a passthrough to the underlying CreateAppCookieStickinessPolicyRequest.
// It will increment the count of requests made to CreateAppCookieStickinessPolicy.
func (c *ELB) CreateAppCookieStickinessPolicyRequest(input *elb.CreateAppCookieStickinessPolicyInput) (req *request.Request, output *elb.CreateAppCookieStickinessPolicyOutput) {
	c.inc("CreateAppCookieStickinessPolicy")
	return c.svc.CreateAppCookieStickinessPolicyRequest(input)
}

// CreateAppCookieStickinessPolicy is a passthrough to the underlying CreateAppCookieStickinessPolicy method.
// It will increment the count of requests made to CreateAppCookieStickinessPolicy.
func (c *ELB) CreateAppCookieStickinessPolicy(input *elb.CreateAppCookieStickinessPolicyInput) (*elb.CreateAppCookieStickinessPolicyOutput, error) {
	c.inc("CreateAppCookieStickinessPolicy")
	return c.svc.CreateAppCookieStickinessPolicy(input)
}

// CreateAppCookieStickinessPolicyWithContext is a passthrough to the underlying CreateAppCookieStickinessPolicyWithContext method.
// It will increment the count of requests made to CreateAppCookieStickinessPolicy.
func (c *ELB) CreateAppCookieStickinessPolicyWithContext(ctx aws.Context, input *elb.CreateAppCookieStickinessPolicyInput, opts ...request.Option) (*elb.CreateAppCookieStickinessPolicyOutput, error) {
	c.inc("CreateAppCookieStickinessPolicy")
	return c.svc.CreateAppCookieStickinessPolicyWithContext(ctx, input, opts...)
}

// CreateLBCookieStickinessPolicyRequest is a passthrough to the underlying CreateLBCookieStickinessPolicyRequest.
// It will increment the count of requests made to CreateLBCookieStickinessPolicy.
func (c *ELB) CreateLBCookieStickinessPolicyRequest(input *elb.CreateLBCookieStickinessPolicyInput) (req *request.Request, output *elb.CreateLBCookieStickinessPolicyOutput) {
	c.inc("CreateLBCookieStickinessPolicy")
	return c.svc.CreateLBCookieStickinessPolicyRequest(input)
}

// CreateLBCookieStickinessPolicy is a passthrough to the underlying CreateLBCookieStickinessPolicy method.
// It will increment the count of requests made to CreateLBCookieStickinessPolicy.
func (c *ELB) CreateLBCookieStickinessPolicy(input *elb.CreateLBCookieStickinessPolicyInput) (*elb.CreateLBCookieStickinessPolicyOutput, error) {
	c.inc("CreateLBCookieStickinessPolicy")
	return c.svc.CreateLBCookieStickinessPolicy(input)
}

// CreateLBCookieStickinessPolicyWithContext is a passthrough to the underlying CreateLBCookieStickinessPolicyWithContext method.
// It will increment the count of requests made to CreateLBCookieStickinessPolicy.
func (c *ELB) CreateLBCookieStickinessPolicyWithContext(ctx aws.Context, input *elb.CreateLBCookieStickinessPolicyInput, opts ...request.Option) (*elb.CreateLBCookieStickinessPolicyOutput, error) {
	c.inc("CreateLBCookieStickinessPolicy")
	return c.svc.CreateLBCookieStickinessPolicyWithContext(ctx, input, opts...)
}

// CreateLoadBalancerRequest is a passthrough to the underlying CreateLoadBalancerRequest.
// It will increment the count of requests made to CreateLoadBalancer.
func (c *ELB) CreateLoadBalancerRequest(input *elb.CreateLoadBalancerInput) (req *request.Request, output *elb.CreateLoadBalancerOutput) {
	c.inc("CreateLoadBalancer")
	return c.svc.CreateLoadBalancerRequest(input)
}

// CreateLoadBalancer is a passthrough to the underlying CreateLoadBalancer method.
// It will increment the count of requests made to CreateLoadBalancer.
func (c *ELB) CreateLoadBalancer(input *elb.CreateLoadBalancerInput) (*elb.CreateLoadBalancerOutput, error) {
	c.inc("CreateLoadBalancer")
	return c.svc.CreateLoadBalancer(input)
}

// CreateLoadBalancerWithContext is a passthrough to the underlying CreateLoadBalancerWithContext method.
// It will increment the count of requests made to CreateLoadBalancer.
func (c *ELB) CreateLoadBalancerWithContext(ctx aws.Context, input *elb.CreateLoadBalancerInput, opts ...request.Option) (*elb.CreateLoadBalancerOutput, error) {
	c.inc("CreateLoadBalancer")
	return c.svc.CreateLoadBalancerWithContext(ctx, input, opts...)
}

// CreateLoadBalancerListenersRequest is a passthrough to the underlying CreateLoadBalancerListenersRequest.
// It will increment the count of requests made to CreateLoadBalancerListeners.
func (c *ELB) CreateLoadBalancerListenersRequest(input *elb.CreateLoadBalancerListenersInput) (req *request.Request, output *elb.CreateLoadBalancerListenersOutput) {
	c.inc("CreateLoadBalancerListeners")
	return c.svc.CreateLoadBalancerListenersRequest(input)
}

// CreateLoadBalancerListeners is a passthrough to the underlying CreateLoadBalancerListeners method.
// It will increment the count of requests made to CreateLoadBalancerListeners.
func (c *ELB) CreateLoadBalancerListeners(input *elb.CreateLoadBalancerListenersInput) (*elb.CreateLoadBalancerListenersOutput, error) {
	c.inc("CreateLoadBalancerListeners")
	return c.svc.CreateLoadBalancerListeners(input)
}

// CreateLoadBalancerListenersWithContext is a passthrough to the underlying CreateLoadBalancerListenersWithContext method.
// It will increment the count of requests made to CreateLoadBalancerListeners.
func (c *ELB) CreateLoadBalancerListenersWithContext(ctx aws.Context, input *elb.CreateLoadBalancerListenersInput, opts ...request.Option) (*elb.CreateLoadBalancerListenersOutput, error) {
	c.inc("CreateLoadBalancerListeners")
	return c.svc.CreateLoadBalancerListenersWithContext(ctx, input, opts...)
}

// CreateLoadBalancerPolicyRequest is a passthrough to the underlying CreateLoadBalancerPolicyRequest.
// It will increment the count of requests made to CreateLoadBalancerPolicy.
func (c *ELB) CreateLoadBalancerPolicyRequest(input *elb.CreateLoadBalancerPolicyInput) (req *request.Request, output *elb.CreateLoadBalancerPolicyOutput) {
	c.inc("CreateLoadBalancerPolicy")
	return c.svc.CreateLoadBalancerPolicyRequest(input)
}

// CreateLoadBalancerPolicy is a passthrough to the underlying CreateLoadBalancerPolicy method.
// It will increment the count of requests made to CreateLoadBalancerPolicy.
func (c *ELB) CreateLoadBalancerPolicy(input *elb.CreateLoadBalancerPolicyInput) (*elb.CreateLoadBalancerPolicyOutput, error) {
	c.inc("CreateLoadBalancerPolicy")
	return c.svc.CreateLoadBalancerPolicy(input)
}

// CreateLoadBalancerPolicyWithContext is a passthrough to the underlying CreateLoadBalancerPolicyWithContext method.
// It will increment the count of requests made to CreateLoadBalancerPolicy.
func (c *ELB) CreateLoadBalancerPolicyWithContext(ctx aws.Context, input *elb.CreateLoadBalancerPolicyInput, opts ...request.Option) (*elb.CreateLoadBalancerPolicyOutput, error) {
	c.inc("CreateLoadBalancerPolicy")
	return c.svc.CreateLoadBalancerPolicyWithContext(ctx, input, opts...)
}

// DeleteLoadBalancerRequest is a passthrough to the underlying DeleteLoadBalancerRequest.
// It will increment the count of requests made to DeleteLoadBalancer.
func (c *ELB) DeleteLoadBalancerRequest(input *elb.DeleteLoadBalancerInput) (req *request.Request, output *elb.DeleteLoadBalancerOutput) {
	c.inc("DeleteLoadBalancer")
	return c.svc.DeleteLoadBalancerRequest(input)
}

// DeleteLoadBalancer is a passthrough to the underlying DeleteLoadBalancer method.
// It will increment the count of requests made to DeleteLoadBalancer.
func (c *ELB) DeleteLoadBalancer(input *elb.DeleteLoadBalancerInput) (*elb.DeleteLoadBalancerOutput, error) {
	c.inc("DeleteLoadBalancer")
	return c.svc.DeleteLoadBalancer(input)
}

// DeleteLoadBalancerWithContext is a passthrough to the underlying DeleteLoadBalancerWithContext method.
// It will increment the count of requests made to DeleteLoadBalancer.
func (c *ELB) DeleteLoadBalancerWithContext(ctx aws.Context, input *elb.DeleteLoadBalancerInput, opts ...request.Option) (*elb.DeleteLoadBalancerOutput, error) {
	c.inc("DeleteLoadBalancer")
	return c.svc.DeleteLoadBalancerWithContext(ctx, input, opts...)
}

// DeleteLoadBalancerListenersRequest is a passthrough to the underlying DeleteLoadBalancerListenersRequest.
// It will increment the count of requests made to DeleteLoadBalancerListeners.
func (c *ELB) DeleteLoadBalancerListenersRequest(input *elb.DeleteLoadBalancerListenersInput) (req *request.Request, output *elb.DeleteLoadBalancerListenersOutput) {
	c.inc("DeleteLoadBalancerListeners")
	return c.svc.DeleteLoadBalancerListenersRequest(input)
}

// DeleteLoadBalancerListeners is a passthrough to the underlying DeleteLoadBalancerListeners method.
// It will increment the count of requests made to DeleteLoadBalancerListeners.
func (c *ELB) DeleteLoadBalancerListeners(input *elb.DeleteLoadBalancerListenersInput) (*elb.DeleteLoadBalancerListenersOutput, error) {
	c.inc("DeleteLoadBalancerListeners")
	return c.svc.DeleteLoadBalancerListeners(input)
}

// DeleteLoadBalancerListenersWithContext is a passthrough to the underlying DeleteLoadBalancerListenersWithContext method.
// It will increment the count of requests made to DeleteLoadBalancerListeners.
func (c *ELB) DeleteLoadBalancerListenersWithContext(ctx aws.Context, input *elb.DeleteLoadBalancerListenersInput, opts ...request.Option) (*elb.DeleteLoadBalancerListenersOutput, error) {
	c.inc("DeleteLoadBalancerListeners")
	return c.svc.DeleteLoadBalancerListenersWithContext(ctx, input, opts...)
}

// DeleteLoadBalancerPolicyRequest is a passthrough to the underlying DeleteLoadBalancerPolicyRequest.
// It will increment the count of requests made to DeleteLoadBalancerPolicy.
func (c *ELB) DeleteLoadBalancerPolicyRequest(input *elb.DeleteLoadBalancerPolicyInput) (req *request.Request, output *elb.DeleteLoadBalancerPolicyOutput) {
	c.inc("DeleteLoadBalancerPolicy")
	return c.svc.DeleteLoadBalancerPolicyRequest(input)
}

// DeleteLoadBalancerPolicy is a passthrough to the underlying DeleteLoadBalancerPolicy method.
// It will increment the count of requests made to DeleteLoadBalancerPolicy.
func (c *ELB) DeleteLoadBalancerPolicy(input *elb.DeleteLoadBalancerPolicyInput) (*elb.DeleteLoadBalancerPolicyOutput, error) {
	c.inc("DeleteLoadBalancerPolicy")
	return c.svc.DeleteLoadBalancerPolicy(input)
}

// DeleteLoadBalancerPolicyWithContext is a passthrough to the underlying DeleteLoadBalancerPolicyWithContext method.
// It will increment the count of requests made to DeleteLoadBalancerPolicy.
func (c *ELB) DeleteLoadBalancerPolicyWithContext(ctx aws.Context, input *elb.DeleteLoadBalancerPolicyInput, opts ...request.Option) (*elb.DeleteLoadBalancerPolicyOutput, error) {
	c.inc("DeleteLoadBalancerPolicy")
	return c.svc.DeleteLoadBalancerPolicyWithContext(ctx, input, opts...)
}

// DeregisterInstancesFromLoadBalancerRequest is a passthrough to the underlying DeregisterInstancesFromLoadBalancerRequest.
// It will increment the count of requests made to DeregisterInstancesFromLoadBalancer.
func (c *ELB) DeregisterInstancesFromLoadBalancerRequest(input *elb.DeregisterInstancesFromLoadBalancerInput) (req *request.Request, output *elb.DeregisterInstancesFromLoadBalancerOutput) {
	c.inc("DeregisterInstancesFromLoadBalancer")
	return c.svc.DeregisterInstancesFromLoadBalancerRequest(input)
}

// DeregisterInstancesFromLoadBalancer is a passthrough to the underlying DeregisterInstancesFromLoadBalancer method.
// It will increment the count of requests made to DeregisterInstancesFromLoadBalancer.
func (c *ELB) DeregisterInstancesFromLoadBalancer(input *elb.DeregisterInstancesFromLoadBalancerInput) (*elb.DeregisterInstancesFromLoadBalancerOutput, error) {
	c.inc("DeregisterInstancesFromLoadBalancer")
	return c.svc.DeregisterInstancesFromLoadBalancer(input)
}

// DeregisterInstancesFromLoadBalancerWithContext is a passthrough to the underlying DeregisterInstancesFromLoadBalancerWithContext method.
// It will increment the count of requests made to DeregisterInstancesFromLoadBalancer.
func (c *ELB) DeregisterInstancesFromLoadBalancerWithContext(ctx aws.Context, input *elb.DeregisterInstancesFromLoadBalancerInput, opts ...request.Option) (*elb.DeregisterInstancesFromLoadBalancerOutput, error) {
	c.inc("DeregisterInstancesFromLoadBalancer")
	return c.svc.DeregisterInstancesFromLoadBalancerWithContext(ctx, input, opts...)
}

// DescribeAccountLimitsRequest is a passthrough to the underlying DescribeAccountLimitsRequest.
// It will increment the count of requests made to DescribeAccountLimits.
func (c *ELB) DescribeAccountLimitsRequest(input *elb.DescribeAccountLimitsInput) (req *request.Request, output *elb.DescribeAccountLimitsOutput) {
	c.inc("DescribeAccountLimits")
	return c.svc.DescribeAccountLimitsRequest(input)
}

// DescribeAccountLimits is a passthrough to the underlying DescribeAccountLimits method.
// It will increment the count of requests made to DescribeAccountLimits.
func (c *ELB) DescribeAccountLimits(input *elb.DescribeAccountLimitsInput) (*elb.DescribeAccountLimitsOutput, error) {
	c.inc("DescribeAccountLimits")
	return c.svc.DescribeAccountLimits(input)
}

// DescribeAccountLimitsWithContext is a passthrough to the underlying DescribeAccountLimitsWithContext method.
// It will increment the count of requests made to DescribeAccountLimits.
func (c *ELB) DescribeAccountLimitsWithContext(ctx aws.Context, input *elb.DescribeAccountLimitsInput, opts ...request.Option) (*elb.DescribeAccountLimitsOutput, error) {
	c.inc("DescribeAccountLimits")
	return c.svc.DescribeAccountLimitsWithContext(ctx, input, opts...)
}

// DescribeInstanceHealthRequest is a passthrough to the underlying DescribeInstanceHealthRequest.
// It will increment the count of requests made to DescribeInstanceHealth.
func (c *ELB) DescribeInstanceHealthRequest(input *elb.DescribeInstanceHealthInput) (req *request.Request, output *elb.DescribeInstanceHealthOutput) {
	c.inc("DescribeInstanceHealth")
	return c.svc.DescribeInstanceHealthRequest(input)
}

// DescribeInstanceHealth is a passthrough to the underlying DescribeInstanceHealth method.
// It will increment the count of requests made to DescribeInstanceHealth.
func (c *ELB) DescribeInstanceHealth(input *elb.DescribeInstanceHealthInput) (*elb.DescribeInstanceHealthOutput, error) {
	c.inc("DescribeInstanceHealth")
	return c.svc.DescribeInstanceHealth(input)
}

// DescribeInstanceHealthWithContext is a passthrough to the underlying DescribeInstanceHealthWithContext method.
// It will increment the count of requests made to DescribeInstanceHealth.
func (c *ELB) DescribeInstanceHealthWithContext(ctx aws.Context, input *elb.DescribeInstanceHealthInput, opts ...request.Option) (*elb.DescribeInstanceHealthOutput, error) {
	c.inc("DescribeInstanceHealth")
	return c.svc.DescribeInstanceHealthWithContext(ctx, input, opts...)
}

// DescribeLoadBalancerAttributesRequest is a passthrough to the underlying DescribeLoadBalancerAttributesRequest.
// It will increment the count of requests made to DescribeLoadBalancerAttributes.
func (c *ELB) DescribeLoadBalancerAttributesRequest(input *elb.DescribeLoadBalancerAttributesInput) (req *request.Request, output *elb.DescribeLoadBalancerAttributesOutput) {
	c.inc("DescribeLoadBalancerAttributes")
	return c.svc.DescribeLoadBalancerAttributesRequest(input)
}

// DescribeLoadBalancerAttributes is a passthrough to the underlying DescribeLoadBalancerAttributes method.
// It will increment the count of requests made to DescribeLoadBalancerAttributes.
func (c *ELB) DescribeLoadBalancerAttributes(input *elb.DescribeLoadBalancerAttributesInput) (*elb.DescribeLoadBalancerAttributesOutput, error) {
	c.inc("DescribeLoadBalancerAttributes")
	return c.svc.DescribeLoadBalancerAttributes(input)
}

// DescribeLoadBalancerAttributesWithContext is a passthrough to the underlying DescribeLoadBalancerAttributesWithContext method.
// It will increment the count of requests made to DescribeLoadBalancerAttributes.
func (c *ELB) DescribeLoadBalancerAttributesWithContext(ctx aws.Context, input *elb.DescribeLoadBalancerAttributesInput, opts ...request.Option) (*elb.DescribeLoadBalancerAttributesOutput, error) {
	c.inc("DescribeLoadBalancerAttributes")
	return c.svc.DescribeLoadBalancerAttributesWithContext(ctx, input, opts...)
}

// DescribeLoadBalancerPoliciesRequest is a passthrough to the underlying DescribeLoadBalancerPoliciesRequest.
// It will increment the count of requests made to DescribeLoadBalancerPolicies.
func (c *ELB) DescribeLoadBalancerPoliciesRequest(input *elb.DescribeLoadBalancerPoliciesInput) (req *request.Request, output *elb.DescribeLoadBalancerPoliciesOutput) {
	c.inc("DescribeLoadBalancerPolicies")
	return c.svc.DescribeLoadBalancerPoliciesRequest(input)
}

// DescribeLoadBalancerPolicies is a passthrough to the underlying DescribeLoadBalancerPolicies method.
// It will increment the count of requests made to DescribeLoadBalancerPolicies.
func (c *ELB) DescribeLoadBalancerPolicies(input *elb.DescribeLoadBalancerPoliciesInput) (*elb.DescribeLoadBalancerPoliciesOutput, error) {
	c.inc("DescribeLoadBalancerPolicies")
	return c.svc.DescribeLoadBalancerPolicies(input)
}

// DescribeLoadBalancerPoliciesWithContext is a passthrough to the underlying DescribeLoadBalancerPoliciesWithContext method.
// It will increment the count of requests made to DescribeLoadBalancerPolicies.
func (c *ELB) DescribeLoadBalancerPoliciesWithContext(ctx aws.Context, input *elb.DescribeLoadBalancerPoliciesInput, opts ...request.Option) (*elb.DescribeLoadBalancerPoliciesOutput, error) {
	c.inc("DescribeLoadBalancerPolicies")
	return c.svc.DescribeLoadBalancerPoliciesWithContext(ctx, input, opts...)
}

// DescribeLoadBalancerPolicyTypesRequest is a passthrough to the underlying DescribeLoadBalancerPolicyTypesRequest.
// It will increment the count of requests made to DescribeLoadBalancerPolicyTypes.
func (c *ELB) DescribeLoadBalancerPolicyTypesRequest(input *elb.DescribeLoadBalancerPolicyTypesInput) (req *request.Request, output *elb.DescribeLoadBalancerPolicyTypesOutput) {
	c.inc("DescribeLoadBalancerPolicyTypes")
	return c.svc.DescribeLoadBalancerPolicyTypesRequest(input)
}

// DescribeLoadBalancerPolicyTypes is a passthrough to the underlying DescribeLoadBalancerPolicyTypes method.
// It will increment the count of requests made to DescribeLoadBalancerPolicyTypes.
func (c *ELB) DescribeLoadBalancerPolicyTypes(input *elb.DescribeLoadBalancerPolicyTypesInput) (*elb.DescribeLoadBalancerPolicyTypesOutput, error) {
	c.inc("DescribeLoadBalancerPolicyTypes")
	return c.svc.DescribeLoadBalancerPolicyTypes(input)
}

// DescribeLoadBalancerPolicyTypesWithContext is a passthrough to the underlying DescribeLoadBalancerPolicyTypesWithContext method.
// It will increment the count of requests made to DescribeLoadBalancerPolicyTypes.
func (c *ELB) DescribeLoadBalancerPolicyTypesWithContext(ctx aws.Context, input *elb.DescribeLoadBalancerPolicyTypesInput, opts ...request.Option) (*elb.DescribeLoadBalancerPolicyTypesOutput, error) {
	c.inc("DescribeLoadBalancerPolicyTypes")
	return c.svc.DescribeLoadBalancerPolicyTypesWithContext(ctx, input, opts...)
}

// DescribeLoadBalancersRequest is a passthrough to the underlying DescribeLoadBalancersRequest.
// It will increment the count of requests made to DescribeLoadBalancers.
func (c *ELB) DescribeLoadBalancersRequest(input *elb.DescribeLoadBalancersInput) (req *request.Request, output *elb.DescribeLoadBalancersOutput) {
	c.inc("DescribeLoadBalancers")
	return c.svc.DescribeLoadBalancersRequest(input)
}

// DescribeLoadBalancers is a passthrough to the underlying DescribeLoadBalancers method.
// It will increment the count of requests made to DescribeLoadBalancers.
func (c *ELB) DescribeLoadBalancers(input *elb.DescribeLoadBalancersInput) (*elb.DescribeLoadBalancersOutput, error) {
	c.inc("DescribeLoadBalancers")
	return c.svc.DescribeLoadBalancers(input)
}

// DescribeLoadBalancersWithContext is a passthrough to the underlying DescribeLoadBalancersWithContext method.
// It will increment the count of requests made to DescribeLoadBalancers.
func (c *ELB) DescribeLoadBalancersWithContext(ctx aws.Context, input *elb.DescribeLoadBalancersInput, opts ...request.Option) (*elb.DescribeLoadBalancersOutput, error) {
	c.inc("DescribeLoadBalancers")
	return c.svc.DescribeLoadBalancersWithContext(ctx, input, opts...)
}

// DescribeLoadBalancersPages is a passthrough to the underlying DescribeLoadBalancersPages method.
// It will increment the count of requests made to DescribeLoadBalancers on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeLoadBalancersPagesWithContext to avoid this.
func (c *ELB) DescribeLoadBalancersPages(input *elb.DescribeLoadBalancersInput, fn func(*elb.DescribeLoadBalancersOutput, bool) bool) error {
	wrappedFn := func(page *elb.DescribeLoadBalancersOutput, lastPage bool) bool {
		c.inc("DescribeLoadBalancers")
		return fn(page, lastPage)
	}
	return c.DescribeLoadBalancersPages(input, wrappedFn)
}

// DescribeLoadBalancersPagesWithContext is a passthrough to the underlying DescribeLoadBalancersPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeLoadBalancers when applied to the request.
func (c *ELB) DescribeLoadBalancersPagesWithContext(ctx aws.Context, input *elb.DescribeLoadBalancersInput, fn func(*elb.DescribeLoadBalancersOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeLoadBalancers"))
	return c.DescribeLoadBalancersPagesWithContext(ctx, input, fn, opts...)
}

// DescribeTagsRequest is a passthrough to the underlying DescribeTagsRequest.
// It will increment the count of requests made to DescribeTags.
func (c *ELB) DescribeTagsRequest(input *elb.DescribeTagsInput) (req *request.Request, output *elb.DescribeTagsOutput) {
	c.inc("DescribeTags")
	return c.svc.DescribeTagsRequest(input)
}

// DescribeTags is a passthrough to the underlying DescribeTags method.
// It will increment the count of requests made to DescribeTags.
func (c *ELB) DescribeTags(input *elb.DescribeTagsInput) (*elb.DescribeTagsOutput, error) {
	c.inc("DescribeTags")
	return c.svc.DescribeTags(input)
}

// DescribeTagsWithContext is a passthrough to the underlying DescribeTagsWithContext method.
// It will increment the count of requests made to DescribeTags.
func (c *ELB) DescribeTagsWithContext(ctx aws.Context, input *elb.DescribeTagsInput, opts ...request.Option) (*elb.DescribeTagsOutput, error) {
	c.inc("DescribeTags")
	return c.svc.DescribeTagsWithContext(ctx, input, opts...)
}

// DetachLoadBalancerFromSubnetsRequest is a passthrough to the underlying DetachLoadBalancerFromSubnetsRequest.
// It will increment the count of requests made to DetachLoadBalancerFromSubnets.
func (c *ELB) DetachLoadBalancerFromSubnetsRequest(input *elb.DetachLoadBalancerFromSubnetsInput) (req *request.Request, output *elb.DetachLoadBalancerFromSubnetsOutput) {
	c.inc("DetachLoadBalancerFromSubnets")
	return c.svc.DetachLoadBalancerFromSubnetsRequest(input)
}

// DetachLoadBalancerFromSubnets is a passthrough to the underlying DetachLoadBalancerFromSubnets method.
// It will increment the count of requests made to DetachLoadBalancerFromSubnets.
func (c *ELB) DetachLoadBalancerFromSubnets(input *elb.DetachLoadBalancerFromSubnetsInput) (*elb.DetachLoadBalancerFromSubnetsOutput, error) {
	c.inc("DetachLoadBalancerFromSubnets")
	return c.svc.DetachLoadBalancerFromSubnets(input)
}

// DetachLoadBalancerFromSubnetsWithContext is a passthrough to the underlying DetachLoadBalancerFromSubnetsWithContext method.
// It will increment the count of requests made to DetachLoadBalancerFromSubnets.
func (c *ELB) DetachLoadBalancerFromSubnetsWithContext(ctx aws.Context, input *elb.DetachLoadBalancerFromSubnetsInput, opts ...request.Option) (*elb.DetachLoadBalancerFromSubnetsOutput, error) {
	c.inc("DetachLoadBalancerFromSubnets")
	return c.svc.DetachLoadBalancerFromSubnetsWithContext(ctx, input, opts...)
}

// DisableAvailabilityZonesForLoadBalancerRequest is a passthrough to the underlying DisableAvailabilityZonesForLoadBalancerRequest.
// It will increment the count of requests made to DisableAvailabilityZonesForLoadBalancer.
func (c *ELB) DisableAvailabilityZonesForLoadBalancerRequest(input *elb.DisableAvailabilityZonesForLoadBalancerInput) (req *request.Request, output *elb.DisableAvailabilityZonesForLoadBalancerOutput) {
	c.inc("DisableAvailabilityZonesForLoadBalancer")
	return c.svc.DisableAvailabilityZonesForLoadBalancerRequest(input)
}

// DisableAvailabilityZonesForLoadBalancer is a passthrough to the underlying DisableAvailabilityZonesForLoadBalancer method.
// It will increment the count of requests made to DisableAvailabilityZonesForLoadBalancer.
func (c *ELB) DisableAvailabilityZonesForLoadBalancer(input *elb.DisableAvailabilityZonesForLoadBalancerInput) (*elb.DisableAvailabilityZonesForLoadBalancerOutput, error) {
	c.inc("DisableAvailabilityZonesForLoadBalancer")
	return c.svc.DisableAvailabilityZonesForLoadBalancer(input)
}

// DisableAvailabilityZonesForLoadBalancerWithContext is a passthrough to the underlying DisableAvailabilityZonesForLoadBalancerWithContext method.
// It will increment the count of requests made to DisableAvailabilityZonesForLoadBalancer.
func (c *ELB) DisableAvailabilityZonesForLoadBalancerWithContext(ctx aws.Context, input *elb.DisableAvailabilityZonesForLoadBalancerInput, opts ...request.Option) (*elb.DisableAvailabilityZonesForLoadBalancerOutput, error) {
	c.inc("DisableAvailabilityZonesForLoadBalancer")
	return c.svc.DisableAvailabilityZonesForLoadBalancerWithContext(ctx, input, opts...)
}

// EnableAvailabilityZonesForLoadBalancerRequest is a passthrough to the underlying EnableAvailabilityZonesForLoadBalancerRequest.
// It will increment the count of requests made to EnableAvailabilityZonesForLoadBalancer.
func (c *ELB) EnableAvailabilityZonesForLoadBalancerRequest(input *elb.EnableAvailabilityZonesForLoadBalancerInput) (req *request.Request, output *elb.EnableAvailabilityZonesForLoadBalancerOutput) {
	c.inc("EnableAvailabilityZonesForLoadBalancer")
	return c.svc.EnableAvailabilityZonesForLoadBalancerRequest(input)
}

// EnableAvailabilityZonesForLoadBalancer is a passthrough to the underlying EnableAvailabilityZonesForLoadBalancer method.
// It will increment the count of requests made to EnableAvailabilityZonesForLoadBalancer.
func (c *ELB) EnableAvailabilityZonesForLoadBalancer(input *elb.EnableAvailabilityZonesForLoadBalancerInput) (*elb.EnableAvailabilityZonesForLoadBalancerOutput, error) {
	c.inc("EnableAvailabilityZonesForLoadBalancer")
	return c.svc.EnableAvailabilityZonesForLoadBalancer(input)
}

// EnableAvailabilityZonesForLoadBalancerWithContext is a passthrough to the underlying EnableAvailabilityZonesForLoadBalancerWithContext method.
// It will increment the count of requests made to EnableAvailabilityZonesForLoadBalancer.
func (c *ELB) EnableAvailabilityZonesForLoadBalancerWithContext(ctx aws.Context, input *elb.EnableAvailabilityZonesForLoadBalancerInput, opts ...request.Option) (*elb.EnableAvailabilityZonesForLoadBalancerOutput, error) {
	c.inc("EnableAvailabilityZonesForLoadBalancer")
	return c.svc.EnableAvailabilityZonesForLoadBalancerWithContext(ctx, input, opts...)
}

// ModifyLoadBalancerAttributesRequest is a passthrough to the underlying ModifyLoadBalancerAttributesRequest.
// It will increment the count of requests made to ModifyLoadBalancerAttributes.
func (c *ELB) ModifyLoadBalancerAttributesRequest(input *elb.ModifyLoadBalancerAttributesInput) (req *request.Request, output *elb.ModifyLoadBalancerAttributesOutput) {
	c.inc("ModifyLoadBalancerAttributes")
	return c.svc.ModifyLoadBalancerAttributesRequest(input)
}

// ModifyLoadBalancerAttributes is a passthrough to the underlying ModifyLoadBalancerAttributes method.
// It will increment the count of requests made to ModifyLoadBalancerAttributes.
func (c *ELB) ModifyLoadBalancerAttributes(input *elb.ModifyLoadBalancerAttributesInput) (*elb.ModifyLoadBalancerAttributesOutput, error) {
	c.inc("ModifyLoadBalancerAttributes")
	return c.svc.ModifyLoadBalancerAttributes(input)
}

// ModifyLoadBalancerAttributesWithContext is a passthrough to the underlying ModifyLoadBalancerAttributesWithContext method.
// It will increment the count of requests made to ModifyLoadBalancerAttributes.
func (c *ELB) ModifyLoadBalancerAttributesWithContext(ctx aws.Context, input *elb.ModifyLoadBalancerAttributesInput, opts ...request.Option) (*elb.ModifyLoadBalancerAttributesOutput, error) {
	c.inc("ModifyLoadBalancerAttributes")
	return c.svc.ModifyLoadBalancerAttributesWithContext(ctx, input, opts...)
}

// RegisterInstancesWithLoadBalancerRequest is a passthrough to the underlying RegisterInstancesWithLoadBalancerRequest.
// It will increment the count of requests made to RegisterInstancesWithLoadBalancer.
func (c *ELB) RegisterInstancesWithLoadBalancerRequest(input *elb.RegisterInstancesWithLoadBalancerInput) (req *request.Request, output *elb.RegisterInstancesWithLoadBalancerOutput) {
	c.inc("RegisterInstancesWithLoadBalancer")
	return c.svc.RegisterInstancesWithLoadBalancerRequest(input)
}

// RegisterInstancesWithLoadBalancer is a passthrough to the underlying RegisterInstancesWithLoadBalancer method.
// It will increment the count of requests made to RegisterInstancesWithLoadBalancer.
func (c *ELB) RegisterInstancesWithLoadBalancer(input *elb.RegisterInstancesWithLoadBalancerInput) (*elb.RegisterInstancesWithLoadBalancerOutput, error) {
	c.inc("RegisterInstancesWithLoadBalancer")
	return c.svc.RegisterInstancesWithLoadBalancer(input)
}

// RegisterInstancesWithLoadBalancerWithContext is a passthrough to the underlying RegisterInstancesWithLoadBalancerWithContext method.
// It will increment the count of requests made to RegisterInstancesWithLoadBalancer.
func (c *ELB) RegisterInstancesWithLoadBalancerWithContext(ctx aws.Context, input *elb.RegisterInstancesWithLoadBalancerInput, opts ...request.Option) (*elb.RegisterInstancesWithLoadBalancerOutput, error) {
	c.inc("RegisterInstancesWithLoadBalancer")
	return c.svc.RegisterInstancesWithLoadBalancerWithContext(ctx, input, opts...)
}

// RemoveTagsRequest is a passthrough to the underlying RemoveTagsRequest.
// It will increment the count of requests made to RemoveTags.
func (c *ELB) RemoveTagsRequest(input *elb.RemoveTagsInput) (req *request.Request, output *elb.RemoveTagsOutput) {
	c.inc("RemoveTags")
	return c.svc.RemoveTagsRequest(input)
}

// RemoveTags is a passthrough to the underlying RemoveTags method.
// It will increment the count of requests made to RemoveTags.
func (c *ELB) RemoveTags(input *elb.RemoveTagsInput) (*elb.RemoveTagsOutput, error) {
	c.inc("RemoveTags")
	return c.svc.RemoveTags(input)
}

// RemoveTagsWithContext is a passthrough to the underlying RemoveTagsWithContext method.
// It will increment the count of requests made to RemoveTags.
func (c *ELB) RemoveTagsWithContext(ctx aws.Context, input *elb.RemoveTagsInput, opts ...request.Option) (*elb.RemoveTagsOutput, error) {
	c.inc("RemoveTags")
	return c.svc.RemoveTagsWithContext(ctx, input, opts...)
}

// SetLoadBalancerListenerSSLCertificateRequest is a passthrough to the underlying SetLoadBalancerListenerSSLCertificateRequest.
// It will increment the count of requests made to SetLoadBalancerListenerSSLCertificate.
func (c *ELB) SetLoadBalancerListenerSSLCertificateRequest(input *elb.SetLoadBalancerListenerSSLCertificateInput) (req *request.Request, output *elb.SetLoadBalancerListenerSSLCertificateOutput) {
	c.inc("SetLoadBalancerListenerSSLCertificate")
	return c.svc.SetLoadBalancerListenerSSLCertificateRequest(input)
}

// SetLoadBalancerListenerSSLCertificate is a passthrough to the underlying SetLoadBalancerListenerSSLCertificate method.
// It will increment the count of requests made to SetLoadBalancerListenerSSLCertificate.
func (c *ELB) SetLoadBalancerListenerSSLCertificate(input *elb.SetLoadBalancerListenerSSLCertificateInput) (*elb.SetLoadBalancerListenerSSLCertificateOutput, error) {
	c.inc("SetLoadBalancerListenerSSLCertificate")
	return c.svc.SetLoadBalancerListenerSSLCertificate(input)
}

// SetLoadBalancerListenerSSLCertificateWithContext is a passthrough to the underlying SetLoadBalancerListenerSSLCertificateWithContext method.
// It will increment the count of requests made to SetLoadBalancerListenerSSLCertificate.
func (c *ELB) SetLoadBalancerListenerSSLCertificateWithContext(ctx aws.Context, input *elb.SetLoadBalancerListenerSSLCertificateInput, opts ...request.Option) (*elb.SetLoadBalancerListenerSSLCertificateOutput, error) {
	c.inc("SetLoadBalancerListenerSSLCertificate")
	return c.svc.SetLoadBalancerListenerSSLCertificateWithContext(ctx, input, opts...)
}

// SetLoadBalancerPoliciesForBackendServerRequest is a passthrough to the underlying SetLoadBalancerPoliciesForBackendServerRequest.
// It will increment the count of requests made to SetLoadBalancerPoliciesForBackendServer.
func (c *ELB) SetLoadBalancerPoliciesForBackendServerRequest(input *elb.SetLoadBalancerPoliciesForBackendServerInput) (req *request.Request, output *elb.SetLoadBalancerPoliciesForBackendServerOutput) {
	c.inc("SetLoadBalancerPoliciesForBackendServer")
	return c.svc.SetLoadBalancerPoliciesForBackendServerRequest(input)
}

// SetLoadBalancerPoliciesForBackendServer is a passthrough to the underlying SetLoadBalancerPoliciesForBackendServer method.
// It will increment the count of requests made to SetLoadBalancerPoliciesForBackendServer.
func (c *ELB) SetLoadBalancerPoliciesForBackendServer(input *elb.SetLoadBalancerPoliciesForBackendServerInput) (*elb.SetLoadBalancerPoliciesForBackendServerOutput, error) {
	c.inc("SetLoadBalancerPoliciesForBackendServer")
	return c.svc.SetLoadBalancerPoliciesForBackendServer(input)
}

// SetLoadBalancerPoliciesForBackendServerWithContext is a passthrough to the underlying SetLoadBalancerPoliciesForBackendServerWithContext method.
// It will increment the count of requests made to SetLoadBalancerPoliciesForBackendServer.
func (c *ELB) SetLoadBalancerPoliciesForBackendServerWithContext(ctx aws.Context, input *elb.SetLoadBalancerPoliciesForBackendServerInput, opts ...request.Option) (*elb.SetLoadBalancerPoliciesForBackendServerOutput, error) {
	c.inc("SetLoadBalancerPoliciesForBackendServer")
	return c.svc.SetLoadBalancerPoliciesForBackendServerWithContext(ctx, input, opts...)
}

// SetLoadBalancerPoliciesOfListenerRequest is a passthrough to the underlying SetLoadBalancerPoliciesOfListenerRequest.
// It will increment the count of requests made to SetLoadBalancerPoliciesOfListener.
func (c *ELB) SetLoadBalancerPoliciesOfListenerRequest(input *elb.SetLoadBalancerPoliciesOfListenerInput) (req *request.Request, output *elb.SetLoadBalancerPoliciesOfListenerOutput) {
	c.inc("SetLoadBalancerPoliciesOfListener")
	return c.svc.SetLoadBalancerPoliciesOfListenerRequest(input)
}

// SetLoadBalancerPoliciesOfListener is a passthrough to the underlying SetLoadBalancerPoliciesOfListener method.
// It will increment the count of requests made to SetLoadBalancerPoliciesOfListener.
func (c *ELB) SetLoadBalancerPoliciesOfListener(input *elb.SetLoadBalancerPoliciesOfListenerInput) (*elb.SetLoadBalancerPoliciesOfListenerOutput, error) {
	c.inc("SetLoadBalancerPoliciesOfListener")
	return c.svc.SetLoadBalancerPoliciesOfListener(input)
}

// SetLoadBalancerPoliciesOfListenerWithContext is a passthrough to the underlying SetLoadBalancerPoliciesOfListenerWithContext method.
// It will increment the count of requests made to SetLoadBalancerPoliciesOfListener.
func (c *ELB) SetLoadBalancerPoliciesOfListenerWithContext(ctx aws.Context, input *elb.SetLoadBalancerPoliciesOfListenerInput, opts ...request.Option) (*elb.SetLoadBalancerPoliciesOfListenerOutput, error) {
	c.inc("SetLoadBalancerPoliciesOfListener")
	return c.svc.SetLoadBalancerPoliciesOfListenerWithContext(ctx, input, opts...)
}
