// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kinesiscounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/kinesis"
)

// AddTagsToStreamRequest is a passthrough to the underlying AddTagsToStreamRequest.
// It will increment the count of requests made to AddTagsToStream.
func (c *Kinesis) AddTagsToStreamRequest(input *kinesis.AddTagsToStreamInput) (req *request.Request, output *kinesis.AddTagsToStreamOutput) {
	c.inc("AddTagsToStream")
	return c.svc.AddTagsToStreamRequest(input)
}

// AddTagsToStream is a passthrough to the underlying AddTagsToStream method.
// It will increment the count of requests made to AddTagsToStream.
func (c *Kinesis) AddTagsToStream(input *kinesis.AddTagsToStreamInput) (*kinesis.AddTagsToStreamOutput, error) {
	c.inc("AddTagsToStream")
	return c.svc.AddTagsToStream(input)
}

// AddTagsToStreamWithContext is a passthrough to the underlying AddTagsToStreamWithContext method.
// It will increment the count of requests made to AddTagsToStream.
func (c *Kinesis) AddTagsToStreamWithContext(ctx aws.Context, input *kinesis.AddTagsToStreamInput, opts ...request.Option) (*kinesis.AddTagsToStreamOutput, error) {
	c.inc("AddTagsToStream")
	return c.svc.AddTagsToStreamWithContext(ctx, input, opts...)
}

// CreateStreamRequest is a passthrough to the underlying CreateStreamRequest.
// It will increment the count of requests made to CreateStream.
func (c *Kinesis) CreateStreamRequest(input *kinesis.CreateStreamInput) (req *request.Request, output *kinesis.CreateStreamOutput) {
	c.inc("CreateStream")
	return c.svc.CreateStreamRequest(input)
}

// CreateStream is a passthrough to the underlying CreateStream method.
// It will increment the count of requests made to CreateStream.
func (c *Kinesis) CreateStream(input *kinesis.CreateStreamInput) (*kinesis.CreateStreamOutput, error) {
	c.inc("CreateStream")
	return c.svc.CreateStream(input)
}

// CreateStreamWithContext is a passthrough to the underlying CreateStreamWithContext method.
// It will increment the count of requests made to CreateStream.
func (c *Kinesis) CreateStreamWithContext(ctx aws.Context, input *kinesis.CreateStreamInput, opts ...request.Option) (*kinesis.CreateStreamOutput, error) {
	c.inc("CreateStream")
	return c.svc.CreateStreamWithContext(ctx, input, opts...)
}

// DecreaseStreamRetentionPeriodRequest is a passthrough to the underlying DecreaseStreamRetentionPeriodRequest.
// It will increment the count of requests made to DecreaseStreamRetentionPeriod.
func (c *Kinesis) DecreaseStreamRetentionPeriodRequest(input *kinesis.DecreaseStreamRetentionPeriodInput) (req *request.Request, output *kinesis.DecreaseStreamRetentionPeriodOutput) {
	c.inc("DecreaseStreamRetentionPeriod")
	return c.svc.DecreaseStreamRetentionPeriodRequest(input)
}

// DecreaseStreamRetentionPeriod is a passthrough to the underlying DecreaseStreamRetentionPeriod method.
// It will increment the count of requests made to DecreaseStreamRetentionPeriod.
func (c *Kinesis) DecreaseStreamRetentionPeriod(input *kinesis.DecreaseStreamRetentionPeriodInput) (*kinesis.DecreaseStreamRetentionPeriodOutput, error) {
	c.inc("DecreaseStreamRetentionPeriod")
	return c.svc.DecreaseStreamRetentionPeriod(input)
}

// DecreaseStreamRetentionPeriodWithContext is a passthrough to the underlying DecreaseStreamRetentionPeriodWithContext method.
// It will increment the count of requests made to DecreaseStreamRetentionPeriod.
func (c *Kinesis) DecreaseStreamRetentionPeriodWithContext(ctx aws.Context, input *kinesis.DecreaseStreamRetentionPeriodInput, opts ...request.Option) (*kinesis.DecreaseStreamRetentionPeriodOutput, error) {
	c.inc("DecreaseStreamRetentionPeriod")
	return c.svc.DecreaseStreamRetentionPeriodWithContext(ctx, input, opts...)
}

// DeleteStreamRequest is a passthrough to the underlying DeleteStreamRequest.
// It will increment the count of requests made to DeleteStream.
func (c *Kinesis) DeleteStreamRequest(input *kinesis.DeleteStreamInput) (req *request.Request, output *kinesis.DeleteStreamOutput) {
	c.inc("DeleteStream")
	return c.svc.DeleteStreamRequest(input)
}

// DeleteStream is a passthrough to the underlying DeleteStream method.
// It will increment the count of requests made to DeleteStream.
func (c *Kinesis) DeleteStream(input *kinesis.DeleteStreamInput) (*kinesis.DeleteStreamOutput, error) {
	c.inc("DeleteStream")
	return c.svc.DeleteStream(input)
}

// DeleteStreamWithContext is a passthrough to the underlying DeleteStreamWithContext method.
// It will increment the count of requests made to DeleteStream.
func (c *Kinesis) DeleteStreamWithContext(ctx aws.Context, input *kinesis.DeleteStreamInput, opts ...request.Option) (*kinesis.DeleteStreamOutput, error) {
	c.inc("DeleteStream")
	return c.svc.DeleteStreamWithContext(ctx, input, opts...)
}

// DescribeLimitsRequest is a passthrough to the underlying DescribeLimitsRequest.
// It will increment the count of requests made to DescribeLimits.
func (c *Kinesis) DescribeLimitsRequest(input *kinesis.DescribeLimitsInput) (req *request.Request, output *kinesis.DescribeLimitsOutput) {
	c.inc("DescribeLimits")
	return c.svc.DescribeLimitsRequest(input)
}

// DescribeLimits is a passthrough to the underlying DescribeLimits method.
// It will increment the count of requests made to DescribeLimits.
func (c *Kinesis) DescribeLimits(input *kinesis.DescribeLimitsInput) (*kinesis.DescribeLimitsOutput, error) {
	c.inc("DescribeLimits")
	return c.svc.DescribeLimits(input)
}

// DescribeLimitsWithContext is a passthrough to the underlying DescribeLimitsWithContext method.
// It will increment the count of requests made to DescribeLimits.
func (c *Kinesis) DescribeLimitsWithContext(ctx aws.Context, input *kinesis.DescribeLimitsInput, opts ...request.Option) (*kinesis.DescribeLimitsOutput, error) {
	c.inc("DescribeLimits")
	return c.svc.DescribeLimitsWithContext(ctx, input, opts...)
}

// DescribeStreamRequest is a passthrough to the underlying DescribeStreamRequest.
// It will increment the count of requests made to DescribeStream.
func (c *Kinesis) DescribeStreamRequest(input *kinesis.DescribeStreamInput) (req *request.Request, output *kinesis.DescribeStreamOutput) {
	c.inc("DescribeStream")
	return c.svc.DescribeStreamRequest(input)
}

// DescribeStream is a passthrough to the underlying DescribeStream method.
// It will increment the count of requests made to DescribeStream.
func (c *Kinesis) DescribeStream(input *kinesis.DescribeStreamInput) (*kinesis.DescribeStreamOutput, error) {
	c.inc("DescribeStream")
	return c.svc.DescribeStream(input)
}

// DescribeStreamWithContext is a passthrough to the underlying DescribeStreamWithContext method.
// It will increment the count of requests made to DescribeStream.
func (c *Kinesis) DescribeStreamWithContext(ctx aws.Context, input *kinesis.DescribeStreamInput, opts ...request.Option) (*kinesis.DescribeStreamOutput, error) {
	c.inc("DescribeStream")
	return c.svc.DescribeStreamWithContext(ctx, input, opts...)
}

// DescribeStreamPages is a passthrough to the underlying DescribeStreamPages method.
// It will increment the count of requests made to DescribeStream on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use DescribeStreamPagesWithContext to avoid this.
func (c *Kinesis) DescribeStreamPages(input *kinesis.DescribeStreamInput, fn func(*kinesis.DescribeStreamOutput, bool) bool) error {
	wrappedFn := func(page *kinesis.DescribeStreamOutput, lastPage bool) bool {
		c.inc("DescribeStream")
		return fn(page, lastPage)
	}
	return c.svc.DescribeStreamPages(input, wrappedFn)
}

// DescribeStreamPagesWithContext is a passthrough to the underlying DescribeStreamPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to DescribeStream when applied to the request.
func (c *Kinesis) DescribeStreamPagesWithContext(ctx aws.Context, input *kinesis.DescribeStreamInput, fn func(*kinesis.DescribeStreamOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("DescribeStream"))
	return c.svc.DescribeStreamPagesWithContext(ctx, input, fn, opts...)
}

// DescribeStreamSummaryRequest is a passthrough to the underlying DescribeStreamSummaryRequest.
// It will increment the count of requests made to DescribeStreamSummary.
func (c *Kinesis) DescribeStreamSummaryRequest(input *kinesis.DescribeStreamSummaryInput) (req *request.Request, output *kinesis.DescribeStreamSummaryOutput) {
	c.inc("DescribeStreamSummary")
	return c.svc.DescribeStreamSummaryRequest(input)
}

// DescribeStreamSummary is a passthrough to the underlying DescribeStreamSummary method.
// It will increment the count of requests made to DescribeStreamSummary.
func (c *Kinesis) DescribeStreamSummary(input *kinesis.DescribeStreamSummaryInput) (*kinesis.DescribeStreamSummaryOutput, error) {
	c.inc("DescribeStreamSummary")
	return c.svc.DescribeStreamSummary(input)
}

// DescribeStreamSummaryWithContext is a passthrough to the underlying DescribeStreamSummaryWithContext method.
// It will increment the count of requests made to DescribeStreamSummary.
func (c *Kinesis) DescribeStreamSummaryWithContext(ctx aws.Context, input *kinesis.DescribeStreamSummaryInput, opts ...request.Option) (*kinesis.DescribeStreamSummaryOutput, error) {
	c.inc("DescribeStreamSummary")
	return c.svc.DescribeStreamSummaryWithContext(ctx, input, opts...)
}

// DisableEnhancedMonitoringRequest is a passthrough to the underlying DisableEnhancedMonitoringRequest.
// It will increment the count of requests made to DisableEnhancedMonitoring.
func (c *Kinesis) DisableEnhancedMonitoringRequest(input *kinesis.DisableEnhancedMonitoringInput) (req *request.Request, output *kinesis.EnhancedMonitoringOutput) {
	c.inc("DisableEnhancedMonitoring")
	return c.svc.DisableEnhancedMonitoringRequest(input)
}

// DisableEnhancedMonitoring is a passthrough to the underlying DisableEnhancedMonitoring method.
// It will increment the count of requests made to DisableEnhancedMonitoring.
func (c *Kinesis) DisableEnhancedMonitoring(input *kinesis.DisableEnhancedMonitoringInput) (*kinesis.EnhancedMonitoringOutput, error) {
	c.inc("DisableEnhancedMonitoring")
	return c.svc.DisableEnhancedMonitoring(input)
}

// DisableEnhancedMonitoringWithContext is a passthrough to the underlying DisableEnhancedMonitoringWithContext method.
// It will increment the count of requests made to DisableEnhancedMonitoring.
func (c *Kinesis) DisableEnhancedMonitoringWithContext(ctx aws.Context, input *kinesis.DisableEnhancedMonitoringInput, opts ...request.Option) (*kinesis.EnhancedMonitoringOutput, error) {
	c.inc("DisableEnhancedMonitoring")
	return c.svc.DisableEnhancedMonitoringWithContext(ctx, input, opts...)
}

// EnableEnhancedMonitoringRequest is a passthrough to the underlying EnableEnhancedMonitoringRequest.
// It will increment the count of requests made to EnableEnhancedMonitoring.
func (c *Kinesis) EnableEnhancedMonitoringRequest(input *kinesis.EnableEnhancedMonitoringInput) (req *request.Request, output *kinesis.EnhancedMonitoringOutput) {
	c.inc("EnableEnhancedMonitoring")
	return c.svc.EnableEnhancedMonitoringRequest(input)
}

// EnableEnhancedMonitoring is a passthrough to the underlying EnableEnhancedMonitoring method.
// It will increment the count of requests made to EnableEnhancedMonitoring.
func (c *Kinesis) EnableEnhancedMonitoring(input *kinesis.EnableEnhancedMonitoringInput) (*kinesis.EnhancedMonitoringOutput, error) {
	c.inc("EnableEnhancedMonitoring")
	return c.svc.EnableEnhancedMonitoring(input)
}

// EnableEnhancedMonitoringWithContext is a passthrough to the underlying EnableEnhancedMonitoringWithContext method.
// It will increment the count of requests made to EnableEnhancedMonitoring.
func (c *Kinesis) EnableEnhancedMonitoringWithContext(ctx aws.Context, input *kinesis.EnableEnhancedMonitoringInput, opts ...request.Option) (*kinesis.EnhancedMonitoringOutput, error) {
	c.inc("EnableEnhancedMonitoring")
	return c.svc.EnableEnhancedMonitoringWithContext(ctx, input, opts...)
}

// GetRecordsRequest is a passthrough to the underlying GetRecordsRequest.
// It will increment the count of requests made to GetRecords.
func (c *Kinesis) GetRecordsRequest(input *kinesis.GetRecordsInput) (req *request.Request, output *kinesis.GetRecordsOutput) {
	c.inc("GetRecords")
	return c.svc.GetRecordsRequest(input)
}

// GetRecords is a passthrough to the underlying GetRecords method.
// It will increment the count of requests made to GetRecords.
func (c *Kinesis) GetRecords(input *kinesis.GetRecordsInput) (*kinesis.GetRecordsOutput, error) {
	c.inc("GetRecords")
	return c.svc.GetRecords(input)
}

// GetRecordsWithContext is a passthrough to the underlying GetRecordsWithContext method.
// It will increment the count of requests made to GetRecords.
func (c *Kinesis) GetRecordsWithContext(ctx aws.Context, input *kinesis.GetRecordsInput, opts ...request.Option) (*kinesis.GetRecordsOutput, error) {
	c.inc("GetRecords")
	return c.svc.GetRecordsWithContext(ctx, input, opts...)
}

// GetShardIteratorRequest is a passthrough to the underlying GetShardIteratorRequest.
// It will increment the count of requests made to GetShardIterator.
func (c *Kinesis) GetShardIteratorRequest(input *kinesis.GetShardIteratorInput) (req *request.Request, output *kinesis.GetShardIteratorOutput) {
	c.inc("GetShardIterator")
	return c.svc.GetShardIteratorRequest(input)
}

// GetShardIterator is a passthrough to the underlying GetShardIterator method.
// It will increment the count of requests made to GetShardIterator.
func (c *Kinesis) GetShardIterator(input *kinesis.GetShardIteratorInput) (*kinesis.GetShardIteratorOutput, error) {
	c.inc("GetShardIterator")
	return c.svc.GetShardIterator(input)
}

// GetShardIteratorWithContext is a passthrough to the underlying GetShardIteratorWithContext method.
// It will increment the count of requests made to GetShardIterator.
func (c *Kinesis) GetShardIteratorWithContext(ctx aws.Context, input *kinesis.GetShardIteratorInput, opts ...request.Option) (*kinesis.GetShardIteratorOutput, error) {
	c.inc("GetShardIterator")
	return c.svc.GetShardIteratorWithContext(ctx, input, opts...)
}

// IncreaseStreamRetentionPeriodRequest is a passthrough to the underlying IncreaseStreamRetentionPeriodRequest.
// It will increment the count of requests made to IncreaseStreamRetentionPeriod.
func (c *Kinesis) IncreaseStreamRetentionPeriodRequest(input *kinesis.IncreaseStreamRetentionPeriodInput) (req *request.Request, output *kinesis.IncreaseStreamRetentionPeriodOutput) {
	c.inc("IncreaseStreamRetentionPeriod")
	return c.svc.IncreaseStreamRetentionPeriodRequest(input)
}

// IncreaseStreamRetentionPeriod is a passthrough to the underlying IncreaseStreamRetentionPeriod method.
// It will increment the count of requests made to IncreaseStreamRetentionPeriod.
func (c *Kinesis) IncreaseStreamRetentionPeriod(input *kinesis.IncreaseStreamRetentionPeriodInput) (*kinesis.IncreaseStreamRetentionPeriodOutput, error) {
	c.inc("IncreaseStreamRetentionPeriod")
	return c.svc.IncreaseStreamRetentionPeriod(input)
}

// IncreaseStreamRetentionPeriodWithContext is a passthrough to the underlying IncreaseStreamRetentionPeriodWithContext method.
// It will increment the count of requests made to IncreaseStreamRetentionPeriod.
func (c *Kinesis) IncreaseStreamRetentionPeriodWithContext(ctx aws.Context, input *kinesis.IncreaseStreamRetentionPeriodInput, opts ...request.Option) (*kinesis.IncreaseStreamRetentionPeriodOutput, error) {
	c.inc("IncreaseStreamRetentionPeriod")
	return c.svc.IncreaseStreamRetentionPeriodWithContext(ctx, input, opts...)
}

// ListShardsRequest is a passthrough to the underlying ListShardsRequest.
// It will increment the count of requests made to ListShards.
func (c *Kinesis) ListShardsRequest(input *kinesis.ListShardsInput) (req *request.Request, output *kinesis.ListShardsOutput) {
	c.inc("ListShards")
	return c.svc.ListShardsRequest(input)
}

// ListShards is a passthrough to the underlying ListShards method.
// It will increment the count of requests made to ListShards.
func (c *Kinesis) ListShards(input *kinesis.ListShardsInput) (*kinesis.ListShardsOutput, error) {
	c.inc("ListShards")
	return c.svc.ListShards(input)
}

// ListShardsWithContext is a passthrough to the underlying ListShardsWithContext method.
// It will increment the count of requests made to ListShards.
func (c *Kinesis) ListShardsWithContext(ctx aws.Context, input *kinesis.ListShardsInput, opts ...request.Option) (*kinesis.ListShardsOutput, error) {
	c.inc("ListShards")
	return c.svc.ListShardsWithContext(ctx, input, opts...)
}

// ListStreamsRequest is a passthrough to the underlying ListStreamsRequest.
// It will increment the count of requests made to ListStreams.
func (c *Kinesis) ListStreamsRequest(input *kinesis.ListStreamsInput) (req *request.Request, output *kinesis.ListStreamsOutput) {
	c.inc("ListStreams")
	return c.svc.ListStreamsRequest(input)
}

// ListStreams is a passthrough to the underlying ListStreams method.
// It will increment the count of requests made to ListStreams.
func (c *Kinesis) ListStreams(input *kinesis.ListStreamsInput) (*kinesis.ListStreamsOutput, error) {
	c.inc("ListStreams")
	return c.svc.ListStreams(input)
}

// ListStreamsWithContext is a passthrough to the underlying ListStreamsWithContext method.
// It will increment the count of requests made to ListStreams.
func (c *Kinesis) ListStreamsWithContext(ctx aws.Context, input *kinesis.ListStreamsInput, opts ...request.Option) (*kinesis.ListStreamsOutput, error) {
	c.inc("ListStreams")
	return c.svc.ListStreamsWithContext(ctx, input, opts...)
}

// ListStreamsPages is a passthrough to the underlying ListStreamsPages method.
// It will increment the count of requests made to ListStreams on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListStreamsPagesWithContext to avoid this.
func (c *Kinesis) ListStreamsPages(input *kinesis.ListStreamsInput, fn func(*kinesis.ListStreamsOutput, bool) bool) error {
	wrappedFn := func(page *kinesis.ListStreamsOutput, lastPage bool) bool {
		c.inc("ListStreams")
		return fn(page, lastPage)
	}
	return c.svc.ListStreamsPages(input, wrappedFn)
}

// ListStreamsPagesWithContext is a passthrough to the underlying ListStreamsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListStreams when applied to the request.
func (c *Kinesis) ListStreamsPagesWithContext(ctx aws.Context, input *kinesis.ListStreamsInput, fn func(*kinesis.ListStreamsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListStreams"))
	return c.svc.ListStreamsPagesWithContext(ctx, input, fn, opts...)
}

// ListTagsForStreamRequest is a passthrough to the underlying ListTagsForStreamRequest.
// It will increment the count of requests made to ListTagsForStream.
func (c *Kinesis) ListTagsForStreamRequest(input *kinesis.ListTagsForStreamInput) (req *request.Request, output *kinesis.ListTagsForStreamOutput) {
	c.inc("ListTagsForStream")
	return c.svc.ListTagsForStreamRequest(input)
}

// ListTagsForStream is a passthrough to the underlying ListTagsForStream method.
// It will increment the count of requests made to ListTagsForStream.
func (c *Kinesis) ListTagsForStream(input *kinesis.ListTagsForStreamInput) (*kinesis.ListTagsForStreamOutput, error) {
	c.inc("ListTagsForStream")
	return c.svc.ListTagsForStream(input)
}

// ListTagsForStreamWithContext is a passthrough to the underlying ListTagsForStreamWithContext method.
// It will increment the count of requests made to ListTagsForStream.
func (c *Kinesis) ListTagsForStreamWithContext(ctx aws.Context, input *kinesis.ListTagsForStreamInput, opts ...request.Option) (*kinesis.ListTagsForStreamOutput, error) {
	c.inc("ListTagsForStream")
	return c.svc.ListTagsForStreamWithContext(ctx, input, opts...)
}

// MergeShardsRequest is a passthrough to the underlying MergeShardsRequest.
// It will increment the count of requests made to MergeShards.
func (c *Kinesis) MergeShardsRequest(input *kinesis.MergeShardsInput) (req *request.Request, output *kinesis.MergeShardsOutput) {
	c.inc("MergeShards")
	return c.svc.MergeShardsRequest(input)
}

// MergeShards is a passthrough to the underlying MergeShards method.
// It will increment the count of requests made to MergeShards.
func (c *Kinesis) MergeShards(input *kinesis.MergeShardsInput) (*kinesis.MergeShardsOutput, error) {
	c.inc("MergeShards")
	return c.svc.MergeShards(input)
}

// MergeShardsWithContext is a passthrough to the underlying MergeShardsWithContext method.
// It will increment the count of requests made to MergeShards.
func (c *Kinesis) MergeShardsWithContext(ctx aws.Context, input *kinesis.MergeShardsInput, opts ...request.Option) (*kinesis.MergeShardsOutput, error) {
	c.inc("MergeShards")
	return c.svc.MergeShardsWithContext(ctx, input, opts...)
}

// PutRecordRequest is a passthrough to the underlying PutRecordRequest.
// It will increment the count of requests made to PutRecord.
func (c *Kinesis) PutRecordRequest(input *kinesis.PutRecordInput) (req *request.Request, output *kinesis.PutRecordOutput) {
	c.inc("PutRecord")
	return c.svc.PutRecordRequest(input)
}

// PutRecord is a passthrough to the underlying PutRecord method.
// It will increment the count of requests made to PutRecord.
func (c *Kinesis) PutRecord(input *kinesis.PutRecordInput) (*kinesis.PutRecordOutput, error) {
	c.inc("PutRecord")
	return c.svc.PutRecord(input)
}

// PutRecordWithContext is a passthrough to the underlying PutRecordWithContext method.
// It will increment the count of requests made to PutRecord.
func (c *Kinesis) PutRecordWithContext(ctx aws.Context, input *kinesis.PutRecordInput, opts ...request.Option) (*kinesis.PutRecordOutput, error) {
	c.inc("PutRecord")
	return c.svc.PutRecordWithContext(ctx, input, opts...)
}

// PutRecordsRequest is a passthrough to the underlying PutRecordsRequest.
// It will increment the count of requests made to PutRecords.
func (c *Kinesis) PutRecordsRequest(input *kinesis.PutRecordsInput) (req *request.Request, output *kinesis.PutRecordsOutput) {
	c.inc("PutRecords")
	return c.svc.PutRecordsRequest(input)
}

// PutRecords is a passthrough to the underlying PutRecords method.
// It will increment the count of requests made to PutRecords.
func (c *Kinesis) PutRecords(input *kinesis.PutRecordsInput) (*kinesis.PutRecordsOutput, error) {
	c.inc("PutRecords")
	return c.svc.PutRecords(input)
}

// PutRecordsWithContext is a passthrough to the underlying PutRecordsWithContext method.
// It will increment the count of requests made to PutRecords.
func (c *Kinesis) PutRecordsWithContext(ctx aws.Context, input *kinesis.PutRecordsInput, opts ...request.Option) (*kinesis.PutRecordsOutput, error) {
	c.inc("PutRecords")
	return c.svc.PutRecordsWithContext(ctx, input, opts...)
}

// RemoveTagsFromStreamRequest is a passthrough to the underlying RemoveTagsFromStreamRequest.
// It will increment the count of requests made to RemoveTagsFromStream.
func (c *Kinesis) RemoveTagsFromStreamRequest(input *kinesis.RemoveTagsFromStreamInput) (req *request.Request, output *kinesis.RemoveTagsFromStreamOutput) {
	c.inc("RemoveTagsFromStream")
	return c.svc.RemoveTagsFromStreamRequest(input)
}

// RemoveTagsFromStream is a passthrough to the underlying RemoveTagsFromStream method.
// It will increment the count of requests made to RemoveTagsFromStream.
func (c *Kinesis) RemoveTagsFromStream(input *kinesis.RemoveTagsFromStreamInput) (*kinesis.RemoveTagsFromStreamOutput, error) {
	c.inc("RemoveTagsFromStream")
	return c.svc.RemoveTagsFromStream(input)
}

// RemoveTagsFromStreamWithContext is a passthrough to the underlying RemoveTagsFromStreamWithContext method.
// It will increment the count of requests made to RemoveTagsFromStream.
func (c *Kinesis) RemoveTagsFromStreamWithContext(ctx aws.Context, input *kinesis.RemoveTagsFromStreamInput, opts ...request.Option) (*kinesis.RemoveTagsFromStreamOutput, error) {
	c.inc("RemoveTagsFromStream")
	return c.svc.RemoveTagsFromStreamWithContext(ctx, input, opts...)
}

// SplitShardRequest is a passthrough to the underlying SplitShardRequest.
// It will increment the count of requests made to SplitShard.
func (c *Kinesis) SplitShardRequest(input *kinesis.SplitShardInput) (req *request.Request, output *kinesis.SplitShardOutput) {
	c.inc("SplitShard")
	return c.svc.SplitShardRequest(input)
}

// SplitShard is a passthrough to the underlying SplitShard method.
// It will increment the count of requests made to SplitShard.
func (c *Kinesis) SplitShard(input *kinesis.SplitShardInput) (*kinesis.SplitShardOutput, error) {
	c.inc("SplitShard")
	return c.svc.SplitShard(input)
}

// SplitShardWithContext is a passthrough to the underlying SplitShardWithContext method.
// It will increment the count of requests made to SplitShard.
func (c *Kinesis) SplitShardWithContext(ctx aws.Context, input *kinesis.SplitShardInput, opts ...request.Option) (*kinesis.SplitShardOutput, error) {
	c.inc("SplitShard")
	return c.svc.SplitShardWithContext(ctx, input, opts...)
}

// StartStreamEncryptionRequest is a passthrough to the underlying StartStreamEncryptionRequest.
// It will increment the count of requests made to StartStreamEncryption.
func (c *Kinesis) StartStreamEncryptionRequest(input *kinesis.StartStreamEncryptionInput) (req *request.Request, output *kinesis.StartStreamEncryptionOutput) {
	c.inc("StartStreamEncryption")
	return c.svc.StartStreamEncryptionRequest(input)
}

// StartStreamEncryption is a passthrough to the underlying StartStreamEncryption method.
// It will increment the count of requests made to StartStreamEncryption.
func (c *Kinesis) StartStreamEncryption(input *kinesis.StartStreamEncryptionInput) (*kinesis.StartStreamEncryptionOutput, error) {
	c.inc("StartStreamEncryption")
	return c.svc.StartStreamEncryption(input)
}

// StartStreamEncryptionWithContext is a passthrough to the underlying StartStreamEncryptionWithContext method.
// It will increment the count of requests made to StartStreamEncryption.
func (c *Kinesis) StartStreamEncryptionWithContext(ctx aws.Context, input *kinesis.StartStreamEncryptionInput, opts ...request.Option) (*kinesis.StartStreamEncryptionOutput, error) {
	c.inc("StartStreamEncryption")
	return c.svc.StartStreamEncryptionWithContext(ctx, input, opts...)
}

// StopStreamEncryptionRequest is a passthrough to the underlying StopStreamEncryptionRequest.
// It will increment the count of requests made to StopStreamEncryption.
func (c *Kinesis) StopStreamEncryptionRequest(input *kinesis.StopStreamEncryptionInput) (req *request.Request, output *kinesis.StopStreamEncryptionOutput) {
	c.inc("StopStreamEncryption")
	return c.svc.StopStreamEncryptionRequest(input)
}

// StopStreamEncryption is a passthrough to the underlying StopStreamEncryption method.
// It will increment the count of requests made to StopStreamEncryption.
func (c *Kinesis) StopStreamEncryption(input *kinesis.StopStreamEncryptionInput) (*kinesis.StopStreamEncryptionOutput, error) {
	c.inc("StopStreamEncryption")
	return c.svc.StopStreamEncryption(input)
}

// StopStreamEncryptionWithContext is a passthrough to the underlying StopStreamEncryptionWithContext method.
// It will increment the count of requests made to StopStreamEncryption.
func (c *Kinesis) StopStreamEncryptionWithContext(ctx aws.Context, input *kinesis.StopStreamEncryptionInput, opts ...request.Option) (*kinesis.StopStreamEncryptionOutput, error) {
	c.inc("StopStreamEncryption")
	return c.svc.StopStreamEncryptionWithContext(ctx, input, opts...)
}

// UpdateShardCountRequest is a passthrough to the underlying UpdateShardCountRequest.
// It will increment the count of requests made to UpdateShardCount.
func (c *Kinesis) UpdateShardCountRequest(input *kinesis.UpdateShardCountInput) (req *request.Request, output *kinesis.UpdateShardCountOutput) {
	c.inc("UpdateShardCount")
	return c.svc.UpdateShardCountRequest(input)
}

// UpdateShardCount is a passthrough to the underlying UpdateShardCount method.
// It will increment the count of requests made to UpdateShardCount.
func (c *Kinesis) UpdateShardCount(input *kinesis.UpdateShardCountInput) (*kinesis.UpdateShardCountOutput, error) {
	c.inc("UpdateShardCount")
	return c.svc.UpdateShardCount(input)
}

// UpdateShardCountWithContext is a passthrough to the underlying UpdateShardCountWithContext method.
// It will increment the count of requests made to UpdateShardCount.
func (c *Kinesis) UpdateShardCountWithContext(ctx aws.Context, input *kinesis.UpdateShardCountInput, opts ...request.Option) (*kinesis.UpdateShardCountOutput, error) {
	c.inc("UpdateShardCount")
	return c.svc.UpdateShardCountWithContext(ctx, input, opts...)
}
