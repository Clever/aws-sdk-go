// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package organizationscounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/organizations"
)

// AcceptHandshakeRequest is a passthrough to the underlying AcceptHandshakeRequest.
// It will increment the count of requests made to AcceptHandshake.
func (c *Organizations) AcceptHandshakeRequest(input *organizations.AcceptHandshakeInput) (req *request.Request, output *organizations.AcceptHandshakeOutput) {
	c.inc("AcceptHandshake")
	return c.svc.AcceptHandshakeRequest(input)
}

// AcceptHandshake is a passthrough to the underlying AcceptHandshake method.
// It will increment the count of requests made to AcceptHandshake.
func (c *Organizations) AcceptHandshake(input *organizations.AcceptHandshakeInput) (*organizations.AcceptHandshakeOutput, error) {
	c.inc("AcceptHandshake")
	return c.svc.AcceptHandshake(input)
}

// AcceptHandshakeWithContext is a passthrough to the underlying AcceptHandshakeWithContext method.
// It will increment the count of requests made to AcceptHandshake.
func (c *Organizations) AcceptHandshakeWithContext(ctx aws.Context, input *organizations.AcceptHandshakeInput, opts ...request.Option) (*organizations.AcceptHandshakeOutput, error) {
	c.inc("AcceptHandshake")
	return c.svc.AcceptHandshakeWithContext(ctx, input, opts...)
}

// AttachPolicyRequest is a passthrough to the underlying AttachPolicyRequest.
// It will increment the count of requests made to AttachPolicy.
func (c *Organizations) AttachPolicyRequest(input *organizations.AttachPolicyInput) (req *request.Request, output *organizations.AttachPolicyOutput) {
	c.inc("AttachPolicy")
	return c.svc.AttachPolicyRequest(input)
}

// AttachPolicy is a passthrough to the underlying AttachPolicy method.
// It will increment the count of requests made to AttachPolicy.
func (c *Organizations) AttachPolicy(input *organizations.AttachPolicyInput) (*organizations.AttachPolicyOutput, error) {
	c.inc("AttachPolicy")
	return c.svc.AttachPolicy(input)
}

// AttachPolicyWithContext is a passthrough to the underlying AttachPolicyWithContext method.
// It will increment the count of requests made to AttachPolicy.
func (c *Organizations) AttachPolicyWithContext(ctx aws.Context, input *organizations.AttachPolicyInput, opts ...request.Option) (*organizations.AttachPolicyOutput, error) {
	c.inc("AttachPolicy")
	return c.svc.AttachPolicyWithContext(ctx, input, opts...)
}

// CancelHandshakeRequest is a passthrough to the underlying CancelHandshakeRequest.
// It will increment the count of requests made to CancelHandshake.
func (c *Organizations) CancelHandshakeRequest(input *organizations.CancelHandshakeInput) (req *request.Request, output *organizations.CancelHandshakeOutput) {
	c.inc("CancelHandshake")
	return c.svc.CancelHandshakeRequest(input)
}

// CancelHandshake is a passthrough to the underlying CancelHandshake method.
// It will increment the count of requests made to CancelHandshake.
func (c *Organizations) CancelHandshake(input *organizations.CancelHandshakeInput) (*organizations.CancelHandshakeOutput, error) {
	c.inc("CancelHandshake")
	return c.svc.CancelHandshake(input)
}

// CancelHandshakeWithContext is a passthrough to the underlying CancelHandshakeWithContext method.
// It will increment the count of requests made to CancelHandshake.
func (c *Organizations) CancelHandshakeWithContext(ctx aws.Context, input *organizations.CancelHandshakeInput, opts ...request.Option) (*organizations.CancelHandshakeOutput, error) {
	c.inc("CancelHandshake")
	return c.svc.CancelHandshakeWithContext(ctx, input, opts...)
}

// CreateAccountRequest is a passthrough to the underlying CreateAccountRequest.
// It will increment the count of requests made to CreateAccount.
func (c *Organizations) CreateAccountRequest(input *organizations.CreateAccountInput) (req *request.Request, output *organizations.CreateAccountOutput) {
	c.inc("CreateAccount")
	return c.svc.CreateAccountRequest(input)
}

// CreateAccount is a passthrough to the underlying CreateAccount method.
// It will increment the count of requests made to CreateAccount.
func (c *Organizations) CreateAccount(input *organizations.CreateAccountInput) (*organizations.CreateAccountOutput, error) {
	c.inc("CreateAccount")
	return c.svc.CreateAccount(input)
}

// CreateAccountWithContext is a passthrough to the underlying CreateAccountWithContext method.
// It will increment the count of requests made to CreateAccount.
func (c *Organizations) CreateAccountWithContext(ctx aws.Context, input *organizations.CreateAccountInput, opts ...request.Option) (*organizations.CreateAccountOutput, error) {
	c.inc("CreateAccount")
	return c.svc.CreateAccountWithContext(ctx, input, opts...)
}

// CreateOrganizationRequest is a passthrough to the underlying CreateOrganizationRequest.
// It will increment the count of requests made to CreateOrganization.
func (c *Organizations) CreateOrganizationRequest(input *organizations.CreateOrganizationInput) (req *request.Request, output *organizations.CreateOrganizationOutput) {
	c.inc("CreateOrganization")
	return c.svc.CreateOrganizationRequest(input)
}

// CreateOrganization is a passthrough to the underlying CreateOrganization method.
// It will increment the count of requests made to CreateOrganization.
func (c *Organizations) CreateOrganization(input *organizations.CreateOrganizationInput) (*organizations.CreateOrganizationOutput, error) {
	c.inc("CreateOrganization")
	return c.svc.CreateOrganization(input)
}

// CreateOrganizationWithContext is a passthrough to the underlying CreateOrganizationWithContext method.
// It will increment the count of requests made to CreateOrganization.
func (c *Organizations) CreateOrganizationWithContext(ctx aws.Context, input *organizations.CreateOrganizationInput, opts ...request.Option) (*organizations.CreateOrganizationOutput, error) {
	c.inc("CreateOrganization")
	return c.svc.CreateOrganizationWithContext(ctx, input, opts...)
}

// CreateOrganizationalUnitRequest is a passthrough to the underlying CreateOrganizationalUnitRequest.
// It will increment the count of requests made to CreateOrganizationalUnit.
func (c *Organizations) CreateOrganizationalUnitRequest(input *organizations.CreateOrganizationalUnitInput) (req *request.Request, output *organizations.CreateOrganizationalUnitOutput) {
	c.inc("CreateOrganizationalUnit")
	return c.svc.CreateOrganizationalUnitRequest(input)
}

// CreateOrganizationalUnit is a passthrough to the underlying CreateOrganizationalUnit method.
// It will increment the count of requests made to CreateOrganizationalUnit.
func (c *Organizations) CreateOrganizationalUnit(input *organizations.CreateOrganizationalUnitInput) (*organizations.CreateOrganizationalUnitOutput, error) {
	c.inc("CreateOrganizationalUnit")
	return c.svc.CreateOrganizationalUnit(input)
}

// CreateOrganizationalUnitWithContext is a passthrough to the underlying CreateOrganizationalUnitWithContext method.
// It will increment the count of requests made to CreateOrganizationalUnit.
func (c *Organizations) CreateOrganizationalUnitWithContext(ctx aws.Context, input *organizations.CreateOrganizationalUnitInput, opts ...request.Option) (*organizations.CreateOrganizationalUnitOutput, error) {
	c.inc("CreateOrganizationalUnit")
	return c.svc.CreateOrganizationalUnitWithContext(ctx, input, opts...)
}

// CreatePolicyRequest is a passthrough to the underlying CreatePolicyRequest.
// It will increment the count of requests made to CreatePolicy.
func (c *Organizations) CreatePolicyRequest(input *organizations.CreatePolicyInput) (req *request.Request, output *organizations.CreatePolicyOutput) {
	c.inc("CreatePolicy")
	return c.svc.CreatePolicyRequest(input)
}

// CreatePolicy is a passthrough to the underlying CreatePolicy method.
// It will increment the count of requests made to CreatePolicy.
func (c *Organizations) CreatePolicy(input *organizations.CreatePolicyInput) (*organizations.CreatePolicyOutput, error) {
	c.inc("CreatePolicy")
	return c.svc.CreatePolicy(input)
}

// CreatePolicyWithContext is a passthrough to the underlying CreatePolicyWithContext method.
// It will increment the count of requests made to CreatePolicy.
func (c *Organizations) CreatePolicyWithContext(ctx aws.Context, input *organizations.CreatePolicyInput, opts ...request.Option) (*organizations.CreatePolicyOutput, error) {
	c.inc("CreatePolicy")
	return c.svc.CreatePolicyWithContext(ctx, input, opts...)
}

// DeclineHandshakeRequest is a passthrough to the underlying DeclineHandshakeRequest.
// It will increment the count of requests made to DeclineHandshake.
func (c *Organizations) DeclineHandshakeRequest(input *organizations.DeclineHandshakeInput) (req *request.Request, output *organizations.DeclineHandshakeOutput) {
	c.inc("DeclineHandshake")
	return c.svc.DeclineHandshakeRequest(input)
}

// DeclineHandshake is a passthrough to the underlying DeclineHandshake method.
// It will increment the count of requests made to DeclineHandshake.
func (c *Organizations) DeclineHandshake(input *organizations.DeclineHandshakeInput) (*organizations.DeclineHandshakeOutput, error) {
	c.inc("DeclineHandshake")
	return c.svc.DeclineHandshake(input)
}

// DeclineHandshakeWithContext is a passthrough to the underlying DeclineHandshakeWithContext method.
// It will increment the count of requests made to DeclineHandshake.
func (c *Organizations) DeclineHandshakeWithContext(ctx aws.Context, input *organizations.DeclineHandshakeInput, opts ...request.Option) (*organizations.DeclineHandshakeOutput, error) {
	c.inc("DeclineHandshake")
	return c.svc.DeclineHandshakeWithContext(ctx, input, opts...)
}

// DeleteOrganizationRequest is a passthrough to the underlying DeleteOrganizationRequest.
// It will increment the count of requests made to DeleteOrganization.
func (c *Organizations) DeleteOrganizationRequest(input *organizations.DeleteOrganizationInput) (req *request.Request, output *organizations.DeleteOrganizationOutput) {
	c.inc("DeleteOrganization")
	return c.svc.DeleteOrganizationRequest(input)
}

// DeleteOrganization is a passthrough to the underlying DeleteOrganization method.
// It will increment the count of requests made to DeleteOrganization.
func (c *Organizations) DeleteOrganization(input *organizations.DeleteOrganizationInput) (*organizations.DeleteOrganizationOutput, error) {
	c.inc("DeleteOrganization")
	return c.svc.DeleteOrganization(input)
}

// DeleteOrganizationWithContext is a passthrough to the underlying DeleteOrganizationWithContext method.
// It will increment the count of requests made to DeleteOrganization.
func (c *Organizations) DeleteOrganizationWithContext(ctx aws.Context, input *organizations.DeleteOrganizationInput, opts ...request.Option) (*organizations.DeleteOrganizationOutput, error) {
	c.inc("DeleteOrganization")
	return c.svc.DeleteOrganizationWithContext(ctx, input, opts...)
}

// DeleteOrganizationalUnitRequest is a passthrough to the underlying DeleteOrganizationalUnitRequest.
// It will increment the count of requests made to DeleteOrganizationalUnit.
func (c *Organizations) DeleteOrganizationalUnitRequest(input *organizations.DeleteOrganizationalUnitInput) (req *request.Request, output *organizations.DeleteOrganizationalUnitOutput) {
	c.inc("DeleteOrganizationalUnit")
	return c.svc.DeleteOrganizationalUnitRequest(input)
}

// DeleteOrganizationalUnit is a passthrough to the underlying DeleteOrganizationalUnit method.
// It will increment the count of requests made to DeleteOrganizationalUnit.
func (c *Organizations) DeleteOrganizationalUnit(input *organizations.DeleteOrganizationalUnitInput) (*organizations.DeleteOrganizationalUnitOutput, error) {
	c.inc("DeleteOrganizationalUnit")
	return c.svc.DeleteOrganizationalUnit(input)
}

// DeleteOrganizationalUnitWithContext is a passthrough to the underlying DeleteOrganizationalUnitWithContext method.
// It will increment the count of requests made to DeleteOrganizationalUnit.
func (c *Organizations) DeleteOrganizationalUnitWithContext(ctx aws.Context, input *organizations.DeleteOrganizationalUnitInput, opts ...request.Option) (*organizations.DeleteOrganizationalUnitOutput, error) {
	c.inc("DeleteOrganizationalUnit")
	return c.svc.DeleteOrganizationalUnitWithContext(ctx, input, opts...)
}

// DeletePolicyRequest is a passthrough to the underlying DeletePolicyRequest.
// It will increment the count of requests made to DeletePolicy.
func (c *Organizations) DeletePolicyRequest(input *organizations.DeletePolicyInput) (req *request.Request, output *organizations.DeletePolicyOutput) {
	c.inc("DeletePolicy")
	return c.svc.DeletePolicyRequest(input)
}

// DeletePolicy is a passthrough to the underlying DeletePolicy method.
// It will increment the count of requests made to DeletePolicy.
func (c *Organizations) DeletePolicy(input *organizations.DeletePolicyInput) (*organizations.DeletePolicyOutput, error) {
	c.inc("DeletePolicy")
	return c.svc.DeletePolicy(input)
}

// DeletePolicyWithContext is a passthrough to the underlying DeletePolicyWithContext method.
// It will increment the count of requests made to DeletePolicy.
func (c *Organizations) DeletePolicyWithContext(ctx aws.Context, input *organizations.DeletePolicyInput, opts ...request.Option) (*organizations.DeletePolicyOutput, error) {
	c.inc("DeletePolicy")
	return c.svc.DeletePolicyWithContext(ctx, input, opts...)
}

// DescribeAccountRequest is a passthrough to the underlying DescribeAccountRequest.
// It will increment the count of requests made to DescribeAccount.
func (c *Organizations) DescribeAccountRequest(input *organizations.DescribeAccountInput) (req *request.Request, output *organizations.DescribeAccountOutput) {
	c.inc("DescribeAccount")
	return c.svc.DescribeAccountRequest(input)
}

// DescribeAccount is a passthrough to the underlying DescribeAccount method.
// It will increment the count of requests made to DescribeAccount.
func (c *Organizations) DescribeAccount(input *organizations.DescribeAccountInput) (*organizations.DescribeAccountOutput, error) {
	c.inc("DescribeAccount")
	return c.svc.DescribeAccount(input)
}

// DescribeAccountWithContext is a passthrough to the underlying DescribeAccountWithContext method.
// It will increment the count of requests made to DescribeAccount.
func (c *Organizations) DescribeAccountWithContext(ctx aws.Context, input *organizations.DescribeAccountInput, opts ...request.Option) (*organizations.DescribeAccountOutput, error) {
	c.inc("DescribeAccount")
	return c.svc.DescribeAccountWithContext(ctx, input, opts...)
}

// DescribeCreateAccountStatusRequest is a passthrough to the underlying DescribeCreateAccountStatusRequest.
// It will increment the count of requests made to DescribeCreateAccountStatus.
func (c *Organizations) DescribeCreateAccountStatusRequest(input *organizations.DescribeCreateAccountStatusInput) (req *request.Request, output *organizations.DescribeCreateAccountStatusOutput) {
	c.inc("DescribeCreateAccountStatus")
	return c.svc.DescribeCreateAccountStatusRequest(input)
}

// DescribeCreateAccountStatus is a passthrough to the underlying DescribeCreateAccountStatus method.
// It will increment the count of requests made to DescribeCreateAccountStatus.
func (c *Organizations) DescribeCreateAccountStatus(input *organizations.DescribeCreateAccountStatusInput) (*organizations.DescribeCreateAccountStatusOutput, error) {
	c.inc("DescribeCreateAccountStatus")
	return c.svc.DescribeCreateAccountStatus(input)
}

// DescribeCreateAccountStatusWithContext is a passthrough to the underlying DescribeCreateAccountStatusWithContext method.
// It will increment the count of requests made to DescribeCreateAccountStatus.
func (c *Organizations) DescribeCreateAccountStatusWithContext(ctx aws.Context, input *organizations.DescribeCreateAccountStatusInput, opts ...request.Option) (*organizations.DescribeCreateAccountStatusOutput, error) {
	c.inc("DescribeCreateAccountStatus")
	return c.svc.DescribeCreateAccountStatusWithContext(ctx, input, opts...)
}

// DescribeHandshakeRequest is a passthrough to the underlying DescribeHandshakeRequest.
// It will increment the count of requests made to DescribeHandshake.
func (c *Organizations) DescribeHandshakeRequest(input *organizations.DescribeHandshakeInput) (req *request.Request, output *organizations.DescribeHandshakeOutput) {
	c.inc("DescribeHandshake")
	return c.svc.DescribeHandshakeRequest(input)
}

// DescribeHandshake is a passthrough to the underlying DescribeHandshake method.
// It will increment the count of requests made to DescribeHandshake.
func (c *Organizations) DescribeHandshake(input *organizations.DescribeHandshakeInput) (*organizations.DescribeHandshakeOutput, error) {
	c.inc("DescribeHandshake")
	return c.svc.DescribeHandshake(input)
}

// DescribeHandshakeWithContext is a passthrough to the underlying DescribeHandshakeWithContext method.
// It will increment the count of requests made to DescribeHandshake.
func (c *Organizations) DescribeHandshakeWithContext(ctx aws.Context, input *organizations.DescribeHandshakeInput, opts ...request.Option) (*organizations.DescribeHandshakeOutput, error) {
	c.inc("DescribeHandshake")
	return c.svc.DescribeHandshakeWithContext(ctx, input, opts...)
}

// DescribeOrganizationRequest is a passthrough to the underlying DescribeOrganizationRequest.
// It will increment the count of requests made to DescribeOrganization.
func (c *Organizations) DescribeOrganizationRequest(input *organizations.DescribeOrganizationInput) (req *request.Request, output *organizations.DescribeOrganizationOutput) {
	c.inc("DescribeOrganization")
	return c.svc.DescribeOrganizationRequest(input)
}

// DescribeOrganization is a passthrough to the underlying DescribeOrganization method.
// It will increment the count of requests made to DescribeOrganization.
func (c *Organizations) DescribeOrganization(input *organizations.DescribeOrganizationInput) (*organizations.DescribeOrganizationOutput, error) {
	c.inc("DescribeOrganization")
	return c.svc.DescribeOrganization(input)
}

// DescribeOrganizationWithContext is a passthrough to the underlying DescribeOrganizationWithContext method.
// It will increment the count of requests made to DescribeOrganization.
func (c *Organizations) DescribeOrganizationWithContext(ctx aws.Context, input *organizations.DescribeOrganizationInput, opts ...request.Option) (*organizations.DescribeOrganizationOutput, error) {
	c.inc("DescribeOrganization")
	return c.svc.DescribeOrganizationWithContext(ctx, input, opts...)
}

// DescribeOrganizationalUnitRequest is a passthrough to the underlying DescribeOrganizationalUnitRequest.
// It will increment the count of requests made to DescribeOrganizationalUnit.
func (c *Organizations) DescribeOrganizationalUnitRequest(input *organizations.DescribeOrganizationalUnitInput) (req *request.Request, output *organizations.DescribeOrganizationalUnitOutput) {
	c.inc("DescribeOrganizationalUnit")
	return c.svc.DescribeOrganizationalUnitRequest(input)
}

// DescribeOrganizationalUnit is a passthrough to the underlying DescribeOrganizationalUnit method.
// It will increment the count of requests made to DescribeOrganizationalUnit.
func (c *Organizations) DescribeOrganizationalUnit(input *organizations.DescribeOrganizationalUnitInput) (*organizations.DescribeOrganizationalUnitOutput, error) {
	c.inc("DescribeOrganizationalUnit")
	return c.svc.DescribeOrganizationalUnit(input)
}

// DescribeOrganizationalUnitWithContext is a passthrough to the underlying DescribeOrganizationalUnitWithContext method.
// It will increment the count of requests made to DescribeOrganizationalUnit.
func (c *Organizations) DescribeOrganizationalUnitWithContext(ctx aws.Context, input *organizations.DescribeOrganizationalUnitInput, opts ...request.Option) (*organizations.DescribeOrganizationalUnitOutput, error) {
	c.inc("DescribeOrganizationalUnit")
	return c.svc.DescribeOrganizationalUnitWithContext(ctx, input, opts...)
}

// DescribePolicyRequest is a passthrough to the underlying DescribePolicyRequest.
// It will increment the count of requests made to DescribePolicy.
func (c *Organizations) DescribePolicyRequest(input *organizations.DescribePolicyInput) (req *request.Request, output *organizations.DescribePolicyOutput) {
	c.inc("DescribePolicy")
	return c.svc.DescribePolicyRequest(input)
}

// DescribePolicy is a passthrough to the underlying DescribePolicy method.
// It will increment the count of requests made to DescribePolicy.
func (c *Organizations) DescribePolicy(input *organizations.DescribePolicyInput) (*organizations.DescribePolicyOutput, error) {
	c.inc("DescribePolicy")
	return c.svc.DescribePolicy(input)
}

// DescribePolicyWithContext is a passthrough to the underlying DescribePolicyWithContext method.
// It will increment the count of requests made to DescribePolicy.
func (c *Organizations) DescribePolicyWithContext(ctx aws.Context, input *organizations.DescribePolicyInput, opts ...request.Option) (*organizations.DescribePolicyOutput, error) {
	c.inc("DescribePolicy")
	return c.svc.DescribePolicyWithContext(ctx, input, opts...)
}

// DetachPolicyRequest is a passthrough to the underlying DetachPolicyRequest.
// It will increment the count of requests made to DetachPolicy.
func (c *Organizations) DetachPolicyRequest(input *organizations.DetachPolicyInput) (req *request.Request, output *organizations.DetachPolicyOutput) {
	c.inc("DetachPolicy")
	return c.svc.DetachPolicyRequest(input)
}

// DetachPolicy is a passthrough to the underlying DetachPolicy method.
// It will increment the count of requests made to DetachPolicy.
func (c *Organizations) DetachPolicy(input *organizations.DetachPolicyInput) (*organizations.DetachPolicyOutput, error) {
	c.inc("DetachPolicy")
	return c.svc.DetachPolicy(input)
}

// DetachPolicyWithContext is a passthrough to the underlying DetachPolicyWithContext method.
// It will increment the count of requests made to DetachPolicy.
func (c *Organizations) DetachPolicyWithContext(ctx aws.Context, input *organizations.DetachPolicyInput, opts ...request.Option) (*organizations.DetachPolicyOutput, error) {
	c.inc("DetachPolicy")
	return c.svc.DetachPolicyWithContext(ctx, input, opts...)
}

// DisablePolicyTypeRequest is a passthrough to the underlying DisablePolicyTypeRequest.
// It will increment the count of requests made to DisablePolicyType.
func (c *Organizations) DisablePolicyTypeRequest(input *organizations.DisablePolicyTypeInput) (req *request.Request, output *organizations.DisablePolicyTypeOutput) {
	c.inc("DisablePolicyType")
	return c.svc.DisablePolicyTypeRequest(input)
}

// DisablePolicyType is a passthrough to the underlying DisablePolicyType method.
// It will increment the count of requests made to DisablePolicyType.
func (c *Organizations) DisablePolicyType(input *organizations.DisablePolicyTypeInput) (*organizations.DisablePolicyTypeOutput, error) {
	c.inc("DisablePolicyType")
	return c.svc.DisablePolicyType(input)
}

// DisablePolicyTypeWithContext is a passthrough to the underlying DisablePolicyTypeWithContext method.
// It will increment the count of requests made to DisablePolicyType.
func (c *Organizations) DisablePolicyTypeWithContext(ctx aws.Context, input *organizations.DisablePolicyTypeInput, opts ...request.Option) (*organizations.DisablePolicyTypeOutput, error) {
	c.inc("DisablePolicyType")
	return c.svc.DisablePolicyTypeWithContext(ctx, input, opts...)
}

// EnableAllFeaturesRequest is a passthrough to the underlying EnableAllFeaturesRequest.
// It will increment the count of requests made to EnableAllFeatures.
func (c *Organizations) EnableAllFeaturesRequest(input *organizations.EnableAllFeaturesInput) (req *request.Request, output *organizations.EnableAllFeaturesOutput) {
	c.inc("EnableAllFeatures")
	return c.svc.EnableAllFeaturesRequest(input)
}

// EnableAllFeatures is a passthrough to the underlying EnableAllFeatures method.
// It will increment the count of requests made to EnableAllFeatures.
func (c *Organizations) EnableAllFeatures(input *organizations.EnableAllFeaturesInput) (*organizations.EnableAllFeaturesOutput, error) {
	c.inc("EnableAllFeatures")
	return c.svc.EnableAllFeatures(input)
}

// EnableAllFeaturesWithContext is a passthrough to the underlying EnableAllFeaturesWithContext method.
// It will increment the count of requests made to EnableAllFeatures.
func (c *Organizations) EnableAllFeaturesWithContext(ctx aws.Context, input *organizations.EnableAllFeaturesInput, opts ...request.Option) (*organizations.EnableAllFeaturesOutput, error) {
	c.inc("EnableAllFeatures")
	return c.svc.EnableAllFeaturesWithContext(ctx, input, opts...)
}

// EnablePolicyTypeRequest is a passthrough to the underlying EnablePolicyTypeRequest.
// It will increment the count of requests made to EnablePolicyType.
func (c *Organizations) EnablePolicyTypeRequest(input *organizations.EnablePolicyTypeInput) (req *request.Request, output *organizations.EnablePolicyTypeOutput) {
	c.inc("EnablePolicyType")
	return c.svc.EnablePolicyTypeRequest(input)
}

// EnablePolicyType is a passthrough to the underlying EnablePolicyType method.
// It will increment the count of requests made to EnablePolicyType.
func (c *Organizations) EnablePolicyType(input *organizations.EnablePolicyTypeInput) (*organizations.EnablePolicyTypeOutput, error) {
	c.inc("EnablePolicyType")
	return c.svc.EnablePolicyType(input)
}

// EnablePolicyTypeWithContext is a passthrough to the underlying EnablePolicyTypeWithContext method.
// It will increment the count of requests made to EnablePolicyType.
func (c *Organizations) EnablePolicyTypeWithContext(ctx aws.Context, input *organizations.EnablePolicyTypeInput, opts ...request.Option) (*organizations.EnablePolicyTypeOutput, error) {
	c.inc("EnablePolicyType")
	return c.svc.EnablePolicyTypeWithContext(ctx, input, opts...)
}

// InviteAccountToOrganizationRequest is a passthrough to the underlying InviteAccountToOrganizationRequest.
// It will increment the count of requests made to InviteAccountToOrganization.
func (c *Organizations) InviteAccountToOrganizationRequest(input *organizations.InviteAccountToOrganizationInput) (req *request.Request, output *organizations.InviteAccountToOrganizationOutput) {
	c.inc("InviteAccountToOrganization")
	return c.svc.InviteAccountToOrganizationRequest(input)
}

// InviteAccountToOrganization is a passthrough to the underlying InviteAccountToOrganization method.
// It will increment the count of requests made to InviteAccountToOrganization.
func (c *Organizations) InviteAccountToOrganization(input *organizations.InviteAccountToOrganizationInput) (*organizations.InviteAccountToOrganizationOutput, error) {
	c.inc("InviteAccountToOrganization")
	return c.svc.InviteAccountToOrganization(input)
}

// InviteAccountToOrganizationWithContext is a passthrough to the underlying InviteAccountToOrganizationWithContext method.
// It will increment the count of requests made to InviteAccountToOrganization.
func (c *Organizations) InviteAccountToOrganizationWithContext(ctx aws.Context, input *organizations.InviteAccountToOrganizationInput, opts ...request.Option) (*organizations.InviteAccountToOrganizationOutput, error) {
	c.inc("InviteAccountToOrganization")
	return c.svc.InviteAccountToOrganizationWithContext(ctx, input, opts...)
}

// LeaveOrganizationRequest is a passthrough to the underlying LeaveOrganizationRequest.
// It will increment the count of requests made to LeaveOrganization.
func (c *Organizations) LeaveOrganizationRequest(input *organizations.LeaveOrganizationInput) (req *request.Request, output *organizations.LeaveOrganizationOutput) {
	c.inc("LeaveOrganization")
	return c.svc.LeaveOrganizationRequest(input)
}

// LeaveOrganization is a passthrough to the underlying LeaveOrganization method.
// It will increment the count of requests made to LeaveOrganization.
func (c *Organizations) LeaveOrganization(input *organizations.LeaveOrganizationInput) (*organizations.LeaveOrganizationOutput, error) {
	c.inc("LeaveOrganization")
	return c.svc.LeaveOrganization(input)
}

// LeaveOrganizationWithContext is a passthrough to the underlying LeaveOrganizationWithContext method.
// It will increment the count of requests made to LeaveOrganization.
func (c *Organizations) LeaveOrganizationWithContext(ctx aws.Context, input *organizations.LeaveOrganizationInput, opts ...request.Option) (*organizations.LeaveOrganizationOutput, error) {
	c.inc("LeaveOrganization")
	return c.svc.LeaveOrganizationWithContext(ctx, input, opts...)
}

// ListAccountsRequest is a passthrough to the underlying ListAccountsRequest.
// It will increment the count of requests made to ListAccounts.
func (c *Organizations) ListAccountsRequest(input *organizations.ListAccountsInput) (req *request.Request, output *organizations.ListAccountsOutput) {
	c.inc("ListAccounts")
	return c.svc.ListAccountsRequest(input)
}

// ListAccounts is a passthrough to the underlying ListAccounts method.
// It will increment the count of requests made to ListAccounts.
func (c *Organizations) ListAccounts(input *organizations.ListAccountsInput) (*organizations.ListAccountsOutput, error) {
	c.inc("ListAccounts")
	return c.svc.ListAccounts(input)
}

// ListAccountsWithContext is a passthrough to the underlying ListAccountsWithContext method.
// It will increment the count of requests made to ListAccounts.
func (c *Organizations) ListAccountsWithContext(ctx aws.Context, input *organizations.ListAccountsInput, opts ...request.Option) (*organizations.ListAccountsOutput, error) {
	c.inc("ListAccounts")
	return c.svc.ListAccountsWithContext(ctx, input, opts...)
}

// ListAccountsPages is a passthrough to the underlying ListAccountsPages method.
// It will increment the count of requests made to ListAccounts on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAccountsPagesWithContext to avoid this.
func (c *Organizations) ListAccountsPages(input *organizations.ListAccountsInput, fn func(*organizations.ListAccountsOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListAccountsOutput, lastPage bool) bool {
		c.inc("ListAccounts")
		return fn(page, lastPage)
	}
	return c.ListAccountsPages(input, wrappedFn)
}

// ListAccountsPagesWithContext is a passthrough to the underlying ListAccountsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAccounts when applied to the request.
func (c *Organizations) ListAccountsPagesWithContext(ctx aws.Context, input *organizations.ListAccountsInput, fn func(*organizations.ListAccountsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAccounts"))
	return c.ListAccountsPagesWithContext(ctx, input, fn, opts...)
}

// ListAccountsForParentRequest is a passthrough to the underlying ListAccountsForParentRequest.
// It will increment the count of requests made to ListAccountsForParent.
func (c *Organizations) ListAccountsForParentRequest(input *organizations.ListAccountsForParentInput) (req *request.Request, output *organizations.ListAccountsForParentOutput) {
	c.inc("ListAccountsForParent")
	return c.svc.ListAccountsForParentRequest(input)
}

// ListAccountsForParent is a passthrough to the underlying ListAccountsForParent method.
// It will increment the count of requests made to ListAccountsForParent.
func (c *Organizations) ListAccountsForParent(input *organizations.ListAccountsForParentInput) (*organizations.ListAccountsForParentOutput, error) {
	c.inc("ListAccountsForParent")
	return c.svc.ListAccountsForParent(input)
}

// ListAccountsForParentWithContext is a passthrough to the underlying ListAccountsForParentWithContext method.
// It will increment the count of requests made to ListAccountsForParent.
func (c *Organizations) ListAccountsForParentWithContext(ctx aws.Context, input *organizations.ListAccountsForParentInput, opts ...request.Option) (*organizations.ListAccountsForParentOutput, error) {
	c.inc("ListAccountsForParent")
	return c.svc.ListAccountsForParentWithContext(ctx, input, opts...)
}

// ListAccountsForParentPages is a passthrough to the underlying ListAccountsForParentPages method.
// It will increment the count of requests made to ListAccountsForParent on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAccountsForParentPagesWithContext to avoid this.
func (c *Organizations) ListAccountsForParentPages(input *organizations.ListAccountsForParentInput, fn func(*organizations.ListAccountsForParentOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListAccountsForParentOutput, lastPage bool) bool {
		c.inc("ListAccountsForParent")
		return fn(page, lastPage)
	}
	return c.ListAccountsForParentPages(input, wrappedFn)
}

// ListAccountsForParentPagesWithContext is a passthrough to the underlying ListAccountsForParentPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAccountsForParent when applied to the request.
func (c *Organizations) ListAccountsForParentPagesWithContext(ctx aws.Context, input *organizations.ListAccountsForParentInput, fn func(*organizations.ListAccountsForParentOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAccountsForParent"))
	return c.ListAccountsForParentPagesWithContext(ctx, input, fn, opts...)
}

// ListChildrenRequest is a passthrough to the underlying ListChildrenRequest.
// It will increment the count of requests made to ListChildren.
func (c *Organizations) ListChildrenRequest(input *organizations.ListChildrenInput) (req *request.Request, output *organizations.ListChildrenOutput) {
	c.inc("ListChildren")
	return c.svc.ListChildrenRequest(input)
}

// ListChildren is a passthrough to the underlying ListChildren method.
// It will increment the count of requests made to ListChildren.
func (c *Organizations) ListChildren(input *organizations.ListChildrenInput) (*organizations.ListChildrenOutput, error) {
	c.inc("ListChildren")
	return c.svc.ListChildren(input)
}

// ListChildrenWithContext is a passthrough to the underlying ListChildrenWithContext method.
// It will increment the count of requests made to ListChildren.
func (c *Organizations) ListChildrenWithContext(ctx aws.Context, input *organizations.ListChildrenInput, opts ...request.Option) (*organizations.ListChildrenOutput, error) {
	c.inc("ListChildren")
	return c.svc.ListChildrenWithContext(ctx, input, opts...)
}

// ListChildrenPages is a passthrough to the underlying ListChildrenPages method.
// It will increment the count of requests made to ListChildren on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListChildrenPagesWithContext to avoid this.
func (c *Organizations) ListChildrenPages(input *organizations.ListChildrenInput, fn func(*organizations.ListChildrenOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListChildrenOutput, lastPage bool) bool {
		c.inc("ListChildren")
		return fn(page, lastPage)
	}
	return c.ListChildrenPages(input, wrappedFn)
}

// ListChildrenPagesWithContext is a passthrough to the underlying ListChildrenPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListChildren when applied to the request.
func (c *Organizations) ListChildrenPagesWithContext(ctx aws.Context, input *organizations.ListChildrenInput, fn func(*organizations.ListChildrenOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListChildren"))
	return c.ListChildrenPagesWithContext(ctx, input, fn, opts...)
}

// ListCreateAccountStatusRequest is a passthrough to the underlying ListCreateAccountStatusRequest.
// It will increment the count of requests made to ListCreateAccountStatus.
func (c *Organizations) ListCreateAccountStatusRequest(input *organizations.ListCreateAccountStatusInput) (req *request.Request, output *organizations.ListCreateAccountStatusOutput) {
	c.inc("ListCreateAccountStatus")
	return c.svc.ListCreateAccountStatusRequest(input)
}

// ListCreateAccountStatus is a passthrough to the underlying ListCreateAccountStatus method.
// It will increment the count of requests made to ListCreateAccountStatus.
func (c *Organizations) ListCreateAccountStatus(input *organizations.ListCreateAccountStatusInput) (*organizations.ListCreateAccountStatusOutput, error) {
	c.inc("ListCreateAccountStatus")
	return c.svc.ListCreateAccountStatus(input)
}

// ListCreateAccountStatusWithContext is a passthrough to the underlying ListCreateAccountStatusWithContext method.
// It will increment the count of requests made to ListCreateAccountStatus.
func (c *Organizations) ListCreateAccountStatusWithContext(ctx aws.Context, input *organizations.ListCreateAccountStatusInput, opts ...request.Option) (*organizations.ListCreateAccountStatusOutput, error) {
	c.inc("ListCreateAccountStatus")
	return c.svc.ListCreateAccountStatusWithContext(ctx, input, opts...)
}

// ListCreateAccountStatusPages is a passthrough to the underlying ListCreateAccountStatusPages method.
// It will increment the count of requests made to ListCreateAccountStatus on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListCreateAccountStatusPagesWithContext to avoid this.
func (c *Organizations) ListCreateAccountStatusPages(input *organizations.ListCreateAccountStatusInput, fn func(*organizations.ListCreateAccountStatusOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListCreateAccountStatusOutput, lastPage bool) bool {
		c.inc("ListCreateAccountStatus")
		return fn(page, lastPage)
	}
	return c.ListCreateAccountStatusPages(input, wrappedFn)
}

// ListCreateAccountStatusPagesWithContext is a passthrough to the underlying ListCreateAccountStatusPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListCreateAccountStatus when applied to the request.
func (c *Organizations) ListCreateAccountStatusPagesWithContext(ctx aws.Context, input *organizations.ListCreateAccountStatusInput, fn func(*organizations.ListCreateAccountStatusOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListCreateAccountStatus"))
	return c.ListCreateAccountStatusPagesWithContext(ctx, input, fn, opts...)
}

// ListHandshakesForAccountRequest is a passthrough to the underlying ListHandshakesForAccountRequest.
// It will increment the count of requests made to ListHandshakesForAccount.
func (c *Organizations) ListHandshakesForAccountRequest(input *organizations.ListHandshakesForAccountInput) (req *request.Request, output *organizations.ListHandshakesForAccountOutput) {
	c.inc("ListHandshakesForAccount")
	return c.svc.ListHandshakesForAccountRequest(input)
}

// ListHandshakesForAccount is a passthrough to the underlying ListHandshakesForAccount method.
// It will increment the count of requests made to ListHandshakesForAccount.
func (c *Organizations) ListHandshakesForAccount(input *organizations.ListHandshakesForAccountInput) (*organizations.ListHandshakesForAccountOutput, error) {
	c.inc("ListHandshakesForAccount")
	return c.svc.ListHandshakesForAccount(input)
}

// ListHandshakesForAccountWithContext is a passthrough to the underlying ListHandshakesForAccountWithContext method.
// It will increment the count of requests made to ListHandshakesForAccount.
func (c *Organizations) ListHandshakesForAccountWithContext(ctx aws.Context, input *organizations.ListHandshakesForAccountInput, opts ...request.Option) (*organizations.ListHandshakesForAccountOutput, error) {
	c.inc("ListHandshakesForAccount")
	return c.svc.ListHandshakesForAccountWithContext(ctx, input, opts...)
}

// ListHandshakesForAccountPages is a passthrough to the underlying ListHandshakesForAccountPages method.
// It will increment the count of requests made to ListHandshakesForAccount on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListHandshakesForAccountPagesWithContext to avoid this.
func (c *Organizations) ListHandshakesForAccountPages(input *organizations.ListHandshakesForAccountInput, fn func(*organizations.ListHandshakesForAccountOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListHandshakesForAccountOutput, lastPage bool) bool {
		c.inc("ListHandshakesForAccount")
		return fn(page, lastPage)
	}
	return c.ListHandshakesForAccountPages(input, wrappedFn)
}

// ListHandshakesForAccountPagesWithContext is a passthrough to the underlying ListHandshakesForAccountPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListHandshakesForAccount when applied to the request.
func (c *Organizations) ListHandshakesForAccountPagesWithContext(ctx aws.Context, input *organizations.ListHandshakesForAccountInput, fn func(*organizations.ListHandshakesForAccountOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListHandshakesForAccount"))
	return c.ListHandshakesForAccountPagesWithContext(ctx, input, fn, opts...)
}

// ListHandshakesForOrganizationRequest is a passthrough to the underlying ListHandshakesForOrganizationRequest.
// It will increment the count of requests made to ListHandshakesForOrganization.
func (c *Organizations) ListHandshakesForOrganizationRequest(input *organizations.ListHandshakesForOrganizationInput) (req *request.Request, output *organizations.ListHandshakesForOrganizationOutput) {
	c.inc("ListHandshakesForOrganization")
	return c.svc.ListHandshakesForOrganizationRequest(input)
}

// ListHandshakesForOrganization is a passthrough to the underlying ListHandshakesForOrganization method.
// It will increment the count of requests made to ListHandshakesForOrganization.
func (c *Organizations) ListHandshakesForOrganization(input *organizations.ListHandshakesForOrganizationInput) (*organizations.ListHandshakesForOrganizationOutput, error) {
	c.inc("ListHandshakesForOrganization")
	return c.svc.ListHandshakesForOrganization(input)
}

// ListHandshakesForOrganizationWithContext is a passthrough to the underlying ListHandshakesForOrganizationWithContext method.
// It will increment the count of requests made to ListHandshakesForOrganization.
func (c *Organizations) ListHandshakesForOrganizationWithContext(ctx aws.Context, input *organizations.ListHandshakesForOrganizationInput, opts ...request.Option) (*organizations.ListHandshakesForOrganizationOutput, error) {
	c.inc("ListHandshakesForOrganization")
	return c.svc.ListHandshakesForOrganizationWithContext(ctx, input, opts...)
}

// ListHandshakesForOrganizationPages is a passthrough to the underlying ListHandshakesForOrganizationPages method.
// It will increment the count of requests made to ListHandshakesForOrganization on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListHandshakesForOrganizationPagesWithContext to avoid this.
func (c *Organizations) ListHandshakesForOrganizationPages(input *organizations.ListHandshakesForOrganizationInput, fn func(*organizations.ListHandshakesForOrganizationOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListHandshakesForOrganizationOutput, lastPage bool) bool {
		c.inc("ListHandshakesForOrganization")
		return fn(page, lastPage)
	}
	return c.ListHandshakesForOrganizationPages(input, wrappedFn)
}

// ListHandshakesForOrganizationPagesWithContext is a passthrough to the underlying ListHandshakesForOrganizationPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListHandshakesForOrganization when applied to the request.
func (c *Organizations) ListHandshakesForOrganizationPagesWithContext(ctx aws.Context, input *organizations.ListHandshakesForOrganizationInput, fn func(*organizations.ListHandshakesForOrganizationOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListHandshakesForOrganization"))
	return c.ListHandshakesForOrganizationPagesWithContext(ctx, input, fn, opts...)
}

// ListOrganizationalUnitsForParentRequest is a passthrough to the underlying ListOrganizationalUnitsForParentRequest.
// It will increment the count of requests made to ListOrganizationalUnitsForParent.
func (c *Organizations) ListOrganizationalUnitsForParentRequest(input *organizations.ListOrganizationalUnitsForParentInput) (req *request.Request, output *organizations.ListOrganizationalUnitsForParentOutput) {
	c.inc("ListOrganizationalUnitsForParent")
	return c.svc.ListOrganizationalUnitsForParentRequest(input)
}

// ListOrganizationalUnitsForParent is a passthrough to the underlying ListOrganizationalUnitsForParent method.
// It will increment the count of requests made to ListOrganizationalUnitsForParent.
func (c *Organizations) ListOrganizationalUnitsForParent(input *organizations.ListOrganizationalUnitsForParentInput) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	c.inc("ListOrganizationalUnitsForParent")
	return c.svc.ListOrganizationalUnitsForParent(input)
}

// ListOrganizationalUnitsForParentWithContext is a passthrough to the underlying ListOrganizationalUnitsForParentWithContext method.
// It will increment the count of requests made to ListOrganizationalUnitsForParent.
func (c *Organizations) ListOrganizationalUnitsForParentWithContext(ctx aws.Context, input *organizations.ListOrganizationalUnitsForParentInput, opts ...request.Option) (*organizations.ListOrganizationalUnitsForParentOutput, error) {
	c.inc("ListOrganizationalUnitsForParent")
	return c.svc.ListOrganizationalUnitsForParentWithContext(ctx, input, opts...)
}

// ListOrganizationalUnitsForParentPages is a passthrough to the underlying ListOrganizationalUnitsForParentPages method.
// It will increment the count of requests made to ListOrganizationalUnitsForParent on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListOrganizationalUnitsForParentPagesWithContext to avoid this.
func (c *Organizations) ListOrganizationalUnitsForParentPages(input *organizations.ListOrganizationalUnitsForParentInput, fn func(*organizations.ListOrganizationalUnitsForParentOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListOrganizationalUnitsForParentOutput, lastPage bool) bool {
		c.inc("ListOrganizationalUnitsForParent")
		return fn(page, lastPage)
	}
	return c.ListOrganizationalUnitsForParentPages(input, wrappedFn)
}

// ListOrganizationalUnitsForParentPagesWithContext is a passthrough to the underlying ListOrganizationalUnitsForParentPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListOrganizationalUnitsForParent when applied to the request.
func (c *Organizations) ListOrganizationalUnitsForParentPagesWithContext(ctx aws.Context, input *organizations.ListOrganizationalUnitsForParentInput, fn func(*organizations.ListOrganizationalUnitsForParentOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListOrganizationalUnitsForParent"))
	return c.ListOrganizationalUnitsForParentPagesWithContext(ctx, input, fn, opts...)
}

// ListParentsRequest is a passthrough to the underlying ListParentsRequest.
// It will increment the count of requests made to ListParents.
func (c *Organizations) ListParentsRequest(input *organizations.ListParentsInput) (req *request.Request, output *organizations.ListParentsOutput) {
	c.inc("ListParents")
	return c.svc.ListParentsRequest(input)
}

// ListParents is a passthrough to the underlying ListParents method.
// It will increment the count of requests made to ListParents.
func (c *Organizations) ListParents(input *organizations.ListParentsInput) (*organizations.ListParentsOutput, error) {
	c.inc("ListParents")
	return c.svc.ListParents(input)
}

// ListParentsWithContext is a passthrough to the underlying ListParentsWithContext method.
// It will increment the count of requests made to ListParents.
func (c *Organizations) ListParentsWithContext(ctx aws.Context, input *organizations.ListParentsInput, opts ...request.Option) (*organizations.ListParentsOutput, error) {
	c.inc("ListParents")
	return c.svc.ListParentsWithContext(ctx, input, opts...)
}

// ListParentsPages is a passthrough to the underlying ListParentsPages method.
// It will increment the count of requests made to ListParents on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListParentsPagesWithContext to avoid this.
func (c *Organizations) ListParentsPages(input *organizations.ListParentsInput, fn func(*organizations.ListParentsOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListParentsOutput, lastPage bool) bool {
		c.inc("ListParents")
		return fn(page, lastPage)
	}
	return c.ListParentsPages(input, wrappedFn)
}

// ListParentsPagesWithContext is a passthrough to the underlying ListParentsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListParents when applied to the request.
func (c *Organizations) ListParentsPagesWithContext(ctx aws.Context, input *organizations.ListParentsInput, fn func(*organizations.ListParentsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListParents"))
	return c.ListParentsPagesWithContext(ctx, input, fn, opts...)
}

// ListPoliciesRequest is a passthrough to the underlying ListPoliciesRequest.
// It will increment the count of requests made to ListPolicies.
func (c *Organizations) ListPoliciesRequest(input *organizations.ListPoliciesInput) (req *request.Request, output *organizations.ListPoliciesOutput) {
	c.inc("ListPolicies")
	return c.svc.ListPoliciesRequest(input)
}

// ListPolicies is a passthrough to the underlying ListPolicies method.
// It will increment the count of requests made to ListPolicies.
func (c *Organizations) ListPolicies(input *organizations.ListPoliciesInput) (*organizations.ListPoliciesOutput, error) {
	c.inc("ListPolicies")
	return c.svc.ListPolicies(input)
}

// ListPoliciesWithContext is a passthrough to the underlying ListPoliciesWithContext method.
// It will increment the count of requests made to ListPolicies.
func (c *Organizations) ListPoliciesWithContext(ctx aws.Context, input *organizations.ListPoliciesInput, opts ...request.Option) (*organizations.ListPoliciesOutput, error) {
	c.inc("ListPolicies")
	return c.svc.ListPoliciesWithContext(ctx, input, opts...)
}

// ListPoliciesPages is a passthrough to the underlying ListPoliciesPages method.
// It will increment the count of requests made to ListPolicies on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListPoliciesPagesWithContext to avoid this.
func (c *Organizations) ListPoliciesPages(input *organizations.ListPoliciesInput, fn func(*organizations.ListPoliciesOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListPoliciesOutput, lastPage bool) bool {
		c.inc("ListPolicies")
		return fn(page, lastPage)
	}
	return c.ListPoliciesPages(input, wrappedFn)
}

// ListPoliciesPagesWithContext is a passthrough to the underlying ListPoliciesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListPolicies when applied to the request.
func (c *Organizations) ListPoliciesPagesWithContext(ctx aws.Context, input *organizations.ListPoliciesInput, fn func(*organizations.ListPoliciesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListPolicies"))
	return c.ListPoliciesPagesWithContext(ctx, input, fn, opts...)
}

// ListPoliciesForTargetRequest is a passthrough to the underlying ListPoliciesForTargetRequest.
// It will increment the count of requests made to ListPoliciesForTarget.
func (c *Organizations) ListPoliciesForTargetRequest(input *organizations.ListPoliciesForTargetInput) (req *request.Request, output *organizations.ListPoliciesForTargetOutput) {
	c.inc("ListPoliciesForTarget")
	return c.svc.ListPoliciesForTargetRequest(input)
}

// ListPoliciesForTarget is a passthrough to the underlying ListPoliciesForTarget method.
// It will increment the count of requests made to ListPoliciesForTarget.
func (c *Organizations) ListPoliciesForTarget(input *organizations.ListPoliciesForTargetInput) (*organizations.ListPoliciesForTargetOutput, error) {
	c.inc("ListPoliciesForTarget")
	return c.svc.ListPoliciesForTarget(input)
}

// ListPoliciesForTargetWithContext is a passthrough to the underlying ListPoliciesForTargetWithContext method.
// It will increment the count of requests made to ListPoliciesForTarget.
func (c *Organizations) ListPoliciesForTargetWithContext(ctx aws.Context, input *organizations.ListPoliciesForTargetInput, opts ...request.Option) (*organizations.ListPoliciesForTargetOutput, error) {
	c.inc("ListPoliciesForTarget")
	return c.svc.ListPoliciesForTargetWithContext(ctx, input, opts...)
}

// ListPoliciesForTargetPages is a passthrough to the underlying ListPoliciesForTargetPages method.
// It will increment the count of requests made to ListPoliciesForTarget on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListPoliciesForTargetPagesWithContext to avoid this.
func (c *Organizations) ListPoliciesForTargetPages(input *organizations.ListPoliciesForTargetInput, fn func(*organizations.ListPoliciesForTargetOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListPoliciesForTargetOutput, lastPage bool) bool {
		c.inc("ListPoliciesForTarget")
		return fn(page, lastPage)
	}
	return c.ListPoliciesForTargetPages(input, wrappedFn)
}

// ListPoliciesForTargetPagesWithContext is a passthrough to the underlying ListPoliciesForTargetPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListPoliciesForTarget when applied to the request.
func (c *Organizations) ListPoliciesForTargetPagesWithContext(ctx aws.Context, input *organizations.ListPoliciesForTargetInput, fn func(*organizations.ListPoliciesForTargetOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListPoliciesForTarget"))
	return c.ListPoliciesForTargetPagesWithContext(ctx, input, fn, opts...)
}

// ListRootsRequest is a passthrough to the underlying ListRootsRequest.
// It will increment the count of requests made to ListRoots.
func (c *Organizations) ListRootsRequest(input *organizations.ListRootsInput) (req *request.Request, output *organizations.ListRootsOutput) {
	c.inc("ListRoots")
	return c.svc.ListRootsRequest(input)
}

// ListRoots is a passthrough to the underlying ListRoots method.
// It will increment the count of requests made to ListRoots.
func (c *Organizations) ListRoots(input *organizations.ListRootsInput) (*organizations.ListRootsOutput, error) {
	c.inc("ListRoots")
	return c.svc.ListRoots(input)
}

// ListRootsWithContext is a passthrough to the underlying ListRootsWithContext method.
// It will increment the count of requests made to ListRoots.
func (c *Organizations) ListRootsWithContext(ctx aws.Context, input *organizations.ListRootsInput, opts ...request.Option) (*organizations.ListRootsOutput, error) {
	c.inc("ListRoots")
	return c.svc.ListRootsWithContext(ctx, input, opts...)
}

// ListRootsPages is a passthrough to the underlying ListRootsPages method.
// It will increment the count of requests made to ListRoots on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListRootsPagesWithContext to avoid this.
func (c *Organizations) ListRootsPages(input *organizations.ListRootsInput, fn func(*organizations.ListRootsOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListRootsOutput, lastPage bool) bool {
		c.inc("ListRoots")
		return fn(page, lastPage)
	}
	return c.ListRootsPages(input, wrappedFn)
}

// ListRootsPagesWithContext is a passthrough to the underlying ListRootsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListRoots when applied to the request.
func (c *Organizations) ListRootsPagesWithContext(ctx aws.Context, input *organizations.ListRootsInput, fn func(*organizations.ListRootsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListRoots"))
	return c.ListRootsPagesWithContext(ctx, input, fn, opts...)
}

// ListTargetsForPolicyRequest is a passthrough to the underlying ListTargetsForPolicyRequest.
// It will increment the count of requests made to ListTargetsForPolicy.
func (c *Organizations) ListTargetsForPolicyRequest(input *organizations.ListTargetsForPolicyInput) (req *request.Request, output *organizations.ListTargetsForPolicyOutput) {
	c.inc("ListTargetsForPolicy")
	return c.svc.ListTargetsForPolicyRequest(input)
}

// ListTargetsForPolicy is a passthrough to the underlying ListTargetsForPolicy method.
// It will increment the count of requests made to ListTargetsForPolicy.
func (c *Organizations) ListTargetsForPolicy(input *organizations.ListTargetsForPolicyInput) (*organizations.ListTargetsForPolicyOutput, error) {
	c.inc("ListTargetsForPolicy")
	return c.svc.ListTargetsForPolicy(input)
}

// ListTargetsForPolicyWithContext is a passthrough to the underlying ListTargetsForPolicyWithContext method.
// It will increment the count of requests made to ListTargetsForPolicy.
func (c *Organizations) ListTargetsForPolicyWithContext(ctx aws.Context, input *organizations.ListTargetsForPolicyInput, opts ...request.Option) (*organizations.ListTargetsForPolicyOutput, error) {
	c.inc("ListTargetsForPolicy")
	return c.svc.ListTargetsForPolicyWithContext(ctx, input, opts...)
}

// ListTargetsForPolicyPages is a passthrough to the underlying ListTargetsForPolicyPages method.
// It will increment the count of requests made to ListTargetsForPolicy on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListTargetsForPolicyPagesWithContext to avoid this.
func (c *Organizations) ListTargetsForPolicyPages(input *organizations.ListTargetsForPolicyInput, fn func(*organizations.ListTargetsForPolicyOutput, bool) bool) error {
	wrappedFn := func(page *organizations.ListTargetsForPolicyOutput, lastPage bool) bool {
		c.inc("ListTargetsForPolicy")
		return fn(page, lastPage)
	}
	return c.ListTargetsForPolicyPages(input, wrappedFn)
}

// ListTargetsForPolicyPagesWithContext is a passthrough to the underlying ListTargetsForPolicyPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListTargetsForPolicy when applied to the request.
func (c *Organizations) ListTargetsForPolicyPagesWithContext(ctx aws.Context, input *organizations.ListTargetsForPolicyInput, fn func(*organizations.ListTargetsForPolicyOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListTargetsForPolicy"))
	return c.ListTargetsForPolicyPagesWithContext(ctx, input, fn, opts...)
}

// MoveAccountRequest is a passthrough to the underlying MoveAccountRequest.
// It will increment the count of requests made to MoveAccount.
func (c *Organizations) MoveAccountRequest(input *organizations.MoveAccountInput) (req *request.Request, output *organizations.MoveAccountOutput) {
	c.inc("MoveAccount")
	return c.svc.MoveAccountRequest(input)
}

// MoveAccount is a passthrough to the underlying MoveAccount method.
// It will increment the count of requests made to MoveAccount.
func (c *Organizations) MoveAccount(input *organizations.MoveAccountInput) (*organizations.MoveAccountOutput, error) {
	c.inc("MoveAccount")
	return c.svc.MoveAccount(input)
}

// MoveAccountWithContext is a passthrough to the underlying MoveAccountWithContext method.
// It will increment the count of requests made to MoveAccount.
func (c *Organizations) MoveAccountWithContext(ctx aws.Context, input *organizations.MoveAccountInput, opts ...request.Option) (*organizations.MoveAccountOutput, error) {
	c.inc("MoveAccount")
	return c.svc.MoveAccountWithContext(ctx, input, opts...)
}

// RemoveAccountFromOrganizationRequest is a passthrough to the underlying RemoveAccountFromOrganizationRequest.
// It will increment the count of requests made to RemoveAccountFromOrganization.
func (c *Organizations) RemoveAccountFromOrganizationRequest(input *organizations.RemoveAccountFromOrganizationInput) (req *request.Request, output *organizations.RemoveAccountFromOrganizationOutput) {
	c.inc("RemoveAccountFromOrganization")
	return c.svc.RemoveAccountFromOrganizationRequest(input)
}

// RemoveAccountFromOrganization is a passthrough to the underlying RemoveAccountFromOrganization method.
// It will increment the count of requests made to RemoveAccountFromOrganization.
func (c *Organizations) RemoveAccountFromOrganization(input *organizations.RemoveAccountFromOrganizationInput) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	c.inc("RemoveAccountFromOrganization")
	return c.svc.RemoveAccountFromOrganization(input)
}

// RemoveAccountFromOrganizationWithContext is a passthrough to the underlying RemoveAccountFromOrganizationWithContext method.
// It will increment the count of requests made to RemoveAccountFromOrganization.
func (c *Organizations) RemoveAccountFromOrganizationWithContext(ctx aws.Context, input *organizations.RemoveAccountFromOrganizationInput, opts ...request.Option) (*organizations.RemoveAccountFromOrganizationOutput, error) {
	c.inc("RemoveAccountFromOrganization")
	return c.svc.RemoveAccountFromOrganizationWithContext(ctx, input, opts...)
}

// UpdateOrganizationalUnitRequest is a passthrough to the underlying UpdateOrganizationalUnitRequest.
// It will increment the count of requests made to UpdateOrganizationalUnit.
func (c *Organizations) UpdateOrganizationalUnitRequest(input *organizations.UpdateOrganizationalUnitInput) (req *request.Request, output *organizations.UpdateOrganizationalUnitOutput) {
	c.inc("UpdateOrganizationalUnit")
	return c.svc.UpdateOrganizationalUnitRequest(input)
}

// UpdateOrganizationalUnit is a passthrough to the underlying UpdateOrganizationalUnit method.
// It will increment the count of requests made to UpdateOrganizationalUnit.
func (c *Organizations) UpdateOrganizationalUnit(input *organizations.UpdateOrganizationalUnitInput) (*organizations.UpdateOrganizationalUnitOutput, error) {
	c.inc("UpdateOrganizationalUnit")
	return c.svc.UpdateOrganizationalUnit(input)
}

// UpdateOrganizationalUnitWithContext is a passthrough to the underlying UpdateOrganizationalUnitWithContext method.
// It will increment the count of requests made to UpdateOrganizationalUnit.
func (c *Organizations) UpdateOrganizationalUnitWithContext(ctx aws.Context, input *organizations.UpdateOrganizationalUnitInput, opts ...request.Option) (*organizations.UpdateOrganizationalUnitOutput, error) {
	c.inc("UpdateOrganizationalUnit")
	return c.svc.UpdateOrganizationalUnitWithContext(ctx, input, opts...)
}

// UpdatePolicyRequest is a passthrough to the underlying UpdatePolicyRequest.
// It will increment the count of requests made to UpdatePolicy.
func (c *Organizations) UpdatePolicyRequest(input *organizations.UpdatePolicyInput) (req *request.Request, output *organizations.UpdatePolicyOutput) {
	c.inc("UpdatePolicy")
	return c.svc.UpdatePolicyRequest(input)
}

// UpdatePolicy is a passthrough to the underlying UpdatePolicy method.
// It will increment the count of requests made to UpdatePolicy.
func (c *Organizations) UpdatePolicy(input *organizations.UpdatePolicyInput) (*organizations.UpdatePolicyOutput, error) {
	c.inc("UpdatePolicy")
	return c.svc.UpdatePolicy(input)
}

// UpdatePolicyWithContext is a passthrough to the underlying UpdatePolicyWithContext method.
// It will increment the count of requests made to UpdatePolicy.
func (c *Organizations) UpdatePolicyWithContext(ctx aws.Context, input *organizations.UpdatePolicyInput, opts ...request.Option) (*organizations.UpdatePolicyOutput, error) {
	c.inc("UpdatePolicy")
	return c.svc.UpdatePolicyWithContext(ctx, input, opts...)
}
