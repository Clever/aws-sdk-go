// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package inspectorcounter

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/inspector"
)

// AddAttributesToFindingsRequest is a passthrough to the underlying AddAttributesToFindingsRequest.
// It will increment the count of requests made to AddAttributesToFindings.
func (c *Inspector) AddAttributesToFindingsRequest(input *inspector.AddAttributesToFindingsInput) (req *request.Request, output *inspector.AddAttributesToFindingsOutput) {
	c.inc("AddAttributesToFindings")
	return c.svc.AddAttributesToFindingsRequest(input)
}

// AddAttributesToFindings is a passthrough to the underlying AddAttributesToFindings method.
// It will increment the count of requests made to AddAttributesToFindings.
func (c *Inspector) AddAttributesToFindings(input *inspector.AddAttributesToFindingsInput) (*inspector.AddAttributesToFindingsOutput, error) {
	c.inc("AddAttributesToFindings")
	return c.svc.AddAttributesToFindings(input)
}

// AddAttributesToFindingsWithContext is a passthrough to the underlying AddAttributesToFindingsWithContext method.
// It will increment the count of requests made to AddAttributesToFindings.
func (c *Inspector) AddAttributesToFindingsWithContext(ctx aws.Context, input *inspector.AddAttributesToFindingsInput, opts ...request.Option) (*inspector.AddAttributesToFindingsOutput, error) {
	c.inc("AddAttributesToFindings")
	return c.svc.AddAttributesToFindingsWithContext(ctx, input, opts...)
}

// CreateAssessmentTargetRequest is a passthrough to the underlying CreateAssessmentTargetRequest.
// It will increment the count of requests made to CreateAssessmentTarget.
func (c *Inspector) CreateAssessmentTargetRequest(input *inspector.CreateAssessmentTargetInput) (req *request.Request, output *inspector.CreateAssessmentTargetOutput) {
	c.inc("CreateAssessmentTarget")
	return c.svc.CreateAssessmentTargetRequest(input)
}

// CreateAssessmentTarget is a passthrough to the underlying CreateAssessmentTarget method.
// It will increment the count of requests made to CreateAssessmentTarget.
func (c *Inspector) CreateAssessmentTarget(input *inspector.CreateAssessmentTargetInput) (*inspector.CreateAssessmentTargetOutput, error) {
	c.inc("CreateAssessmentTarget")
	return c.svc.CreateAssessmentTarget(input)
}

// CreateAssessmentTargetWithContext is a passthrough to the underlying CreateAssessmentTargetWithContext method.
// It will increment the count of requests made to CreateAssessmentTarget.
func (c *Inspector) CreateAssessmentTargetWithContext(ctx aws.Context, input *inspector.CreateAssessmentTargetInput, opts ...request.Option) (*inspector.CreateAssessmentTargetOutput, error) {
	c.inc("CreateAssessmentTarget")
	return c.svc.CreateAssessmentTargetWithContext(ctx, input, opts...)
}

// CreateAssessmentTemplateRequest is a passthrough to the underlying CreateAssessmentTemplateRequest.
// It will increment the count of requests made to CreateAssessmentTemplate.
func (c *Inspector) CreateAssessmentTemplateRequest(input *inspector.CreateAssessmentTemplateInput) (req *request.Request, output *inspector.CreateAssessmentTemplateOutput) {
	c.inc("CreateAssessmentTemplate")
	return c.svc.CreateAssessmentTemplateRequest(input)
}

// CreateAssessmentTemplate is a passthrough to the underlying CreateAssessmentTemplate method.
// It will increment the count of requests made to CreateAssessmentTemplate.
func (c *Inspector) CreateAssessmentTemplate(input *inspector.CreateAssessmentTemplateInput) (*inspector.CreateAssessmentTemplateOutput, error) {
	c.inc("CreateAssessmentTemplate")
	return c.svc.CreateAssessmentTemplate(input)
}

// CreateAssessmentTemplateWithContext is a passthrough to the underlying CreateAssessmentTemplateWithContext method.
// It will increment the count of requests made to CreateAssessmentTemplate.
func (c *Inspector) CreateAssessmentTemplateWithContext(ctx aws.Context, input *inspector.CreateAssessmentTemplateInput, opts ...request.Option) (*inspector.CreateAssessmentTemplateOutput, error) {
	c.inc("CreateAssessmentTemplate")
	return c.svc.CreateAssessmentTemplateWithContext(ctx, input, opts...)
}

// CreateResourceGroupRequest is a passthrough to the underlying CreateResourceGroupRequest.
// It will increment the count of requests made to CreateResourceGroup.
func (c *Inspector) CreateResourceGroupRequest(input *inspector.CreateResourceGroupInput) (req *request.Request, output *inspector.CreateResourceGroupOutput) {
	c.inc("CreateResourceGroup")
	return c.svc.CreateResourceGroupRequest(input)
}

// CreateResourceGroup is a passthrough to the underlying CreateResourceGroup method.
// It will increment the count of requests made to CreateResourceGroup.
func (c *Inspector) CreateResourceGroup(input *inspector.CreateResourceGroupInput) (*inspector.CreateResourceGroupOutput, error) {
	c.inc("CreateResourceGroup")
	return c.svc.CreateResourceGroup(input)
}

// CreateResourceGroupWithContext is a passthrough to the underlying CreateResourceGroupWithContext method.
// It will increment the count of requests made to CreateResourceGroup.
func (c *Inspector) CreateResourceGroupWithContext(ctx aws.Context, input *inspector.CreateResourceGroupInput, opts ...request.Option) (*inspector.CreateResourceGroupOutput, error) {
	c.inc("CreateResourceGroup")
	return c.svc.CreateResourceGroupWithContext(ctx, input, opts...)
}

// DeleteAssessmentRunRequest is a passthrough to the underlying DeleteAssessmentRunRequest.
// It will increment the count of requests made to DeleteAssessmentRun.
func (c *Inspector) DeleteAssessmentRunRequest(input *inspector.DeleteAssessmentRunInput) (req *request.Request, output *inspector.DeleteAssessmentRunOutput) {
	c.inc("DeleteAssessmentRun")
	return c.svc.DeleteAssessmentRunRequest(input)
}

// DeleteAssessmentRun is a passthrough to the underlying DeleteAssessmentRun method.
// It will increment the count of requests made to DeleteAssessmentRun.
func (c *Inspector) DeleteAssessmentRun(input *inspector.DeleteAssessmentRunInput) (*inspector.DeleteAssessmentRunOutput, error) {
	c.inc("DeleteAssessmentRun")
	return c.svc.DeleteAssessmentRun(input)
}

// DeleteAssessmentRunWithContext is a passthrough to the underlying DeleteAssessmentRunWithContext method.
// It will increment the count of requests made to DeleteAssessmentRun.
func (c *Inspector) DeleteAssessmentRunWithContext(ctx aws.Context, input *inspector.DeleteAssessmentRunInput, opts ...request.Option) (*inspector.DeleteAssessmentRunOutput, error) {
	c.inc("DeleteAssessmentRun")
	return c.svc.DeleteAssessmentRunWithContext(ctx, input, opts...)
}

// DeleteAssessmentTargetRequest is a passthrough to the underlying DeleteAssessmentTargetRequest.
// It will increment the count of requests made to DeleteAssessmentTarget.
func (c *Inspector) DeleteAssessmentTargetRequest(input *inspector.DeleteAssessmentTargetInput) (req *request.Request, output *inspector.DeleteAssessmentTargetOutput) {
	c.inc("DeleteAssessmentTarget")
	return c.svc.DeleteAssessmentTargetRequest(input)
}

// DeleteAssessmentTarget is a passthrough to the underlying DeleteAssessmentTarget method.
// It will increment the count of requests made to DeleteAssessmentTarget.
func (c *Inspector) DeleteAssessmentTarget(input *inspector.DeleteAssessmentTargetInput) (*inspector.DeleteAssessmentTargetOutput, error) {
	c.inc("DeleteAssessmentTarget")
	return c.svc.DeleteAssessmentTarget(input)
}

// DeleteAssessmentTargetWithContext is a passthrough to the underlying DeleteAssessmentTargetWithContext method.
// It will increment the count of requests made to DeleteAssessmentTarget.
func (c *Inspector) DeleteAssessmentTargetWithContext(ctx aws.Context, input *inspector.DeleteAssessmentTargetInput, opts ...request.Option) (*inspector.DeleteAssessmentTargetOutput, error) {
	c.inc("DeleteAssessmentTarget")
	return c.svc.DeleteAssessmentTargetWithContext(ctx, input, opts...)
}

// DeleteAssessmentTemplateRequest is a passthrough to the underlying DeleteAssessmentTemplateRequest.
// It will increment the count of requests made to DeleteAssessmentTemplate.
func (c *Inspector) DeleteAssessmentTemplateRequest(input *inspector.DeleteAssessmentTemplateInput) (req *request.Request, output *inspector.DeleteAssessmentTemplateOutput) {
	c.inc("DeleteAssessmentTemplate")
	return c.svc.DeleteAssessmentTemplateRequest(input)
}

// DeleteAssessmentTemplate is a passthrough to the underlying DeleteAssessmentTemplate method.
// It will increment the count of requests made to DeleteAssessmentTemplate.
func (c *Inspector) DeleteAssessmentTemplate(input *inspector.DeleteAssessmentTemplateInput) (*inspector.DeleteAssessmentTemplateOutput, error) {
	c.inc("DeleteAssessmentTemplate")
	return c.svc.DeleteAssessmentTemplate(input)
}

// DeleteAssessmentTemplateWithContext is a passthrough to the underlying DeleteAssessmentTemplateWithContext method.
// It will increment the count of requests made to DeleteAssessmentTemplate.
func (c *Inspector) DeleteAssessmentTemplateWithContext(ctx aws.Context, input *inspector.DeleteAssessmentTemplateInput, opts ...request.Option) (*inspector.DeleteAssessmentTemplateOutput, error) {
	c.inc("DeleteAssessmentTemplate")
	return c.svc.DeleteAssessmentTemplateWithContext(ctx, input, opts...)
}

// DescribeAssessmentRunsRequest is a passthrough to the underlying DescribeAssessmentRunsRequest.
// It will increment the count of requests made to DescribeAssessmentRuns.
func (c *Inspector) DescribeAssessmentRunsRequest(input *inspector.DescribeAssessmentRunsInput) (req *request.Request, output *inspector.DescribeAssessmentRunsOutput) {
	c.inc("DescribeAssessmentRuns")
	return c.svc.DescribeAssessmentRunsRequest(input)
}

// DescribeAssessmentRuns is a passthrough to the underlying DescribeAssessmentRuns method.
// It will increment the count of requests made to DescribeAssessmentRuns.
func (c *Inspector) DescribeAssessmentRuns(input *inspector.DescribeAssessmentRunsInput) (*inspector.DescribeAssessmentRunsOutput, error) {
	c.inc("DescribeAssessmentRuns")
	return c.svc.DescribeAssessmentRuns(input)
}

// DescribeAssessmentRunsWithContext is a passthrough to the underlying DescribeAssessmentRunsWithContext method.
// It will increment the count of requests made to DescribeAssessmentRuns.
func (c *Inspector) DescribeAssessmentRunsWithContext(ctx aws.Context, input *inspector.DescribeAssessmentRunsInput, opts ...request.Option) (*inspector.DescribeAssessmentRunsOutput, error) {
	c.inc("DescribeAssessmentRuns")
	return c.svc.DescribeAssessmentRunsWithContext(ctx, input, opts...)
}

// DescribeAssessmentTargetsRequest is a passthrough to the underlying DescribeAssessmentTargetsRequest.
// It will increment the count of requests made to DescribeAssessmentTargets.
func (c *Inspector) DescribeAssessmentTargetsRequest(input *inspector.DescribeAssessmentTargetsInput) (req *request.Request, output *inspector.DescribeAssessmentTargetsOutput) {
	c.inc("DescribeAssessmentTargets")
	return c.svc.DescribeAssessmentTargetsRequest(input)
}

// DescribeAssessmentTargets is a passthrough to the underlying DescribeAssessmentTargets method.
// It will increment the count of requests made to DescribeAssessmentTargets.
func (c *Inspector) DescribeAssessmentTargets(input *inspector.DescribeAssessmentTargetsInput) (*inspector.DescribeAssessmentTargetsOutput, error) {
	c.inc("DescribeAssessmentTargets")
	return c.svc.DescribeAssessmentTargets(input)
}

// DescribeAssessmentTargetsWithContext is a passthrough to the underlying DescribeAssessmentTargetsWithContext method.
// It will increment the count of requests made to DescribeAssessmentTargets.
func (c *Inspector) DescribeAssessmentTargetsWithContext(ctx aws.Context, input *inspector.DescribeAssessmentTargetsInput, opts ...request.Option) (*inspector.DescribeAssessmentTargetsOutput, error) {
	c.inc("DescribeAssessmentTargets")
	return c.svc.DescribeAssessmentTargetsWithContext(ctx, input, opts...)
}

// DescribeAssessmentTemplatesRequest is a passthrough to the underlying DescribeAssessmentTemplatesRequest.
// It will increment the count of requests made to DescribeAssessmentTemplates.
func (c *Inspector) DescribeAssessmentTemplatesRequest(input *inspector.DescribeAssessmentTemplatesInput) (req *request.Request, output *inspector.DescribeAssessmentTemplatesOutput) {
	c.inc("DescribeAssessmentTemplates")
	return c.svc.DescribeAssessmentTemplatesRequest(input)
}

// DescribeAssessmentTemplates is a passthrough to the underlying DescribeAssessmentTemplates method.
// It will increment the count of requests made to DescribeAssessmentTemplates.
func (c *Inspector) DescribeAssessmentTemplates(input *inspector.DescribeAssessmentTemplatesInput) (*inspector.DescribeAssessmentTemplatesOutput, error) {
	c.inc("DescribeAssessmentTemplates")
	return c.svc.DescribeAssessmentTemplates(input)
}

// DescribeAssessmentTemplatesWithContext is a passthrough to the underlying DescribeAssessmentTemplatesWithContext method.
// It will increment the count of requests made to DescribeAssessmentTemplates.
func (c *Inspector) DescribeAssessmentTemplatesWithContext(ctx aws.Context, input *inspector.DescribeAssessmentTemplatesInput, opts ...request.Option) (*inspector.DescribeAssessmentTemplatesOutput, error) {
	c.inc("DescribeAssessmentTemplates")
	return c.svc.DescribeAssessmentTemplatesWithContext(ctx, input, opts...)
}

// DescribeCrossAccountAccessRoleRequest is a passthrough to the underlying DescribeCrossAccountAccessRoleRequest.
// It will increment the count of requests made to DescribeCrossAccountAccessRole.
func (c *Inspector) DescribeCrossAccountAccessRoleRequest(input *inspector.DescribeCrossAccountAccessRoleInput) (req *request.Request, output *inspector.DescribeCrossAccountAccessRoleOutput) {
	c.inc("DescribeCrossAccountAccessRole")
	return c.svc.DescribeCrossAccountAccessRoleRequest(input)
}

// DescribeCrossAccountAccessRole is a passthrough to the underlying DescribeCrossAccountAccessRole method.
// It will increment the count of requests made to DescribeCrossAccountAccessRole.
func (c *Inspector) DescribeCrossAccountAccessRole(input *inspector.DescribeCrossAccountAccessRoleInput) (*inspector.DescribeCrossAccountAccessRoleOutput, error) {
	c.inc("DescribeCrossAccountAccessRole")
	return c.svc.DescribeCrossAccountAccessRole(input)
}

// DescribeCrossAccountAccessRoleWithContext is a passthrough to the underlying DescribeCrossAccountAccessRoleWithContext method.
// It will increment the count of requests made to DescribeCrossAccountAccessRole.
func (c *Inspector) DescribeCrossAccountAccessRoleWithContext(ctx aws.Context, input *inspector.DescribeCrossAccountAccessRoleInput, opts ...request.Option) (*inspector.DescribeCrossAccountAccessRoleOutput, error) {
	c.inc("DescribeCrossAccountAccessRole")
	return c.svc.DescribeCrossAccountAccessRoleWithContext(ctx, input, opts...)
}

// DescribeFindingsRequest is a passthrough to the underlying DescribeFindingsRequest.
// It will increment the count of requests made to DescribeFindings.
func (c *Inspector) DescribeFindingsRequest(input *inspector.DescribeFindingsInput) (req *request.Request, output *inspector.DescribeFindingsOutput) {
	c.inc("DescribeFindings")
	return c.svc.DescribeFindingsRequest(input)
}

// DescribeFindings is a passthrough to the underlying DescribeFindings method.
// It will increment the count of requests made to DescribeFindings.
func (c *Inspector) DescribeFindings(input *inspector.DescribeFindingsInput) (*inspector.DescribeFindingsOutput, error) {
	c.inc("DescribeFindings")
	return c.svc.DescribeFindings(input)
}

// DescribeFindingsWithContext is a passthrough to the underlying DescribeFindingsWithContext method.
// It will increment the count of requests made to DescribeFindings.
func (c *Inspector) DescribeFindingsWithContext(ctx aws.Context, input *inspector.DescribeFindingsInput, opts ...request.Option) (*inspector.DescribeFindingsOutput, error) {
	c.inc("DescribeFindings")
	return c.svc.DescribeFindingsWithContext(ctx, input, opts...)
}

// DescribeResourceGroupsRequest is a passthrough to the underlying DescribeResourceGroupsRequest.
// It will increment the count of requests made to DescribeResourceGroups.
func (c *Inspector) DescribeResourceGroupsRequest(input *inspector.DescribeResourceGroupsInput) (req *request.Request, output *inspector.DescribeResourceGroupsOutput) {
	c.inc("DescribeResourceGroups")
	return c.svc.DescribeResourceGroupsRequest(input)
}

// DescribeResourceGroups is a passthrough to the underlying DescribeResourceGroups method.
// It will increment the count of requests made to DescribeResourceGroups.
func (c *Inspector) DescribeResourceGroups(input *inspector.DescribeResourceGroupsInput) (*inspector.DescribeResourceGroupsOutput, error) {
	c.inc("DescribeResourceGroups")
	return c.svc.DescribeResourceGroups(input)
}

// DescribeResourceGroupsWithContext is a passthrough to the underlying DescribeResourceGroupsWithContext method.
// It will increment the count of requests made to DescribeResourceGroups.
func (c *Inspector) DescribeResourceGroupsWithContext(ctx aws.Context, input *inspector.DescribeResourceGroupsInput, opts ...request.Option) (*inspector.DescribeResourceGroupsOutput, error) {
	c.inc("DescribeResourceGroups")
	return c.svc.DescribeResourceGroupsWithContext(ctx, input, opts...)
}

// DescribeRulesPackagesRequest is a passthrough to the underlying DescribeRulesPackagesRequest.
// It will increment the count of requests made to DescribeRulesPackages.
func (c *Inspector) DescribeRulesPackagesRequest(input *inspector.DescribeRulesPackagesInput) (req *request.Request, output *inspector.DescribeRulesPackagesOutput) {
	c.inc("DescribeRulesPackages")
	return c.svc.DescribeRulesPackagesRequest(input)
}

// DescribeRulesPackages is a passthrough to the underlying DescribeRulesPackages method.
// It will increment the count of requests made to DescribeRulesPackages.
func (c *Inspector) DescribeRulesPackages(input *inspector.DescribeRulesPackagesInput) (*inspector.DescribeRulesPackagesOutput, error) {
	c.inc("DescribeRulesPackages")
	return c.svc.DescribeRulesPackages(input)
}

// DescribeRulesPackagesWithContext is a passthrough to the underlying DescribeRulesPackagesWithContext method.
// It will increment the count of requests made to DescribeRulesPackages.
func (c *Inspector) DescribeRulesPackagesWithContext(ctx aws.Context, input *inspector.DescribeRulesPackagesInput, opts ...request.Option) (*inspector.DescribeRulesPackagesOutput, error) {
	c.inc("DescribeRulesPackages")
	return c.svc.DescribeRulesPackagesWithContext(ctx, input, opts...)
}

// GetAssessmentReportRequest is a passthrough to the underlying GetAssessmentReportRequest.
// It will increment the count of requests made to GetAssessmentReport.
func (c *Inspector) GetAssessmentReportRequest(input *inspector.GetAssessmentReportInput) (req *request.Request, output *inspector.GetAssessmentReportOutput) {
	c.inc("GetAssessmentReport")
	return c.svc.GetAssessmentReportRequest(input)
}

// GetAssessmentReport is a passthrough to the underlying GetAssessmentReport method.
// It will increment the count of requests made to GetAssessmentReport.
func (c *Inspector) GetAssessmentReport(input *inspector.GetAssessmentReportInput) (*inspector.GetAssessmentReportOutput, error) {
	c.inc("GetAssessmentReport")
	return c.svc.GetAssessmentReport(input)
}

// GetAssessmentReportWithContext is a passthrough to the underlying GetAssessmentReportWithContext method.
// It will increment the count of requests made to GetAssessmentReport.
func (c *Inspector) GetAssessmentReportWithContext(ctx aws.Context, input *inspector.GetAssessmentReportInput, opts ...request.Option) (*inspector.GetAssessmentReportOutput, error) {
	c.inc("GetAssessmentReport")
	return c.svc.GetAssessmentReportWithContext(ctx, input, opts...)
}

// GetTelemetryMetadataRequest is a passthrough to the underlying GetTelemetryMetadataRequest.
// It will increment the count of requests made to GetTelemetryMetadata.
func (c *Inspector) GetTelemetryMetadataRequest(input *inspector.GetTelemetryMetadataInput) (req *request.Request, output *inspector.GetTelemetryMetadataOutput) {
	c.inc("GetTelemetryMetadata")
	return c.svc.GetTelemetryMetadataRequest(input)
}

// GetTelemetryMetadata is a passthrough to the underlying GetTelemetryMetadata method.
// It will increment the count of requests made to GetTelemetryMetadata.
func (c *Inspector) GetTelemetryMetadata(input *inspector.GetTelemetryMetadataInput) (*inspector.GetTelemetryMetadataOutput, error) {
	c.inc("GetTelemetryMetadata")
	return c.svc.GetTelemetryMetadata(input)
}

// GetTelemetryMetadataWithContext is a passthrough to the underlying GetTelemetryMetadataWithContext method.
// It will increment the count of requests made to GetTelemetryMetadata.
func (c *Inspector) GetTelemetryMetadataWithContext(ctx aws.Context, input *inspector.GetTelemetryMetadataInput, opts ...request.Option) (*inspector.GetTelemetryMetadataOutput, error) {
	c.inc("GetTelemetryMetadata")
	return c.svc.GetTelemetryMetadataWithContext(ctx, input, opts...)
}

// ListAssessmentRunAgentsRequest is a passthrough to the underlying ListAssessmentRunAgentsRequest.
// It will increment the count of requests made to ListAssessmentRunAgents.
func (c *Inspector) ListAssessmentRunAgentsRequest(input *inspector.ListAssessmentRunAgentsInput) (req *request.Request, output *inspector.ListAssessmentRunAgentsOutput) {
	c.inc("ListAssessmentRunAgents")
	return c.svc.ListAssessmentRunAgentsRequest(input)
}

// ListAssessmentRunAgents is a passthrough to the underlying ListAssessmentRunAgents method.
// It will increment the count of requests made to ListAssessmentRunAgents.
func (c *Inspector) ListAssessmentRunAgents(input *inspector.ListAssessmentRunAgentsInput) (*inspector.ListAssessmentRunAgentsOutput, error) {
	c.inc("ListAssessmentRunAgents")
	return c.svc.ListAssessmentRunAgents(input)
}

// ListAssessmentRunAgentsWithContext is a passthrough to the underlying ListAssessmentRunAgentsWithContext method.
// It will increment the count of requests made to ListAssessmentRunAgents.
func (c *Inspector) ListAssessmentRunAgentsWithContext(ctx aws.Context, input *inspector.ListAssessmentRunAgentsInput, opts ...request.Option) (*inspector.ListAssessmentRunAgentsOutput, error) {
	c.inc("ListAssessmentRunAgents")
	return c.svc.ListAssessmentRunAgentsWithContext(ctx, input, opts...)
}

// ListAssessmentRunAgentsPages is a passthrough to the underlying ListAssessmentRunAgentsPages method.
// It will increment the count of requests made to ListAssessmentRunAgents on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAssessmentRunAgentsPagesWithContext to avoid this.
func (c *Inspector) ListAssessmentRunAgentsPages(input *inspector.ListAssessmentRunAgentsInput, fn func(*inspector.ListAssessmentRunAgentsOutput, bool) bool) error {
	wrappedFn := func(page *inspector.ListAssessmentRunAgentsOutput, lastPage bool) bool {
		c.inc("ListAssessmentRunAgents")
		return fn(page, lastPage)
	}
	return c.ListAssessmentRunAgentsPages(input, wrappedFn)
}

// ListAssessmentRunAgentsPagesWithContext is a passthrough to the underlying ListAssessmentRunAgentsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAssessmentRunAgents when applied to the request.
func (c *Inspector) ListAssessmentRunAgentsPagesWithContext(ctx aws.Context, input *inspector.ListAssessmentRunAgentsInput, fn func(*inspector.ListAssessmentRunAgentsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAssessmentRunAgents"))
	return c.ListAssessmentRunAgentsPagesWithContext(ctx, input, fn, opts...)
}

// ListAssessmentRunsRequest is a passthrough to the underlying ListAssessmentRunsRequest.
// It will increment the count of requests made to ListAssessmentRuns.
func (c *Inspector) ListAssessmentRunsRequest(input *inspector.ListAssessmentRunsInput) (req *request.Request, output *inspector.ListAssessmentRunsOutput) {
	c.inc("ListAssessmentRuns")
	return c.svc.ListAssessmentRunsRequest(input)
}

// ListAssessmentRuns is a passthrough to the underlying ListAssessmentRuns method.
// It will increment the count of requests made to ListAssessmentRuns.
func (c *Inspector) ListAssessmentRuns(input *inspector.ListAssessmentRunsInput) (*inspector.ListAssessmentRunsOutput, error) {
	c.inc("ListAssessmentRuns")
	return c.svc.ListAssessmentRuns(input)
}

// ListAssessmentRunsWithContext is a passthrough to the underlying ListAssessmentRunsWithContext method.
// It will increment the count of requests made to ListAssessmentRuns.
func (c *Inspector) ListAssessmentRunsWithContext(ctx aws.Context, input *inspector.ListAssessmentRunsInput, opts ...request.Option) (*inspector.ListAssessmentRunsOutput, error) {
	c.inc("ListAssessmentRuns")
	return c.svc.ListAssessmentRunsWithContext(ctx, input, opts...)
}

// ListAssessmentRunsPages is a passthrough to the underlying ListAssessmentRunsPages method.
// It will increment the count of requests made to ListAssessmentRuns on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAssessmentRunsPagesWithContext to avoid this.
func (c *Inspector) ListAssessmentRunsPages(input *inspector.ListAssessmentRunsInput, fn func(*inspector.ListAssessmentRunsOutput, bool) bool) error {
	wrappedFn := func(page *inspector.ListAssessmentRunsOutput, lastPage bool) bool {
		c.inc("ListAssessmentRuns")
		return fn(page, lastPage)
	}
	return c.ListAssessmentRunsPages(input, wrappedFn)
}

// ListAssessmentRunsPagesWithContext is a passthrough to the underlying ListAssessmentRunsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAssessmentRuns when applied to the request.
func (c *Inspector) ListAssessmentRunsPagesWithContext(ctx aws.Context, input *inspector.ListAssessmentRunsInput, fn func(*inspector.ListAssessmentRunsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAssessmentRuns"))
	return c.ListAssessmentRunsPagesWithContext(ctx, input, fn, opts...)
}

// ListAssessmentTargetsRequest is a passthrough to the underlying ListAssessmentTargetsRequest.
// It will increment the count of requests made to ListAssessmentTargets.
func (c *Inspector) ListAssessmentTargetsRequest(input *inspector.ListAssessmentTargetsInput) (req *request.Request, output *inspector.ListAssessmentTargetsOutput) {
	c.inc("ListAssessmentTargets")
	return c.svc.ListAssessmentTargetsRequest(input)
}

// ListAssessmentTargets is a passthrough to the underlying ListAssessmentTargets method.
// It will increment the count of requests made to ListAssessmentTargets.
func (c *Inspector) ListAssessmentTargets(input *inspector.ListAssessmentTargetsInput) (*inspector.ListAssessmentTargetsOutput, error) {
	c.inc("ListAssessmentTargets")
	return c.svc.ListAssessmentTargets(input)
}

// ListAssessmentTargetsWithContext is a passthrough to the underlying ListAssessmentTargetsWithContext method.
// It will increment the count of requests made to ListAssessmentTargets.
func (c *Inspector) ListAssessmentTargetsWithContext(ctx aws.Context, input *inspector.ListAssessmentTargetsInput, opts ...request.Option) (*inspector.ListAssessmentTargetsOutput, error) {
	c.inc("ListAssessmentTargets")
	return c.svc.ListAssessmentTargetsWithContext(ctx, input, opts...)
}

// ListAssessmentTargetsPages is a passthrough to the underlying ListAssessmentTargetsPages method.
// It will increment the count of requests made to ListAssessmentTargets on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAssessmentTargetsPagesWithContext to avoid this.
func (c *Inspector) ListAssessmentTargetsPages(input *inspector.ListAssessmentTargetsInput, fn func(*inspector.ListAssessmentTargetsOutput, bool) bool) error {
	wrappedFn := func(page *inspector.ListAssessmentTargetsOutput, lastPage bool) bool {
		c.inc("ListAssessmentTargets")
		return fn(page, lastPage)
	}
	return c.ListAssessmentTargetsPages(input, wrappedFn)
}

// ListAssessmentTargetsPagesWithContext is a passthrough to the underlying ListAssessmentTargetsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAssessmentTargets when applied to the request.
func (c *Inspector) ListAssessmentTargetsPagesWithContext(ctx aws.Context, input *inspector.ListAssessmentTargetsInput, fn func(*inspector.ListAssessmentTargetsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAssessmentTargets"))
	return c.ListAssessmentTargetsPagesWithContext(ctx, input, fn, opts...)
}

// ListAssessmentTemplatesRequest is a passthrough to the underlying ListAssessmentTemplatesRequest.
// It will increment the count of requests made to ListAssessmentTemplates.
func (c *Inspector) ListAssessmentTemplatesRequest(input *inspector.ListAssessmentTemplatesInput) (req *request.Request, output *inspector.ListAssessmentTemplatesOutput) {
	c.inc("ListAssessmentTemplates")
	return c.svc.ListAssessmentTemplatesRequest(input)
}

// ListAssessmentTemplates is a passthrough to the underlying ListAssessmentTemplates method.
// It will increment the count of requests made to ListAssessmentTemplates.
func (c *Inspector) ListAssessmentTemplates(input *inspector.ListAssessmentTemplatesInput) (*inspector.ListAssessmentTemplatesOutput, error) {
	c.inc("ListAssessmentTemplates")
	return c.svc.ListAssessmentTemplates(input)
}

// ListAssessmentTemplatesWithContext is a passthrough to the underlying ListAssessmentTemplatesWithContext method.
// It will increment the count of requests made to ListAssessmentTemplates.
func (c *Inspector) ListAssessmentTemplatesWithContext(ctx aws.Context, input *inspector.ListAssessmentTemplatesInput, opts ...request.Option) (*inspector.ListAssessmentTemplatesOutput, error) {
	c.inc("ListAssessmentTemplates")
	return c.svc.ListAssessmentTemplatesWithContext(ctx, input, opts...)
}

// ListAssessmentTemplatesPages is a passthrough to the underlying ListAssessmentTemplatesPages method.
// It will increment the count of requests made to ListAssessmentTemplates on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListAssessmentTemplatesPagesWithContext to avoid this.
func (c *Inspector) ListAssessmentTemplatesPages(input *inspector.ListAssessmentTemplatesInput, fn func(*inspector.ListAssessmentTemplatesOutput, bool) bool) error {
	wrappedFn := func(page *inspector.ListAssessmentTemplatesOutput, lastPage bool) bool {
		c.inc("ListAssessmentTemplates")
		return fn(page, lastPage)
	}
	return c.ListAssessmentTemplatesPages(input, wrappedFn)
}

// ListAssessmentTemplatesPagesWithContext is a passthrough to the underlying ListAssessmentTemplatesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListAssessmentTemplates when applied to the request.
func (c *Inspector) ListAssessmentTemplatesPagesWithContext(ctx aws.Context, input *inspector.ListAssessmentTemplatesInput, fn func(*inspector.ListAssessmentTemplatesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListAssessmentTemplates"))
	return c.ListAssessmentTemplatesPagesWithContext(ctx, input, fn, opts...)
}

// ListEventSubscriptionsRequest is a passthrough to the underlying ListEventSubscriptionsRequest.
// It will increment the count of requests made to ListEventSubscriptions.
func (c *Inspector) ListEventSubscriptionsRequest(input *inspector.ListEventSubscriptionsInput) (req *request.Request, output *inspector.ListEventSubscriptionsOutput) {
	c.inc("ListEventSubscriptions")
	return c.svc.ListEventSubscriptionsRequest(input)
}

// ListEventSubscriptions is a passthrough to the underlying ListEventSubscriptions method.
// It will increment the count of requests made to ListEventSubscriptions.
func (c *Inspector) ListEventSubscriptions(input *inspector.ListEventSubscriptionsInput) (*inspector.ListEventSubscriptionsOutput, error) {
	c.inc("ListEventSubscriptions")
	return c.svc.ListEventSubscriptions(input)
}

// ListEventSubscriptionsWithContext is a passthrough to the underlying ListEventSubscriptionsWithContext method.
// It will increment the count of requests made to ListEventSubscriptions.
func (c *Inspector) ListEventSubscriptionsWithContext(ctx aws.Context, input *inspector.ListEventSubscriptionsInput, opts ...request.Option) (*inspector.ListEventSubscriptionsOutput, error) {
	c.inc("ListEventSubscriptions")
	return c.svc.ListEventSubscriptionsWithContext(ctx, input, opts...)
}

// ListEventSubscriptionsPages is a passthrough to the underlying ListEventSubscriptionsPages method.
// It will increment the count of requests made to ListEventSubscriptions on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListEventSubscriptionsPagesWithContext to avoid this.
func (c *Inspector) ListEventSubscriptionsPages(input *inspector.ListEventSubscriptionsInput, fn func(*inspector.ListEventSubscriptionsOutput, bool) bool) error {
	wrappedFn := func(page *inspector.ListEventSubscriptionsOutput, lastPage bool) bool {
		c.inc("ListEventSubscriptions")
		return fn(page, lastPage)
	}
	return c.ListEventSubscriptionsPages(input, wrappedFn)
}

// ListEventSubscriptionsPagesWithContext is a passthrough to the underlying ListEventSubscriptionsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListEventSubscriptions when applied to the request.
func (c *Inspector) ListEventSubscriptionsPagesWithContext(ctx aws.Context, input *inspector.ListEventSubscriptionsInput, fn func(*inspector.ListEventSubscriptionsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListEventSubscriptions"))
	return c.ListEventSubscriptionsPagesWithContext(ctx, input, fn, opts...)
}

// ListFindingsRequest is a passthrough to the underlying ListFindingsRequest.
// It will increment the count of requests made to ListFindings.
func (c *Inspector) ListFindingsRequest(input *inspector.ListFindingsInput) (req *request.Request, output *inspector.ListFindingsOutput) {
	c.inc("ListFindings")
	return c.svc.ListFindingsRequest(input)
}

// ListFindings is a passthrough to the underlying ListFindings method.
// It will increment the count of requests made to ListFindings.
func (c *Inspector) ListFindings(input *inspector.ListFindingsInput) (*inspector.ListFindingsOutput, error) {
	c.inc("ListFindings")
	return c.svc.ListFindings(input)
}

// ListFindingsWithContext is a passthrough to the underlying ListFindingsWithContext method.
// It will increment the count of requests made to ListFindings.
func (c *Inspector) ListFindingsWithContext(ctx aws.Context, input *inspector.ListFindingsInput, opts ...request.Option) (*inspector.ListFindingsOutput, error) {
	c.inc("ListFindings")
	return c.svc.ListFindingsWithContext(ctx, input, opts...)
}

// ListFindingsPages is a passthrough to the underlying ListFindingsPages method.
// It will increment the count of requests made to ListFindings on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListFindingsPagesWithContext to avoid this.
func (c *Inspector) ListFindingsPages(input *inspector.ListFindingsInput, fn func(*inspector.ListFindingsOutput, bool) bool) error {
	wrappedFn := func(page *inspector.ListFindingsOutput, lastPage bool) bool {
		c.inc("ListFindings")
		return fn(page, lastPage)
	}
	return c.ListFindingsPages(input, wrappedFn)
}

// ListFindingsPagesWithContext is a passthrough to the underlying ListFindingsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListFindings when applied to the request.
func (c *Inspector) ListFindingsPagesWithContext(ctx aws.Context, input *inspector.ListFindingsInput, fn func(*inspector.ListFindingsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListFindings"))
	return c.ListFindingsPagesWithContext(ctx, input, fn, opts...)
}

// ListRulesPackagesRequest is a passthrough to the underlying ListRulesPackagesRequest.
// It will increment the count of requests made to ListRulesPackages.
func (c *Inspector) ListRulesPackagesRequest(input *inspector.ListRulesPackagesInput) (req *request.Request, output *inspector.ListRulesPackagesOutput) {
	c.inc("ListRulesPackages")
	return c.svc.ListRulesPackagesRequest(input)
}

// ListRulesPackages is a passthrough to the underlying ListRulesPackages method.
// It will increment the count of requests made to ListRulesPackages.
func (c *Inspector) ListRulesPackages(input *inspector.ListRulesPackagesInput) (*inspector.ListRulesPackagesOutput, error) {
	c.inc("ListRulesPackages")
	return c.svc.ListRulesPackages(input)
}

// ListRulesPackagesWithContext is a passthrough to the underlying ListRulesPackagesWithContext method.
// It will increment the count of requests made to ListRulesPackages.
func (c *Inspector) ListRulesPackagesWithContext(ctx aws.Context, input *inspector.ListRulesPackagesInput, opts ...request.Option) (*inspector.ListRulesPackagesOutput, error) {
	c.inc("ListRulesPackages")
	return c.svc.ListRulesPackagesWithContext(ctx, input, opts...)
}

// ListRulesPackagesPages is a passthrough to the underlying ListRulesPackagesPages method.
// It will increment the count of requests made to ListRulesPackages on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use ListRulesPackagesPagesWithContext to avoid this.
func (c *Inspector) ListRulesPackagesPages(input *inspector.ListRulesPackagesInput, fn func(*inspector.ListRulesPackagesOutput, bool) bool) error {
	wrappedFn := func(page *inspector.ListRulesPackagesOutput, lastPage bool) bool {
		c.inc("ListRulesPackages")
		return fn(page, lastPage)
	}
	return c.ListRulesPackagesPages(input, wrappedFn)
}

// ListRulesPackagesPagesWithContext is a passthrough to the underlying ListRulesPackagesPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to ListRulesPackages when applied to the request.
func (c *Inspector) ListRulesPackagesPagesWithContext(ctx aws.Context, input *inspector.ListRulesPackagesInput, fn func(*inspector.ListRulesPackagesOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("ListRulesPackages"))
	return c.ListRulesPackagesPagesWithContext(ctx, input, fn, opts...)
}

// ListTagsForResourceRequest is a passthrough to the underlying ListTagsForResourceRequest.
// It will increment the count of requests made to ListTagsForResource.
func (c *Inspector) ListTagsForResourceRequest(input *inspector.ListTagsForResourceInput) (req *request.Request, output *inspector.ListTagsForResourceOutput) {
	c.inc("ListTagsForResource")
	return c.svc.ListTagsForResourceRequest(input)
}

// ListTagsForResource is a passthrough to the underlying ListTagsForResource method.
// It will increment the count of requests made to ListTagsForResource.
func (c *Inspector) ListTagsForResource(input *inspector.ListTagsForResourceInput) (*inspector.ListTagsForResourceOutput, error) {
	c.inc("ListTagsForResource")
	return c.svc.ListTagsForResource(input)
}

// ListTagsForResourceWithContext is a passthrough to the underlying ListTagsForResourceWithContext method.
// It will increment the count of requests made to ListTagsForResource.
func (c *Inspector) ListTagsForResourceWithContext(ctx aws.Context, input *inspector.ListTagsForResourceInput, opts ...request.Option) (*inspector.ListTagsForResourceOutput, error) {
	c.inc("ListTagsForResource")
	return c.svc.ListTagsForResourceWithContext(ctx, input, opts...)
}

// PreviewAgentsRequest is a passthrough to the underlying PreviewAgentsRequest.
// It will increment the count of requests made to PreviewAgents.
func (c *Inspector) PreviewAgentsRequest(input *inspector.PreviewAgentsInput) (req *request.Request, output *inspector.PreviewAgentsOutput) {
	c.inc("PreviewAgents")
	return c.svc.PreviewAgentsRequest(input)
}

// PreviewAgents is a passthrough to the underlying PreviewAgents method.
// It will increment the count of requests made to PreviewAgents.
func (c *Inspector) PreviewAgents(input *inspector.PreviewAgentsInput) (*inspector.PreviewAgentsOutput, error) {
	c.inc("PreviewAgents")
	return c.svc.PreviewAgents(input)
}

// PreviewAgentsWithContext is a passthrough to the underlying PreviewAgentsWithContext method.
// It will increment the count of requests made to PreviewAgents.
func (c *Inspector) PreviewAgentsWithContext(ctx aws.Context, input *inspector.PreviewAgentsInput, opts ...request.Option) (*inspector.PreviewAgentsOutput, error) {
	c.inc("PreviewAgents")
	return c.svc.PreviewAgentsWithContext(ctx, input, opts...)
}

// PreviewAgentsPages is a passthrough to the underlying PreviewAgentsPages method.
// It will increment the count of requests made to PreviewAgents on each page.
// NOTE: this is slightly inaccurate in the case of errors, since the function will not be called.
// Use PreviewAgentsPagesWithContext to avoid this.
func (c *Inspector) PreviewAgentsPages(input *inspector.PreviewAgentsInput, fn func(*inspector.PreviewAgentsOutput, bool) bool) error {
	wrappedFn := func(page *inspector.PreviewAgentsOutput, lastPage bool) bool {
		c.inc("PreviewAgents")
		return fn(page, lastPage)
	}
	return c.PreviewAgentsPages(input, wrappedFn)
}

// PreviewAgentsPagesWithContext is a passthrough to the underlying PreviewAgentsPagesWithContext method.
// It will add a request.Option that will increment the count of requests made to PreviewAgents when applied to the request.
func (c *Inspector) PreviewAgentsPagesWithContext(ctx aws.Context, input *inspector.PreviewAgentsInput, fn func(*inspector.PreviewAgentsOutput, bool) bool, opts ...request.Option) error {
	opts = append(opts, c.incViaRequestOption("PreviewAgents"))
	return c.PreviewAgentsPagesWithContext(ctx, input, fn, opts...)
}

// RegisterCrossAccountAccessRoleRequest is a passthrough to the underlying RegisterCrossAccountAccessRoleRequest.
// It will increment the count of requests made to RegisterCrossAccountAccessRole.
func (c *Inspector) RegisterCrossAccountAccessRoleRequest(input *inspector.RegisterCrossAccountAccessRoleInput) (req *request.Request, output *inspector.RegisterCrossAccountAccessRoleOutput) {
	c.inc("RegisterCrossAccountAccessRole")
	return c.svc.RegisterCrossAccountAccessRoleRequest(input)
}

// RegisterCrossAccountAccessRole is a passthrough to the underlying RegisterCrossAccountAccessRole method.
// It will increment the count of requests made to RegisterCrossAccountAccessRole.
func (c *Inspector) RegisterCrossAccountAccessRole(input *inspector.RegisterCrossAccountAccessRoleInput) (*inspector.RegisterCrossAccountAccessRoleOutput, error) {
	c.inc("RegisterCrossAccountAccessRole")
	return c.svc.RegisterCrossAccountAccessRole(input)
}

// RegisterCrossAccountAccessRoleWithContext is a passthrough to the underlying RegisterCrossAccountAccessRoleWithContext method.
// It will increment the count of requests made to RegisterCrossAccountAccessRole.
func (c *Inspector) RegisterCrossAccountAccessRoleWithContext(ctx aws.Context, input *inspector.RegisterCrossAccountAccessRoleInput, opts ...request.Option) (*inspector.RegisterCrossAccountAccessRoleOutput, error) {
	c.inc("RegisterCrossAccountAccessRole")
	return c.svc.RegisterCrossAccountAccessRoleWithContext(ctx, input, opts...)
}

// RemoveAttributesFromFindingsRequest is a passthrough to the underlying RemoveAttributesFromFindingsRequest.
// It will increment the count of requests made to RemoveAttributesFromFindings.
func (c *Inspector) RemoveAttributesFromFindingsRequest(input *inspector.RemoveAttributesFromFindingsInput) (req *request.Request, output *inspector.RemoveAttributesFromFindingsOutput) {
	c.inc("RemoveAttributesFromFindings")
	return c.svc.RemoveAttributesFromFindingsRequest(input)
}

// RemoveAttributesFromFindings is a passthrough to the underlying RemoveAttributesFromFindings method.
// It will increment the count of requests made to RemoveAttributesFromFindings.
func (c *Inspector) RemoveAttributesFromFindings(input *inspector.RemoveAttributesFromFindingsInput) (*inspector.RemoveAttributesFromFindingsOutput, error) {
	c.inc("RemoveAttributesFromFindings")
	return c.svc.RemoveAttributesFromFindings(input)
}

// RemoveAttributesFromFindingsWithContext is a passthrough to the underlying RemoveAttributesFromFindingsWithContext method.
// It will increment the count of requests made to RemoveAttributesFromFindings.
func (c *Inspector) RemoveAttributesFromFindingsWithContext(ctx aws.Context, input *inspector.RemoveAttributesFromFindingsInput, opts ...request.Option) (*inspector.RemoveAttributesFromFindingsOutput, error) {
	c.inc("RemoveAttributesFromFindings")
	return c.svc.RemoveAttributesFromFindingsWithContext(ctx, input, opts...)
}

// SetTagsForResourceRequest is a passthrough to the underlying SetTagsForResourceRequest.
// It will increment the count of requests made to SetTagsForResource.
func (c *Inspector) SetTagsForResourceRequest(input *inspector.SetTagsForResourceInput) (req *request.Request, output *inspector.SetTagsForResourceOutput) {
	c.inc("SetTagsForResource")
	return c.svc.SetTagsForResourceRequest(input)
}

// SetTagsForResource is a passthrough to the underlying SetTagsForResource method.
// It will increment the count of requests made to SetTagsForResource.
func (c *Inspector) SetTagsForResource(input *inspector.SetTagsForResourceInput) (*inspector.SetTagsForResourceOutput, error) {
	c.inc("SetTagsForResource")
	return c.svc.SetTagsForResource(input)
}

// SetTagsForResourceWithContext is a passthrough to the underlying SetTagsForResourceWithContext method.
// It will increment the count of requests made to SetTagsForResource.
func (c *Inspector) SetTagsForResourceWithContext(ctx aws.Context, input *inspector.SetTagsForResourceInput, opts ...request.Option) (*inspector.SetTagsForResourceOutput, error) {
	c.inc("SetTagsForResource")
	return c.svc.SetTagsForResourceWithContext(ctx, input, opts...)
}

// StartAssessmentRunRequest is a passthrough to the underlying StartAssessmentRunRequest.
// It will increment the count of requests made to StartAssessmentRun.
func (c *Inspector) StartAssessmentRunRequest(input *inspector.StartAssessmentRunInput) (req *request.Request, output *inspector.StartAssessmentRunOutput) {
	c.inc("StartAssessmentRun")
	return c.svc.StartAssessmentRunRequest(input)
}

// StartAssessmentRun is a passthrough to the underlying StartAssessmentRun method.
// It will increment the count of requests made to StartAssessmentRun.
func (c *Inspector) StartAssessmentRun(input *inspector.StartAssessmentRunInput) (*inspector.StartAssessmentRunOutput, error) {
	c.inc("StartAssessmentRun")
	return c.svc.StartAssessmentRun(input)
}

// StartAssessmentRunWithContext is a passthrough to the underlying StartAssessmentRunWithContext method.
// It will increment the count of requests made to StartAssessmentRun.
func (c *Inspector) StartAssessmentRunWithContext(ctx aws.Context, input *inspector.StartAssessmentRunInput, opts ...request.Option) (*inspector.StartAssessmentRunOutput, error) {
	c.inc("StartAssessmentRun")
	return c.svc.StartAssessmentRunWithContext(ctx, input, opts...)
}

// StopAssessmentRunRequest is a passthrough to the underlying StopAssessmentRunRequest.
// It will increment the count of requests made to StopAssessmentRun.
func (c *Inspector) StopAssessmentRunRequest(input *inspector.StopAssessmentRunInput) (req *request.Request, output *inspector.StopAssessmentRunOutput) {
	c.inc("StopAssessmentRun")
	return c.svc.StopAssessmentRunRequest(input)
}

// StopAssessmentRun is a passthrough to the underlying StopAssessmentRun method.
// It will increment the count of requests made to StopAssessmentRun.
func (c *Inspector) StopAssessmentRun(input *inspector.StopAssessmentRunInput) (*inspector.StopAssessmentRunOutput, error) {
	c.inc("StopAssessmentRun")
	return c.svc.StopAssessmentRun(input)
}

// StopAssessmentRunWithContext is a passthrough to the underlying StopAssessmentRunWithContext method.
// It will increment the count of requests made to StopAssessmentRun.
func (c *Inspector) StopAssessmentRunWithContext(ctx aws.Context, input *inspector.StopAssessmentRunInput, opts ...request.Option) (*inspector.StopAssessmentRunOutput, error) {
	c.inc("StopAssessmentRun")
	return c.svc.StopAssessmentRunWithContext(ctx, input, opts...)
}

// SubscribeToEventRequest is a passthrough to the underlying SubscribeToEventRequest.
// It will increment the count of requests made to SubscribeToEvent.
func (c *Inspector) SubscribeToEventRequest(input *inspector.SubscribeToEventInput) (req *request.Request, output *inspector.SubscribeToEventOutput) {
	c.inc("SubscribeToEvent")
	return c.svc.SubscribeToEventRequest(input)
}

// SubscribeToEvent is a passthrough to the underlying SubscribeToEvent method.
// It will increment the count of requests made to SubscribeToEvent.
func (c *Inspector) SubscribeToEvent(input *inspector.SubscribeToEventInput) (*inspector.SubscribeToEventOutput, error) {
	c.inc("SubscribeToEvent")
	return c.svc.SubscribeToEvent(input)
}

// SubscribeToEventWithContext is a passthrough to the underlying SubscribeToEventWithContext method.
// It will increment the count of requests made to SubscribeToEvent.
func (c *Inspector) SubscribeToEventWithContext(ctx aws.Context, input *inspector.SubscribeToEventInput, opts ...request.Option) (*inspector.SubscribeToEventOutput, error) {
	c.inc("SubscribeToEvent")
	return c.svc.SubscribeToEventWithContext(ctx, input, opts...)
}

// UnsubscribeFromEventRequest is a passthrough to the underlying UnsubscribeFromEventRequest.
// It will increment the count of requests made to UnsubscribeFromEvent.
func (c *Inspector) UnsubscribeFromEventRequest(input *inspector.UnsubscribeFromEventInput) (req *request.Request, output *inspector.UnsubscribeFromEventOutput) {
	c.inc("UnsubscribeFromEvent")
	return c.svc.UnsubscribeFromEventRequest(input)
}

// UnsubscribeFromEvent is a passthrough to the underlying UnsubscribeFromEvent method.
// It will increment the count of requests made to UnsubscribeFromEvent.
func (c *Inspector) UnsubscribeFromEvent(input *inspector.UnsubscribeFromEventInput) (*inspector.UnsubscribeFromEventOutput, error) {
	c.inc("UnsubscribeFromEvent")
	return c.svc.UnsubscribeFromEvent(input)
}

// UnsubscribeFromEventWithContext is a passthrough to the underlying UnsubscribeFromEventWithContext method.
// It will increment the count of requests made to UnsubscribeFromEvent.
func (c *Inspector) UnsubscribeFromEventWithContext(ctx aws.Context, input *inspector.UnsubscribeFromEventInput, opts ...request.Option) (*inspector.UnsubscribeFromEventOutput, error) {
	c.inc("UnsubscribeFromEvent")
	return c.svc.UnsubscribeFromEventWithContext(ctx, input, opts...)
}

// UpdateAssessmentTargetRequest is a passthrough to the underlying UpdateAssessmentTargetRequest.
// It will increment the count of requests made to UpdateAssessmentTarget.
func (c *Inspector) UpdateAssessmentTargetRequest(input *inspector.UpdateAssessmentTargetInput) (req *request.Request, output *inspector.UpdateAssessmentTargetOutput) {
	c.inc("UpdateAssessmentTarget")
	return c.svc.UpdateAssessmentTargetRequest(input)
}

// UpdateAssessmentTarget is a passthrough to the underlying UpdateAssessmentTarget method.
// It will increment the count of requests made to UpdateAssessmentTarget.
func (c *Inspector) UpdateAssessmentTarget(input *inspector.UpdateAssessmentTargetInput) (*inspector.UpdateAssessmentTargetOutput, error) {
	c.inc("UpdateAssessmentTarget")
	return c.svc.UpdateAssessmentTarget(input)
}

// UpdateAssessmentTargetWithContext is a passthrough to the underlying UpdateAssessmentTargetWithContext method.
// It will increment the count of requests made to UpdateAssessmentTarget.
func (c *Inspector) UpdateAssessmentTargetWithContext(ctx aws.Context, input *inspector.UpdateAssessmentTargetInput, opts ...request.Option) (*inspector.UpdateAssessmentTargetOutput, error) {
	c.inc("UpdateAssessmentTarget")
	return c.svc.UpdateAssessmentTargetWithContext(ctx, input, opts...)
}
